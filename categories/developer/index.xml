<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Developer on 江二十三的思考</title><link>https://forcemz.net/categories/developer/</link><description>Recent content in Developer on 江二十三的思考</description><generator>Hugo</generator><language>zh-CN</language><copyright>Copyright (c) 2009-2024 J23</copyright><lastBuildDate>Fri, 01 Sep 2017 10:00:00 +0800</lastBuildDate><atom:link href="https://forcemz.net/categories/developer/index.xml" rel="self" type="application/rss+xml"/><item><title>Kisasum Hash 实用工具</title><link>https://forcemz.net/posts/2017/2017-09-01-kisasum-hash-utility/</link><pubDate>Fri, 01 Sep 2017 10:00:00 +0800</pubDate><guid>https://forcemz.net/posts/2017/2017-09-01-kisasum-hash-utility/</guid><description>&lt;h2 id="kisasum-hash-实用工具">Kisasum Hash 实用工具&lt;/h2>
&lt;p>Kismet 是笔者开发的一个计算 Hash 的图形化工具，有桌面版本 Kismet 和 UWP 版本 KismetUWP。 在前面的 Blog 中有介绍：
&lt;a href="http://forcemz.net/developer/2017/05/14/Kismet/">Kismet 杂谈&lt;/a>&lt;/p>
&lt;p>KismetUWP 截图如下：&lt;/p>
&lt;p>&lt;img src="https://github.com/fcharlie/KismetUWP/raw/master/docs/images/none.png" alt="u1">&lt;/p>
&lt;p>当人们使用一系列命令完成工作时，这个时候优先需要命令行工具。&lt;/p></description></item><item><title>Clangbuilder 和 libcxx</title><link>https://forcemz.net/posts/2017/2017-07-29-clangbuild-and-libcxx/</link><pubDate>Sat, 29 Jul 2017 10:00:00 +0800</pubDate><guid>https://forcemz.net/posts/2017/2017-07-29-clangbuild-and-libcxx/</guid><description>&lt;h1 id="前言">前言&lt;/h1>
&lt;p>作为一个 C++ 开发者，自然少不了与编译器打交道。
笔者在 2013年1月17日 发布了第一个 ClangOnWindows 二进制包 &lt;a href="https://sourceforge.net/projects/clangonwin/">ClangOnWindows&lt;/a>，截至 2017-07-29，一共被下载 19212 次，实际上构建 LLVM/Clang 是一个非常耗时的事，于是乎笔者于 2014 年国庆节期间编写了 Clangbuilder，这是一个基于 Powershell 的 LLVM/Clang 自动化构建工具，能够自动下载工具链（除 Visual Studio）,自动获取 LLVM 源码，自动执行构建命令。Clangbuilder 的初期并不支持 libcxx 的构建，原因无他，当时 libcxx 不支持 Windows (for MSVC)，现在依然如此，不过现在可以使用 &lt;code>clang-cl&lt;/code> 构建 libcxx。本文即介绍通过 Clangbuilder 构建 libcxx。&lt;/p></description></item><item><title>Kismet 杂谈</title><link>https://forcemz.net/posts/2017/2017-05-14-kismet/</link><pubDate>Sun, 14 May 2017 10:00:00 +0800</pubDate><guid>https://forcemz.net/posts/2017/2017-05-14-kismet/</guid><description>&lt;h1 id="前言">前言&lt;/h1>
&lt;p>年初以来，互联网安全领域频繁发生大事件，二月下旬，Google 研究人员攻破了 SHA-1算法，在版本控制领域，主要的版本控制系统都使用了 SHA-1 算法&lt;sup>1&lt;/sup>，由于工作需要，我对此格外关注，也了解了其他 SHA 算法，比如 SHA-256/SHA-512 ，基于 Keccak 的 SHA-3 等，寻找 GUI Hash 计算工具时发现大多数工具都未提供 SHA-3 算法支持，并且界面也不符合我的喜好，在闲暇时间，我就开发了 kismat Hash 计算工具，包括传统的Win32 桌面程序和 UWP 程序。&lt;/p></description></item><item><title>基于 AspNetCore 的 Git HTTP 服务器</title><link>https://forcemz.net/posts/2017/2017-05-11-angelo/</link><pubDate>Thu, 11 May 2017 17:00:00 +0800</pubDate><guid>https://forcemz.net/posts/2017/2017-05-11-angelo/</guid><description>&lt;h1 id="关于">关于&lt;/h1>
&lt;p>Git HTTP 服务器是代码托管服务最重要的组件之一，Git HTTP 服务器将 HTTP 请求的数据写入到 git-upload-pack/git-receive-pack 的标准输入，然后读取 git-upload-pack/git-receive-pack 的输出，写入 HTTP 响应包体，然后传输给客户端。原理非常简单。&lt;/p></description></item><item><title>Subversion 和 GIT 开发者演进之 2015</title><link>https://forcemz.net/posts/2015/2015-10-16-dev-vcs/</link><pubDate>Fri, 16 Oct 2015 21:30:16 +0800</pubDate><guid>https://forcemz.net/posts/2015/2015-10-16-dev-vcs/</guid><description>&lt;h2 id="前言">前言&lt;/h2>
&lt;p>在开发软件的过程中，往往是需要多个人参与，版本控制系统的协同工作的重要性不言而喻，除此之外，
版本控制软件对整个开发流程的记录对于缺陷追踪也是非常重要的。版本控制系统也是软件开发的基础设施。&lt;/p></description></item></channel></rss>