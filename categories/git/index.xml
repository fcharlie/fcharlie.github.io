<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Git on Charlie's Rethinking</title><link>https://forcemz.net/categories/git/</link><description>Recent content in Git on Charlie's Rethinking</description><generator>Hugo</generator><language>zh-CN</language><copyright>Copyright (c) 2009-2024 J23</copyright><lastBuildDate>Wed, 20 Jan 2021 18:00:00 +0800</lastBuildDate><atom:link href="https://forcemz.net/categories/git/index.xml" rel="self" type="application/rss+xml"/><item><title>代码托管从业者 Git 指南</title><link>https://forcemz.net/posts/2021/2021-01-20-git-guide-for-code-hosting-practitioners/</link><pubDate>Wed, 20 Jan 2021 18:00:00 +0800</pubDate><guid>https://forcemz.net/posts/2021/2021-01-20-git-guide-for-code-hosting-practitioners/</guid><description>&lt;h2 id="0-前言">0. 前言&lt;/h2>
&lt;p>六七年前，机缘巧合进入了代码托管行业，做过基于 Git 支持 SVN 客户端接入，做过 Git 代码托管平台分布式，做过 Git 代码托管读写分离，做过 Git 代码托管高可用，所幸学到了一些知识，积累了一些经验，这或许对已在或者即将进入代码托管行业的朋友有些帮助，便分享出来，权当是经验之谈，希望读的人有些许收获。&lt;/p></description></item><item><title>性能，可扩展性和高可用 - 大型 Git 代码托管平台的关键问题</title><link>https://forcemz.net/posts/2020/2020-12-25-performance-scalability-and-high-availability-for-git/</link><pubDate>Fri, 25 Dec 2020 20:00:00 +0800</pubDate><guid>https://forcemz.net/posts/2020/2020-12-25-performance-scalability-and-high-availability-for-git/</guid><description>&lt;h2 id="前言">前言&lt;/h2>
&lt;p>2019 年我写了 &lt;a href="https://forcemz.net/git/2019/10/01/ExploreSomeIssuesWithGitHost/">《探讨 Git 代码托管平台的若干问题 - 2019 版》&lt;/a> 从技术栈，功能，伸缩性等方面比较了业内一些代码托管平台（或者开源项目），是第一次对行业的反思。随着事物的不断变化，人们的认识也是不断发展的，在吸收了新的知识，做出了新的实践，换了新的工作后，我对于代码托管平台的认识也有了更多的想法。在实现大型代码托管平台时，&lt;strong>性能&lt;/strong>，&lt;strong>可扩展性&lt;/strong>，&lt;strong>高可用&lt;/strong> 这些问题不断的跃入眼前，随着时机成熟，我觉得很有必要粗略的探讨一些这类问题的解决方案，分享给感兴趣的人。&lt;/p></description></item><item><title>探讨 Git 版本控制系统的若干问题 - 2020 版</title><link>https://forcemz.net/posts/2020/2020-08-16-explore-some-issues-with-git/</link><pubDate>Sun, 16 Aug 2020 20:00:00 +0800</pubDate><guid>https://forcemz.net/posts/2020/2020-08-16-explore-some-issues-with-git/</guid><description>&lt;h2 id="前言">前言&lt;/h2>
&lt;p>自 2014 年大学毕业以来，我一直从事代码托管相关工作，工作的内容和 git 相关，期间积累了很多心得体会，这大概是一般的 git 使用者很少会感知到的，一直以来，我也想将这些见解分享给大家，之前我写过《探讨 Git 代码托管平台的若干问题 - 2019 版》，这篇文章主要偏向代码托管平台的开发，与普通开发者存在一定的距离，快一年过去了，我又有了新的体会，写一篇关于 Git 版本控制系统的若干问题也就有了动机。&lt;/p></description></item><item><title>探讨 Git 代码托管平台的若干问题 - 2019 版</title><link>https://forcemz.net/posts/2019/2019-10-01-explore-some-issues-with-git-host/</link><pubDate>Tue, 01 Oct 2019 10:00:00 +0800</pubDate><guid>https://forcemz.net/posts/2019/2019-10-01-explore-some-issues-with-git-host/</guid><description>&lt;h2 id="关于-git">关于 Git&lt;/h2>
&lt;p>版本控制软件种类繁多，维基百科收录的最早的版本控制系统是 1972 年贝尔实验室开发的 &lt;a href="https://en.wikipedia.org/wiki/Source_Code_Control_System">Source Code Control System&lt;/a>。1986 年 &lt;a href="https://en.wikipedia.org/wiki/Concurrent_Versions_System">Concurrent Versions System(CVS)&lt;/a> 诞生，CVS 曾非常流行，但今时用之寥寥无几，不过 OpenBSD 仍在使用 CVS。2000 年 CollabNet 创建了 Subversion 项目，2009年，Subversion 被 Apache 基金会接受成为顶级项目并被命名为 &lt;a href="https://en.wikipedia.org/wiki/Apache_Subversion">Apache Subversion&lt;/a>。2005 年 &lt;a href="https://en.wikipedia.org/wiki/Git">Linus Torvalds&lt;/a> 创建了 Git，2007 Github 诞生后，Git 随着 Github 的发展愈发流行，14 年间，Git 成为了最流行的版本控制系统，无论是 Windows 还是 Linux 或是 Android，MySQL 等等大型软件都使用 git 进行版本控制。纵观版本控制系统流行史，前有 CVS 后有 SVN，今日 Git 更风流。俱往矣，数风流人物，还看今朝，版本控制系统莫不如斯。&lt;/p></description></item><item><title>服务端 Git 钩子的妙用</title><link>https://forcemz.net/posts/2019/2019-07-30-gnk-server-side/</link><pubDate>Tue, 30 Jul 2019 20:00:00 +0800</pubDate><guid>https://forcemz.net/posts/2019/2019-07-30-gnk-server-side/</guid><description>&lt;h1 id="背景">背景&lt;/h1>
&lt;p>在 &lt;a href="https://git-scm.com/book/en/v2/Customizing-Git-Git-Hooks">《Pro Git》&lt;/a> 的 &lt;strong>Server-Side Hooks&lt;/strong> 介绍了三种钩子，分别是 &lt;code>pre-receive&lt;/code> 已经 &lt;code>update&lt;/code> 还有 &lt;code>post-receive&lt;/code>。GITEE 最初是基于 Gitlab 发展而来，最开始在服务端使用的是 &lt;code>update&lt;/code> 钩子。我们使用 &lt;code>update&lt;/code> 钩子完成一些保护分支/只读分支的功能。随着 Gitee 的不断发展，也有人提出了一些新的服务需求，为了解决大仓库大文件，我们开发了 Git Native Hook (GNK)。新的钩子利用了 git 的一些新的特性，在不同的阶段实现不同的功能，这里就介绍一下这些钩子的妙用。&lt;/p></description></item><item><title>实现 Git 目录权限控制</title><link>https://forcemz.net/posts/2019/2019-04-01-implement-git-dir-accesss-control/</link><pubDate>Mon, 01 Apr 2019 10:00:00 +0800</pubDate><guid>https://forcemz.net/posts/2019/2019-04-01-implement-git-dir-accesss-control/</guid><description>&lt;h1 id="前言">前言&lt;/h1>
&lt;p>Git 与 Subversion 有诸多不同，最核心的一点是前者属于分布式版本控制工具，后者属于集中式版本控制工具。前者的提交行为是离线的，本地的，后者的提交是在线的，需要与远程中央服务器通信，在线创建提交。基于这种现实，Git 和 Subversion 在原生提供的附加功能也存在很大的差别。比如目录权限控制。Git 原生并不支持目录权限控制，而 Subversion 支持。&lt;/p></description></item><item><title>构建恰当的 Git SSH Server</title><link>https://forcemz.net/posts/2019/2019-03-15-make-a-git-ssh-server/</link><pubDate>Fri, 15 Mar 2019 18:00:00 +0800</pubDate><guid>https://forcemz.net/posts/2019/2019-03-15-make-a-git-ssh-server/</guid><description>&lt;h2 id="前言">前言&lt;/h2>
&lt;p>相对于 HTTP(HTTPS) 协议，Git 在使用 SSH 协议操作远程存储库时，因为省去了输入用户名密码的环节，往往要更方便一些，并且，在 Gitlab 这样的代码托管服务中，SSH 在时长上更具优势，早期 Gitlab 使用了 Grack 提供 Git HTTP 访问支持，由于 Unicron+Grack 固定数目多线程同步模型导致服务器上的 HTTP 超时不得不设置非常小，而 SSH fork 多线程同步模型反而能够支持更大的访问时长。实际情况中，Gitee 平台里 Git 接入的最大份额也是 SSH。构建恰当的 Git SSH Server 对于整个 Gitee 平台也就非常重要。&lt;/p></description></item><item><title>基于 Git Namespace 的存储库快照方案</title><link>https://forcemz.net/posts/2018/2018-11-18-git-namespace-snapshot/</link><pubDate>Sun, 18 Nov 2018 10:00:00 +0800</pubDate><guid>https://forcemz.net/posts/2018/2018-11-18-git-namespace-snapshot/</guid><description>&lt;h1 id="前言">前言&lt;/h1>
&lt;p>&lt;a href="https://en.wikipedia.org/wiki/Git">Git&lt;/a> 是一种分布式的版本控制系统，分布式版本控制系统的一大特性就是远程存储库和本地存储库都包含存储库的完整数据。
而集中式的版本控制系统只有在中心服务器上才会包含存储库完整的数据，本地所谓的存储库只是远程服务器特定版本的 &lt;code>checkout&lt;/code>。当中心服务器故障后，如果没有备份服务器，那么集中式的版本控制系统存储库的数据绝大部分就会被丢失。这很容易得出分布式版本控制系统的代码要必集中式的版本控制系统更加安全。&lt;/p></description></item><item><title>Git LFS 的反思</title><link>https://forcemz.net/posts/2018/2018-07-15-git-lfs-rethinking/</link><pubDate>Sun, 15 Jul 2018 10:00:00 +0800</pubDate><guid>https://forcemz.net/posts/2018/2018-07-15-git-lfs-rethinking/</guid><description>&lt;h1 id="前言">前言&lt;/h1>
&lt;p>在一年多以前，笔者曾经写过一文： &lt;a href="https://forcemz.net/git/2017/04/16/Moses/">《Git LFS 服务器实现杂谈》&lt;/a>，最近笔者开发基于&lt;strong>对象存储&lt;/strong>的 LFS 服务器又有了一些心得，这里分享给大家。&lt;/p>
&lt;h1 id="关于-git-lfs">关于 Git LFS&lt;/h1>
&lt;p>Git LFS 即 Git Large File Storage （大文件存储），即将 git 存储库中的体积较大的，不利于打包的，修改不太频繁的文件单独存储到特定的服务器上，以减小存储库体积，加快用户的克隆拉取体验。其中的原理在 &lt;a href="https://forcemz.net/git/2017/04/16/Moses/">《Git LFS 服务器实现杂谈》&lt;/a> 都有说明，如果需要进一步的了解还可以去参考 Git LFS 技术规范： &lt;a href="https://github.com/git-lfs/git-lfs/blob/master/docs/spec.md"> spec.md&lt;/a>。&lt;/p></description></item><item><title>Git Wire 协议杂谈</title><link>https://forcemz.net/posts/2018/2018-06-24-git-wire-protocol/</link><pubDate>Sun, 24 Jun 2018 10:00:00 +0800</pubDate><guid>https://forcemz.net/posts/2018/2018-06-24-git-wire-protocol/</guid><description>&lt;h1 id="前言">前言&lt;/h1>
&lt;p>注意本文的 &lt;strong>GIT 传输协议&lt;/strong> 仅代表 &lt;strong>智能传输协议&lt;/strong>&lt;/p>
&lt;p>美国当地时间 5月18日 Google 开发者发布了一篇博客 &lt;a href="https://opensource.googleblog.com/2018/05/introducing-git-protocol-version-2.html">Introducing Git protocol version 2&lt;/a> 宣布了 Git v2 Protocol，v2 协议又叫做 Git Wire Protocol，新协议旨在改进 Git 的传输过程。Git 不是有个好好的传输协议，为什么要重新弄一个？&lt;/p></description></item><item><title>Git Submodule 的反思</title><link>https://forcemz.net/posts/2018/2018-03-22-git-submodule-rethinking/</link><pubDate>Thu, 22 Mar 2018 10:00:00 +0800</pubDate><guid>https://forcemz.net/posts/2018/2018-03-22-git-submodule-rethinking/</guid><description>&lt;h2 id="git-submodule-介绍">Git Submodule 介绍&lt;/h2>
&lt;p>Git Submodule 翻译成中文叫做&lt;code>子模块&lt;/code>，将一个存储库（如 B）作为另一个（如 A）存储库的子目录，这个存储库就可以称之为 B 是 A 的子模块。
在 ProGit2: &lt;a href="https://git-scm.com/book/en/v2/Git-Tools-Submodules">https://git-scm.com/book/en/v2/Git-Tools-Submodules&lt;/a>, Git-SCM 官网：&lt;a href="https://www.git-scm.com/docs/gitsubmodules">https://www.git-scm.com/docs/gitsubmodules&lt;/a>，对 submodule 有非常详细的介绍。&lt;/p></description></item><item><title>Git 巨型存储库的解决方案</title><link>https://forcemz.net/posts/2017/2017-12-06-massive-repositories-and-git/</link><pubDate>Wed, 06 Dec 2017 10:00:00 +0800</pubDate><guid>https://forcemz.net/posts/2017/2017-12-06-massive-repositories-and-git/</guid><description>&lt;h2 id="前言">前言&lt;/h2>
&lt;p>通常来说，分布式版本控制系统适合体积较小的存储库，&lt;a href="https://en.wikipedia.org/wiki/Distributed_version_control">分布式版本控制系统&lt;/a> 意味着存储库和工作目录都放置在开发者自己的机器上，当开发者需要克隆一个巨大的存储库时，为了获得完整的拷贝，版本控制软件不得不从远程服务器上下载大量的数据。这是分布式版本控制系统最大的缺陷之一。&lt;/p></description></item><item><title>Git 原生钩子的深度优化</title><link>https://forcemz.net/posts/2017/2017-11-22-git-native-hook-depth-optimization/</link><pubDate>Wed, 22 Nov 2017 10:00:00 +0800</pubDate><guid>https://forcemz.net/posts/2017/2017-11-22-git-native-hook-depth-optimization/</guid><description>&lt;h2 id="前言">前言&lt;/h2>
&lt;p>Git 是最流行的版本控制工具，和大多数版本控制工具一样，Git 也拥有钩子特性，用户可以利用钩子实现一些附加功能，在 《Pro Git v2》 中，对钩子类型，消息格式等有详细介绍： &lt;a href="https://git-scm.com/book/en/v2/Customizing-Git-Git-Hooks">8.3 Customizing Git - Git Hooks&lt;/a>。&lt;/p></description></item><item><title>基于 Powershell Core 的 Git 存储库加密方案</title><link>https://forcemz.net/posts/2017/2017-07-31-git-secure-with-powershell/</link><pubDate>Mon, 31 Jul 2017 10:00:00 +0800</pubDate><guid>https://forcemz.net/posts/2017/2017-07-31-git-secure-with-powershell/</guid><description>&lt;h2 id="背景">背景&lt;/h2>
&lt;p>虽然码云提供免费私有存储库，但一些用户还是认为网站管理员可以看到他们的源码，认为私有库也不太安全。而且这些用户也没有私有化部署的打算。如何消除他们的疑虑？使用笔者开发的 &lt;strong>Git-Secure&lt;/strong> 就可以实现存储库的加密。项目开源地址：&lt;a href="https://gitee.com/oscstudio/git-secure">Git-Secure&lt;/a>&lt;/p></description></item><item><title>Git LFS 服务器实现杂谈</title><link>https://forcemz.net/posts/2017/2017-04-16-moses/</link><pubDate>Sun, 16 Apr 2017 10:00:00 +0800</pubDate><guid>https://forcemz.net/posts/2017/2017-04-16-moses/</guid><description>&lt;h1 id="前言">前言&lt;/h1>
&lt;p>从前言开始，便又要讲起 git 原理，多次讲起不胜其烦，诸位如果要了解 git 原理可以通过 bing google 或者其他搜索引擎从网络上查阅资料，也可以去 git-scm.com 网站查看 《Pro Git》，对于大多数开发者而言已是足够。&lt;/p></description></item><item><title>码云分布式之 Brzo 服务器</title><link>https://forcemz.net/posts/2016/2016-11-05-brzo/</link><pubDate>Sat, 05 Nov 2016 20:00:00 +0800</pubDate><guid>https://forcemz.net/posts/2016/2016-11-05-brzo/</guid><description>&lt;h1 id="前言">前言&lt;/h1>
&lt;p>码云是国内最大的代码托管平台之一。码云基于 Gitlab 5.5 开发，经过几年的开发已经和官方的 Gitlab 有了很大的不同。
为了支撑更大的用户规模，码云也在不断的改进，而本文也主要分享码云分布式 Brzo GIT HTTP 服务器的开发经验。&lt;/p></description></item><item><title>Git Analyze 工具实现与原理</title><link>https://forcemz.net/posts/2016/2016-08-12-git-analyze/</link><pubDate>Thu, 11 Aug 2016 20:00:00 +0800</pubDate><guid>https://forcemz.net/posts/2016/2016-08-12-git-analyze/</guid><description>&lt;h1 id="前言">前言&lt;/h1>
&lt;p>作为一个提供免费私有仓库的代码托管平台，码云要考虑利用现有的硬件资源支持更多的用户，一些用户占用较多的硬件资源实际上是对其他用户用户体验的一种损害，因此码云对用户的存储库大小有一定的限制。&lt;/p></description></item><item><title>Git 传输协议实现</title><link>https://forcemz.net/posts/2016/2016-07-16-git-transport-implement/</link><pubDate>Sat, 16 Jul 2016 20:00:00 +0800</pubDate><guid>https://forcemz.net/posts/2016/2016-07-16-git-transport-implement/</guid><description>&lt;h1 id="git-传输协议实现">GIT 传输协议实现&lt;/h1>
&lt;p>在 GIT 的三种主流传输协议 HTTP SSH GIT 中，GIT 协议是最少被使用的协议（也就是 URL 以 &lt;code>git://&lt;/code> 开始的协议）。
这是由于 git 协议的权限控制几乎没有，要么全部可读，要么全部可写，要么全部可读写。所以对于代码托管平台来说，
git 协议的目的仅仅是为了支持 公开项目的只读访问。&lt;/p></description></item><item><title>Git 存储格式与运用</title><link>https://forcemz.net/posts/2016/2016-07-09-git-storage/</link><pubDate>Sat, 09 Jul 2016 20:00:00 +0800</pubDate><guid>https://forcemz.net/posts/2016/2016-07-09-git-storage/</guid><description>&lt;h1 id="git-存储格式与运用">GIT 存储格式与运用&lt;/h1>
&lt;p>在 GIT 的实现规范中，存储格式是非常简单而且高效的，一个代码托管平台通常需要基于这些特性实现一非常有意思的功能。
在本文中，将介绍基于 GIT 存储库格式实现的仓库体积限制与大文件检查。&lt;/p></description></item></channel></rss>