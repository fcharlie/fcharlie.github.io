<?xml-stylesheet href="/rss.xsl" type="text/xsl"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>江二十三的思考</title><link>https://forcemz.net/</link><description>Recent content on 江二十三的思考</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><copyright>Copyright (c) 2009-2024 J23</copyright><lastBuildDate>Mon, 01 Apr 2024 20:00:00 +0800</lastBuildDate><atom:link href="https://forcemz.net/index.xml" rel="self" type="application/rss+xml"/><item><title>Git Wire 协议杂谈</title><link>https://forcemz.net/posts/2018/2018-06-24-git-wire-protocol/</link><pubDate>Sun, 24 Jun 2018 10:00:00 +0800</pubDate><guid>https://forcemz.net/posts/2018/2018-06-24-git-wire-protocol/</guid><description>江二十三的思考 https://forcemz.net/posts/2018/2018-06-24-git-wire-protocol/ -&lt;h1 id="前言">前言&lt;/h1>
&lt;p>注意本文的 &lt;strong>GIT 传输协议&lt;/strong> 仅代表 &lt;strong>智能传输协议&lt;/strong>&lt;/p>
&lt;p>美国当地时间 5月18日 Google 开发者发布了一篇博客 &lt;a href="https://opensource.googleblog.com/2018/05/introducing-git-protocol-version-2.html">Introducing Git protocol version 2&lt;/a> 宣布了 Git v2 Protocol，v2 协议又叫做 Git Wire Protocol，新协议旨在改进 Git 的传输过程。Git 不是有个好好的传输协议，为什么要重新弄一个？&lt;/p>
&lt;h2 id="git-传输协议的缺陷">Git 传输协议的缺陷&lt;/h2>
&lt;p>抛开 &lt;code>git-upload-archive&lt;/code> 不说，Git 传输协议的核心实际上是 &lt;code>git-fetch-pack&lt;/code>/&lt;code>git-upload-pack&lt;/code>，&lt;code>git-send-pack&lt;/code>/&lt;code>git-receive-pack&lt;/code> 是两组命令之间交换输出输出，这就代表一个传输周期就是对应命令的生存周期。&lt;/p>
&lt;p>无论是 fetch 还是 push，传输开始都有一个服务器发现引用的过程，在这个过程中，服务器上的 &lt;code>git-upload-pack(git-receive-pack)&lt;/code> 将服务器上的所有引用按照特定格式发送给客户端。当引用数目较多的时候，这个过程就比较缓慢了，在没有 GC 时，引用的分布布局为
&lt;code>$gitdir/refs/heads/$bracnh_name&lt;/code>,
&lt;code>$gitdir/refs/tags/$tag_name&lt;/code>,
&lt;code>$gitdir/refs/(pull/merge/others)/$refname&lt;/code>，&lt;/p>
&lt;p>引用的 id 在文件中，如果有上万个引用，这就意味着服务器需要进行一些目录遍历，并且进行上万次文件读取，一旦服务器上的并发较大时，引用发现的过程就比较缓慢了，但很多时候，用户可能只是需要某一个引用罢了。&lt;/p>
&lt;p>另外一方面，传输协议时一组命令的输入输出交换，这种机制的可扩展性非常差，比如，git 有浅表克隆，这是比较晚出现的功能，git 需要协商需要的 commit 深度，由于 HTTP 协议是无状态协议，请求流程是 Request-Response ，因此在第一个 HTTP post 请求时，fetch-pack 需要输出 depth 的值，然后等待 upload-pack 计算此上限 commit id，fetch-pack 再次发送请求告知 upload-pack 需要的上限 commitid，在 v1 协议中只能别扭的实现此功能，Http Git 服务器开发者也需要注意此处需要及时的让 git-upload-pack 退出，否则会出现竞争长时间挂起。&lt;/p>
&lt;h2 id="git-wire--协议的改进">Git Wire 协议的改进&lt;/h2>
&lt;p>在 Wire 协议中，传输协议的机制发生了比较大的改变，即在 &lt;code>git-upload-pack/git-receive-pack&lt;/code> 的传输过程中，客户端可以指定特定的 git 子命令，服务器端执行获取输出即可，对于前面的第一个缺陷，在 Wire 协议中可以使用 &lt;code>ls-refs&lt;/code> 获取引用，&lt;code>ls-refs&lt;/code> 是一个内置函数实现，&lt;a href="https://github.com/git/git/blob/e144d126d74f5d2702870ca9423743102eec6fcd/serve.c#L57">{ &amp;ldquo;ls-refs&amp;rdquo;, always_advertise, ls_refs }&lt;/a>，当 &lt;code>ls-refs&lt;/code> 使用参数 &lt;code>ref-prefix&lt;/code> 即可获取只需要的引用。&lt;code>ls-refs&lt;/code> 参数如下：&lt;/p>
&lt;pre tabindex="0">&lt;code>symrefs
In addition to the object pointed by it, show the underlying ref
pointed by it when showing a symbolic ref.
peel
Show peeled tags.
ref-prefix &amp;lt;prefix&amp;gt;
When specified, only references having a prefix matching one of
the provided prefixes are displayed.
&lt;/code>&lt;/pre>&lt;p>对于浅表克隆，使用 Wire 协议也要好多了，这时使用的是 &lt;code>fetch&lt;/code> 命令，fetch 命令中可以直接指定 &lt;code>deepen N&lt;/code> 而不用像 v1 协议一样要多一次协商（对于 HTTP 来说是多一次请求。）&lt;/p>
&lt;p>命令允许的参数如下：&lt;/p>
&lt;pre tabindex="0">&lt;code>want &amp;lt;oid&amp;gt;
Indicates to the server an object which the client wants to
retrieve. Wants can be anything and are not limited to
advertised objects.
have &amp;lt;oid&amp;gt;
Indicates to the server an object which the client has locally.
This allows the server to make a packfile which only contains
the objects that the client needs. Multiple &amp;#39;have&amp;#39; lines can be
supplied.
done
Indicates to the server that negotiation should terminate (or
not even begin if performing a clone) and that the server should
use the information supplied in the request to construct the
packfile.
thin-pack
Request that a thin pack be sent, which is a pack with deltas
which reference base objects not contained within the pack (but
are known to exist at the receiving end). This can reduce the
network traffic significantly, but it requires the receiving end
to know how to &amp;#34;thicken&amp;#34; these packs by adding the missing bases
to the pack.
no-progress
Request that progress information that would normally be sent on
side-band channel 2, during the packfile transfer, should not be
sent. However, the side-band channel 3 is still used for error
responses.
include-tag
Request that annotated tags should be sent if the objects they
point to are being sent.
ofs-delta
Indicate that the client understands PACKv2 with delta referring
to its base by position in pack rather than by an oid. That is,
they can read OBJ_OFS_DELTA (ake type 6) in a packfile.
&lt;/code>&lt;/pre>&lt;p>浅表克隆允许的参数&lt;/p>
&lt;pre tabindex="0">&lt;code>shallow &amp;lt;oid&amp;gt;
A client must notify the server of all commits for which it only
has shallow copies (meaning that it doesn&amp;#39;t have the parents of
a commit) by supplying a &amp;#39;shallow &amp;lt;oid&amp;gt;&amp;#39; line for each such
object so that the server is aware of the limitations of the
client&amp;#39;s history. This is so that the server is aware that the
client may not have all objects reachable from such commits.
deepen &amp;lt;depth&amp;gt;
Requests that the fetch/clone should be shallow having a commit
depth of &amp;lt;depth&amp;gt; relative to the remote side.
deepen-relative
Requests that the semantics of the &amp;#34;deepen&amp;#34; command be changed
to indicate that the depth requested is relative to the client&amp;#39;s
current shallow boundary, instead of relative to the requested
commits.
deepen-since &amp;lt;timestamp&amp;gt;
Requests that the shallow clone/fetch should be cut at a
specific time, instead of depth. Internally it&amp;#39;s equivalent to
doing &amp;#34;git rev-list --max-age=&amp;lt;timestamp&amp;gt;&amp;#34;. Cannot be used with
&amp;#34;deepen&amp;#34;.
deepen-not &amp;lt;rev&amp;gt;
Requests that the shallow clone/fetch should be cut at a
specific revision specified by &amp;#39;&amp;lt;rev&amp;gt;&amp;#39;, instead of a depth.
Internally it&amp;#39;s equivalent of doing &amp;#34;git rev-list --not &amp;lt;rev&amp;gt;&amp;#34;.
Cannot be used with &amp;#34;deepen&amp;#34;, but can be used with
&amp;#34;deepen-since&amp;#34;.
&lt;/code>&lt;/pre>&lt;p>过滤器参数：&lt;/p>
&lt;pre tabindex="0">&lt;code>filter &amp;lt;filter-spec&amp;gt;
Request that various objects from the packfile be omitted
using one of several filtering techniques. These are intended
for use with partial clone and partial fetch operations. See
`rev-list` for possible &amp;#34;filter-spec&amp;#34; values.
&lt;/code>&lt;/pre>&lt;p>另外 Wire 协议中的过滤器功能在以后支持部分克隆等功能时可能会变得非常重要。&lt;/p>
&lt;h2 id="如何支持-wire-协议">如何支持 Wire 协议&lt;/h2>
&lt;p>支持 Wire 协议需要客户端和服务器同时支持，Git 通常可以使用 HTTP，SSH，Git 协议进行传输，针对不同协议，需要特定的修改。&lt;/p>
&lt;p>HTTP 协议需要检测请求头中是否有 Git-Protocol 然后 GET 请求时不再输出 &lt;code># service=git-upload-pack&lt;/code> 这样的标志，添加环境变量 &lt;code>GIT_PROTOCOL=version=2&lt;/code> 去执行 &lt;code>git-upload-pack/git-receive-pack&lt;/code>.&lt;/p>
&lt;p>SSH 协议支持 SetEnv 修改环境变量，所以只要接受客户端的 SetEnv 请求，然后和 HTTP 一样即可，SSH 没有 &lt;code># service=xx&lt;/code> 因此也没有那一不需要修改。&lt;/p>
&lt;p>Git 协议需要重新解析数据头，判断是否存在 &lt;code>version=2&lt;/code>，类似头部 &lt;code>003egit-upload-pack /project.git\0host=myserver.com\0\0version=2\0&lt;/code>。&lt;/p>
&lt;p>值得注意的是，在 SSH 协议中，如果是 SSH 服务器并不是直接启动 git 命令而是代理到其他服务器上时，需要区别对待 v1 与 Wire 协议的传输流程进行少量修改。&lt;/p>
&lt;h2 id="如何使用">如何使用&lt;/h2>
&lt;p>用户需要安装 git 2.18 . 然后找到一个支持 v2 的服务器，目前主流的 Git 托管平台都暂不支持（除了 Google 的），官方的 git-http-backend 支持，这里有一个笔者贡献的 git-http-backend 已经支持：&lt;a href="https://github.com/asim/git-http-backend">https://github.com/asim/git-http-backend&lt;/a>。 需要注意服务器上的 git 也需要是最新版，否则无法使用。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#1d2432;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>git -c protocol.version&lt;span style="color:#ff636f">=&lt;/span>&lt;span style="color:#a6be9d">2&lt;/span> clone http://domian/repo.git
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="其他">其他&lt;/h2>
&lt;p>Wire 协议的细节：&lt;a href="https://mirrors.edge.kernel.org/pub/software/scm/git/docs/technical/protocol-v2.html">git/docs/technical/protocol-v2.html&lt;/a>&lt;/p>
&lt;p>这里有一个 Wire 协议与 Smart 协议抓包对比：&lt;a href="https://gitee.com/ipvb/codes/y1b4ew3vqfgom5298iznh69">Git Wire Protocol vs Git Smart Protocol&lt;/a>&lt;/p>
- https://forcemz.net/posts/2018/2018-06-24-git-wire-protocol/ - Copyright (c) 2009-2024 J23</description></item><item><title>Git Submodule 的反思</title><link>https://forcemz.net/posts/2018/2018-03-22-git-submodule-rethinking/</link><pubDate>Thu, 22 Mar 2018 10:00:00 +0800</pubDate><guid>https://forcemz.net/posts/2018/2018-03-22-git-submodule-rethinking/</guid><description>江二十三的思考 https://forcemz.net/posts/2018/2018-03-22-git-submodule-rethinking/ -&lt;h2 id="git-submodule-介绍">Git Submodule 介绍&lt;/h2>
&lt;p>Git Submodule 翻译成中文叫做&lt;code>子模块&lt;/code>，将一个存储库（如 B）作为另一个（如 A）存储库的子目录，这个存储库就可以称之为 B 是 A 的子模块。
在 ProGit2: &lt;a href="https://git-scm.com/book/en/v2/Git-Tools-Submodules">https://git-scm.com/book/en/v2/Git-Tools-Submodules&lt;/a>, Git-SCM 官网：&lt;a href="https://www.git-scm.com/docs/gitsubmodules">https://www.git-scm.com/docs/gitsubmodules&lt;/a>，对 submodule 有非常详细的介绍。&lt;/p>
&lt;p>Git Submodule 的引入主要是为了管理项目依赖或者将项目进行拆分，在不同的团队开发然后在发布的时候再进行合并。Git Submodule 是 Git 比较重要的功能之一，包括像 &lt;a href="https://github.com/boostorg/boost">Boost&lt;/a> &lt;a href="https://github.com/grpc/grpc">gPRC&lt;/a> &lt;a href="https://github.com/google/protobuf">Protobuf&lt;/a> &lt;a href="https://github.com/Microsoft/msix-packaging">MSIX-Packaging&lt;/a> &lt;a href="https://github.com/wxWidgets/wxWidgets">wxWidgets&lt;/a> &lt;a href="https://github.com/PowerShell/PowerShell">PowerShell&lt;/a> &lt;a href="https://github.com/AvaloniaUI/Avalonia">AvaloniaUI&lt;/a> &lt;a href="https://github.com/ldc-developers/ldc">LDC&lt;/a> &lt;a href="https://github.com/nghttp2/nghttp2">nghttp2&lt;/a> 这样的项目都在使用 Submodule 功能，可以说 Submodule 的使用面还是比较广的。在码云内部，一些基础设施项目都是使用 Submodule 管理项目依赖。用户只需要在工作目录运行下面命令就可以轻松将依赖克隆下来并且 checkout 到规定的 commit。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#1d2432;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>git submodule init
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>git submodule update
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Git Submodule 的好处显而易见，可以简化项目依赖管理。比如在 Ubuntu 系统中，Ubuntu 包管理器 apt-get 渠道的依赖库一般都不会及时更新，但开发者需要使用最新版以来，这个时候就需要使用源码构建了，如果将指定的存储库作为子模块添加到存储库，然后修改构建文件，比如 &lt;code>CMakeLists.txt&lt;/code> 这样的话构建起来就非常的简单。另外在编写不同的程序时，如果以来类似的功能，我们可以将类似的功能实现单独存储，然后在不同的程序源码中添加子模块，这样就实现了功能的拆分和抽象。&lt;/p>
&lt;h2 id="git-submodule-的代价">Git Submodule 的代价&lt;/h2>
&lt;p>在使用 Submodule 的过程中我们很快可以发现，Submodule 的缺陷非常明显，由于 Git 是分布式版本控制系统，这通常意味着其 Submodule 也是一个独立的存储库，虽然我们可以使用 &lt;code>--depth=1&lt;/code> &lt;code>--single-branch&lt;/code> &lt;code>--shallow-since&lt;/code> 的方式去克隆存储库，但对于 Submodule 而言，无论是 &lt;code>git clone --recursive(--recurse-submodules)&lt;/code> 还是 &lt;code>git submodule int ;git submodule update&lt;/code> 都写命令都会将子模块完整的克隆下来。受限于 Github 的网络状况，一些 Submodule 在 Github 上项目子模块经常的克隆失败，笔者在开发中也遇到很多次这种情况。&lt;/p>
&lt;p>虽然 git submodule 能够接受 &lt;code>--depth,--single-branch,--shallow-since&lt;/code> 但用户又怎么能确定存储库树上的 commit 存在于这些克隆方式拉去的对象中呢？倘若不在，用户实质上是会检出失败的。&lt;/p>
&lt;p>有的人喜欢 Submodule，但是 Submodule 的问题也让人避之不及。有的项目干脆将依赖完全放入自己目录而不是用 Submodule，比如 &lt;a href="https://github.com/nodejs/node">NodeJS&lt;/a>，&lt;a href="https://github.com/Microsoft/ChakraCore">ChakraCore&lt;/a>，&lt;a href="https://github.com/Kitware/CMake">CMake&lt;/a>。&lt;/p>
&lt;p>也有的也是将源码放入自身目录，但一些其他依赖用其包管理器管理，如：&lt;a href="https://github.com/dotnet/coreclr">CoreCLR&lt;/a> &lt;a href="https://github.com/dotnet/coreclr">CoreRT&lt;/a>。&lt;/p>
&lt;p>还有的在构建的时候下载自身的依赖，如：&lt;a href="https://github.com/facebook/proxygen">Proxygen&lt;/a>
，也有的要开发者一步一步操作：&lt;a href="https://github.com/facebook/fbthrift/tree/master/build/deps/github_hashes/facebook">fbthrift&lt;/a>，或者设置布局：&lt;a href="https://github.com/apple/swift">Swift&lt;/a>&lt;/p>
&lt;p>Git 不能完全解决存储库克隆大量数据的问题，Submodule 同样不能解决。&lt;/p>
&lt;h2 id="特定提交的克隆和下载">特定提交的克隆和下载&lt;/h2>
&lt;p>话说回来，Git 这种缺点是由其默认不支持检出克隆特定的 commit 造成的。即无法指定特定 commit 进行浅表克隆，任何克隆都需要从发现引用开始。然后从引用反向计算。查找特定 commit 并不是一个耗时的操作，在 git 中，如果对象存在在松散对象目录中，我们可以马上找到，反之如果存在在包文件中，使用二分法，最多每个包 8 次就可以知道 commit 对象是否存在，找到 commit 后，然后构建传输包即可。&lt;/p>
&lt;p>如果我们设置了 &lt;code>uploadpack.allowReachableSHA1InWant=true&lt;/code> 然后执行&lt;/p>
&lt;pre tabindex="0">&lt;code>git init
git remote add origin &amp;lt;url&amp;gt;
git fetch --depth 1 origin &amp;lt;sha1&amp;gt;
git checkout FETCH_HEAD
&lt;/code>&lt;/pre>&lt;p>参考 &lt;a href="https://github.com/git/git/blob/f8edeaa05d8623a9f6dad408237496c51101aad8/Documentation/git-fetch-pack.txt#L122-L124">git-fetch-pack.txt#L122-L124&lt;/a>&lt;/p>
&lt;p>实际上，Git UploadArchive 同样不支持打包特定提交的压缩包，除非设置了 &lt;code>uploadArchive.allowUnreachable=true&lt;/code>&lt;/p>
&lt;p>这样拒绝也是有原因的，如果一个对象被删除了，但没有被 GC 清理掉，Upload-Pack UploadArchive 这时候都可以获得这些数据，这就存在一个安全问题：&lt;a href="https://github.com/git/git/blob/565301e41670825ceedf75220f2918ae76831240/Documentation/git-upload-archive.txt#L26-L31">git-upload-archive.txt#L26-L31&lt;/a>&lt;/p>
&lt;p>由于 HTTP Archive 通常用 &lt;code>git-archive&lt;/code> 包装实现，因此支持下载特定的 commit。&lt;/p>
&lt;p>而对于代码托管平台来说并不一定会开启这几个参数，所以对 Submodule 而言并没什么效果，当然我也非常乐意 Git 在这方面改进的。&lt;/p>
&lt;h2 id="备注">备注&lt;/h2>
&lt;ol>
&lt;li>&lt;a href="https://stackoverflow.com/questions/31278902/how-to-shallow-clone-a-specific-commit-with-depth-1">How to shallow clone a specific commit with depth 1?&lt;/a>&lt;/li>
&lt;/ol>
- https://forcemz.net/posts/2018/2018-03-22-git-submodule-rethinking/ - Copyright (c) 2009-2024 J23</description></item><item><title>Git 巨型存储库的解决方案</title><link>https://forcemz.net/posts/2017/2017-12-06-massive-repositories-and-git/</link><pubDate>Wed, 06 Dec 2017 10:00:00 +0800</pubDate><guid>https://forcemz.net/posts/2017/2017-12-06-massive-repositories-and-git/</guid><description>江二十三的思考 https://forcemz.net/posts/2017/2017-12-06-massive-repositories-and-git/ -&lt;h2 id="前言">前言&lt;/h2>
&lt;p>通常来说，分布式版本控制系统适合体积较小的存储库，&lt;a href="https://en.wikipedia.org/wiki/Distributed_version_control">分布式版本控制系统&lt;/a> 意味着存储库和工作目录都放置在开发者自己的机器上，当开发者需要克隆一个巨大的存储库时，为了获得完整的拷贝，版本控制软件不得不从远程服务器上下载大量的数据。这是分布式版本控制系统最大的缺陷之一。&lt;/p>
&lt;p>这种缺陷并不会阻碍 git 的流行，自 2008 年以来，git 已经成为事实上的版本控制软件的魁首，诸如 GCC&lt;sup>1&lt;/sup>，LLVM&lt;sup>2&lt;/sup> 这样的基础软件也已迁移到或者正在迁移到 git。那么 git 如何解决这种大存储库的麻烦呢？&lt;/p>
&lt;h2 id="浅克隆和稀疏检出">浅克隆和稀疏检出&lt;/h2>
&lt;p>很早之前，我在构建 LLVM 的时候，都使用 svn 去检出 LLVM 源码，当时并不知道 git 能够支持浅克隆。后来从事代码托管开发，精通git 后，索性在 Clangbuilder&lt;sup>3&lt;/sup> 中使用 git 浅克隆获取 LLVM 源码。&lt;/p>
&lt;p>浅克隆意味着只克隆指定个数的 commit，在 git 克隆的时候使用 &lt;code>--depth=N&lt;/code> 参数就能够支持克隆最近的 N 个 commit，这种机制对于像 CI 这样的服务来说，简直是如虎添翼。&lt;/p>
&lt;pre tabindex="0">&lt;code> --depth &amp;lt;depth&amp;gt;
Create a shallow clone with a history truncated to the specified number of commits. Implies
--single-branch unless --no-single-branch is given to fetch the histories near the tips of all branches.
&lt;/code>&lt;/pre>&lt;p>与常规克隆不同的是，浅克隆可能需要多执行一次请求，用来协商 commit 的深度信息。&lt;/p>
&lt;p>在服务器上支持浅克隆一般不需要做什么事。如果使用 &lt;em>git-upload-pack&lt;/em> 命令实现克隆功能时，对于 HTTP 协议要特殊设置，需要及时关闭 &lt;em>git-upload-pack&lt;/em> 的输入。否则，git-upload-pack 会阻塞不会退出。对于 Git 和 SSH 协议，完全不要考虑那么多，HTTP协议是 &lt;strong>Request&amp;ndash;Respone&lt;/strong> 这种类型的，而 Git 和 SSH 协议则没有这个限制。&lt;/p>
&lt;p>而稀疏检出指得是在将文件从存储库中检出到目录时，只检出特定的目录。这个需要设置 &lt;code>.git/info/sparse-checkout&lt;/code>。稀疏检出是一种客户端行为，只会优化用户的检出体验，并不会减少服务器传输。&lt;/p>
&lt;h2 id="git-lfs-的初衷">Git LFS 的初衷&lt;/h2>
&lt;p>Git 实质上是一种文件快照系统。创建提交时会将文件打包成新的 blob 对象。这种机制意味着 git 在管理大文件时是非常占用存储的。比如一个 1GB 的 PSD 文件，修改 10 次，存储库就可能是 10 GB。当然，这取决于 zip 对 PSD 文件的压缩率。同样的，这种存储库在网络上传输，需要耗费更多的网络带宽。&lt;/p>
&lt;p>对于 Github 而言，大文件耗费了他们大量的存储和带宽。Github 团队于是在 2015 年推出了 Git LFS，在前面的博客中，我介绍了如何实现一个 Git LFS 服务器&lt;sup>4&lt;/sup>，这里也就不再多讲了。&lt;/p>
&lt;h2 id="gvfs-的原理">GVFS 的原理&lt;/h2>
&lt;p>好了，说到今天的重点了。微软有专门的文件介绍了 &lt;strong>《Git 缩放》&lt;/strong>&lt;sup>5&lt;/sup> &lt;strong>《GVFS 设计历史》&lt;/strong>&lt;sup>6&lt;/sup>，相关的内容也就不赘述了。&lt;/p>
&lt;p>GVFS 协议地址为： &lt;a href="https://github.com/Microsoft/GVFS/blob/master/Protocol.md">The GVFS Protocol (v1)&lt;/a>&lt;/p>
&lt;p>GVFS 目前只设计和实现了 HTTP 协议，我将其 HTTP 接口整理如下表：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Method&lt;/th>
&lt;th>URL&lt;/th>
&lt;th>Body&lt;/th>
&lt;th>Accept&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>GET&lt;/td>
&lt;td>/gvfs/config&lt;/td>
&lt;td>NA&lt;/td>
&lt;td>application/json, gvfs not care&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>GET&lt;/td>
&lt;td>/gvfs/objects/{objectId}&lt;/td>
&lt;td>NA&lt;/td>
&lt;td>application/x-git-loose-object&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>POST&lt;/td>
&lt;td>/gvfs/objects&lt;/td>
&lt;td>Json Objects&lt;/td>
&lt;td>application/x-git-packfile; application/x-gvfs-loose-objects(cache server)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>POST&lt;/td>
&lt;td>/gvfs/sizes&lt;/td>
&lt;td>JOSN Array&lt;/td>
&lt;td>application/json&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>GET&lt;/td>
&lt;td>/gvfs/prefetch[?lastPackTimestamp={secondsSinceEpoch}]&lt;/td>
&lt;td>NA&lt;/td>
&lt;td>application/x-gvfs-timestamped-packfiles-indexes&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>GVFS 最初要通过 &lt;code>/gvfs/config&lt;/code> 接口去判断远程服务器对 GVFS 的支持程序，以及缓存服务器地址。获取引用列表依然需要通过 &lt;code>GET /info/refs?service=git-upload-pack&lt;/code> 去请求远程服务器。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#1d2432;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">//https://github.com/Microsoft/GVFS/blob/b07e554db151178fb397e51974d76465a13af017/GVFS/FastFetch/CheckoutFetchHelper.cs#L47&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">GitRefs&lt;/span> &lt;span style="color:#58a1dd">refs&lt;/span> = &lt;span style="color:#ff636f">null&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">string&lt;/span> &lt;span style="color:#58a1dd">commitToFetch&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">if&lt;/span> (&lt;span style="color:#58a1dd">isBranch&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">refs&lt;/span> = &lt;span style="color:#ff636f">this&lt;/span>.&lt;span style="color:#58a1dd">ObjectRequestor&lt;/span>.&lt;span style="color:#58a1dd">QueryInfoRefs&lt;/span>(&lt;span style="color:#58a1dd">branchOrCommit&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">if&lt;/span> (&lt;span style="color:#58a1dd">refs&lt;/span> == &lt;span style="color:#ff636f">null&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">throw&lt;/span> &lt;span style="color:#ff636f">new&lt;/span> &lt;span style="color:#58a1dd">FetchException&lt;/span>(&lt;span style="color:#a6be9d">&amp;#34;Could not query info/refs from: {0}&amp;#34;&lt;/span>, &lt;span style="color:#ff636f">this&lt;/span>.&lt;span style="color:#58a1dd">Enlistment&lt;/span>.&lt;span style="color:#58a1dd">RepoUrl&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">else&lt;/span> &lt;span style="color:#ff636f">if&lt;/span> (&lt;span style="color:#58a1dd">refs&lt;/span>.&lt;span style="color:#58a1dd">Count&lt;/span> == &lt;span style="color:#a6be9d">0&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">throw&lt;/span> &lt;span style="color:#ff636f">new&lt;/span> &lt;span style="color:#58a1dd">FetchException&lt;/span>(&lt;span style="color:#a6be9d">&amp;#34;Could not find branch {0} in info/refs from: {1}&amp;#34;&lt;/span>, &lt;span style="color:#58a1dd">branchOrCommit&lt;/span>, &lt;span style="color:#ff636f">this&lt;/span>.&lt;span style="color:#58a1dd">Enlistment&lt;/span>.&lt;span style="color:#58a1dd">RepoUrl&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">commitToFetch&lt;/span> = &lt;span style="color:#58a1dd">refs&lt;/span>.&lt;span style="color:#58a1dd">GetTipCommitId&lt;/span>(&lt;span style="color:#58a1dd">branchOrCommit&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">else&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">commitToFetch&lt;/span> = &lt;span style="color:#58a1dd">branchOrCommit&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>拿到引用列表后才能开始 GVFS clone。分析 &lt;code>POST /gvfs/objects&lt;/code> 接口规范，我们知道，最初调用此接口时，只会获得特定的 commit 以及 tree 对象。引用列表返回的都是 commit id。拿到 tree 对象后，就可以拿到 tree 之中的 blob id。通过 &lt;code>POST /gvfs/sizes&lt;/code> 可以拿到需要获得的对象的原始大小，通常而言，&lt;code>/gvfs/sizes&lt;/code> 请求的对象的类型一般都是 blob，在 GVFS 源码的 &lt;code>QueryForFileSizes&lt;/code> 正是说明了这一点。实际上一个完整功能的 GVFS 服务器实现这三个接口就可以正常运行。&lt;/p>
&lt;p>&lt;code>POST /gvfs/objects&lt;/code> 请求类型：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#1d2432;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-json" data-lang="json">&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">&amp;#34;objectIds&amp;#34;&lt;/span>:[
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6be9d">&amp;#34;e402091910d6d71c287181baaddfd9e36a511636&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6be9d">&amp;#34;7ba8566052440d81c8d50f50d3650e5dd3c28a49&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ],
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">&amp;#34;commitDepth&amp;#34;&lt;/span>:&lt;span style="color:#a6be9d">2&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#1d2432;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c++" data-lang="c++">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff636f">struct&lt;/span> &lt;span style="color:#58a1dd">GvfsObjects&lt;/span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">std&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">vector&lt;/span>&lt;span style="color:#ff636f">&amp;lt;&lt;/span>&lt;span style="color:#58a1dd">std&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">string&lt;/span>&lt;span style="color:#ff636f">&amp;gt;&lt;/span> &lt;span style="color:#58a1dd">objectIds&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">int&lt;/span> &lt;span style="color:#58a1dd">commitDepth&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>};
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>POST /gvfs/sizes&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#1d2432;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-json" data-lang="json">&lt;span style="display:flex;">&lt;span>[
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6be9d">&amp;#34;e402091910d6d71c287181baaddfd9e36a511636&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6be9d">&amp;#34;7ba8566052440d81c8d50f50d3650e5dd3c28a49&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>]
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>对于 Loose Object，目前的 git 代码托管平台基本上都不支持哑协议了，GVFS 这里支持 loose object 更多的目的是用来支持缓存，而 prefetch 的道理类似，像 Windows 源码这样体积的存储库，一般的代码托管平台优化策略往往无效。每一次计算 commit 中的目录布局都是非常耗时的，因此，GVFS 在设计之处都在尽量的利用缓存服务器。&lt;/p>
&lt;h2 id="使用-libgit2">使用 Libgit2&lt;/h2>
&lt;p>据我所知，国内最早实现 gvfs 服务器的是华为开发者庄表伟，具体介绍在简书上： &lt;a href="http://www.jianshu.com/p/5a74c5194fa6">《GVFS协议与工作原理》&lt;/a>。我在实现 gvfs 的过程也参考了他的实现。与他的基于 rack 用 git 命令行实现的服务器不同的是，我是使用 libgit2 实现一个 git-gvfs 命令行，然后被 git-srv 和 bzsrv 调用。采取这种机制一是使用 git 命令行需要多个命令的组合，无论是 git-srv 还是基于 go 的 bzsrv 还要处理各种各样的命令，不利于细节屏蔽。二来是我对 libgit2 已经比较熟，并且也对 git 的存储协议，pack 格式比较了解。&lt;/p>
&lt;p>git-srv 是码云分布式 git 传输的核心组件，无论是 HTTP 还是 SSH 还是 Git 协议，其传输数据都由其前端转发到 git-srv，最后通过 git-* 命令实现，支持的命令有 git-upload-pack git-upload-archive git-receive-pack git-archive，如果直接使用 git 命令实现 gvfs 功能不吝于重写 git-srv，很容易对线上的服务造成影响。简单的方法就是使用 libgit2 实现一个 git-gvfs cli.&lt;/p>
&lt;p>git-gvfs 命令的基本用法是：&lt;/p>
&lt;pre tabindex="0">&lt;code>git-gvfs GVFS impl cli
usage: [command] [args] gitdir
config show server config
sizes input json object ids, show those size
pack-objects pack input oid&amp;#39;s objects
loose-object --oid; send loose object
prefetch --lastPackTimestamp; prefetch transfer
&lt;/code>&lt;/pre>&lt;p>&lt;code>git-gvfs config&lt;/code> 命令用于显示服务器配置，在 brzo 或者 bzsrv 就可以被拦截，这里保留。&lt;/p>
&lt;p>&lt;code>git-gvfs sizes&lt;/code> 命令对应 &lt;code>POST /gvfs/sizes&lt;/code> 请求，请求体写入到 git-gvfs 的 &lt;em>stdin&lt;/em> ，git-gvfs 使用 &lt;code>nlohmann::json&lt;/code> 解析请求，然后使用 &lt;code>git_odb&lt;/code> 去查询所有输入对象的未压缩大小。&lt;/p>
&lt;p>&lt;code>pack-objects&lt;/code> 命令对应 &lt;code>POST /gvfs/objects&lt;/code> 请求，输入的对象是 commit 时，使用 commitDepth 的长度回溯遍历，取第一个 parent commit。如果对象的类型不是 blob，则向下解析，直到树没有子树。构建 pack 可以使用 &lt;a href="https://libgit2.github.com/libgit2/#HEAD/type/git_packbuilder">&lt;code>git_packbuilder&lt;/code>&lt;/a>，写入文件使用 &lt;a href="https://libgit2.github.com/libgit2/#HEAD/group/packbuilder/git_packbuilder_write">&lt;code>git_packbuilder_write&lt;/code>&lt;/a>，直接写入 &lt;code>stdout&lt;/code> 用&lt;a href="https://libgit2.github.com/libgit2/#HEAD/group/packbuilder/git_packbuilder_foreach">git_packbuilder_foreach&lt;/a>。为了支持缓存，要先写入磁盘，然后从磁盘读取再写入到 &lt;strong>stdout&lt;/strong>。&lt;/p>
&lt;p>&lt;code>loose-object&lt;/code> 即读取松散对象写入到标准输出。&lt;/p>
&lt;p>&lt;code>prefetch&lt;/code> 对应 &lt;code>GET /gvfs/prefetch[?lastPackTimestamp={secondsSinceEpoch}]|&lt;/code> 这里核心是扫描 gvfs 临时目录。将所有某个时间点之后创建的 pack 文件打包成一个 pack。这里需要对 pack 对象进行遍历，最初的 pack 遍历我是使用 Git Native Hook 的机制，但后来发现 odb 边界导致性能不太理想，于是我使用 &lt;code>git_odb_new&lt;/code> 新建 odb，然后使用 &lt;code>git_odb_backend_one_pack&lt;/code> 创建 &lt;code>git_odb_backend&lt;/code> 打开一个个的 pack 文件，使用 &lt;code>git_odb_add_backend&lt;/code> 将 &lt;code>odb_backend&lt;/code> 添加到 odb，这时候就可以对 odb 进行遍历，获得所有的对象，要创建 packbuilder 需要 &lt;code>git_repositroy&lt;/code> 对象，因此，可以使用 &lt;code>git_repository_warp_odb&lt;/code> 创建一个 fake repo. 代码片段如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#1d2432;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c++" data-lang="c++">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff636f">class&lt;/span> &lt;span style="color:#58a1dd">FakePackbuilder&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff636f">private&lt;/span>&lt;span style="color:#ff636f">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">git_odb&lt;/span> &lt;span style="color:#ff636f">*&lt;/span>&lt;span style="color:#58a1dd">db&lt;/span>{&lt;span style="color:#ff636f">nullptr&lt;/span>};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">git_repository&lt;/span> &lt;span style="color:#ff636f">*&lt;/span>&lt;span style="color:#58a1dd">repo&lt;/span>{&lt;span style="color:#ff636f">nullptr&lt;/span>};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">git_packbuilder&lt;/span> &lt;span style="color:#ff636f">*&lt;/span>&lt;span style="color:#58a1dd">pb&lt;/span>{&lt;span style="color:#ff636f">nullptr&lt;/span>};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">std&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">vector&lt;/span>&lt;span style="color:#ff636f">&amp;lt;&lt;/span>&lt;span style="color:#58a1dd">std&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">string&lt;/span>&lt;span style="color:#ff636f">&amp;gt;&lt;/span> &lt;span style="color:#58a1dd">pks&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">bool&lt;/span> &lt;span style="color:#58a1dd">pksremove&lt;/span>{&lt;span style="color:#58a1dd">false&lt;/span>};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">std&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">string&lt;/span> &lt;span style="color:#58a1dd">name&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#828b96;font-style:italic">/// skip self
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span> &lt;span style="color:#ff636f">inline&lt;/span> &lt;span style="color:#ff636f">void&lt;/span> &lt;span style="color:#58a1dd">removepkidx&lt;/span>(&lt;span style="color:#ff636f">const&lt;/span> &lt;span style="color:#58a1dd">std&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">string&lt;/span> &lt;span style="color:#ff636f">&amp;amp;&lt;/span>&lt;span style="color:#58a1dd">pk&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">if&lt;/span> (&lt;span style="color:#58a1dd">pk&lt;/span>.&lt;span style="color:#58a1dd">size&lt;/span>() &lt;span style="color:#ff636f">&amp;gt;&lt;/span> &lt;span style="color:#58a1dd">name&lt;/span>.&lt;span style="color:#58a1dd">size&lt;/span>() &lt;span style="color:#ff636f">&amp;amp;&amp;amp;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">pk&lt;/span>.&lt;span style="color:#58a1dd">compare&lt;/span>(&lt;span style="color:#58a1dd">pk&lt;/span>.&lt;span style="color:#58a1dd">size&lt;/span>() &lt;span style="color:#ff636f">-&lt;/span> &lt;span style="color:#58a1dd">name&lt;/span>.&lt;span style="color:#58a1dd">size&lt;/span>(), &lt;span style="color:#58a1dd">name&lt;/span>.&lt;span style="color:#58a1dd">size&lt;/span>(), &lt;span style="color:#58a1dd">name&lt;/span>) &lt;span style="color:#ff636f">!=&lt;/span> &lt;span style="color:#a6be9d">0&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">auto&lt;/span> &lt;span style="color:#58a1dd">idxfile&lt;/span> &lt;span style="color:#ff636f">=&lt;/span> &lt;span style="color:#58a1dd">pk&lt;/span>.&lt;span style="color:#58a1dd">substr&lt;/span>(&lt;span style="color:#a6be9d">0&lt;/span>, &lt;span style="color:#58a1dd">pk&lt;/span>.&lt;span style="color:#58a1dd">size&lt;/span>() &lt;span style="color:#ff636f">-&lt;/span> &lt;span style="color:#a6be9d">4&lt;/span>).&lt;span style="color:#58a1dd">append&lt;/span>(&lt;span style="color:#a6be9d">&amp;#34;idx&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">std&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">remove&lt;/span>(&lt;span style="color:#58a1dd">pk&lt;/span>.&lt;span style="color:#58a1dd">c_str&lt;/span>()); &lt;span style="color:#828b96;font-style:italic">///
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span> &lt;span style="color:#58a1dd">std&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">remove&lt;/span>(&lt;span style="color:#58a1dd">idxfile&lt;/span>.&lt;span style="color:#58a1dd">c_str&lt;/span>());
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff636f">public&lt;/span>&lt;span style="color:#ff636f">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">FakePackbuilder&lt;/span>() &lt;span style="color:#ff636f">=&lt;/span> &lt;span style="color:#ff636f">default&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">FakePackbuilder&lt;/span>(&lt;span style="color:#ff636f">const&lt;/span> &lt;span style="color:#58a1dd">FakePackbuilder&lt;/span> &lt;span style="color:#ff636f">&amp;amp;&lt;/span>) &lt;span style="color:#ff636f">=&lt;/span> &lt;span style="color:#ff636f">delete&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">FakePackbuilder&lt;/span> &lt;span style="color:#ff636f">&amp;amp;&lt;/span>&lt;span style="color:#ff636f">operator&lt;/span>&lt;span style="color:#ff636f">=&lt;/span>(&lt;span style="color:#ff636f">const&lt;/span> &lt;span style="color:#58a1dd">FakePackbuilder&lt;/span> &lt;span style="color:#ff636f">&amp;amp;&lt;/span>) &lt;span style="color:#ff636f">=&lt;/span> &lt;span style="color:#ff636f">delete&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">~&lt;/span>&lt;span style="color:#58a1dd">FakePackbuilder&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">if&lt;/span> (&lt;span style="color:#58a1dd">pb&lt;/span> &lt;span style="color:#ff636f">!=&lt;/span> &lt;span style="color:#ff636f">nullptr&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">git_packbuilder_free&lt;/span>(&lt;span style="color:#58a1dd">pb&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">if&lt;/span> (&lt;span style="color:#58a1dd">repo&lt;/span> &lt;span style="color:#ff636f">!=&lt;/span> &lt;span style="color:#ff636f">nullptr&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">git_repository_free&lt;/span>(&lt;span style="color:#58a1dd">repo&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">if&lt;/span> (&lt;span style="color:#58a1dd">db&lt;/span> &lt;span style="color:#ff636f">!=&lt;/span> &lt;span style="color:#ff636f">nullptr&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">git_odb_free&lt;/span>(&lt;span style="color:#58a1dd">db&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">if&lt;/span> (&lt;span style="color:#58a1dd">pksremove&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">for&lt;/span> (&lt;span style="color:#ff636f">auto&lt;/span> &lt;span style="color:#ff636f">&amp;amp;&lt;/span>&lt;span style="color:#58a1dd">p&lt;/span> : &lt;span style="color:#58a1dd">pks&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">removepkidx&lt;/span>(&lt;span style="color:#58a1dd">p&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">std&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">vector&lt;/span>&lt;span style="color:#ff636f">&amp;lt;&lt;/span>&lt;span style="color:#58a1dd">std&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">string&lt;/span>&lt;span style="color:#ff636f">&amp;gt;&lt;/span> &lt;span style="color:#ff636f">&amp;amp;&lt;/span>&lt;span style="color:#58a1dd">Pks&lt;/span>() { &lt;span style="color:#ff636f">return&lt;/span> &lt;span style="color:#58a1dd">pks&lt;/span>; }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">const&lt;/span> &lt;span style="color:#58a1dd">std&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">vector&lt;/span>&lt;span style="color:#ff636f">&amp;lt;&lt;/span>&lt;span style="color:#58a1dd">std&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">string&lt;/span>&lt;span style="color:#ff636f">&amp;gt;&lt;/span> &lt;span style="color:#ff636f">&amp;amp;&lt;/span>&lt;span style="color:#58a1dd">Pks&lt;/span>() &lt;span style="color:#ff636f">const&lt;/span> { &lt;span style="color:#ff636f">return&lt;/span> &lt;span style="color:#58a1dd">pks&lt;/span>; }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#828b96;font-style:italic">/// packbuilder callback
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span> &lt;span style="color:#ff636f">static&lt;/span> &lt;span style="color:#ff636f">int&lt;/span> &lt;span style="color:#58a1dd">PackbuilderCallback&lt;/span>(&lt;span style="color:#ff636f">const&lt;/span> &lt;span style="color:#58a1dd">git_oid&lt;/span> &lt;span style="color:#ff636f">*&lt;/span>&lt;span style="color:#58a1dd">id&lt;/span>, &lt;span style="color:#ff636f">void&lt;/span> &lt;span style="color:#ff636f">*&lt;/span>&lt;span style="color:#58a1dd">playload&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">auto&lt;/span> &lt;span style="color:#58a1dd">fake&lt;/span> &lt;span style="color:#ff636f">=&lt;/span> &lt;span style="color:#ff636f">reinterpret_cast&lt;/span>&lt;span style="color:#ff636f">&amp;lt;&lt;/span>&lt;span style="color:#58a1dd">FakePackbuilder&lt;/span> &lt;span style="color:#ff636f">*&amp;gt;&lt;/span>(&lt;span style="color:#58a1dd">playload&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">git_odb_object&lt;/span> &lt;span style="color:#ff636f">*&lt;/span>&lt;span style="color:#58a1dd">obj&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">if&lt;/span> (&lt;span style="color:#58a1dd">git_odb_read&lt;/span>(&lt;span style="color:#ff636f">&amp;amp;&lt;/span>&lt;span style="color:#58a1dd">obj&lt;/span>, &lt;span style="color:#58a1dd">fake&lt;/span>&lt;span style="color:#ff636f">-&amp;gt;&lt;/span>&lt;span style="color:#58a1dd">db&lt;/span>, &lt;span style="color:#58a1dd">id&lt;/span>) &lt;span style="color:#ff636f">!=&lt;/span> &lt;span style="color:#a6be9d">0&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">return&lt;/span> &lt;span style="color:#ff636f">-&lt;/span>&lt;span style="color:#a6be9d">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">if&lt;/span> (&lt;span style="color:#58a1dd">git_odb_object_type&lt;/span>(&lt;span style="color:#58a1dd">obj&lt;/span>) &lt;span style="color:#ff636f">!=&lt;/span> &lt;span style="color:#58a1dd">GIT_OBJ_BLOB&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">if&lt;/span> (&lt;span style="color:#58a1dd">git_packbuilder_insert&lt;/span>(&lt;span style="color:#58a1dd">fake&lt;/span>&lt;span style="color:#ff636f">-&amp;gt;&lt;/span>&lt;span style="color:#58a1dd">pb&lt;/span>, &lt;span style="color:#58a1dd">id&lt;/span>, &lt;span style="color:#ff636f">nullptr&lt;/span>) &lt;span style="color:#ff636f">!=&lt;/span> &lt;span style="color:#a6be9d">0&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">git_odb_object_free&lt;/span>(&lt;span style="color:#58a1dd">obj&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">return&lt;/span> &lt;span style="color:#a6be9d">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">git_odb_object_free&lt;/span>(&lt;span style="color:#58a1dd">obj&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">return&lt;/span> &lt;span style="color:#a6be9d">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">std&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">string&lt;/span> &lt;span style="color:#58a1dd">Packfilename&lt;/span>(&lt;span style="color:#ff636f">const&lt;/span> &lt;span style="color:#58a1dd">git_oid&lt;/span> &lt;span style="color:#ff636f">*&lt;/span>&lt;span style="color:#58a1dd">id&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">return&lt;/span> &lt;span style="color:#58a1dd">std&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">string&lt;/span>(&lt;span style="color:#a6be9d">&amp;#34;pack-&amp;#34;&lt;/span>).&lt;span style="color:#58a1dd">append&lt;/span>(&lt;span style="color:#58a1dd">git_oid_tostr_s&lt;/span>(&lt;span style="color:#58a1dd">id&lt;/span>)).&lt;span style="color:#58a1dd">append&lt;/span>(&lt;span style="color:#a6be9d">&amp;#34;.pack&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">bool&lt;/span> &lt;span style="color:#58a1dd">Repack&lt;/span>(&lt;span style="color:#ff636f">const&lt;/span> &lt;span style="color:#58a1dd">std&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">string&lt;/span> &lt;span style="color:#ff636f">&amp;amp;&lt;/span>&lt;span style="color:#58a1dd">gvfsdir&lt;/span>, &lt;span style="color:#58a1dd">std&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">string&lt;/span> &lt;span style="color:#ff636f">&amp;amp;&lt;/span>&lt;span style="color:#58a1dd">npk&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">if&lt;/span> (&lt;span style="color:#58a1dd">git_odb_new&lt;/span>(&lt;span style="color:#ff636f">&amp;amp;&lt;/span>&lt;span style="color:#58a1dd">db&lt;/span>) &lt;span style="color:#ff636f">!=&lt;/span> &lt;span style="color:#a6be9d">0&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">fprintf&lt;/span>(&lt;span style="color:#58a1dd">stderr&lt;/span>, &lt;span style="color:#a6be9d">&amp;#34;new odb failed&lt;/span>&lt;span style="color:#a6be9d">\n&lt;/span>&lt;span style="color:#a6be9d">&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">return&lt;/span> &lt;span style="color:#58a1dd">false&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">for&lt;/span> (&lt;span style="color:#ff636f">auto&lt;/span> &lt;span style="color:#ff636f">&amp;amp;&lt;/span>&lt;span style="color:#58a1dd">p&lt;/span> : &lt;span style="color:#58a1dd">pks&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">auto&lt;/span> &lt;span style="color:#58a1dd">idxfile&lt;/span> &lt;span style="color:#ff636f">=&lt;/span> &lt;span style="color:#58a1dd">p&lt;/span>.&lt;span style="color:#58a1dd">substr&lt;/span>(&lt;span style="color:#a6be9d">0&lt;/span>, &lt;span style="color:#58a1dd">p&lt;/span>.&lt;span style="color:#58a1dd">size&lt;/span>() &lt;span style="color:#ff636f">-&lt;/span> &lt;span style="color:#a6be9d">4&lt;/span>).&lt;span style="color:#58a1dd">append&lt;/span>(&lt;span style="color:#a6be9d">&amp;#34;idx&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">git_odb_backend&lt;/span> &lt;span style="color:#ff636f">*&lt;/span>&lt;span style="color:#58a1dd">backend&lt;/span> &lt;span style="color:#ff636f">=&lt;/span> &lt;span style="color:#ff636f">nullptr&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">if&lt;/span> (&lt;span style="color:#58a1dd">git_odb_backend_one_pack&lt;/span>(&lt;span style="color:#ff636f">&amp;amp;&lt;/span>&lt;span style="color:#58a1dd">backend&lt;/span>, &lt;span style="color:#58a1dd">idxfile&lt;/span>.&lt;span style="color:#58a1dd">c_str&lt;/span>()) &lt;span style="color:#ff636f">!=&lt;/span> &lt;span style="color:#a6be9d">0&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">auto&lt;/span> &lt;span style="color:#58a1dd">err&lt;/span> &lt;span style="color:#ff636f">=&lt;/span> &lt;span style="color:#58a1dd">giterr_last&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">fprintf&lt;/span>(&lt;span style="color:#58a1dd">stderr&lt;/span>, &lt;span style="color:#a6be9d">&amp;#34;%s&lt;/span>&lt;span style="color:#a6be9d">\n&lt;/span>&lt;span style="color:#a6be9d">&amp;#34;&lt;/span>, &lt;span style="color:#58a1dd">err&lt;/span>&lt;span style="color:#ff636f">-&amp;gt;&lt;/span>&lt;span style="color:#58a1dd">message&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">return&lt;/span> &lt;span style="color:#58a1dd">false&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#828b96;font-style:italic">/// NOTE backend no public free fun ?????
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span> &lt;span style="color:#ff636f">if&lt;/span> (&lt;span style="color:#58a1dd">git_odb_add_backend&lt;/span>(&lt;span style="color:#58a1dd">db&lt;/span>, &lt;span style="color:#58a1dd">backend&lt;/span>, &lt;span style="color:#a6be9d">2&lt;/span>) &lt;span style="color:#ff636f">!=&lt;/span> &lt;span style="color:#a6be9d">0&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#828b96;font-style:italic">// backend-&amp;gt;free(backend);///
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span> &lt;span style="color:#ff636f">if&lt;/span> (&lt;span style="color:#58a1dd">backend&lt;/span>&lt;span style="color:#ff636f">-&amp;gt;&lt;/span>&lt;span style="color:#58a1dd">free&lt;/span> &lt;span style="color:#ff636f">!=&lt;/span> &lt;span style="color:#ff636f">nullptr&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">backend&lt;/span>&lt;span style="color:#ff636f">-&amp;gt;&lt;/span>&lt;span style="color:#58a1dd">free&lt;/span>(&lt;span style="color:#58a1dd">backend&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">return&lt;/span> &lt;span style="color:#58a1dd">false&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">if&lt;/span> (&lt;span style="color:#58a1dd">git_repository_wrap_odb&lt;/span>(&lt;span style="color:#ff636f">&amp;amp;&lt;/span>&lt;span style="color:#58a1dd">repo&lt;/span>, &lt;span style="color:#58a1dd">db&lt;/span>) &lt;span style="color:#ff636f">!=&lt;/span> &lt;span style="color:#a6be9d">0&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">fprintf&lt;/span>(&lt;span style="color:#58a1dd">stderr&lt;/span>, &lt;span style="color:#a6be9d">&amp;#34;warp odb failed&lt;/span>&lt;span style="color:#a6be9d">\n&lt;/span>&lt;span style="color:#a6be9d">&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">return&lt;/span> &lt;span style="color:#58a1dd">false&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">if&lt;/span> (&lt;span style="color:#58a1dd">git_packbuilder_new&lt;/span>(&lt;span style="color:#ff636f">&amp;amp;&lt;/span>&lt;span style="color:#58a1dd">pb&lt;/span>, &lt;span style="color:#58a1dd">repo&lt;/span>) &lt;span style="color:#ff636f">!=&lt;/span> &lt;span style="color:#a6be9d">0&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">fprintf&lt;/span>(&lt;span style="color:#58a1dd">stderr&lt;/span>, &lt;span style="color:#a6be9d">&amp;#34;new packbuilder failed&lt;/span>&lt;span style="color:#a6be9d">\n&lt;/span>&lt;span style="color:#a6be9d">&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">return&lt;/span> &lt;span style="color:#58a1dd">false&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">if&lt;/span> (&lt;span style="color:#58a1dd">git_odb_foreach&lt;/span>(&lt;span style="color:#58a1dd">db&lt;/span>, &lt;span style="color:#ff636f">&amp;amp;&lt;/span>&lt;span style="color:#58a1dd">FakePackbuilder&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">PackbuilderCallback&lt;/span>, &lt;span style="color:#ff636f">this&lt;/span>) &lt;span style="color:#ff636f">!=&lt;/span> &lt;span style="color:#a6be9d">0&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">return&lt;/span> &lt;span style="color:#58a1dd">false&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">if&lt;/span> (&lt;span style="color:#58a1dd">git_packbuilder_write&lt;/span>(&lt;span style="color:#58a1dd">pb&lt;/span>, &lt;span style="color:#58a1dd">gvfsdir&lt;/span>.&lt;span style="color:#58a1dd">c_str&lt;/span>(), &lt;span style="color:#a6be9d">0&lt;/span>, &lt;span style="color:#ff636f">nullptr&lt;/span>, &lt;span style="color:#ff636f">nullptr&lt;/span>) &lt;span style="color:#ff636f">!=&lt;/span> &lt;span style="color:#a6be9d">0&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">return&lt;/span> &lt;span style="color:#58a1dd">false&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">auto&lt;/span> &lt;span style="color:#58a1dd">id&lt;/span> &lt;span style="color:#ff636f">=&lt;/span> &lt;span style="color:#58a1dd">git_packbuilder_hash&lt;/span>(&lt;span style="color:#58a1dd">pb&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">if&lt;/span> (&lt;span style="color:#58a1dd">id&lt;/span> &lt;span style="color:#ff636f">==&lt;/span> &lt;span style="color:#ff636f">nullptr&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">return&lt;/span> &lt;span style="color:#58a1dd">false&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">pksremove&lt;/span> &lt;span style="color:#ff636f">=&lt;/span> &lt;span style="color:#58a1dd">true&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">name&lt;/span> &lt;span style="color:#ff636f">=&lt;/span> &lt;span style="color:#58a1dd">Packfilename&lt;/span>(&lt;span style="color:#58a1dd">id&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">npk&lt;/span>.&lt;span style="color:#58a1dd">assign&lt;/span>(&lt;span style="color:#58a1dd">gvfsdir&lt;/span>).&lt;span style="color:#58a1dd">append&lt;/span>(&lt;span style="color:#a6be9d">&amp;#34;/&amp;#34;&lt;/span>).&lt;span style="color:#58a1dd">append&lt;/span>(&lt;span style="color:#58a1dd">name&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">return&lt;/span> &lt;span style="color:#58a1dd">true&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>};
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>上述 FakePackBuilder 还支持删除旧的 pack，新的 pack 产生，旧的几个 pack 文件就可以被删除了。&lt;/p>
&lt;p>在 git-gvfs 稳定后，或许会提供一个开源跨平台版本。&lt;/p>
&lt;h2 id="gvfs-应用分析">GVFS 应用分析&lt;/h2>
&lt;p>GVFS 有哪些应用场景？&lt;/p>
&lt;p>实际上还是很多的。比如，我曾经帮助同事将某客户的存储库由 svn 迁移到 git，迁移的过程很长，最后使用 svn-fast-export 实现，转换后，存储库的体积达到 80 GB。就目前码云的线上限制而言，这种存储库都无法上传上去，而私有化，这种存储库同样会给使用者带来巨大的麻烦。如果使用 GVFS，这就相当于只下载目录结构，浅表的 commit，然后需要时才下载所需的文件，好处显而易见。随着码云业务的发展，这种拥有历史悠久的存储库的客户只会越来越多，GVFS 或许必不可少了。&lt;/p>
&lt;h2 id="相关信息">相关信息&lt;/h2>
&lt;p>在微软的 GVFS 推出后，Google 开发者也在修改 Git 支持部分克隆&lt;sup>7&lt;/sup>，用来改进巨型存储库的访问体验。代码在 Github 上 &lt;sup>8&lt;/sup> 目前还处于开发过程中。部分克隆相对于 GVFS 最大的不足可能是 FUFS。而 GVFS 客户端仅支持 Windows 10 14393 也正是由于这一点，GVFS 正因这一点才被叫做 GVFS (Git Virtual Filesystem)。FUFS 能够在目录中呈现未下载的文件，在文件需要读写时，由驱动触发下载，这就是其优势。&lt;/p>
&lt;h2 id="最后">最后&lt;/h2>
&lt;p>回过头来一想，在支持大存储库的改造上，git 越来越不像一个分布式版本控制系统，除了提交行为还是比较纯正。软件的发展正是如此，功能的整合使得界限变得不那么清晰。&lt;/p>
&lt;h2 id="链接">链接&lt;/h2>
&lt;ol>
&lt;li>&lt;a href="https://gcc.gnu.org/ml/gcc/2015-08/msg00140.html">Moving to git&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://llvm.org/docs/Proposals/GitHubMove.html">Moving LLVM Projects to GitHub&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/fstudio/clangbuilder/blob/63f45b5b99d6b2f8473356dfbe3454238f6dee2e/bin/LLVMRemoteFetch.ps1#L33">Checkout LLVM use &amp;ndash;depth&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://forcemz.net/git/2017/04/16/Moses/">Git LFS 服务器实现杂谈&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.visualstudio.com/zh-hans/learn/git-at-scale/">Git at scale&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.visualstudio.com/zh-hans/learn/gvfs-design-history/">GVFS Design History&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://public-inbox.org/git/20170915134343.3814dc38@twelve2.svl.corp.google.com/T/#u">Make GVFS available for Linux and macOS&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/jonathantanmy/git/tree/partialclone2">jonathantanmy/git&lt;/a>&lt;/li>
&lt;/ol>
- https://forcemz.net/posts/2017/2017-12-06-massive-repositories-and-git/ - Copyright (c) 2009-2024 J23</description></item><item><title>基于 Asio 的服务器平滑重启方案</title><link>https://forcemz.net/posts/2017/2017-11-27-asio-graceful-restart/</link><pubDate>Mon, 27 Nov 2017 10:00:00 +0800</pubDate><guid>https://forcemz.net/posts/2017/2017-11-27-asio-graceful-restart/</guid><description>江二十三的思考 https://forcemz.net/posts/2017/2017-11-27-asio-graceful-restart/ -&lt;h2 id="前言">前言&lt;/h2>
&lt;p>与客户端程序不同的是，服务端程序要尽可能的长时间运行，故障时能够自动恢复，并且更新时不能影响服务正在处理的请求。这就产生了平滑重启的功能需求。实际上，网络上比较流行的 HTTP 服务器 Nginx 就支持平滑重启。而 apache httpd 同样支持。码云分布式以后，很多功能被分解成一个个的服务，比如存储机器上的 git-srv, git-diamond 等等，为了平台的稳定运行，也需要支持平滑重启。&lt;/p>
&lt;h2 id="平滑重启的原理">平滑重启的原理&lt;/h2>
&lt;p>平滑重启的原理实际上比较简单，即，当接收到平滑重启后，旧的服务关闭监听套接字，处理完所有请求后便退出。而在旧的服务关闭监听套接字后，启动一个新的服务监听套接字，处理新的请求。&lt;/p>
&lt;p>在 POSIX 系统中，我们可以使用 &lt;strong>Signal&lt;/strong> 通知服务平滑重启，在 Windows 中，可以使用 &lt;strong>Windows Event Object&lt;/strong> 通知服务平滑重启。&lt;/p>
&lt;p>平滑重启并没有什么技术难点，但实现的过程中却需要避开一些陷阱。&lt;/p>
&lt;h2 id="asio-平滑重启">Asio 平滑重启&lt;/h2>
&lt;p>我开发的网络服务大多基于 &lt;code>Boost.Asio&lt;/code> 实现，线上的服务器也大多运行 Ubuntu 14.04 或者 Ubuntu 16.04。最初的时候，码云的服务器并没有支持平滑重启，这并不是我没有尝试实现平滑重启功能，当时为了加快部署，支持使用 &lt;code>apt-get&lt;/code> 安装了 &lt;code>Boost.Asio&lt;/code>，而不是源码编译 &lt;code>Boost.Asio&lt;/code>。经由 apt-get 安装的库往往比最新版本老很多（可能是 5~6 个版本），也容易出现一些特定的 bug。于是我也没将那些服务有支持平滑重启。后来在我将所有的 Boost.Asio 替换成独立的 &lt;code>Asio&lt;/code> 就支持平滑重启了。&lt;/p>
&lt;p>下面是一个例子：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#1d2432;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c++" data-lang="c++">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">///
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">#ifndef _NET_SERVE_HPP
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">#define _NET_SERVE_HPP
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">#include&lt;/span> &lt;span style="color:#828b96;font-style:italic">&amp;lt;mutex&amp;gt;&lt;/span>&lt;span style="color:#828b96;font-style:italic">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">#include&lt;/span> &lt;span style="color:#828b96;font-style:italic">&amp;lt;thread&amp;gt;&lt;/span>&lt;span style="color:#828b96;font-style:italic"> &lt;/span>&lt;span style="color:#828b96;font-style:italic">///std::thread::hardware_concurrency()
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span>&lt;span style="color:#828b96;font-style:italic">#include&lt;/span> &lt;span style="color:#828b96;font-style:italic">&amp;lt;utility&amp;gt;&lt;/span>&lt;span style="color:#828b96;font-style:italic">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">#ifndef _WIN32
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">#include&lt;/span> &lt;span style="color:#828b96;font-style:italic">&amp;lt;unistd.h&amp;gt;&lt;/span>&lt;span style="color:#828b96;font-style:italic">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">#include&lt;/span> &lt;span style="color:#828b96;font-style:italic">&amp;lt;fcntl.h&amp;gt;&lt;/span>&lt;span style="color:#828b96;font-style:italic">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">#endif
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">#include&lt;/span> &lt;span style="color:#828b96;font-style:italic">&amp;lt;asio.hpp&amp;gt;&lt;/span>&lt;span style="color:#828b96;font-style:italic">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff636f">namespace&lt;/span> &lt;span style="color:#58a1dd">net&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff636f">class&lt;/span> &lt;span style="color:#58a1dd">Context&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff636f">public&lt;/span>&lt;span style="color:#ff636f">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">Context&lt;/span>(&lt;span style="color:#ff636f">const&lt;/span> &lt;span style="color:#58a1dd">Context&lt;/span> &lt;span style="color:#ff636f">&amp;amp;&lt;/span>) &lt;span style="color:#ff636f">=&lt;/span> &lt;span style="color:#ff636f">delete&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">Context&lt;/span> &lt;span style="color:#ff636f">&amp;amp;&lt;/span>&lt;span style="color:#ff636f">operator&lt;/span>&lt;span style="color:#ff636f">=&lt;/span>(&lt;span style="color:#ff636f">const&lt;/span> &lt;span style="color:#58a1dd">Context&lt;/span> &lt;span style="color:#ff636f">&amp;amp;&lt;/span>) &lt;span style="color:#ff636f">=&lt;/span> &lt;span style="color:#ff636f">delete&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">explicit&lt;/span> &lt;span style="color:#58a1dd">Context&lt;/span>(&lt;span style="color:#58a1dd">std&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">size_t&lt;/span> &lt;span style="color:#58a1dd">iocsize&lt;/span>) &lt;span style="color:#ff636f">:&lt;/span> &lt;span style="color:#58a1dd">next_&lt;/span>(&lt;span style="color:#a6be9d">0&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">if&lt;/span> (&lt;span style="color:#58a1dd">iocsize&lt;/span> &lt;span style="color:#ff636f">==&lt;/span> &lt;span style="color:#a6be9d">0&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">throw&lt;/span> &lt;span style="color:#58a1dd">std&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">runtime_error&lt;/span>(&lt;span style="color:#a6be9d">&amp;#34;io_context size eqaul 0&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">for&lt;/span> (&lt;span style="color:#58a1dd">std&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">size_t&lt;/span> &lt;span style="color:#58a1dd">i&lt;/span> &lt;span style="color:#ff636f">=&lt;/span> &lt;span style="color:#a6be9d">0&lt;/span>; &lt;span style="color:#58a1dd">i&lt;/span> &lt;span style="color:#ff636f">&amp;lt;&lt;/span> &lt;span style="color:#58a1dd">iocsize&lt;/span>; &lt;span style="color:#58a1dd">i&lt;/span>&lt;span style="color:#ff636f">++&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">io_context_t&lt;/span> &lt;span style="color:#58a1dd">io_context&lt;/span>(&lt;span style="color:#ff636f">new&lt;/span> &lt;span style="color:#58a1dd">asio&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">io_context&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">work_t&lt;/span> &lt;span style="color:#58a1dd">work&lt;/span>(&lt;span style="color:#ff636f">new&lt;/span> &lt;span style="color:#58a1dd">io_work_t&lt;/span>(&lt;span style="color:#58a1dd">asio&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">make_work_guard&lt;/span>(&lt;span style="color:#ff636f">*&lt;/span>&lt;span style="color:#58a1dd">io_context&lt;/span>)));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">io_contexts_&lt;/span>.&lt;span style="color:#58a1dd">push_back&lt;/span>(&lt;span style="color:#58a1dd">io_context&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">works_&lt;/span>.&lt;span style="color:#58a1dd">push_back&lt;/span>(&lt;span style="color:#58a1dd">work&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">void&lt;/span> &lt;span style="color:#58a1dd">Execute&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">std&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">vector&lt;/span>&lt;span style="color:#ff636f">&amp;lt;&lt;/span>&lt;span style="color:#58a1dd">std&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">shared_ptr&lt;/span>&lt;span style="color:#ff636f">&amp;lt;&lt;/span>&lt;span style="color:#58a1dd">std&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#ff636f">thread&lt;/span>&lt;span style="color:#ff636f">&amp;gt;&amp;gt;&lt;/span> &lt;span style="color:#58a1dd">threads&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">for&lt;/span> (&lt;span style="color:#ff636f">auto&lt;/span> &lt;span style="color:#ff636f">&amp;amp;&lt;/span>&lt;span style="color:#58a1dd">ctx&lt;/span> : &lt;span style="color:#58a1dd">io_contexts_&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">std&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">shared_ptr&lt;/span>&lt;span style="color:#ff636f">&amp;lt;&lt;/span>&lt;span style="color:#58a1dd">std&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#ff636f">thread&lt;/span>&lt;span style="color:#ff636f">&amp;gt;&lt;/span> &lt;span style="color:#ff636f">thread&lt;/span>(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">new&lt;/span> &lt;span style="color:#58a1dd">std&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#ff636f">thread&lt;/span>([&lt;span style="color:#58a1dd">ctx&lt;/span>]() { &lt;span style="color:#58a1dd">ctx&lt;/span>&lt;span style="color:#ff636f">-&amp;gt;&lt;/span>&lt;span style="color:#58a1dd">run&lt;/span>(); }));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">threads&lt;/span>.&lt;span style="color:#58a1dd">push_back&lt;/span>(&lt;span style="color:#ff636f">thread&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">for&lt;/span> (&lt;span style="color:#ff636f">auto&lt;/span> &lt;span style="color:#ff636f">&amp;amp;&lt;/span>&lt;span style="color:#58a1dd">t&lt;/span> : &lt;span style="color:#58a1dd">threads&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">t&lt;/span>&lt;span style="color:#ff636f">-&amp;gt;&lt;/span>&lt;span style="color:#58a1dd">join&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">void&lt;/span> &lt;span style="color:#58a1dd">Exit&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">for&lt;/span> (&lt;span style="color:#ff636f">auto&lt;/span> &lt;span style="color:#ff636f">&amp;amp;&lt;/span>&lt;span style="color:#58a1dd">ioc&lt;/span> : &lt;span style="color:#58a1dd">io_contexts_&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">ioc&lt;/span>&lt;span style="color:#ff636f">-&amp;gt;&lt;/span>&lt;span style="color:#58a1dd">stop&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">void&lt;/span> &lt;span style="color:#58a1dd">Clear&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#828b96;font-style:italic">//
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span> &lt;span style="color:#58a1dd">works_&lt;/span>.&lt;span style="color:#58a1dd">clear&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">asio&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">io_context&lt;/span> &lt;span style="color:#ff636f">&amp;amp;&lt;/span>&lt;span style="color:#58a1dd">Next&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">auto&lt;/span> &lt;span style="color:#ff636f">&amp;amp;&lt;/span>&lt;span style="color:#58a1dd">ioc&lt;/span> &lt;span style="color:#ff636f">=&lt;/span> &lt;span style="color:#ff636f">*&lt;/span>&lt;span style="color:#58a1dd">io_contexts_&lt;/span>[&lt;span style="color:#58a1dd">next_&lt;/span>];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">++&lt;/span>&lt;span style="color:#58a1dd">next_&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">if&lt;/span> (&lt;span style="color:#58a1dd">next_&lt;/span> &lt;span style="color:#ff636f">==&lt;/span> &lt;span style="color:#58a1dd">io_contexts_&lt;/span>.&lt;span style="color:#58a1dd">size&lt;/span>()) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">next_&lt;/span> &lt;span style="color:#ff636f">=&lt;/span> &lt;span style="color:#a6be9d">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">return&lt;/span> &lt;span style="color:#58a1dd">ioc&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff636f">private&lt;/span>&lt;span style="color:#ff636f">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">using&lt;/span> &lt;span style="color:#58a1dd">io_context_t&lt;/span> &lt;span style="color:#ff636f">=&lt;/span> &lt;span style="color:#58a1dd">std&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">shared_ptr&lt;/span>&lt;span style="color:#ff636f">&amp;lt;&lt;/span>&lt;span style="color:#58a1dd">asio&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">io_context&lt;/span>&lt;span style="color:#ff636f">&amp;gt;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">using&lt;/span> &lt;span style="color:#58a1dd">io_work_t&lt;/span> &lt;span style="color:#ff636f">=&lt;/span> &lt;span style="color:#58a1dd">asio&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">executor_work_guard&lt;/span>&lt;span style="color:#ff636f">&amp;lt;&lt;/span>&lt;span style="color:#58a1dd">asio&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">io_context&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">executor_type&lt;/span>&lt;span style="color:#ff636f">&amp;gt;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">using&lt;/span> &lt;span style="color:#58a1dd">work_t&lt;/span> &lt;span style="color:#ff636f">=&lt;/span> &lt;span style="color:#58a1dd">std&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">shared_ptr&lt;/span>&lt;span style="color:#ff636f">&amp;lt;&lt;/span>&lt;span style="color:#58a1dd">io_work_t&lt;/span>&lt;span style="color:#ff636f">&amp;gt;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">std&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">vector&lt;/span>&lt;span style="color:#ff636f">&amp;lt;&lt;/span>&lt;span style="color:#58a1dd">io_context_t&lt;/span>&lt;span style="color:#ff636f">&amp;gt;&lt;/span> &lt;span style="color:#58a1dd">io_contexts_&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">std&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">vector&lt;/span>&lt;span style="color:#ff636f">&amp;lt;&lt;/span>&lt;span style="color:#58a1dd">work_t&lt;/span>&lt;span style="color:#ff636f">&amp;gt;&lt;/span> &lt;span style="color:#58a1dd">works_&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">std&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">size_t&lt;/span> &lt;span style="color:#58a1dd">next_&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff636f">template&lt;/span> &lt;span style="color:#ff636f">&amp;lt;&lt;/span>&lt;span style="color:#ff636f">typename&lt;/span> &lt;span style="color:#58a1dd">ServeVars&lt;/span>, &lt;span style="color:#ff636f">typename&lt;/span> &lt;span style="color:#58a1dd">ServeSession&lt;/span>&lt;span style="color:#ff636f">&amp;gt;&lt;/span> &lt;span style="color:#ff636f">class&lt;/span> &lt;span style="color:#58a1dd">Serve&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff636f">public&lt;/span>&lt;span style="color:#ff636f">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">Serve&lt;/span>(&lt;span style="color:#58a1dd">std&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">size_t&lt;/span> &lt;span style="color:#58a1dd">n&lt;/span>) &lt;span style="color:#ff636f">:&lt;/span> &lt;span style="color:#58a1dd">context_&lt;/span>(&lt;span style="color:#58a1dd">n&lt;/span>), &lt;span style="color:#58a1dd">acceptor_&lt;/span>(&lt;span style="color:#58a1dd">context_&lt;/span>.&lt;span style="color:#58a1dd">Next&lt;/span>()) {}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">void&lt;/span> &lt;span style="color:#58a1dd">SetVars&lt;/span>(&lt;span style="color:#58a1dd">ServeVars&lt;/span> &lt;span style="color:#ff636f">&amp;amp;&amp;amp;&lt;/span>&lt;span style="color:#58a1dd">vars&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#828b96;font-style:italic">///
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span> &lt;span style="color:#58a1dd">vars_&lt;/span> &lt;span style="color:#ff636f">=&lt;/span> &lt;span style="color:#58a1dd">std&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">move&lt;/span>(&lt;span style="color:#58a1dd">vars&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">void&lt;/span> &lt;span style="color:#58a1dd">Acceptorclose&lt;/span>(&lt;span style="color:#58a1dd">std&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">error_code&lt;/span> &lt;span style="color:#ff636f">&amp;amp;&lt;/span>&lt;span style="color:#58a1dd">ec&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#828b96;font-style:italic">/// close acceptor
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span> &lt;span style="color:#58a1dd">acceptor_&lt;/span>.&lt;span style="color:#58a1dd">close&lt;/span>(&lt;span style="color:#58a1dd">ec&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">void&lt;/span> &lt;span style="color:#58a1dd">DelayExit&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">std&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">error_code&lt;/span> &lt;span style="color:#58a1dd">ec&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">acceptor_&lt;/span>.&lt;span style="color:#58a1dd">close&lt;/span>(&lt;span style="color:#58a1dd">ec&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">context_&lt;/span>.&lt;span style="color:#58a1dd">Clear&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">void&lt;/span> &lt;span style="color:#58a1dd">Exit&lt;/span>() { &lt;span style="color:#58a1dd">context_&lt;/span>.&lt;span style="color:#58a1dd">Exit&lt;/span>(); }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">int&lt;/span> &lt;span style="color:#58a1dd">ListenAndServe&lt;/span>(&lt;span style="color:#ff636f">const&lt;/span> &lt;span style="color:#58a1dd">std&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">string&lt;/span> &lt;span style="color:#ff636f">&amp;amp;&lt;/span>&lt;span style="color:#58a1dd">addr&lt;/span>, &lt;span style="color:#ff636f">int&lt;/span> &lt;span style="color:#58a1dd">port&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">std&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">error_code&lt;/span> &lt;span style="color:#58a1dd">ec&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">asio&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">ip&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">tcp&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">endpoint&lt;/span> &lt;span style="color:#58a1dd">ep&lt;/span>(&lt;span style="color:#58a1dd">asio&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">ip&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">make_address&lt;/span>(&lt;span style="color:#58a1dd">addr&lt;/span>, &lt;span style="color:#58a1dd">ec&lt;/span>),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">static_cast&lt;/span>&lt;span style="color:#ff636f">&amp;lt;&lt;/span>&lt;span style="color:#ff636f">unsigned&lt;/span> &lt;span style="color:#ff636f">int&lt;/span>&lt;span style="color:#ff636f">&amp;gt;&lt;/span>(&lt;span style="color:#58a1dd">port&lt;/span>));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">if&lt;/span> (&lt;span style="color:#58a1dd">ec&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">fprintf&lt;/span>(&lt;span style="color:#58a1dd">stderr&lt;/span>, &lt;span style="color:#a6be9d">&amp;#34;make_address: %s&lt;/span>&lt;span style="color:#a6be9d">\n&lt;/span>&lt;span style="color:#a6be9d">&amp;#34;&lt;/span>, &lt;span style="color:#58a1dd">ec&lt;/span>.&lt;span style="color:#58a1dd">message&lt;/span>().&lt;span style="color:#58a1dd">c_str&lt;/span>());
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">return&lt;/span> &lt;span style="color:#ff636f">-&lt;/span>&lt;span style="color:#a6be9d">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">acceptor_&lt;/span>.&lt;span style="color:#58a1dd">open&lt;/span>(&lt;span style="color:#58a1dd">ep&lt;/span>.&lt;span style="color:#58a1dd">protocol&lt;/span>());
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">acceptor_&lt;/span>.&lt;span style="color:#58a1dd">set_option&lt;/span>(&lt;span style="color:#58a1dd">asio&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">ip&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">tcp&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">acceptor&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">reuse_address&lt;/span>(&lt;span style="color:#58a1dd">true&lt;/span>));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">/*
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">When the server needs to be supported for graceful restart, the old sockets
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">need to be closed, and when invoke the fork and exec* syscall, the file
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">descriptor is inherited, so the FD_CLOEXEC flag should be set so that the
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">listener socket can be closed in time.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">*/&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">#ifndef _WIN32
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span> &lt;span style="color:#ff636f">int&lt;/span> &lt;span style="color:#58a1dd">oflag&lt;/span> &lt;span style="color:#ff636f">=&lt;/span> &lt;span style="color:#58a1dd">fcntl&lt;/span>(&lt;span style="color:#58a1dd">acceptor_&lt;/span>.&lt;span style="color:#58a1dd">native_handle&lt;/span>(), &lt;span style="color:#58a1dd">F_GETFD&lt;/span>, &lt;span style="color:#a6be9d">0&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">if&lt;/span> (&lt;span style="color:#58a1dd">oflag&lt;/span> &lt;span style="color:#ff636f">&amp;gt;=&lt;/span> &lt;span style="color:#a6be9d">0&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">fcntl&lt;/span>(&lt;span style="color:#58a1dd">acceptor_&lt;/span>.&lt;span style="color:#58a1dd">native_handle&lt;/span>(), &lt;span style="color:#58a1dd">F_SETFD&lt;/span>, &lt;span style="color:#58a1dd">oflag&lt;/span> &lt;span style="color:#ff636f">|&lt;/span> &lt;span style="color:#58a1dd">FD_CLOEXEC&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">#endif
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span> &lt;span style="color:#ff636f">for&lt;/span> (&lt;span style="color:#ff636f">int&lt;/span> &lt;span style="color:#58a1dd">i&lt;/span> &lt;span style="color:#ff636f">=&lt;/span> &lt;span style="color:#a6be9d">0&lt;/span>; &lt;span style="color:#58a1dd">i&lt;/span> &lt;span style="color:#ff636f">&amp;lt;&lt;/span> &lt;span style="color:#a6be9d">10&lt;/span>; &lt;span style="color:#58a1dd">i&lt;/span>&lt;span style="color:#ff636f">++&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">acceptor_&lt;/span>.&lt;span style="color:#58a1dd">bind&lt;/span>(&lt;span style="color:#58a1dd">ep&lt;/span>, &lt;span style="color:#58a1dd">ec&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">if&lt;/span> (&lt;span style="color:#ff636f">!&lt;/span>&lt;span style="color:#58a1dd">ec&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">break&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">fprintf&lt;/span>(&lt;span style="color:#58a1dd">stderr&lt;/span>, &lt;span style="color:#a6be9d">&amp;#34;bind: %s:%d %s&lt;/span>&lt;span style="color:#a6be9d">\n&lt;/span>&lt;span style="color:#a6be9d">&amp;#34;&lt;/span>, &lt;span style="color:#58a1dd">addr&lt;/span>.&lt;span style="color:#58a1dd">c_str&lt;/span>(), &lt;span style="color:#58a1dd">port&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">ec&lt;/span>.&lt;span style="color:#58a1dd">message&lt;/span>().&lt;span style="color:#58a1dd">c_str&lt;/span>());
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">if&lt;/span> (&lt;span style="color:#58a1dd">ec&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">fprintf&lt;/span>(&lt;span style="color:#58a1dd">stderr&lt;/span>, &lt;span style="color:#a6be9d">&amp;#34;bind address failed, exit&lt;/span>&lt;span style="color:#a6be9d">\n&lt;/span>&lt;span style="color:#a6be9d">&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">return&lt;/span> &lt;span style="color:#a6be9d">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">acceptor_&lt;/span>.&lt;span style="color:#58a1dd">listen&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">Accept&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">context_&lt;/span>.&lt;span style="color:#58a1dd">Execute&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">return&lt;/span> &lt;span style="color:#a6be9d">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff636f">private&lt;/span>&lt;span style="color:#ff636f">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">void&lt;/span> &lt;span style="color:#58a1dd">Accept&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">acceptor_&lt;/span>.&lt;span style="color:#58a1dd">async_accept&lt;/span>(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">context_&lt;/span>.&lt;span style="color:#58a1dd">Next&lt;/span>(),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> [&lt;span style="color:#ff636f">this&lt;/span>](&lt;span style="color:#58a1dd">std&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">error_code&lt;/span> &lt;span style="color:#58a1dd">ec&lt;/span>, &lt;span style="color:#58a1dd">asio&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">ip&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">tcp&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">socket&lt;/span> &lt;span style="color:#58a1dd">socket&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">if&lt;/span> (&lt;span style="color:#58a1dd">ec&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">if&lt;/span> (&lt;span style="color:#58a1dd">socket&lt;/span>.&lt;span style="color:#58a1dd">is_open&lt;/span>()) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">return&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">std&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">make_shared&lt;/span>&lt;span style="color:#ff636f">&amp;lt;&lt;/span>&lt;span style="color:#58a1dd">ServeSession&lt;/span>&lt;span style="color:#ff636f">&amp;gt;&lt;/span>(&lt;span style="color:#58a1dd">std&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">move&lt;/span>(&lt;span style="color:#58a1dd">socket&lt;/span>), &lt;span style="color:#58a1dd">vars_&lt;/span>)&lt;span style="color:#ff636f">-&amp;gt;&lt;/span>&lt;span style="color:#58a1dd">run&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">Accept&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> });
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">Context&lt;/span> &lt;span style="color:#58a1dd">context_&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">asio&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">ip&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">tcp&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">acceptor&lt;/span> &lt;span style="color:#58a1dd">acceptor_&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">ServeVars&lt;/span> &lt;span style="color:#58a1dd">vars_&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}; &lt;span style="color:#828b96;font-style:italic">// namespace net
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">#endif
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>实际上就是在收到信号调用 &lt;code>DelayExit&lt;/code> ，而在 &lt;code>DelayExit&lt;/code> 中，实际上是先关闭 acceptor 然后清理 &lt;code>executor_work_guard&lt;/code> 这样一来处理完 io_context 的任务后，线程就会退出，当所有线程退出后，主线程也就退出了。&lt;/p>
&lt;p>完整的例子在：&lt;a href="https://gitee.com/oscstudio/utilcode/tree/master/example/asio_server">oscstudio/utilcode@example/asio_server&lt;/a>&lt;/p>
&lt;p>这里值得注意的是，在 Unix 的世界中，子进程会继承父进程的文件描述符，为了避免 acceptor 被继承，需要设置监听套接字的文件描述符为 &lt;strong>FD_CLOEXEC&lt;/strong>。如果在平滑重启前，启动了一个子进程并继承了监听套接字，就可能会导致平滑重启失败，新服务进程无法绑定监听套接字。&lt;/p>
&lt;h2 id="最后">最后&lt;/h2>
&lt;p>Utilcode 有个完整的 Linux 方案，支持平滑重启，故障自动重启，等等功能。有兴趣的可以阅读源码。&lt;/p>
- https://forcemz.net/posts/2017/2017-11-27-asio-graceful-restart/ - Copyright (c) 2009-2024 J23</description></item><item><title>Git 原生钩子的深度优化</title><link>https://forcemz.net/posts/2017/2017-11-22-git-native-hook-depth-optimization/</link><pubDate>Wed, 22 Nov 2017 10:00:00 +0800</pubDate><guid>https://forcemz.net/posts/2017/2017-11-22-git-native-hook-depth-optimization/</guid><description>江二十三的思考 https://forcemz.net/posts/2017/2017-11-22-git-native-hook-depth-optimization/ -&lt;h2 id="前言">前言&lt;/h2>
&lt;p>Git 是最流行的版本控制工具，和大多数版本控制工具一样，Git 也拥有钩子特性，用户可以利用钩子实现一些附加功能，在 《Pro Git v2》 中，对钩子类型，消息格式等有详细介绍： &lt;a href="https://git-scm.com/book/en/v2/Customizing-Git-Git-Hooks">8.3 Customizing Git - Git Hooks&lt;/a>。&lt;/p>
&lt;p>代码托管平台也会使用钩子，一般是使用 &lt;strong>Server-Side Hooks&lt;/strong>。包括 &lt;strong>pre-receive&lt;/strong> &lt;strong>update&lt;/strong> &lt;strong>post-receive&lt;/strong>。&lt;/p>
&lt;p>为什么要使用钩子？我们得先思考目前的 git 代码托管平台架构大多数是无状态的，也就是说 Web 是 Web, git 是 git。究其原因，目前服务器上的 git 传输实现基本上还是使用 git 命令做 smart 传输，这种传输本质上是一对命令做输入输出交换，类似 inetd。这种协议的缺陷在于：在子进程中传输的数据是隔离的，不透明的，不可控的。启动 Git 子命令后，权限控制，大文件检测等操作已不是 SSH 或者 HTTP 服务器能控制的了。当然，劫持网络数据进行深度分析是可以的，但那相当于重新实现一套 git。并且，这种性能上的损失也是平台不可接受的。
代码托管平台绝不能裹足不前，对于不适合的数据推送当然要拒绝他！幸运的是，我们还可以使用 hook 来阻挡不合适的数据推送了。&lt;/p>
&lt;h2 id="gitlab-的-update-钩子">Gitlab 的 Update 钩子&lt;/h2>
&lt;p>码云最初利用 Gitlab 搭建起来，而钩子的使用策略是 Gitlab 早先的策略，即使用 &lt;strong>Update&lt;/strong> 钩子。Sidekiq, 以及后来推出的分支保护功能以及大文件检测，都是利用 &lt;strong>Update&lt;/strong> 钩子实现的。这块代码是在 Gitlab-Shell 中。保护分支实际上是在运行 Update 钩子时，请求 Gitlab 判断引用是否被允许修改。而大文件检测则是使用 &lt;strong>Commit-Between&lt;/strong> 进行一个回溯 &lt;strong>diff&lt;/strong>，深度最大为 &lt;em>20&lt;/em>。Sidekiq 则是插入 redis 队列实现的。&lt;/p>
&lt;p>我们知道推送代码时需要在远程服务器中运行 &lt;code>git-receive-pack&lt;/code> 命令，&lt;code>recieve-pack&lt;/code> 会在整个生命周期运行三种钩子，也就是前面所说的 &lt;strong>Server-Side Hooks&lt;/strong>（这里当然有个前提，钩子不存在就不会被调用），&lt;strong>Update&lt;/strong> 是第二个被调用的钩子。receive-pack 将使用如下命令执行钩子：&lt;/p>
&lt;pre tabindex="0">&lt;code>$GIT_DIR/hooks/update refname oldrev newrev
&lt;/code>&lt;/pre>&lt;p>每更新一个引用执行一次，当钩子返回值不为零时，当前引用不会被更新。&lt;/p>
&lt;p>新建分支时，oldrev 值为 &lt;code>0000000000000000000000000000000000000000&lt;/code>。&lt;br>
删除分支时，newrev 值为 &lt;code>0000000000000000000000000000000000000000&lt;/code>。&lt;/p>
&lt;p>既然每一个引用都会执行一次，那么我们试想一下，一次性推送多个分支，并且分支都是新建分支，那么可以预见，无论是 &lt;strong>Commit-Between Diff&lt;/strong> 还是保护分支还是任务队列的消耗时间都是成倍增加的。事实上也是如此，我们在测试服务器上推送大存储库，多分支，多 commit 时就发现了这个问题。&lt;/p>
&lt;p>由于 &lt;strong>Commit-Between Diff&lt;/strong> 深度的限制，一个精心构造的大文件是能够被推送到服务器而不被拒绝。&lt;/p>
&lt;h2 id="完全检测的-git-原生钩子">完全检测的 Git 原生钩子&lt;/h2>
&lt;p>既然 Update 钩子并不好，我们就得使用替代方案。&lt;strong>pre-receive&lt;/strong> 是第一个被 receive-pack 调用的钩子，没有额外的命令行参数，无论更新多少引用都只会调用一次，引用列表会被 receive-pack 写入到 pre-receive 钩子进程的标准输入。格式原语如下：&lt;/p>
&lt;pre tabindex="0">&lt;code>refname SP oldrev SP newrev LF
refnameN SP oldrev SP newrev LF
&lt;/code>&lt;/pre>&lt;p>这个时候，我们可以将保护分支功能移入到此钩子，使用此钩子实现保护分支与 update 不一致的是同时推送多个引用，一旦有一个分支被拒绝，所有的分支都会被拒绝，而 update 钩子并不是如此。不过带来的好处是显而易见的，在推送镜像存储库，多分支项目时，可以避免多次发起对 Gitlab 的网络请求。&lt;/p>
&lt;p>&lt;strong>post-receive&lt;/strong> 是最后被调用的钩子，格式与 &lt;strong>pre-receive&lt;/strong> 完全一致，我们不能使用 pre-receive 更新 Sidekiq ，这是由于只有再在调用 update 钩子后，引用才会被更新，若 Sidekiq 在 pre-receive 钩子执行期间就响应可能会导致错误，因此在 post-receive 中更新 Sidekiq（redis）才是最安全的，在 post-receive 中执行 redis 命令还可以利用 KeepAlive 减少对 redis 的请求次数，从而优化服务器内部的网络。&lt;/p>
&lt;p>update 钩子最后的功能只剩大文件检测了。如果将此功能移除，就完全不再需要 update 钩子。&lt;/p>
&lt;p>在前面的博客：&lt;a href="http://forcemz.net/git/2016/07/09/GitStorage/">Git 存储格式与运用&lt;/a>，我正是直接解析 pack/idx 文件格式来实现大文件检测。&lt;/p>
&lt;p>一开始，我还使用 zip 解压松散文件读取文件大小，然后在 pack 文件中使用 libgit2 解析原始文件大小。实际上这种事情意义并不大，远程服务器上的存储库是一个 &lt;em>bare&lt;/em> 存储库，所有的文件都是被压缩的，我们在统计存储库大小的时候也只是统计裸仓库的 &lt;em>objects&lt;/em> 目录占用空间大小，因此，我们不需要检测原始文件大小，这样一来，钩子能够避免检测原始大小带来的性能损失。（实际上检测原始大小有个策略，只有超过一定值的对象才会检测原始大小用来判断文件是否超大。）&lt;/p>
&lt;p>原生钩子使用 C++ 开发，经测试，效率远比 Update 钩子效率高，实际上 &lt;strong>Update&lt;/strong> 钩子在解析 commit 的过程中就避免不了性能损失了。&lt;/p>
&lt;p>这个时候的原生钩子还有一些不足，比如一些大的 pack 文件需要频繁检测，因此，我还实现了一个缓存机制，将 pack 检测到的数据写入到缓存文件中，避免频繁检测对应的 pack。这一点，我们需要知道，pack 文件一旦内容改变，名字也会改变，名字格式为 &lt;code>pack-$sha1.pack&lt;/code>。&lt;/p>
&lt;h2 id="原生钩子使用环境隔离特性">原生钩子使用环境隔离特性&lt;/h2>
&lt;p>在 Git 2.11.0 时，git 改进了其推送的工作流程，增加了 &lt;a href="https://git-scm.com/docs/git-receive-pack#_quarantine_environment">&lt;strong>Quarantine Environment&lt;/strong>&lt;/a> 机制，此时，receive-pack 将会把所有推送的对象放置在隔离的临时目录中，一旦推送被接受才会将对象移动到常规的主对象目录，环境隔离的机制在整个 pre-receive 钩子的生命周期中是有效的。启动 update 钩子之前就会失效。&lt;/p>
&lt;p>因此，我将原生钩子使用环境隔离机制进行改造。好处显而易见，只需要检测隔离目录中的 pack。pack 缓存也不再需要了。对于大文件检测的效果更明显，比如超出警告的大文件只会在第一次推送时发出警告，提高了用户体验。&lt;/p>
&lt;p>当推送被拒绝时，临时目录会被删除，这样能够避免重复的失败推送回带来大量悬空对象，造成存储库的无效膨胀，存储库的无效膨胀会占用用户的配额，而清理无效膨胀需要使用 &lt;code>git gc&lt;/code> 命令 （git gc &amp;ndash;prune=now）。频繁的运行 GC 也会给服务器带来过重的压力。&lt;/p>
&lt;p>由于在 update 钩子执行时，环境隔离已经失效，这种特性也就决定了 update 钩子无法胜任这些工作。&lt;/p>
&lt;p>而 Gitlab 也支持了此特性 ：&lt;a href="https://gitlab.com/artofhuman/gitlab-ce/commit/022242c30fe463d2b82c18c687088786b306415f">Accept environment variables from the &lt;code>pre-receive&lt;/code> script&lt;/a>&lt;/p>
&lt;p>环境隔离需要理解几个环境变量：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#1d2432;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#58a1dd">$GIT_QUARANTINE_PATH&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#58a1dd">$GIT_OBJECT_DIRECTORY&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#58a1dd">$GIT_ALTERNATE_OBJECT_DIRECTORIES&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>我只用到了 &lt;code>GIT_QUARANTINE_PATH&lt;/code>。&lt;/p>
&lt;p>在 git 2.15.0 之前的版本中，如果在隔离目录中运行 git update-ref 会损坏存储库，之后的版本已经拒绝了 git update-ref 在隔离目录中运行。&lt;/p>
&lt;h2 id="延时读的原生钩子">延时读的原生钩子&lt;/h2>
&lt;p>我在解析 pack 文件时，设计了一个 &lt;code>ObjectIndex&lt;/code> 结构，读取 index 文件中关于 pack 中的文件数目后，使用一个 vector 存储对象。将所有的偏移依次读取，然后通过 std::sort 将偏移按大到小排序，依次相减，就得到对应的对象压缩后的体积。然后判断是否超限。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#1d2432;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff636f">struct&lt;/span> &lt;span style="color:#58a1dd">ObjectIndex&lt;/span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">uint8_t&lt;/span> &lt;span style="color:#58a1dd">sha1&lt;/span>[&lt;span style="color:#a6be9d">20&lt;/span>];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">uint32_t&lt;/span> &lt;span style="color:#58a1dd">offset&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>在使用 &lt;code>std::vector&lt;/code> 之前，使用 &lt;code>std::list&lt;/code> 存储对象，效率不高，在分析 FreeBSD 的 1G 多大的存储库时，在我的破笔记本上跑出了 9s 耗时，对象 300 多万。太慢了，而改成 vector 后，耗时为 3s。&lt;/p>
&lt;p>最近，笔者决定优化一下，第一步是将比较函数的内联。最初的比较函数如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#1d2432;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff636f">bool&lt;/span> &lt;span style="color:#58a1dd">objectidxcompare&lt;/span>(&lt;span style="color:#ff636f">const&lt;/span> &lt;span style="color:#58a1dd">ObjectIndex&lt;/span> &lt;span style="color:#ff636f">&amp;amp;&lt;/span>&lt;span style="color:#58a1dd">first&lt;/span>, &lt;span style="color:#ff636f">const&lt;/span> &lt;span style="color:#58a1dd">ObjectIndex&lt;/span> &lt;span style="color:#ff636f">&amp;amp;&lt;/span>&lt;span style="color:#58a1dd">second&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">return&lt;/span> (&lt;span style="color:#58a1dd">first&lt;/span>.&lt;span style="color:#58a1dd">offset&lt;/span> &lt;span style="color:#ff636f">&amp;gt;&lt;/span> &lt;span style="color:#58a1dd">second&lt;/span>.&lt;span style="color:#58a1dd">offset&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>我们知道，函数调用是需要耗费时间的，随着对象数目增多，这种影响愈加明显。于是我将 &lt;code>ObjectIndex&lt;/code> 改造成如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#1d2432;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff636f">struct&lt;/span> &lt;span style="color:#58a1dd">ObjectIndex&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#828b96;font-style:italic">/// DON&amp;#39;t Modify
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span> &lt;span style="color:#ff636f">bool&lt;/span> &lt;span style="color:#ff636f">operator&lt;/span>&lt;span style="color:#ff636f">&amp;lt;&lt;/span>(&lt;span style="color:#ff636f">const&lt;/span> &lt;span style="color:#58a1dd">ObjectIndex&lt;/span> &lt;span style="color:#ff636f">&amp;amp;&lt;/span>&lt;span style="color:#58a1dd">o&lt;/span>) { &lt;span style="color:#ff636f">return&lt;/span> &lt;span style="color:#58a1dd">offset&lt;/span> &lt;span style="color:#ff636f">&amp;gt;&lt;/span> &lt;span style="color:#58a1dd">o&lt;/span>.&lt;span style="color:#58a1dd">offset&lt;/span>; }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">uint8_t&lt;/span> &lt;span style="color:#58a1dd">sha1&lt;/span>[&lt;span style="color:#a6be9d">20&lt;/span>];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">uint32_t&lt;/span> &lt;span style="color:#58a1dd">offset&lt;/span>{&lt;span style="color:#a6be9d">0&lt;/span>};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>};
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>通过内联，运行时间减少了 13.8%。这还不够，std::sort 内部使用了 std::swap 交换对象，而 ObjectIndx::sha1 的交换需要拷贝，并且读取 sha1 值也是需要系统调用的。为什么不先不读取 sha1 值，而是保存 sha1 值的 index。ObjectIndex 格式改成如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#1d2432;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff636f">struct&lt;/span> &lt;span style="color:#58a1dd">ObjectIndex&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#828b96;font-style:italic">/// DON&amp;#39;t Modify
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span> &lt;span style="color:#ff636f">bool&lt;/span> &lt;span style="color:#ff636f">operator&lt;/span>&lt;span style="color:#ff636f">&amp;lt;&lt;/span>(&lt;span style="color:#ff636f">const&lt;/span> &lt;span style="color:#58a1dd">ObjectIndex&lt;/span> &lt;span style="color:#ff636f">&amp;amp;&lt;/span>&lt;span style="color:#58a1dd">o&lt;/span>) { &lt;span style="color:#ff636f">return&lt;/span> &lt;span style="color:#58a1dd">offset&lt;/span> &lt;span style="color:#ff636f">&amp;gt;&lt;/span> &lt;span style="color:#58a1dd">o&lt;/span>.&lt;span style="color:#58a1dd">offset&lt;/span>; }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">uint32_t&lt;/span> &lt;span style="color:#58a1dd">offset&lt;/span>{&lt;span style="color:#a6be9d">0&lt;/span>};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">uint32_t&lt;/span> &lt;span style="color:#58a1dd">index&lt;/span>{&lt;span style="color:#a6be9d">0&lt;/span>};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>};
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>这样，我们不再读取 sha1 值，需要 sha1 值的时候，再通过偏移计算 sha1 在 idx 文件中的位置。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#1d2432;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">#define GIT_SHA1_RAWSZ 20
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span>&lt;span style="color:#828b96;font-style:italic">// so buffer &amp;gt;41,
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span>&lt;span style="color:#ff636f">char&lt;/span> &lt;span style="color:#ff636f">*&lt;/span>&lt;span style="color:#58a1dd">sha1_to_hex_r&lt;/span>(&lt;span style="color:#ff636f">char&lt;/span> &lt;span style="color:#ff636f">*&lt;/span>&lt;span style="color:#58a1dd">buffer&lt;/span>, &lt;span style="color:#ff636f">const&lt;/span> &lt;span style="color:#ff636f">unsigned&lt;/span> &lt;span style="color:#ff636f">char&lt;/span> &lt;span style="color:#ff636f">*&lt;/span>&lt;span style="color:#58a1dd">sha1&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">static&lt;/span> &lt;span style="color:#ff636f">const&lt;/span> &lt;span style="color:#ff636f">char&lt;/span> &lt;span style="color:#58a1dd">hex&lt;/span>[] &lt;span style="color:#ff636f">=&lt;/span> &lt;span style="color:#a6be9d">&amp;#34;0123456789abcdef&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">char&lt;/span> &lt;span style="color:#ff636f">*&lt;/span>&lt;span style="color:#58a1dd">buf&lt;/span> &lt;span style="color:#ff636f">=&lt;/span> &lt;span style="color:#58a1dd">buffer&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">int&lt;/span> &lt;span style="color:#58a1dd">i&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">for&lt;/span> (&lt;span style="color:#58a1dd">i&lt;/span> &lt;span style="color:#ff636f">=&lt;/span> &lt;span style="color:#a6be9d">0&lt;/span>; &lt;span style="color:#58a1dd">i&lt;/span> &lt;span style="color:#ff636f">&amp;lt;&lt;/span> &lt;span style="color:#58a1dd">GIT_SHA1_RAWSZ&lt;/span>; &lt;span style="color:#58a1dd">i&lt;/span>&lt;span style="color:#ff636f">++&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">unsigned&lt;/span> &lt;span style="color:#ff636f">int&lt;/span> &lt;span style="color:#58a1dd">val&lt;/span> &lt;span style="color:#ff636f">=&lt;/span> &lt;span style="color:#ff636f">*&lt;/span>&lt;span style="color:#58a1dd">sha1&lt;/span>&lt;span style="color:#ff636f">++&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">*&lt;/span>&lt;span style="color:#58a1dd">buf&lt;/span>&lt;span style="color:#ff636f">++&lt;/span> &lt;span style="color:#ff636f">=&lt;/span> &lt;span style="color:#58a1dd">hex&lt;/span>[&lt;span style="color:#58a1dd">val&lt;/span> &lt;span style="color:#ff636f">&amp;gt;&amp;gt;&lt;/span> &lt;span style="color:#a6be9d">4&lt;/span>];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">*&lt;/span>&lt;span style="color:#58a1dd">buf&lt;/span>&lt;span style="color:#ff636f">++&lt;/span> &lt;span style="color:#ff636f">=&lt;/span> &lt;span style="color:#58a1dd">hex&lt;/span>[&lt;span style="color:#58a1dd">val&lt;/span> &lt;span style="color:#ff636f">&amp;amp;&lt;/span> &lt;span style="color:#a6be9d">0xf&lt;/span>];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">*&lt;/span>&lt;span style="color:#58a1dd">buf&lt;/span> &lt;span style="color:#ff636f">=&lt;/span> &lt;span style="color:#a6be9d">&amp;#39;\0&amp;#39;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">return&lt;/span> &lt;span style="color:#58a1dd">buffer&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff636f">inline&lt;/span> &lt;span style="color:#ff636f">const&lt;/span> &lt;span style="color:#ff636f">char&lt;/span> &lt;span style="color:#ff636f">*&lt;/span>&lt;span style="color:#58a1dd">Sha1FromIndex&lt;/span>(&lt;span style="color:#58a1dd">FILE&lt;/span> &lt;span style="color:#ff636f">*&lt;/span>&lt;span style="color:#58a1dd">fp&lt;/span>, &lt;span style="color:#ff636f">char&lt;/span> &lt;span style="color:#ff636f">*&lt;/span>&lt;span style="color:#58a1dd">buf&lt;/span>, &lt;span style="color:#58a1dd">std&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#ff636f">uint32_t&lt;/span> &lt;span style="color:#58a1dd">i&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">unsigned&lt;/span> &lt;span style="color:#ff636f">char&lt;/span> &lt;span style="color:#58a1dd">sha1__&lt;/span>[&lt;span style="color:#a6be9d">20&lt;/span>];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">constexpr&lt;/span> &lt;span style="color:#ff636f">int&lt;/span> &lt;span style="color:#58a1dd">offsetbegin&lt;/span> &lt;span style="color:#ff636f">=&lt;/span> &lt;span style="color:#a6be9d">4&lt;/span> &lt;span style="color:#ff636f">+&lt;/span> &lt;span style="color:#a6be9d">4&lt;/span> &lt;span style="color:#ff636f">+&lt;/span> &lt;span style="color:#a6be9d">4&lt;/span> &lt;span style="color:#ff636f">+&lt;/span> &lt;span style="color:#a6be9d">255&lt;/span> &lt;span style="color:#ff636f">*&lt;/span> &lt;span style="color:#a6be9d">4&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">fseek&lt;/span>(&lt;span style="color:#58a1dd">fp&lt;/span>, &lt;span style="color:#58a1dd">offsetbegin&lt;/span> &lt;span style="color:#ff636f">+&lt;/span> &lt;span style="color:#58a1dd">i&lt;/span> &lt;span style="color:#ff636f">*&lt;/span> &lt;span style="color:#a6be9d">20&lt;/span>, &lt;span style="color:#58a1dd">SEEK_SET&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">if&lt;/span> (&lt;span style="color:#58a1dd">fread&lt;/span>(&lt;span style="color:#58a1dd">sha1__&lt;/span>, &lt;span style="color:#a6be9d">1&lt;/span>, &lt;span style="color:#a6be9d">20&lt;/span>, &lt;span style="color:#58a1dd">fp&lt;/span>) &lt;span style="color:#ff636f">!=&lt;/span> &lt;span style="color:#a6be9d">20&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">return&lt;/span> &lt;span style="color:#a6be9d">&amp;#34;unkown&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">sha1_to_hex_r&lt;/span>(&lt;span style="color:#58a1dd">buf&lt;/span>, &lt;span style="color:#58a1dd">sha1__&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">return&lt;/span> &lt;span style="color:#58a1dd">buf&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>这样真的减少了一半的时间。比如 Linux 内核源码 1.9GB 数据，562 W 对象，从 1442 毫秒减少到 700 多毫秒。内存占用也减少了 2/3。不要小看 16Byte 字节的节省，几百万个对象节省的空间就很客观了。&lt;/p>
&lt;h2 id="利用内存布局减少系统调用次数">利用内存布局减少系统调用次数&lt;/h2>
&lt;p>就函数调用而言，要尽可能的减少频繁调用的函数的调用次数，特别是达到百万级别的，在读取偏移时就可以一次性读取，于是我将读取偏移改为一次性读写，利用 vector 预先分配的内存，核心代码如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#1d2432;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">std&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">vector&lt;/span>&lt;span style="color:#ff636f">&amp;lt;&lt;/span>&lt;span style="color:#58a1dd">ObjectIndex&lt;/span>&lt;span style="color:#ff636f">&amp;gt;&lt;/span> &lt;span style="color:#58a1dd">objs&lt;/span>(&lt;span style="color:#58a1dd">counts&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">auto&lt;/span> &lt;span style="color:#58a1dd">objsraw&lt;/span> &lt;span style="color:#ff636f">=&lt;/span> &lt;span style="color:#58a1dd">objs&lt;/span>.&lt;span style="color:#58a1dd">data&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">auto&lt;/span> &lt;span style="color:#58a1dd">bufc&lt;/span> &lt;span style="color:#ff636f">=&lt;/span> &lt;span style="color:#ff636f">reinterpret_cast&lt;/span>&lt;span style="color:#ff636f">&amp;lt;&lt;/span>&lt;span style="color:#ff636f">char&lt;/span> &lt;span style="color:#ff636f">*&amp;gt;&lt;/span>(&lt;span style="color:#58a1dd">objsraw&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#828b96;font-style:italic">/// 4*counts
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span> &lt;span style="color:#ff636f">auto&lt;/span> &lt;span style="color:#58a1dd">binteger&lt;/span> &lt;span style="color:#ff636f">=&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">reinterpret_cast&lt;/span>&lt;span style="color:#ff636f">&amp;lt;&lt;/span>&lt;span style="color:#ff636f">int&lt;/span> &lt;span style="color:#ff636f">*&amp;gt;&lt;/span>(&lt;span style="color:#58a1dd">bufc&lt;/span> &lt;span style="color:#ff636f">+&lt;/span> &lt;span style="color:#ff636f">sizeof&lt;/span>(&lt;span style="color:#58a1dd">ObjectIndex&lt;/span>) &lt;span style="color:#ff636f">*&lt;/span> &lt;span style="color:#58a1dd">counts&lt;/span> &lt;span style="color:#ff636f">/&lt;/span> &lt;span style="color:#a6be9d">2&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">if&lt;/span> (&lt;span style="color:#58a1dd">fread&lt;/span>(&lt;span style="color:#58a1dd">binteger&lt;/span>, &lt;span style="color:#a6be9d">4&lt;/span>, &lt;span style="color:#58a1dd">counts&lt;/span>, &lt;span style="color:#58a1dd">fp&lt;/span>) &lt;span style="color:#ff636f">!=&lt;/span> &lt;span style="color:#58a1dd">counts&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">console&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">Printeln&lt;/span>(&lt;span style="color:#a6be9d">&amp;#34;fread error &amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">fclose&lt;/span>(&lt;span style="color:#58a1dd">fp&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">return&lt;/span> &lt;span style="color:#58a1dd">false&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">for&lt;/span> (&lt;span style="color:#ff636f">uint32_t&lt;/span> &lt;span style="color:#58a1dd">i&lt;/span> &lt;span style="color:#ff636f">=&lt;/span> &lt;span style="color:#a6be9d">0&lt;/span>; &lt;span style="color:#58a1dd">i&lt;/span> &lt;span style="color:#ff636f">&amp;lt;&lt;/span> &lt;span style="color:#58a1dd">counts&lt;/span>; &lt;span style="color:#58a1dd">i&lt;/span>&lt;span style="color:#ff636f">++&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#828b96;font-style:italic">/// DON&amp;#39;T change the order of operations
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span> &lt;span style="color:#58a1dd">objsraw&lt;/span>[&lt;span style="color:#58a1dd">i&lt;/span>].&lt;span style="color:#58a1dd">offset&lt;/span> &lt;span style="color:#ff636f">=&lt;/span> &lt;span style="color:#58a1dd">ntohl&lt;/span>(&lt;span style="color:#58a1dd">binteger&lt;/span>[&lt;span style="color:#58a1dd">i&lt;/span>]);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">objsraw&lt;/span>[&lt;span style="color:#58a1dd">i&lt;/span>].&lt;span style="color:#58a1dd">index&lt;/span> &lt;span style="color:#ff636f">=&lt;/span> &lt;span style="color:#58a1dd">i&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">std&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">sort&lt;/span>(&lt;span style="color:#58a1dd">objs&lt;/span>.&lt;span style="color:#58a1dd">begin&lt;/span>(), &lt;span style="color:#58a1dd">objs&lt;/span>.&lt;span style="color:#58a1dd">end&lt;/span>());
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>这里一定要注意，index 的填充一定要后于偏移的计算。&lt;/p>
&lt;p>这次优化比前面的 700 多毫秒减少了 100 多毫秒。&lt;/p>
&lt;h2 id="更大的大文件检测">更大的大文件检测&lt;/h2>
&lt;p>前面主要是针对 pack 文件小于 2GB的优化, 对于推送大于 2GB 的 pack 文件需要额外的处理，比如 offset 需要改成 &lt;code>int64_t&lt;/code> 而且 offset 需要读取 8bytes 的条目。git 的文档并不详细，因此还需要从 git 源码中发现一些真实的解决方案。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#1d2432;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">#define MEMSIZE_LIMIT (scale::Gigabyte * 4)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span>&lt;span style="color:#828b96;font-style:italic">/// Please don&amp;#39;t modify type layout.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span>&lt;span style="color:#ff636f">template&lt;/span> &lt;span style="color:#ff636f">&amp;lt;&lt;/span>&lt;span style="color:#ff636f">typename&lt;/span> &lt;span style="color:#58a1dd">IntegerT&lt;/span>&lt;span style="color:#ff636f">&amp;gt;&lt;/span> &lt;span style="color:#ff636f">struct&lt;/span> &lt;span style="color:#58a1dd">object_base&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">bool&lt;/span> &lt;span style="color:#ff636f">operator&lt;/span>&lt;span style="color:#ff636f">&amp;lt;&lt;/span>(&lt;span style="color:#ff636f">const&lt;/span> &lt;span style="color:#58a1dd">object_base&lt;/span>&lt;span style="color:#ff636f">&amp;lt;&lt;/span>&lt;span style="color:#58a1dd">IntegerT&lt;/span>&lt;span style="color:#ff636f">&amp;gt;&lt;/span> &lt;span style="color:#ff636f">&amp;amp;&lt;/span>&lt;span style="color:#58a1dd">o&lt;/span>) { &lt;span style="color:#ff636f">return&lt;/span> &lt;span style="color:#58a1dd">offset&lt;/span> &lt;span style="color:#ff636f">&amp;gt;&lt;/span> &lt;span style="color:#58a1dd">o&lt;/span>.&lt;span style="color:#58a1dd">offset&lt;/span>; }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">IntegerT&lt;/span> &lt;span style="color:#58a1dd">offset&lt;/span>{&lt;span style="color:#a6be9d">0&lt;/span>};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">std&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#ff636f">uint32_t&lt;/span> &lt;span style="color:#58a1dd">index&lt;/span>{&lt;span style="color:#a6be9d">0&lt;/span>};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff636f">typedef&lt;/span> &lt;span style="color:#58a1dd">object_base&lt;/span>&lt;span style="color:#ff636f">&amp;lt;&lt;/span>&lt;span style="color:#58a1dd">std&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#ff636f">uint32_t&lt;/span>&lt;span style="color:#ff636f">&amp;gt;&lt;/span> &lt;span style="color:#58a1dd">ObjectIndex&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff636f">typedef&lt;/span> &lt;span style="color:#58a1dd">object_base&lt;/span>&lt;span style="color:#ff636f">&amp;lt;&lt;/span>&lt;span style="color:#58a1dd">std&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#ff636f">uint64_t&lt;/span>&lt;span style="color:#ff636f">&amp;gt;&lt;/span> &lt;span style="color:#58a1dd">ObjectIndexLarge&lt;/span>;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#1d2432;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">////
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span>&lt;span style="color:#ff636f">bool&lt;/span> &lt;span style="color:#58a1dd">Gitidx&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">reviewlarge&lt;/span>(&lt;span style="color:#58a1dd">std&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">size_t&lt;/span> &lt;span style="color:#58a1dd">limitsize&lt;/span>, &lt;span style="color:#58a1dd">std&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">size_t&lt;/span> &lt;span style="color:#58a1dd">warnsize&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">if&lt;/span> (&lt;span style="color:#58a1dd">fseek&lt;/span>(&lt;span style="color:#58a1dd">fp&lt;/span>, &lt;span style="color:#a6be9d">4&lt;/span> &lt;span style="color:#ff636f">+&lt;/span> &lt;span style="color:#a6be9d">4&lt;/span> &lt;span style="color:#ff636f">+&lt;/span> &lt;span style="color:#58a1dd">nr&lt;/span> &lt;span style="color:#ff636f">*&lt;/span> (&lt;span style="color:#a6be9d">20&lt;/span> &lt;span style="color:#ff636f">+&lt;/span> &lt;span style="color:#a6be9d">4&lt;/span>) &lt;span style="color:#ff636f">+&lt;/span> &lt;span style="color:#a6be9d">256&lt;/span> &lt;span style="color:#ff636f">*&lt;/span> &lt;span style="color:#a6be9d">4&lt;/span>, &lt;span style="color:#58a1dd">SEEK_SET&lt;/span>) &lt;span style="color:#ff636f">!=&lt;/span> &lt;span style="color:#a6be9d">0&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">console&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">Printeln&lt;/span>(&lt;span style="color:#a6be9d">&amp;#34;fseek error&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">return&lt;/span> &lt;span style="color:#58a1dd">false&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">auto&lt;/span> &lt;span style="color:#58a1dd">mmsize&lt;/span> &lt;span style="color:#ff636f">=&lt;/span> &lt;span style="color:#58a1dd">nr&lt;/span> &lt;span style="color:#ff636f">*&lt;/span> &lt;span style="color:#ff636f">sizeof&lt;/span>(&lt;span style="color:#58a1dd">ObjectIndexLarge&lt;/span>) &lt;span style="color:#ff636f">+&lt;/span> &lt;span style="color:#ff636f">sizeof&lt;/span>(&lt;span style="color:#58a1dd">std&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#ff636f">uint64_t&lt;/span>) &lt;span style="color:#ff636f">*&lt;/span> &lt;span style="color:#58a1dd">lnr&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">if&lt;/span> (&lt;span style="color:#58a1dd">mmsize&lt;/span> &lt;span style="color:#ff636f">&amp;gt;&lt;/span> &lt;span style="color:#58a1dd">MEMSIZE_LIMIT&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">console&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">Printe&lt;/span>(&lt;span style="color:#a6be9d">&amp;#34;Idx file Too large. Unsupport it&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">return&lt;/span> &lt;span style="color:#58a1dd">false&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">std&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">vector&lt;/span>&lt;span style="color:#ff636f">&amp;lt;&lt;/span>&lt;span style="color:#58a1dd">ObjectIndexLarge&lt;/span>&lt;span style="color:#ff636f">&amp;gt;&lt;/span> &lt;span style="color:#58a1dd">objs&lt;/span>(&lt;span style="color:#58a1dd">nr&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">auto&lt;/span> &lt;span style="color:#58a1dd">objsraw&lt;/span> &lt;span style="color:#ff636f">=&lt;/span> &lt;span style="color:#58a1dd">objs&lt;/span>.&lt;span style="color:#58a1dd">data&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">auto&lt;/span> &lt;span style="color:#58a1dd">bufc&lt;/span> &lt;span style="color:#ff636f">=&lt;/span> &lt;span style="color:#ff636f">reinterpret_cast&lt;/span>&lt;span style="color:#ff636f">&amp;lt;&lt;/span>&lt;span style="color:#ff636f">char&lt;/span> &lt;span style="color:#ff636f">*&amp;gt;&lt;/span>(&lt;span style="color:#58a1dd">objsraw&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#828b96;font-style:italic">/// 4*counts
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span> &lt;span style="color:#ff636f">auto&lt;/span> &lt;span style="color:#58a1dd">binteger&lt;/span> &lt;span style="color:#ff636f">=&lt;/span> &lt;span style="color:#ff636f">reinterpret_cast&lt;/span>&lt;span style="color:#ff636f">&amp;lt;&lt;/span>&lt;span style="color:#58a1dd">std&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#ff636f">uint32_t&lt;/span> &lt;span style="color:#ff636f">*&amp;gt;&lt;/span>(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">bufc&lt;/span> &lt;span style="color:#ff636f">+&lt;/span> &lt;span style="color:#ff636f">sizeof&lt;/span>(&lt;span style="color:#58a1dd">ObjectIndexLarge&lt;/span>) &lt;span style="color:#ff636f">*&lt;/span> &lt;span style="color:#58a1dd">nr&lt;/span> &lt;span style="color:#ff636f">-&lt;/span> &lt;span style="color:#a6be9d">4&lt;/span> &lt;span style="color:#ff636f">*&lt;/span> &lt;span style="color:#58a1dd">nr&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">if&lt;/span> (&lt;span style="color:#58a1dd">fread&lt;/span>(&lt;span style="color:#58a1dd">binteger&lt;/span>, &lt;span style="color:#a6be9d">1&lt;/span>, &lt;span style="color:#a6be9d">4&lt;/span> &lt;span style="color:#ff636f">*&lt;/span> &lt;span style="color:#58a1dd">nr&lt;/span>, &lt;span style="color:#58a1dd">fp&lt;/span>) &lt;span style="color:#ff636f">!=&lt;/span> &lt;span style="color:#a6be9d">4&lt;/span> &lt;span style="color:#ff636f">*&lt;/span> &lt;span style="color:#58a1dd">nr&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">console&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">Printeln&lt;/span>(&lt;span style="color:#a6be9d">&amp;#34;fread error &amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">return&lt;/span> &lt;span style="color:#58a1dd">false&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">std&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">vector&lt;/span>&lt;span style="color:#ff636f">&amp;lt;&lt;/span>&lt;span style="color:#58a1dd">std&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#ff636f">uint64_t&lt;/span>&lt;span style="color:#ff636f">&amp;gt;&lt;/span> &lt;span style="color:#58a1dd">lnrv&lt;/span>(&lt;span style="color:#58a1dd">lnr&lt;/span>); &lt;span style="color:#828b96;font-style:italic">//
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span> &lt;span style="color:#ff636f">if&lt;/span> (&lt;span style="color:#58a1dd">fread&lt;/span>(&lt;span style="color:#58a1dd">lnrv&lt;/span>.&lt;span style="color:#58a1dd">data&lt;/span>(), &lt;span style="color:#a6be9d">1&lt;/span>, &lt;span style="color:#a6be9d">8&lt;/span> &lt;span style="color:#ff636f">*&lt;/span> &lt;span style="color:#58a1dd">lnr&lt;/span>, &lt;span style="color:#58a1dd">fp&lt;/span>) &lt;span style="color:#ff636f">!=&lt;/span> &lt;span style="color:#a6be9d">8&lt;/span> &lt;span style="color:#ff636f">*&lt;/span> &lt;span style="color:#58a1dd">lnr&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">console&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">Printeln&lt;/span>(&lt;span style="color:#a6be9d">&amp;#34;fread 8byte error&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">return&lt;/span> &lt;span style="color:#58a1dd">false&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#828b96;font-style:italic">/// https://github.com/git/git/blob/master/builtin/index-pack.c#L1511
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span> &lt;span style="color:#ff636f">for&lt;/span> (&lt;span style="color:#ff636f">uint32_t&lt;/span> &lt;span style="color:#58a1dd">i&lt;/span> &lt;span style="color:#ff636f">=&lt;/span> &lt;span style="color:#a6be9d">0&lt;/span>; &lt;span style="color:#58a1dd">i&lt;/span> &lt;span style="color:#ff636f">&amp;lt;&lt;/span> &lt;span style="color:#58a1dd">nr&lt;/span>; &lt;span style="color:#58a1dd">i&lt;/span>&lt;span style="color:#ff636f">++&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#828b96;font-style:italic">/// DON&amp;#39;T change the order of operations
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span> &lt;span style="color:#ff636f">auto&lt;/span> &lt;span style="color:#58a1dd">off&lt;/span> &lt;span style="color:#ff636f">=&lt;/span> &lt;span style="color:#58a1dd">ntohl&lt;/span>(&lt;span style="color:#58a1dd">binteger&lt;/span>[&lt;span style="color:#58a1dd">i&lt;/span>]);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">if&lt;/span> (&lt;span style="color:#ff636f">!&lt;/span>(&lt;span style="color:#58a1dd">off&lt;/span> &lt;span style="color:#ff636f">&amp;amp;&lt;/span> &lt;span style="color:#a6be9d">0x80000000&lt;/span>)) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">objsraw&lt;/span>[&lt;span style="color:#58a1dd">i&lt;/span>].&lt;span style="color:#58a1dd">offset&lt;/span> &lt;span style="color:#ff636f">=&lt;/span> &lt;span style="color:#58a1dd">off&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">objsraw&lt;/span>[&lt;span style="color:#58a1dd">i&lt;/span>].&lt;span style="color:#58a1dd">index&lt;/span> &lt;span style="color:#ff636f">=&lt;/span> &lt;span style="color:#58a1dd">i&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">continue&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">off&lt;/span> &lt;span style="color:#ff636f">=&lt;/span> &lt;span style="color:#58a1dd">off&lt;/span> &lt;span style="color:#ff636f">&amp;amp;&lt;/span> &lt;span style="color:#a6be9d">0x7fffffff&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">if&lt;/span> (&lt;span style="color:#58a1dd">off&lt;/span> &lt;span style="color:#ff636f">&amp;gt;=&lt;/span> &lt;span style="color:#58a1dd">lnr&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">console&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">Printeln&lt;/span>(&lt;span style="color:#a6be9d">&amp;#34;Bad Index data&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">return&lt;/span> &lt;span style="color:#58a1dd">false&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">objsraw&lt;/span>[&lt;span style="color:#58a1dd">i&lt;/span>].&lt;span style="color:#58a1dd">offset&lt;/span> &lt;span style="color:#ff636f">=&lt;/span> &lt;span style="color:#58a1dd">default_bswap64&lt;/span>(&lt;span style="color:#58a1dd">lnrv&lt;/span>[&lt;span style="color:#58a1dd">off&lt;/span>]);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">objsraw&lt;/span>[&lt;span style="color:#58a1dd">i&lt;/span>].&lt;span style="color:#58a1dd">index&lt;/span> &lt;span style="color:#ff636f">=&lt;/span> &lt;span style="color:#58a1dd">i&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">std&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">sort&lt;/span>(&lt;span style="color:#58a1dd">objs&lt;/span>.&lt;span style="color:#58a1dd">begin&lt;/span>(), &lt;span style="color:#58a1dd">objs&lt;/span>.&lt;span style="color:#58a1dd">end&lt;/span>());
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">uint64_t&lt;/span> &lt;span style="color:#58a1dd">pre&lt;/span> &lt;span style="color:#ff636f">=&lt;/span> &lt;span style="color:#58a1dd">pksize&lt;/span> &lt;span style="color:#ff636f">-&lt;/span> &lt;span style="color:#a6be9d">20&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">for&lt;/span> (&lt;span style="color:#ff636f">auto&lt;/span> &lt;span style="color:#ff636f">&amp;amp;&lt;/span>&lt;span style="color:#58a1dd">i&lt;/span> : &lt;span style="color:#58a1dd">objs&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">auto&lt;/span> &lt;span style="color:#58a1dd">size&lt;/span> &lt;span style="color:#ff636f">=&lt;/span> &lt;span style="color:#58a1dd">pre&lt;/span> &lt;span style="color:#ff636f">-&lt;/span> &lt;span style="color:#58a1dd">i&lt;/span>.&lt;span style="color:#58a1dd">offset&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">pre&lt;/span> &lt;span style="color:#ff636f">=&lt;/span> &lt;span style="color:#58a1dd">i&lt;/span>.&lt;span style="color:#58a1dd">offset&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">if&lt;/span> (&lt;span style="color:#58a1dd">size&lt;/span> &lt;span style="color:#ff636f">&amp;gt;=&lt;/span> &lt;span style="color:#58a1dd">limitsize&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">char&lt;/span> &lt;span style="color:#58a1dd">buf&lt;/span>[&lt;span style="color:#a6be9d">50&lt;/span>];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">console&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">Printeln&lt;/span>(&lt;span style="color:#a6be9d">&amp;#34;File: %s size %4.2f MB, more than %4.2f MB %ld&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">Sha1FromIndex&lt;/span>(&lt;span style="color:#58a1dd">fp&lt;/span>, &lt;span style="color:#58a1dd">buf&lt;/span>, &lt;span style="color:#58a1dd">i&lt;/span>.&lt;span style="color:#58a1dd">index&lt;/span>),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (&lt;span style="color:#ff636f">float&lt;/span>)&lt;span style="color:#58a1dd">size&lt;/span> &lt;span style="color:#ff636f">/&lt;/span> &lt;span style="color:#58a1dd">scale&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">Megabyte&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (&lt;span style="color:#ff636f">float&lt;/span>)&lt;span style="color:#58a1dd">limitsize&lt;/span> &lt;span style="color:#ff636f">/&lt;/span> &lt;span style="color:#58a1dd">scale&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">Megabyte&lt;/span>, &lt;span style="color:#58a1dd">i&lt;/span>.&lt;span style="color:#58a1dd">offset&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#828b96;font-style:italic">// bfilecount++;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span> &lt;span style="color:#ff636f">return&lt;/span> &lt;span style="color:#58a1dd">false&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">if&lt;/span> (&lt;span style="color:#58a1dd">size&lt;/span> &lt;span style="color:#ff636f">&amp;gt;=&lt;/span> &lt;span style="color:#58a1dd">warnsize&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">if&lt;/span> (&lt;span style="color:#58a1dd">wfs&lt;/span>.&lt;span style="color:#58a1dd">size&lt;/span>() &lt;span style="color:#ff636f">&amp;lt;&lt;/span> &lt;span style="color:#58a1dd">MaxNumberOfDetails&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">FileInfo&lt;/span> &lt;span style="color:#58a1dd">fileinfo&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">char&lt;/span> &lt;span style="color:#58a1dd">buf&lt;/span>[&lt;span style="color:#a6be9d">50&lt;/span>];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">fileinfo&lt;/span>.&lt;span style="color:#58a1dd">path&lt;/span> &lt;span style="color:#ff636f">=&lt;/span> &lt;span style="color:#58a1dd">Sha1FromIndex&lt;/span>(&lt;span style="color:#58a1dd">fp&lt;/span>, &lt;span style="color:#58a1dd">buf&lt;/span>, &lt;span style="color:#58a1dd">i&lt;/span>.&lt;span style="color:#58a1dd">index&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">fileinfo&lt;/span>.&lt;span style="color:#58a1dd">size&lt;/span> &lt;span style="color:#ff636f">=&lt;/span> &lt;span style="color:#58a1dd">size&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">wfs&lt;/span>.&lt;span style="color:#58a1dd">push_back&lt;/span>(&lt;span style="color:#58a1dd">std&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">move&lt;/span>(&lt;span style="color:#58a1dd">fileinfo&lt;/span>));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">return&lt;/span> &lt;span style="color:#58a1dd">true&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="pack-文件格式限制">Pack 文件格式限制&lt;/h2>
&lt;p>以上内容都是基于 Git Packfile 格式第二版。当 pack 文件内对象数目巨大时，以上优化需要大量内存，而在前面设置了最大内存限制，这意味着对象的数目是存在限制的，实际上需要的内存与 idx 文件的大小接近。在解析 pack 文件时常规的做法是使用 mmap ，但这不能很好的对偏移进行排序，从而达到快速检测的目的。本文也将更新一个 C++17 样例程序。&lt;/p>
&lt;h2 id="检测何时引入大文件">检测何时引入大文件&lt;/h2>
&lt;p>GitNativeHook 为了性能还是损失了一个功能，无法检测何时引入了大文件，大文件的文件名是什么，这个时候大家可以使用我开发的 git-analyze 工具去检测什么时候引入了大文件以及文件名：&lt;a href="https://gitee.com/oscstudio/git-analyze">Git-Analyze&lt;/a>&lt;/p>
&lt;h2 id="最后">最后&lt;/h2>
&lt;p>优化是无止尽的。如果大家有更好的方案可以与我讨论。&lt;/p>
- https://forcemz.net/posts/2017/2017-11-22-git-native-hook-depth-optimization/ - Copyright (c) 2009-2024 J23</description></item><item><title>Kisasum Hash 实用工具</title><link>https://forcemz.net/posts/2017/2017-09-01-kisasum-hash-utility/</link><pubDate>Fri, 01 Sep 2017 10:00:00 +0800</pubDate><guid>https://forcemz.net/posts/2017/2017-09-01-kisasum-hash-utility/</guid><description>江二十三的思考 https://forcemz.net/posts/2017/2017-09-01-kisasum-hash-utility/ -&lt;h2 id="kisasum-hash-实用工具">Kisasum Hash 实用工具&lt;/h2>
&lt;p>Kismet 是笔者开发的一个计算 Hash 的图形化工具，有桌面版本 Kismet 和 UWP 版本 KismetUWP。 在前面的 Blog 中有介绍：
&lt;a href="http://forcemz.net/developer/2017/05/14/Kismet/">Kismet 杂谈&lt;/a>&lt;/p>
&lt;p>KismetUWP 截图如下：&lt;/p>
&lt;p>&lt;img src="https://github.com/fcharlie/KismetUWP/raw/master/docs/images/none.png" alt="u1">&lt;/p>
&lt;p>当人们使用一系列命令完成工作时，这个时候优先需要命令行工具。&lt;/p>
&lt;p>Hash 计算有什么命令行工具？无论是 PowerShell 还是 Unix Shell 都有一系列的 Hash 命令，比如 PowerShell，有 &lt;code>Get-FileHash&lt;/code>， 命令格式如下&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#1d2432;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-powershell" data-lang="powershell">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#58a1dd">Get-FileHash&lt;/span> &lt;span style="color:#58a1dd">windows10&lt;/span>.&lt;span style="color:#58a1dd">iso&lt;/span> &lt;span style="color:#58a1dd">SHA256&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>也可以使用强制参数，具体帮助信息如下&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-usage" data-lang="usage">NAME
Get-FileHash
SYNTAX
Get-FileHash [-Path] &amp;lt;string[]&amp;gt; [[-Algorithm] {SHA1 | SHA256 | SHA384 | SHA512 | MD5}] [&amp;lt;CommonParameters&amp;gt;]
Get-FileHash [-LiteralPath] &amp;lt;string[]&amp;gt; [[-Algorithm] {SHA1 | SHA256 | SHA384 | SHA512 | MD5}] [&amp;lt;CommonParameters&amp;gt;]
Get-FileHash [-InputStream] &amp;lt;Stream&amp;gt; [[-Algorithm] {SHA1 | SHA256 | SHA384 | SHA512 | MD5}] [&amp;lt;CommonParameters&amp;gt;]
ALIASES
None
REMARKS
Get-Help cannot find the Help files for this cmdlet on this computer. It is displaying only partial help.
-- To download and install Help files for the module that includes this cmdlet, use Update-Help.
-- To view the Help topic for this cmdlet online, type: &amp;#34;Get-Help Get-FileHash -Online&amp;#34; or
go to https://go.microsoft.com/fwlink/?LinkId=517145.
&lt;/code>&lt;/pre>&lt;p>在 Unix Shell，也有 shasum sha256sum sha512sum sha384sum，第三方还有 sha3sum。&lt;/p>
&lt;p>命令格式通常是：&lt;/p>
&lt;pre tabindex="0">&lt;code>shaNsum file
&lt;/code>&lt;/pre>&lt;p>对于大多数人来说，这些命令都是极好的。但我并不满足，于是开发了 Kisasum Hash 实用工具，此工具支持输出 JSON 和 XML。&lt;/p>
&lt;p>Kisasum 源码在 Kismet 的项目中 &lt;a href="https://github.com/fcharlie/Kismet/tree/master/Kisasum">Kisasum&lt;/a>。&lt;/p>
&lt;p>Kisasum 的帮助信息如下：&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-usage" data-lang="usage">OVERVIEW: kisasum 1.0
USAGE: kisasum [options] &amp;lt;input&amp;gt;
OPTIONS:
-a, --algorithm Hash Algorithm,support algorithm described below.
Algorithm Ignore case, default sha256
SHA1DC is SHA-1 collision.
-f, --format Return information about hash in a format described below.
-h, -?, --help Print usage and exit.
-v, --version Print version and exit.
Algorithm:
MD5 SHA1 SHA1DC
SHA224 SHA256 SHA384 SHA512
SHA3-224 SHA3-256 SHA3-384 SHA3-512
Formats:
text format to text, support progress
json format to json
xml format to xml
&lt;/code>&lt;/pre>&lt;p>Kisasum 支持的 Hash 算法与 Kismet 一致，Kisasum 支持输出普通文本，JSON，以及 XML。这样做的好处是，笔者可以使用 PowerShell 将 Kisasum 的输出转变为 PowerShell 对象，从而能够在 PowerShell 脚本中方便的使用 Kisasum。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#1d2432;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-powershell" data-lang="powershell">&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">$hash&lt;/span>=.\&lt;span style="color:#58a1dd">Kisasum&lt;/span>.&lt;span style="color:#58a1dd">exe&lt;/span> &lt;span style="color:#58a1dd">$FilePath1&lt;/span> &lt;span style="color:#58a1dd">$FilePath2&lt;/span> -&lt;span style="color:#58a1dd">-format&lt;/span>=&lt;span style="color:#58a1dd">json&lt;/span> &lt;span style="color:#58a1dd">-a&lt;/span> &lt;span style="color:#58a1dd">sha3&lt;/span>-&lt;span style="color:#a6be9d">256&lt;/span>|&lt;span style="color:#58a1dd">ConvertFrom-JSON&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">foreach&lt;/span>(&lt;span style="color:#58a1dd">$f&lt;/span> &lt;span style="color:#ff636f">in&lt;/span> &lt;span style="color:#58a1dd">$hash&lt;/span>.&lt;span style="color:#58a1dd">files&lt;/span>){
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">Write-Host&lt;/span> &lt;span style="color:#a6be9d">&amp;#34;&lt;/span>$(&lt;span style="color:#58a1dd">$f&lt;/span>.&lt;span style="color:#58a1dd">hash&lt;/span>)&lt;span style="color:#a6be9d"> &lt;/span>$(&lt;span style="color:#58a1dd">$f&lt;/span>.&lt;span style="color:#58a1dd">name&lt;/span>)&lt;span style="color:#a6be9d">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>例子：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#1d2432;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-json" data-lang="json">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">//D:\Utilities\CharlieKit&amp;gt;Kisasum Diego.exe Kisasum.exe -f json
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">&amp;#34;algorithm&amp;#34;&lt;/span>: &lt;span style="color:#a6be9d">&amp;#34;sha256&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">&amp;#34;files&amp;#34;&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> [
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">&amp;#34;name&amp;#34;&lt;/span>: &lt;span style="color:#a6be9d">&amp;#34;Diego.exe&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">&amp;#34;hash&amp;#34;&lt;/span>: &lt;span style="color:#a6be9d">&amp;#34;AEC1352B5A1123293EDE9A9B74665C013DE37453368909FC988E43862A86114B&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">&amp;#34;name&amp;#34;&lt;/span>: &lt;span style="color:#a6be9d">&amp;#34;Kisasum.exe&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">&amp;#34;hash&amp;#34;&lt;/span>: &lt;span style="color:#a6be9d">&amp;#34;596A02FF501883A194B283A40E6A1D046F6CEEEAF46FBAF6A98D0D1EBC74FA57&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>格式化输出的思想借鉴了 &lt;a href="https://github.com/Microsoft/vswhere">&lt;code>vswhere&lt;/code>&lt;/a>，笔者的 &lt;code>Clangbuilder&lt;/code> 正是使用 vswhere 作为 Visual Studio 检测工具，如果不是输出成 JSON 或者 XML，过程要麻烦得多。&lt;/p>
&lt;p>Kisasum 格式化并没有使用第三方库，非常简单代码如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#1d2432;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c++" data-lang="c++">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff636f">int&lt;/span> &lt;span style="color:#58a1dd">KisasumPrintXML&lt;/span>(&lt;span style="color:#ff636f">const&lt;/span> &lt;span style="color:#58a1dd">KisasumResult&lt;/span> &lt;span style="color:#ff636f">&amp;amp;&lt;/span>&lt;span style="color:#58a1dd">result&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">std&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">wstring&lt;/span> &lt;span style="color:#58a1dd">ws&lt;/span>(&lt;span style="color:#58a1dd">LR&lt;/span>&lt;span style="color:#a6be9d">&amp;#34;(&amp;lt;?xml version=&amp;#34;&lt;/span>&lt;span style="color:#a6be9d">1.0&lt;/span>&lt;span style="color:#a6be9d">&amp;#34;&amp;gt;)&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">ws&lt;/span>.&lt;span style="color:#58a1dd">append&lt;/span>(&lt;span style="color:#a6be9d">L&lt;/span>&lt;span style="color:#a6be9d">&amp;#34;&lt;/span>&lt;span style="color:#a6be9d">\n&lt;/span>&lt;span style="color:#a6be9d">&amp;lt;root&amp;gt;&lt;/span>&lt;span style="color:#a6be9d">\n&lt;/span>&lt;span style="color:#a6be9d"> &amp;lt;algorithm&amp;gt;&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .&lt;span style="color:#58a1dd">append&lt;/span>(&lt;span style="color:#58a1dd">result&lt;/span>.&lt;span style="color:#58a1dd">algorithm&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .&lt;span style="color:#58a1dd">append&lt;/span>(&lt;span style="color:#a6be9d">L&lt;/span>&lt;span style="color:#a6be9d">&amp;#34;&amp;lt;/algorithm&amp;gt;&lt;/span>&lt;span style="color:#a6be9d">\n&lt;/span>&lt;span style="color:#a6be9d"> &amp;lt;files&amp;gt;&lt;/span>&lt;span style="color:#a6be9d">\n&lt;/span>&lt;span style="color:#a6be9d">&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">for&lt;/span> (&lt;span style="color:#ff636f">const&lt;/span> &lt;span style="color:#ff636f">auto&lt;/span> &lt;span style="color:#ff636f">&amp;amp;&lt;/span>&lt;span style="color:#58a1dd">e&lt;/span> : &lt;span style="color:#58a1dd">result&lt;/span>.&lt;span style="color:#58a1dd">elems&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">ws&lt;/span>.&lt;span style="color:#58a1dd">append&lt;/span>(&lt;span style="color:#a6be9d">L&lt;/span>&lt;span style="color:#a6be9d">&amp;#34; &amp;lt;file&amp;gt;&lt;/span>&lt;span style="color:#a6be9d">\n&lt;/span>&lt;span style="color:#a6be9d"> &amp;lt;name&amp;gt;&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .&lt;span style="color:#58a1dd">append&lt;/span>(&lt;span style="color:#58a1dd">e&lt;/span>.&lt;span style="color:#58a1dd">filename&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .&lt;span style="color:#58a1dd">append&lt;/span>(&lt;span style="color:#a6be9d">L&lt;/span>&lt;span style="color:#a6be9d">&amp;#34;&amp;lt;/name&amp;gt;&lt;/span>&lt;span style="color:#a6be9d">\n&lt;/span>&lt;span style="color:#a6be9d"> &amp;lt;hash&amp;gt;&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .&lt;span style="color:#58a1dd">append&lt;/span>(&lt;span style="color:#58a1dd">e&lt;/span>.&lt;span style="color:#58a1dd">hash&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .&lt;span style="color:#58a1dd">append&lt;/span>(&lt;span style="color:#a6be9d">L&lt;/span>&lt;span style="color:#a6be9d">&amp;#34;&amp;lt;/hash&amp;gt;&lt;/span>&lt;span style="color:#a6be9d">\n&lt;/span>&lt;span style="color:#a6be9d"> &amp;lt;/file&amp;gt;&lt;/span>&lt;span style="color:#a6be9d">\n&lt;/span>&lt;span style="color:#a6be9d">&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">ws&lt;/span>.&lt;span style="color:#58a1dd">append&lt;/span>(&lt;span style="color:#a6be9d">L&lt;/span>&lt;span style="color:#a6be9d">&amp;#34; &amp;lt;/files&amp;gt;&lt;/span>&lt;span style="color:#a6be9d">\n&lt;/span>&lt;span style="color:#a6be9d">&amp;lt;/root&amp;gt;&lt;/span>&lt;span style="color:#a6be9d">\n&lt;/span>&lt;span style="color:#a6be9d">&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">console&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">WriteFormatted&lt;/span>(&lt;span style="color:#58a1dd">ws&lt;/span>.&lt;span style="color:#58a1dd">data&lt;/span>(), &lt;span style="color:#58a1dd">ws&lt;/span>.&lt;span style="color:#58a1dd">size&lt;/span>());
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">return&lt;/span> &lt;span style="color:#a6be9d">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff636f">int&lt;/span> &lt;span style="color:#58a1dd">KisasumPrintJSON&lt;/span>(&lt;span style="color:#ff636f">const&lt;/span> &lt;span style="color:#58a1dd">KisasumResult&lt;/span> &lt;span style="color:#ff636f">&amp;amp;&lt;/span>&lt;span style="color:#58a1dd">result&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">std&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">wstring&lt;/span> &lt;span style="color:#58a1dd">ws&lt;/span>(&lt;span style="color:#a6be9d">L&lt;/span>&lt;span style="color:#a6be9d">&amp;#34;{&lt;/span>&lt;span style="color:#a6be9d">\n&lt;/span>&lt;span style="color:#a6be9d">&amp;#34;&lt;/span>); &lt;span style="color:#828b96;font-style:italic">/// start
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span> &lt;span style="color:#58a1dd">ws&lt;/span>.&lt;span style="color:#58a1dd">append&lt;/span>(&lt;span style="color:#a6be9d">L&lt;/span>&lt;span style="color:#a6be9d">&amp;#34; &lt;/span>&lt;span style="color:#a6be9d">\&amp;#34;&lt;/span>&lt;span style="color:#a6be9d">algorithm&lt;/span>&lt;span style="color:#a6be9d">\&amp;#34;&lt;/span>&lt;span style="color:#a6be9d">: &lt;/span>&lt;span style="color:#a6be9d">\&amp;#34;&lt;/span>&lt;span style="color:#a6be9d">&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .&lt;span style="color:#58a1dd">append&lt;/span>(&lt;span style="color:#58a1dd">result&lt;/span>.&lt;span style="color:#58a1dd">algorithm&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .&lt;span style="color:#58a1dd">append&lt;/span>(&lt;span style="color:#a6be9d">L&lt;/span>&lt;span style="color:#a6be9d">&amp;#34;&lt;/span>&lt;span style="color:#a6be9d">\&amp;#34;&lt;/span>&lt;span style="color:#a6be9d">,&lt;/span>&lt;span style="color:#a6be9d">\n&lt;/span>&lt;span style="color:#a6be9d"> &lt;/span>&lt;span style="color:#a6be9d">\&amp;#34;&lt;/span>&lt;span style="color:#a6be9d">files&lt;/span>&lt;span style="color:#a6be9d">\&amp;#34;&lt;/span>&lt;span style="color:#a6be9d">: &lt;/span>&lt;span style="color:#a6be9d">\n&lt;/span>&lt;span style="color:#a6be9d"> [&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">for&lt;/span> (&lt;span style="color:#ff636f">const&lt;/span> &lt;span style="color:#ff636f">auto&lt;/span> &lt;span style="color:#ff636f">&amp;amp;&lt;/span>&lt;span style="color:#58a1dd">e&lt;/span> : &lt;span style="color:#58a1dd">result&lt;/span>.&lt;span style="color:#58a1dd">elems&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">ws&lt;/span>.&lt;span style="color:#58a1dd">append&lt;/span>(&lt;span style="color:#a6be9d">L&lt;/span>&lt;span style="color:#a6be9d">&amp;#34;&lt;/span>&lt;span style="color:#a6be9d">\n&lt;/span>&lt;span style="color:#a6be9d"> {&lt;/span>&lt;span style="color:#a6be9d">\n&lt;/span>&lt;span style="color:#a6be9d"> &lt;/span>&lt;span style="color:#a6be9d">\&amp;#34;&lt;/span>&lt;span style="color:#a6be9d">name&lt;/span>&lt;span style="color:#a6be9d">\&amp;#34;&lt;/span>&lt;span style="color:#a6be9d">: &lt;/span>&lt;span style="color:#a6be9d">\&amp;#34;&lt;/span>&lt;span style="color:#a6be9d">&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .&lt;span style="color:#58a1dd">append&lt;/span>(&lt;span style="color:#58a1dd">e&lt;/span>.&lt;span style="color:#58a1dd">filename&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .&lt;span style="color:#58a1dd">append&lt;/span>(&lt;span style="color:#a6be9d">L&lt;/span>&lt;span style="color:#a6be9d">&amp;#34;&lt;/span>&lt;span style="color:#a6be9d">\&amp;#34;&lt;/span>&lt;span style="color:#a6be9d">,&lt;/span>&lt;span style="color:#a6be9d">\n&lt;/span>&lt;span style="color:#a6be9d"> &lt;/span>&lt;span style="color:#a6be9d">\&amp;#34;&lt;/span>&lt;span style="color:#a6be9d">hash&lt;/span>&lt;span style="color:#a6be9d">\&amp;#34;&lt;/span>&lt;span style="color:#a6be9d">: &lt;/span>&lt;span style="color:#a6be9d">\&amp;#34;&lt;/span>&lt;span style="color:#a6be9d">&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .&lt;span style="color:#58a1dd">append&lt;/span>(&lt;span style="color:#58a1dd">e&lt;/span>.&lt;span style="color:#58a1dd">hash&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .&lt;span style="color:#58a1dd">append&lt;/span>(&lt;span style="color:#a6be9d">L&lt;/span>&lt;span style="color:#a6be9d">&amp;#34;&lt;/span>&lt;span style="color:#a6be9d">\&amp;#34;\n&lt;/span>&lt;span style="color:#a6be9d"> },&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">if&lt;/span> (&lt;span style="color:#58a1dd">ws&lt;/span>.&lt;span style="color:#58a1dd">back&lt;/span>() &lt;span style="color:#ff636f">==&lt;/span> &lt;span style="color:#a6be9d">L&lt;/span>&lt;span style="color:#a6be9d">&amp;#39;,&amp;#39;&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">ws&lt;/span>.&lt;span style="color:#58a1dd">pop_back&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">ws&lt;/span>.&lt;span style="color:#58a1dd">append&lt;/span>(&lt;span style="color:#a6be9d">L&lt;/span>&lt;span style="color:#a6be9d">&amp;#34;&lt;/span>&lt;span style="color:#a6be9d">\n&lt;/span>&lt;span style="color:#a6be9d"> ]&lt;/span>&lt;span style="color:#a6be9d">\n&lt;/span>&lt;span style="color:#a6be9d">}&lt;/span>&lt;span style="color:#a6be9d">\n&lt;/span>&lt;span style="color:#a6be9d">&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">console&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">WriteFormatted&lt;/span>(&lt;span style="color:#58a1dd">ws&lt;/span>.&lt;span style="color:#58a1dd">data&lt;/span>(), &lt;span style="color:#58a1dd">ws&lt;/span>.&lt;span style="color:#58a1dd">size&lt;/span>());
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">return&lt;/span> &lt;span style="color:#a6be9d">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>最后输出到控制台，控制台进行了封装。&lt;/p>
&lt;h2 id="最后">最后&lt;/h2>
&lt;p>欢迎大家使用和提出宝贵意见。&lt;/p>
- https://forcemz.net/posts/2017/2017-09-01-kisasum-hash-utility/ - Copyright (c) 2009-2024 J23</description></item><item><title>基于 Powershell Core 的 Git 存储库加密方案</title><link>https://forcemz.net/posts/2017/2017-07-31-git-secure-with-powershell/</link><pubDate>Mon, 31 Jul 2017 10:00:00 +0800</pubDate><guid>https://forcemz.net/posts/2017/2017-07-31-git-secure-with-powershell/</guid><description>江二十三的思考 https://forcemz.net/posts/2017/2017-07-31-git-secure-with-powershell/ -&lt;h2 id="背景">背景&lt;/h2>
&lt;p>虽然码云提供免费私有存储库，但一些用户还是认为网站管理员可以看到他们的源码，认为私有库也不太安全。而且这些用户也没有私有化部署的打算。如何消除他们的疑虑？使用笔者开发的 &lt;strong>Git-Secure&lt;/strong> 就可以实现存储库的加密。项目开源地址：&lt;a href="https://gitee.com/oscstudio/git-secure">Git-Secure&lt;/a>&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-usage" data-lang="usage">Git Secure utilies 1.0
Usage: git-secure cmd args
add add file contents to the index
clone clone a encrypted repository
config config your secure repository
commit create a commit
diff show commit changes between commit worktree
init initialize a secure repository
key create a aes key
pull Fetch from and integrate with another repository or a local branch
push Update remote refs along with associated objects
remote set remote for secure repositroy
status Show the working tree status
help print help message
&lt;/code>&lt;/pre>&lt;h2 id="其他方案">其他方案&lt;/h2>
&lt;p>笔者在开发 Git-Secure 之前也去了解过有什么方案支持存储库加密，在 Github 上有一个简单的项目，将所有的文件压缩后创建单文件存储库，加密后提交，然后推送到远程服务器。这样有一些缺点，第一，无法通过 diff 查看文件变更；第二，由于 git 的快照特性，存储库的膨胀会很严重。因此笔者还是决定自己动手开发。&lt;/p>
&lt;h2 id="powershell">PowerShell&lt;/h2>
&lt;p>在实现一系列的 git 功能时，我们可以直接使用 git 命令，通过一些 shell 脚本将 git 命令组合来实现这些功能，也可以使用 libgit2 或者 libgit 调用函数来实现这些功能。第一个开发起来比较简单，于是笔者采用了第一种。得益于 PowerShell Core 的开源和跨平台，笔者作为一个熟练使用 PowerShell 脚本的开发者，肯定优先使用 PowerShell。当然相对于 Bash Shell 之类的 Shell 脚本， PowerShell 的功能更加强大，可以无缝调用 .Net 类库，比如，我们加密使用的是 AES 算法，就可以调用 &lt;code>System.Security.Cryptography.AesManaged&lt;/code> 来实现 AES 加密。&lt;/p>
&lt;h2 id="git-secure-原理">Git-Secure 原理&lt;/h2>
&lt;p>Git-Secure 原理非常简单，即本地存在两个存储库，一个是用户可见的存储库，用户使用 git-secure 的 commit, push 这些操作时，实际上是转换到隐藏的真实的存储库，用户 commit 时，将修改的文件加密后提交到隐藏的加密存储库，推送时，将隐藏存储库推送到远程服务器。&lt;/p>
&lt;p>而 Git-Secure 的 fecth,pull 等操作则是上述操作的逆过程。&lt;/p>
&lt;p>commit 源码： &lt;a href="https://gitee.com/oscstudio/git-secure/blob/master/ps/commit.ps1">ps/commit.ps1&lt;/a>&lt;/p>
&lt;p>pull 源码：&lt;a href="https://gitee.com/oscstudio/git-secure/blob/master/ps/pull.ps1">ps/pull.ps1&lt;/a>&lt;/p>
&lt;p>Git-Secure 加密使用了 AES-256，加密模块源码地址：&lt;a href="https://gitee.com/oscstudio/git-secure/blob/master/Modules/AesProvider/AesProvider.psm1">Modules/AesProvider/AesProvider.psm1&lt;/a>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#1d2432;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-powershell" data-lang="powershell">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff636f">function&lt;/span> &lt;span style="color:#58a1dd">New-AesKey&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">Param&lt;/span>(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> [&lt;span style="color:#58a1dd">Parameter&lt;/span>(&lt;span style="color:#58a1dd">Mandatory&lt;/span> = &lt;span style="color:#58a1dd">$false&lt;/span>, &lt;span style="color:#58a1dd">Position&lt;/span> = &lt;span style="color:#a6be9d">1&lt;/span>, &lt;span style="color:#58a1dd">ValueFromPipeline&lt;/span> = &lt;span style="color:#58a1dd">$true&lt;/span>)]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> [&lt;span style="color:#58a1dd">Int&lt;/span>]&lt;span style="color:#58a1dd">$KeySize&lt;/span> = &lt;span style="color:#a6be9d">256&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> )
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">try&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">$AESProvider&lt;/span> = &lt;span style="color:#58a1dd">New-Object&lt;/span> &lt;span style="color:#a6be9d">&amp;#34;System.Security.Cryptography.AesManaged&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">$AESProvider&lt;/span>.&lt;span style="color:#58a1dd">KeySize&lt;/span> = &lt;span style="color:#58a1dd">$KeySize&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">$AESProvider&lt;/span>.&lt;span style="color:#58a1dd">GenerateKey&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">return&lt;/span> [&lt;span style="color:#58a1dd">System.Convert&lt;/span>]::&lt;span style="color:#58a1dd">ToBase64String&lt;/span>(&lt;span style="color:#58a1dd">$AESProvider&lt;/span>.&lt;span style="color:#58a1dd">Key&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">catch&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">Write-Error&lt;/span> &lt;span style="color:#58a1dd">$_&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff636f">function&lt;/span> &lt;span style="color:#58a1dd">New-AesFile&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">param&lt;/span>(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> [&lt;span style="color:#58a1dd">Parameter&lt;/span>(&lt;span style="color:#58a1dd">Position&lt;/span> = &lt;span style="color:#a6be9d">0&lt;/span>, &lt;span style="color:#58a1dd">Mandatory&lt;/span> = &lt;span style="color:#58a1dd">$True&lt;/span>, &lt;span style="color:#58a1dd">HelpMessage&lt;/span> = &lt;span style="color:#a6be9d">&amp;#34;Enter your need encrypt file&amp;#34;&lt;/span>)]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> [&lt;span style="color:#58a1dd">System.IO.FileInfo&lt;/span>]&lt;span style="color:#58a1dd">$File&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> [&lt;span style="color:#58a1dd">string&lt;/span>]&lt;span style="color:#58a1dd">$Key&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> [&lt;span style="color:#58a1dd">string&lt;/span>]&lt;span style="color:#58a1dd">$Destination&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> )
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">if&lt;/span> ([&lt;span style="color:#58a1dd">System.String&lt;/span>]::&lt;span style="color:#58a1dd">IsNullOrEmpty&lt;/span>(&lt;span style="color:#58a1dd">$Destination&lt;/span>)) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">$Destination&lt;/span> = &lt;span style="color:#58a1dd">$Path&lt;/span> + &lt;span style="color:#a6be9d">&amp;#34;.crypt&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">try&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">$EncryptionKey&lt;/span> = [&lt;span style="color:#58a1dd">System.Convert&lt;/span>]::&lt;span style="color:#58a1dd">FromBase64String&lt;/span>(&lt;span style="color:#58a1dd">$Key&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">$KeySize&lt;/span> = &lt;span style="color:#58a1dd">$EncryptionKey&lt;/span>.&lt;span style="color:#58a1dd">Length&lt;/span> * &lt;span style="color:#a6be9d">8&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">$AESProvider&lt;/span> = &lt;span style="color:#58a1dd">New-Object&lt;/span> &lt;span style="color:#a6be9d">&amp;#39;System.Security.Cryptography.AesManaged&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">$AESProvider&lt;/span>.&lt;span style="color:#58a1dd">Mode&lt;/span> = [&lt;span style="color:#58a1dd">System.Security.Cryptography.CipherMode&lt;/span>]::&lt;span style="color:#58a1dd">CBC&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">$AESProvider&lt;/span>.&lt;span style="color:#58a1dd">BlockSize&lt;/span> = &lt;span style="color:#a6be9d">128&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">$AESProvider&lt;/span>.&lt;span style="color:#58a1dd">KeySize&lt;/span> = &lt;span style="color:#58a1dd">$KeySize&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">$AESProvider&lt;/span>.&lt;span style="color:#58a1dd">Key&lt;/span> = &lt;span style="color:#58a1dd">$EncryptionKey&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">Catch&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">Write-Error&lt;/span> &lt;span style="color:#a6be9d">&amp;#39;Unable to configure AES, verify you are using a valid key.&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">Return&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">Write-Verbose&lt;/span> &lt;span style="color:#a6be9d">&amp;#34;Encryping &lt;/span>$(&lt;span style="color:#58a1dd">$File&lt;/span>.&lt;span style="color:#58a1dd">FullName&lt;/span>)&lt;span style="color:#a6be9d"> with the &lt;/span>&lt;span style="color:#58a1dd">$KeySize&lt;/span>&lt;span style="color:#a6be9d">-bit key &lt;/span>&lt;span style="color:#58a1dd">$Key&lt;/span>&lt;span style="color:#a6be9d">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">Try&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">$FileStreamReader&lt;/span> = &lt;span style="color:#58a1dd">New-Object&lt;/span> &lt;span style="color:#58a1dd">System&lt;/span>.&lt;span style="color:#58a1dd">IO&lt;/span>.&lt;span style="color:#58a1dd">FileStream&lt;/span>(&lt;span style="color:#58a1dd">$File&lt;/span>.&lt;span style="color:#58a1dd">FullName&lt;/span>, [&lt;span style="color:#58a1dd">System.IO.FileMode&lt;/span>]::&lt;span style="color:#58a1dd">Open&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">Catch&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">Write-Error&lt;/span> &lt;span style="color:#a6be9d">&amp;#34;Unable to open &lt;/span>$(&lt;span style="color:#58a1dd">$File&lt;/span>.&lt;span style="color:#58a1dd">FullName&lt;/span>)&lt;span style="color:#a6be9d"> for reading.&lt;/span>&lt;span style="color:#a6be9d">`n&lt;/span>&lt;span style="color:#58a1dd">$_&lt;/span>&lt;span style="color:#a6be9d">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">return&lt;/span> &lt;span style="color:#a6be9d">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">Try&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">$FileStreamWriter&lt;/span> = &lt;span style="color:#58a1dd">New-Object&lt;/span> &lt;span style="color:#58a1dd">System&lt;/span>.&lt;span style="color:#58a1dd">IO&lt;/span>.&lt;span style="color:#58a1dd">FileStream&lt;/span>(&lt;span style="color:#58a1dd">$Destination&lt;/span>, [&lt;span style="color:#58a1dd">System.IO.FileMode&lt;/span>]::&lt;span style="color:#58a1dd">Create&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">Catch&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">Write-Error&lt;/span> &lt;span style="color:#a6be9d">&amp;#34;Unable to open &lt;/span>&lt;span style="color:#58a1dd">$Destination&lt;/span>&lt;span style="color:#a6be9d"> for writing.&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">$FileStreamReader&lt;/span>.&lt;span style="color:#58a1dd">Close&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">return&lt;/span> &lt;span style="color:#a6be9d">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">$AESProvider&lt;/span>.&lt;span style="color:#58a1dd">GenerateIV&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">$FileStreamWriter&lt;/span>.&lt;span style="color:#58a1dd">Write&lt;/span>([&lt;span style="color:#58a1dd">System.BitConverter&lt;/span>]::&lt;span style="color:#58a1dd">GetBytes&lt;/span>(&lt;span style="color:#58a1dd">$AESProvider&lt;/span>.&lt;span style="color:#58a1dd">IV&lt;/span>.&lt;span style="color:#58a1dd">Length&lt;/span>), &lt;span style="color:#a6be9d">0&lt;/span>, &lt;span style="color:#a6be9d">4&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">$FileStreamWriter&lt;/span>.&lt;span style="color:#58a1dd">Write&lt;/span>(&lt;span style="color:#58a1dd">$AESProvider&lt;/span>.&lt;span style="color:#58a1dd">IV&lt;/span>, &lt;span style="color:#a6be9d">0&lt;/span>, &lt;span style="color:#58a1dd">$AESProvider&lt;/span>.&lt;span style="color:#58a1dd">IV&lt;/span>.&lt;span style="color:#58a1dd">Length&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">Write-Verbose&lt;/span> &lt;span style="color:#a6be9d">&amp;#34;Encrypting &lt;/span>$(&lt;span style="color:#58a1dd">$File&lt;/span>.&lt;span style="color:#58a1dd">FullName&lt;/span>)&lt;span style="color:#a6be9d"> with an IV of &lt;/span>$([&lt;span style="color:#58a1dd">System.Convert&lt;/span>]::&lt;span style="color:#58a1dd">ToBase64String&lt;/span>(&lt;span style="color:#58a1dd">$AESProvider&lt;/span>.&lt;span style="color:#58a1dd">IV&lt;/span>))&lt;span style="color:#a6be9d">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">try&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">$Transform&lt;/span> = &lt;span style="color:#58a1dd">$AESProvider&lt;/span>.&lt;span style="color:#58a1dd">CreateEncryptor&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">$CryptoStream&lt;/span> = &lt;span style="color:#58a1dd">New-Object&lt;/span> &lt;span style="color:#58a1dd">System&lt;/span>.&lt;span style="color:#58a1dd">Security&lt;/span>.&lt;span style="color:#58a1dd">Cryptography&lt;/span>.&lt;span style="color:#58a1dd">CryptoStream&lt;/span>(&lt;span style="color:#58a1dd">$FileStreamWriter&lt;/span>, &lt;span style="color:#58a1dd">$Transform&lt;/span>, [&lt;span style="color:#58a1dd">System.Security.Cryptography.CryptoStreamMode&lt;/span>]::&lt;span style="color:#58a1dd">Write&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> [&lt;span style="color:#58a1dd">Int&lt;/span>]&lt;span style="color:#58a1dd">$Count&lt;/span> = &lt;span style="color:#a6be9d">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> [&lt;span style="color:#58a1dd">Int&lt;/span>]&lt;span style="color:#58a1dd">$BlockSizeBytes&lt;/span> = &lt;span style="color:#58a1dd">$AESProvider&lt;/span>.&lt;span style="color:#58a1dd">BlockSize&lt;/span> / &lt;span style="color:#a6be9d">8&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> [&lt;span style="color:#58a1dd">Byte[]&lt;/span>]&lt;span style="color:#58a1dd">$Data&lt;/span> = &lt;span style="color:#58a1dd">New-Object&lt;/span> &lt;span style="color:#58a1dd">Byte&lt;/span>[] &lt;span style="color:#58a1dd">$BlockSizeBytes&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">Do&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">$Count&lt;/span> = &lt;span style="color:#58a1dd">$FileStreamReader&lt;/span>.&lt;span style="color:#58a1dd">Read&lt;/span>(&lt;span style="color:#58a1dd">$Data&lt;/span>, &lt;span style="color:#a6be9d">0&lt;/span>, &lt;span style="color:#58a1dd">$BlockSizeBytes&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">$CryptoStream&lt;/span>.&lt;span style="color:#58a1dd">Write&lt;/span>(&lt;span style="color:#58a1dd">$Data&lt;/span>, &lt;span style="color:#a6be9d">0&lt;/span>, &lt;span style="color:#58a1dd">$Count&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">While&lt;/span> (&lt;span style="color:#58a1dd">$Count&lt;/span> &lt;span style="color:#ff636f">-gt&lt;/span> &lt;span style="color:#a6be9d">0&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#828b96;font-style:italic">#Close open files&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">$CryptoStream&lt;/span>.&lt;span style="color:#58a1dd">FlushFinalBlock&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">$CryptoStream&lt;/span>.&lt;span style="color:#58a1dd">Close&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">$FileStreamReader&lt;/span>.&lt;span style="color:#58a1dd">Close&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">$FileStreamWriter&lt;/span>.&lt;span style="color:#58a1dd">Close&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">Write-Verbose&lt;/span> &lt;span style="color:#a6be9d">&amp;#34;Successfully encrypted &lt;/span>$(&lt;span style="color:#58a1dd">$File&lt;/span>.&lt;span style="color:#58a1dd">FullName&lt;/span>)&lt;span style="color:#a6be9d">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">catch&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">Write-Error&lt;/span> &lt;span style="color:#a6be9d">&amp;#34;Failed to encrypt &lt;/span>$(&lt;span style="color:#58a1dd">$File&lt;/span>.&lt;span style="color:#58a1dd">FullName&lt;/span>)&lt;span style="color:#a6be9d">.&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">$CryptoStream&lt;/span>.&lt;span style="color:#58a1dd">Close&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">$FileStreamWriter&lt;/span>.&lt;span style="color:#58a1dd">Close&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">$FileStreamReader&lt;/span>.&lt;span style="color:#58a1dd">Close&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">Remove-Item&lt;/span> &lt;span style="color:#58a1dd">$Destination&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">return&lt;/span> &lt;span style="color:#a6be9d">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">return&lt;/span> &lt;span style="color:#a6be9d">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff636f">function&lt;/span> &lt;span style="color:#58a1dd">Restore-AesFile&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">param&lt;/span>(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> [&lt;span style="color:#58a1dd">System.IO.FileInfo&lt;/span>]&lt;span style="color:#58a1dd">$File&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> [&lt;span style="color:#58a1dd">string&lt;/span>]&lt;span style="color:#58a1dd">$Key&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> [&lt;span style="color:#58a1dd">string&lt;/span>]&lt;span style="color:#58a1dd">$Destination&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> )
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">try&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">$EncryptionKey&lt;/span> = [&lt;span style="color:#58a1dd">System.Convert&lt;/span>]::&lt;span style="color:#58a1dd">FromBase64String&lt;/span>(&lt;span style="color:#58a1dd">$Key&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">$KeySize&lt;/span> = &lt;span style="color:#58a1dd">$EncryptionKey&lt;/span>.&lt;span style="color:#58a1dd">Length&lt;/span> * &lt;span style="color:#a6be9d">8&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">$AESProvider&lt;/span> = &lt;span style="color:#58a1dd">New-Object&lt;/span> &lt;span style="color:#a6be9d">&amp;#39;System.Security.Cryptography.AesManaged&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">$AESProvider&lt;/span>.&lt;span style="color:#58a1dd">Mode&lt;/span> = [&lt;span style="color:#58a1dd">System.Security.Cryptography.CipherMode&lt;/span>]::&lt;span style="color:#58a1dd">CBC&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">$AESProvider&lt;/span>.&lt;span style="color:#58a1dd">BlockSize&lt;/span> = &lt;span style="color:#a6be9d">128&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">$AESProvider&lt;/span>.&lt;span style="color:#58a1dd">KeySize&lt;/span> = &lt;span style="color:#58a1dd">$KeySize&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">$AESProvider&lt;/span>.&lt;span style="color:#58a1dd">Key&lt;/span> = &lt;span style="color:#58a1dd">$EncryptionKey&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">Catch&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">Write-Error&lt;/span> &lt;span style="color:#a6be9d">&amp;#39;Unable to configure AES, verify you are using a valid key.&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">Return&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">Write-Verbose&lt;/span> &lt;span style="color:#a6be9d">&amp;#34;Encryping &lt;/span>$(&lt;span style="color:#58a1dd">$File&lt;/span>.&lt;span style="color:#58a1dd">FullName&lt;/span>)&lt;span style="color:#a6be9d"> with the &lt;/span>&lt;span style="color:#58a1dd">$KeySize&lt;/span>&lt;span style="color:#a6be9d">-bit key &lt;/span>&lt;span style="color:#58a1dd">$Key&lt;/span>&lt;span style="color:#a6be9d">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#828b96;font-style:italic">#Open file to decrypt&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">Try&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">$FileStreamReader&lt;/span> = &lt;span style="color:#58a1dd">New-Object&lt;/span> &lt;span style="color:#58a1dd">System&lt;/span>.&lt;span style="color:#58a1dd">IO&lt;/span>.&lt;span style="color:#58a1dd">FileStream&lt;/span>(&lt;span style="color:#58a1dd">$File&lt;/span>.&lt;span style="color:#58a1dd">FullName&lt;/span>, [&lt;span style="color:#58a1dd">System.IO.FileMode&lt;/span>]::&lt;span style="color:#58a1dd">Open&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">Catch&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">Write-Error&lt;/span> &lt;span style="color:#a6be9d">&amp;#34;Unable to open &lt;/span>$(&lt;span style="color:#58a1dd">$File&lt;/span>.&lt;span style="color:#58a1dd">FullName&lt;/span>)&lt;span style="color:#a6be9d"> for reading.&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">return&lt;/span> &lt;span style="color:#a6be9d">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">Try&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">$FileStreamWriter&lt;/span> = &lt;span style="color:#58a1dd">New-Object&lt;/span> &lt;span style="color:#58a1dd">System&lt;/span>.&lt;span style="color:#58a1dd">IO&lt;/span>.&lt;span style="color:#58a1dd">FileStream&lt;/span>(&lt;span style="color:#58a1dd">$Destination&lt;/span>, [&lt;span style="color:#58a1dd">System.IO.FileMode&lt;/span>]::&lt;span style="color:#58a1dd">Create&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">Catch&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">Write-Error&lt;/span> &lt;span style="color:#a6be9d">&amp;#34;Unable to open &lt;/span>&lt;span style="color:#58a1dd">$DestinationFile&lt;/span>&lt;span style="color:#a6be9d"> for writing.&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">$FileStreamReader&lt;/span>.&lt;span style="color:#58a1dd">Close&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">return&lt;/span> &lt;span style="color:#a6be9d">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#828b96;font-style:italic">#Get IV&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">try&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> [&lt;span style="color:#58a1dd">Byte[]&lt;/span>]&lt;span style="color:#58a1dd">$LenIV&lt;/span> = &lt;span style="color:#58a1dd">New-Object&lt;/span> &lt;span style="color:#58a1dd">Byte&lt;/span>[] &lt;span style="color:#a6be9d">4&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">$FileStreamReader&lt;/span>.&lt;span style="color:#58a1dd">Seek&lt;/span>(&lt;span style="color:#a6be9d">0&lt;/span>, [&lt;span style="color:#58a1dd">System.IO.SeekOrigin&lt;/span>]::&lt;span style="color:#ff636f">Begin&lt;/span>) | &lt;span style="color:#58a1dd">Out-Null&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">$FileStreamReader&lt;/span>.&lt;span style="color:#58a1dd">Read&lt;/span>(&lt;span style="color:#58a1dd">$LenIV&lt;/span>, &lt;span style="color:#a6be9d">0&lt;/span>, &lt;span style="color:#a6be9d">3&lt;/span>) | &lt;span style="color:#58a1dd">Out-Null&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> [&lt;span style="color:#58a1dd">Int&lt;/span>]&lt;span style="color:#58a1dd">$LIV&lt;/span> = [&lt;span style="color:#58a1dd">System.BitConverter&lt;/span>]::&lt;span style="color:#58a1dd">ToInt32&lt;/span>(&lt;span style="color:#58a1dd">$LenIV&lt;/span>, &lt;span style="color:#a6be9d">0&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> [&lt;span style="color:#58a1dd">Byte[]&lt;/span>]&lt;span style="color:#58a1dd">$IV&lt;/span> = &lt;span style="color:#58a1dd">New-Object&lt;/span> &lt;span style="color:#58a1dd">Byte&lt;/span>[] &lt;span style="color:#58a1dd">$LIV&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">$FileStreamReader&lt;/span>.&lt;span style="color:#58a1dd">Seek&lt;/span>(&lt;span style="color:#a6be9d">4&lt;/span>, [&lt;span style="color:#58a1dd">System.IO.SeekOrigin&lt;/span>]::&lt;span style="color:#ff636f">Begin&lt;/span>) | &lt;span style="color:#58a1dd">Out-Null&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">$FileStreamReader&lt;/span>.&lt;span style="color:#58a1dd">Read&lt;/span>(&lt;span style="color:#58a1dd">$IV&lt;/span>, &lt;span style="color:#a6be9d">0&lt;/span>, &lt;span style="color:#58a1dd">$LIV&lt;/span>) | &lt;span style="color:#58a1dd">Out-Null&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">$AESProvider&lt;/span>.&lt;span style="color:#58a1dd">IV&lt;/span> = &lt;span style="color:#58a1dd">$IV&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">catch&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">Write-Error&lt;/span> &lt;span style="color:#a6be9d">&amp;#39;Unable to read IV from file, verify this file was made using the included New-AesFile function.&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">return&lt;/span> &lt;span style="color:#a6be9d">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">Write-Verbose&lt;/span> &lt;span style="color:#a6be9d">&amp;#34;Decrypting &lt;/span>$(&lt;span style="color:#58a1dd">$File&lt;/span>.&lt;span style="color:#58a1dd">FullName&lt;/span>)&lt;span style="color:#a6be9d"> with an IV of &lt;/span>$([&lt;span style="color:#58a1dd">System.Convert&lt;/span>]::&lt;span style="color:#58a1dd">ToBase64String&lt;/span>(&lt;span style="color:#58a1dd">$AESProvider&lt;/span>.&lt;span style="color:#58a1dd">IV&lt;/span>))&lt;span style="color:#a6be9d">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#828b96;font-style:italic">#Decrypt&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">try&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">$Transform&lt;/span> = &lt;span style="color:#58a1dd">$AESProvider&lt;/span>.&lt;span style="color:#58a1dd">CreateDecryptor&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> [&lt;span style="color:#58a1dd">Int&lt;/span>]&lt;span style="color:#58a1dd">$Count&lt;/span> = &lt;span style="color:#a6be9d">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> [&lt;span style="color:#58a1dd">Int&lt;/span>]&lt;span style="color:#58a1dd">$BlockSizeBytes&lt;/span> = &lt;span style="color:#58a1dd">$AESProvider&lt;/span>.&lt;span style="color:#58a1dd">BlockSize&lt;/span> / &lt;span style="color:#a6be9d">8&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> [&lt;span style="color:#58a1dd">Byte[]&lt;/span>]&lt;span style="color:#58a1dd">$Data&lt;/span> = &lt;span style="color:#58a1dd">New-Object&lt;/span> &lt;span style="color:#58a1dd">Byte&lt;/span>[] &lt;span style="color:#58a1dd">$BlockSizeBytes&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">$CryptoStream&lt;/span> = &lt;span style="color:#58a1dd">New-Object&lt;/span> &lt;span style="color:#58a1dd">System&lt;/span>.&lt;span style="color:#58a1dd">Security&lt;/span>.&lt;span style="color:#58a1dd">Cryptography&lt;/span>.&lt;span style="color:#58a1dd">CryptoStream&lt;/span>(&lt;span style="color:#58a1dd">$FileStreamWriter&lt;/span>, &lt;span style="color:#58a1dd">$Transform&lt;/span>, [&lt;span style="color:#58a1dd">System.Security.Cryptography.CryptoStreamMode&lt;/span>]::&lt;span style="color:#58a1dd">Write&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">Do&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">$Count&lt;/span> = &lt;span style="color:#58a1dd">$FileStreamReader&lt;/span>.&lt;span style="color:#58a1dd">Read&lt;/span>(&lt;span style="color:#58a1dd">$Data&lt;/span>, &lt;span style="color:#a6be9d">0&lt;/span>, &lt;span style="color:#58a1dd">$BlockSizeBytes&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">$CryptoStream&lt;/span>.&lt;span style="color:#58a1dd">Write&lt;/span>(&lt;span style="color:#58a1dd">$Data&lt;/span>, &lt;span style="color:#a6be9d">0&lt;/span>, &lt;span style="color:#58a1dd">$Count&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">While&lt;/span> (&lt;span style="color:#58a1dd">$Count&lt;/span> &lt;span style="color:#ff636f">-gt&lt;/span> &lt;span style="color:#a6be9d">0&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">$CryptoStream&lt;/span>.&lt;span style="color:#58a1dd">FlushFinalBlock&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">$CryptoStream&lt;/span>.&lt;span style="color:#58a1dd">Close&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">$FileStreamWriter&lt;/span>.&lt;span style="color:#58a1dd">Close&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">$FileStreamReader&lt;/span>.&lt;span style="color:#58a1dd">Close&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">Write-Verbose&lt;/span> &lt;span style="color:#a6be9d">&amp;#34;Successfully decrypted &lt;/span>$(&lt;span style="color:#58a1dd">$File&lt;/span>.&lt;span style="color:#58a1dd">FullName&lt;/span>)&lt;span style="color:#a6be9d">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">catch&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">Write-Error&lt;/span> &lt;span style="color:#a6be9d">&amp;#34;Failed to decrypt &lt;/span>$(&lt;span style="color:#58a1dd">$File&lt;/span>.&lt;span style="color:#58a1dd">FullName&lt;/span>)&lt;span style="color:#a6be9d">.&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">$CryptoStream&lt;/span>.&lt;span style="color:#58a1dd">Close&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">$FileStreamWriter&lt;/span>.&lt;span style="color:#58a1dd">Close&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">$FileStreamReader&lt;/span>.&lt;span style="color:#58a1dd">Close&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">Remove-Item&lt;/span> &lt;span style="color:#58a1dd">$Destination&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">return&lt;/span> &lt;span style="color:#a6be9d">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">return&lt;/span> &lt;span style="color:#a6be9d">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>所以说这工具并没有什么技术含量，主要是功能的整合。我在使用 PowerShell 管道的解析 git 的输出时感觉比 Shell 脚本方便多了。&lt;/p>
&lt;h2 id="最后关于-powershell">最后关于 PowerShell&lt;/h2>
&lt;p>非常推荐 PowerShell。&lt;/p>
&lt;h2 id="其他">其他&lt;/h2>
&lt;p>相关新闻链接 &lt;a href="https://www.oschina.net/news/87432/git-1-0-released">码云存储库加密工具 1.0 正式发布&lt;/a>&lt;/p>
- https://forcemz.net/posts/2017/2017-07-31-git-secure-with-powershell/ - Copyright (c) 2009-2024 J23</description></item><item><title>Clangbuilder 和 libcxx</title><link>https://forcemz.net/posts/2017/2017-07-29-clangbuild-and-libcxx/</link><pubDate>Sat, 29 Jul 2017 10:00:00 +0800</pubDate><guid>https://forcemz.net/posts/2017/2017-07-29-clangbuild-and-libcxx/</guid><description>江二十三的思考 https://forcemz.net/posts/2017/2017-07-29-clangbuild-and-libcxx/ -&lt;h1 id="前言">前言&lt;/h1>
&lt;p>作为一个 C++ 开发者，自然少不了与编译器打交道。
笔者在 2013年1月17日 发布了第一个 ClangOnWindows 二进制包 &lt;a href="https://sourceforge.net/projects/clangonwin/">ClangOnWindows&lt;/a>，截至 2017-07-29，一共被下载 19212 次，实际上构建 LLVM/Clang 是一个非常耗时的事，于是乎笔者于 2014 年国庆节期间编写了 Clangbuilder，这是一个基于 Powershell 的 LLVM/Clang 自动化构建工具，能够自动下载工具链（除 Visual Studio）,自动获取 LLVM 源码，自动执行构建命令。Clangbuilder 的初期并不支持 libcxx 的构建，原因无他，当时 libcxx 不支持 Windows (for MSVC)，现在依然如此，不过现在可以使用 &lt;code>clang-cl&lt;/code> 构建 libcxx。本文即介绍通过 Clangbuilder 构建 libcxx。&lt;/p>
&lt;h2 id="clangbuilder">Clangbuilder&lt;/h2>
&lt;p>&lt;a href="https://github.com/fstudio/clangbuilder">Clangbuilder&lt;/a> 是一个基于 Powershell 的 LLVM/Clang 自动化构建工具，通常用户在双击 &lt;code>InitializeEnv.bat&lt;/code> 脚本后，安装脚本将自动安装构建 LLVM/Clang 所需的工具依赖。核心依赖如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#1d2432;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-json" data-lang="json">&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">&amp;#34;core&amp;#34;&lt;/span>: [
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6be9d">&amp;#34;7z&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6be9d">&amp;#34;cmake&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6be9d">&amp;#34;git&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6be9d">&amp;#34;ninja&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6be9d">&amp;#34;nsis&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6be9d">&amp;#34;nuget&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6be9d">&amp;#34;python2&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6be9d">&amp;#34;vswhere&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Clangbuilder devinstall 还支持如下工具：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#1d2432;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-txt" data-lang="txt">&lt;span style="display:flex;">&lt;span>7z 18.03 7-Zip is a file archiver with a high compression ratio
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>aria2 1.33.1 The ultra fast download utility
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>cmake 3.11.0 CMake is an open-source, cross-platform family of tools designed to build, test and package software
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>curl 7.59.0 Curl is a command-line tool for transferring data specified with URL syntax.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>git 2.17.0 Git is a modern distributed version control system focused on speed
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>gnuutils 1.0 GNU utils for Windows
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>hg 4.5.2 Mercurial is a free, distributed source control management tool.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>ninja 1.8.2 Ninja is a small build system with a focus on speed.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>nsis 3.03 NSIS (Nullsoft Scriptable Install System) is a professional open source system to create Windows installers.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>nuget 4.6.1 NuGet is the package manager for .NET. The NuGet client tools provide the ability to produce and consume packages.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>openssh v7.6.1.0p1-Beta Portable OpenSSH
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>putty 0.70 PuTTY: a free SSH and Telnet client.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>python2 2.7.14 Python 2.7
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>swigwin 3.0.12 Simplified Wrapper and Interface Generator
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>vswhere 2.4.1 Locate Visual Studio 2017 and newer installations.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>wget 1.19.4 A command-line utility for retrieving files using HTTP, HTTPS and FTP protocols.
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>我们支持 msi 和 zip 以及单文件工具，当安装 &lt;code>7z&lt;/code> 后，可以解压 &lt;code>tar.gz&lt;/code>，&lt;code>.iso&lt;/code> 等格式的文件&lt;/p>
&lt;p>下载依赖后，Clangbuilder 会自动构建一个图形化工具叫 &lt;code>ClangbuilderUI&lt;/code>，用户可以使用 ClangbuilderUI 来一键构建或者启动环境。&lt;/p>
&lt;p>&lt;img src="https://github.com/fstudio/clangbuilder/raw/master/docs/images/cbui.png" alt="CangbuilderUI">&lt;/p>
&lt;p>由于 Windows 10 新增了很多特性，ClangbuilderUI 目前已经不支持 Windows 10 以下的版本，开发者可以自己去修改 ClangbuilderUI。&lt;/p>
&lt;h2 id="libc">Libc++&lt;/h2>
&lt;p>Libc++ 是一个非常优秀的 C++ 标准库的实现，目前是 macOS iOS 上默认的 C++ 标准库，其开发者非常活跃，因此，此项目在吸收新技术的方面值得称赞，比如 libc++ 目前已经实验性的支持 &lt;code>coroutine&lt;/code> 了（微软 Visual C++ 团队大牛贡献）。由于是重新实现的，避免了很多 C++98 时期以来的坑。但是在 Windows 上一直处于无法编译的尴尬，使用 MinGW 编译的也就只能使用 MinGW 的一系列工具了，在 libcxx 开发者和 Visual C++ STL 开发者 STL 等人的共同努力下，libc++ 终于能够被 &lt;code>clang-cl&lt;/code> 编译，由于目前 Visual C++ 不支持 &lt;code>include_next&lt;/code> 特性，因此也就不能编译 libcxx。&lt;/p>
&lt;p>详细的文档可以查看 &lt;a href="http://libcxx.llvm.org/docs/BuildingLibcxx.html#experimental-support-for-windows">Experimental Support for Windows&lt;/a>&lt;/p>
&lt;p>因此在 Windows 上基于 MSVC 构建兼容的 Clang 版本时如果需要构建 libcxx 时，需要支持编译器为 clang-cl，而 Clangbuilder 目前支持 &lt;code>NinjaBootstarp&lt;/code> 和 &lt;code>NinjaIterate&lt;/code> 两种机制构建 libcxx ，在 ClangbuilderUI 中选择相应的 Engine 即可。第一种顾名思义就是使用 Ninja 自举，先使用 MSVC 构建第一个版本的 Clang, 然后再使用 CMake 生成 ninja 构建文件，这是将编译器替换为 clang-cl，然后设置编译 Libcxx， 如果代码没有错误，也就构建成功了。&lt;/p>
&lt;p>而 NinjaIterate 需要预先构建的 clang-cl，这种非常适用于笔者这种经常构建 clang 的人士，修改 &lt;a href="https://github.com/fstudio/clangbuilder/blob/master/config/prebuilt.json">config/prebuilt.json&lt;/a> 设置好预构建的 clang 的路径和架构，Clangbuilder 将自动识别并构建。没有代码错误就能很快构建成功。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#1d2432;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-json" data-lang="json">&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">&amp;#34;LLVM&amp;#34;&lt;/span>: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">&amp;#34;Path&amp;#34;&lt;/span>: &lt;span style="color:#a6be9d">&amp;#34;D:/LLVM&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">&amp;#34;Arch&amp;#34;&lt;/span>: &lt;span style="color:#a6be9d">&amp;#34;x64&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Clangbuilder 支持将 LLVM 自动打包成安装文件，由于 libcxx 的项目文件并未将 &lt;code>c++.dll&lt;/code> 安装配置好，因此，在使用 libc++ 的时候需要将 c++.dll 拷贝道 PATH 或者项目目录等。&lt;/p>
&lt;p>使用 libc++ 的命令行：&lt;/p>
&lt;blockquote>
&lt;p>clang++ -std=c++11 -stdlib=libc++ -nostdinc++ -Iinclude\c++\v1 -Llib hello.cc -lc++&lt;/p>
&lt;/blockquote>
&lt;p>然后就可以运行程序了。&lt;/p>
&lt;p>也可以使用&lt;/p>
&lt;blockquote>
&lt;p>clang-cl -std:c++14 -Iinclude\c++\v1 hello.cc c++.lib&lt;/p>
&lt;/blockquote>
&lt;p>值得注意的是，静态链接似乎是不起作用的。&lt;/p>
&lt;h2 id="最后">最后&lt;/h2>
&lt;p>Clangbuilder 是个好工具，希望对大家有用。&lt;/p>
- https://forcemz.net/posts/2017/2017-07-29-clangbuild-and-libcxx/ - Copyright (c) 2009-2024 J23</description></item><item><title>Privexec 的内幕（一）标准输出原理与彩色输出实现</title><link>https://forcemz.net/posts/2017/2017-06-05-color-console/</link><pubDate>Mon, 05 Jun 2017 20:00:00 +0800</pubDate><guid>https://forcemz.net/posts/2017/2017-06-05-color-console/</guid><description>江二十三的思考 https://forcemz.net/posts/2017/2017-06-05-color-console/ -&lt;h1 id="前言">前言&lt;/h1>
&lt;p>&lt;a href="https://github.com/M2Team/Privexec">Privexec&lt;/a> 是笔者借鉴远景好友 MouriNaruto 的 &lt;a href="https://github.com/M2Team/NSudo">NSudo&lt;/a> 而开发的一个&lt;strong>提权或者降权&lt;/strong>执行进程的工具。其中 wsudo 是 Privexec 的命令行版本。&lt;/p>
&lt;p>在 wsudo 中，笔者使用了 Privexec.Console 提供彩色输出，截图如下：&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/M2Team/Privexec/master/docs/images/wsudo.png" alt="wsudo">&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/M2Team/Privexec/master/docs/images/wsudo3.png" alt="wsudo3">&lt;/p>
&lt;p>本文将讲述标准输出是如何输出到控制台的，以及怎样在 Windows 中实现同时支持标准控制台和 MSYS2 Cygwin 终端模拟器以及 VT 模式的控制台彩色输出。&lt;/p>
&lt;h2 id="关于标准输出">关于标准输出&lt;/h2>
&lt;p>大部分编程语言的入门从 &lt;code>Helloworld&lt;/code> 开始，也就是将文本 &lt;code>Helloworld&lt;/code> 输出到标准输出。在 C++ 中使用 &lt;code>std::cout&lt;/code> ，在 C 中使用 &lt;code>printf&lt;/code> 以及在 C# 中使用 &lt;code>Console.Write&lt;/code>。进程启动时，操作系统或者父进程会设置好进程的标准输出&lt;sup>1&lt;/sup>。默认情况下，标准输出设备是 &lt;code>控制台 console&lt;/code> 或者是 &lt;code>终端 tty&lt;/code> 当然在启动进程前，可以将标准输出&lt;strong>重定向&lt;/strong>到 &lt;code>管道 (Pipe/Named Pipe, Pipe/FIFO)&lt;/code>，&lt;code>文件&lt;/code> 而在 Unix like 系统中，还可以将输出重定向到 &lt;code>socket&lt;/code> 等其他 Unix 文件。在 Windows 上，如果要将 IO 重定向到 socket 需要使用 &lt;code>WSASocket&lt;/code> 创建 socket，且不要使用 &lt;code>WSA_FLAG_OVERLAPPED&lt;/code> 标志。&lt;/p>
&lt;p>输出的设备或者文件存在多样性，对于 CRT 而言，标准输出的实现就要兼顾这些设备，通常来说，操作系统会提供 &lt;code>WriteFile&lt;/code> &lt;code>write&lt;/code> 这样的 API 或者系统调用支持输出，一般来说，printf 这样的函数也是使用这样的 API 或者系统调用实现。这些函数的输出优先考虑的是本机默认编码，比如 Unix 上，一般都是 UTF-8，对于兼容性大户 Windows 来说，虽然内部编码都是 UTF-16 但是输出到文件时，任然优先选择的是本机代码页，比如在简体中文系统中是，代码页也就是 936。&lt;/p>
&lt;h2 id="printf-的心路历程">Printf 的心路历程&lt;/h2>
&lt;p>在以前我曾经思考过 &lt;code>printf&lt;/code> 是如何实现的，很多开发者在开始也有同样的疑惑，在知乎上，就有人提问：&lt;a href="https://www.zhihu.com/question/28749911">printf()等系统库函数是如何实现的？&lt;/a> ，在这个问题下，有很多人回复了，有兴趣的用户可以看一下；&lt;/p>
&lt;p>在 Unix 的 CRT 中，printf 的调用历程在这篇文章中有详细介绍：&lt;a href="http://blog.hostilefork.com/where-printf-rubber-meets-road/">Where the printf() Rubber Meets the Road&lt;/a>&lt;/p>
&lt;p>在 Windows 10 中，新增了 &lt;code>Universal CRT (UCRT)&lt;/code> &lt;a href="https://msdn.microsoft.com/en-us/library/abx4dbyh.aspx">CRT Library Features&lt;/a>，&lt;a href="https://blogs.msdn.microsoft.com/vcblog/2015/03/03/introducing-the-universal-crt/">Introducing the Universal CRT&lt;/a>，与之前的 Visual C++ CRT 有了很大的不同，全部代码使用 C++11 重构，不用疑惑，正是使用 C++11 实现 &lt;strong>C&lt;/strong> Runtime。笔者对 printf 的分析也是基于 ucrt 。&lt;/p>
&lt;p>Visual C++ 会将 CRT/C++ STL 源码一同发布（没有构建文件），在 Visual Studio 的安装目录下的 &lt;code>VC\crt\src&lt;/code> ，而 &lt;code>UCRT&lt;/code> 源码则在 &lt;code>%ProgramFiles(x86)%Windows Kits\10\Source\$BuildVersion\ucrt&lt;/code>&lt;/p>
&lt;p>在 UCRT 中 printf 是个内联函数，调用了 &lt;code>_vfprintf_l&lt;/code>，&lt;code>_vfprintf_l&lt;/code> 也是内联 的，它调用了 &lt;code>__stdio_common_vfprintf&lt;/code>。在 ucrt 源码路径 &lt;code>stdio\output.cpp&lt;/code> 中 &lt;code>__stdio_common_vfprintf&lt;/code> 调用了模板函数 &lt;code>common_vfprintf&lt;/code> ，而 &lt;code>common_vfprintf&lt;/code> 则在内部调用了模板类 &lt;code>output_processor&lt;/code> ,&lt;code>output_processor&lt;/code> 使用了输出适配器模板类 &lt;code>stream_output_adapter&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#1d2432;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c++" data-lang="c++">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff636f">template&lt;/span> &lt;span style="color:#ff636f">&amp;lt;&lt;/span>&lt;span style="color:#ff636f">typename&lt;/span> &lt;span style="color:#58a1dd">Character&lt;/span>&lt;span style="color:#ff636f">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff636f">class&lt;/span> &lt;span style="color:#58a1dd">stream_output_adapter&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">:&lt;/span> &lt;span style="color:#ff636f">public&lt;/span> &lt;span style="color:#58a1dd">output_adapter_common&lt;/span>&lt;span style="color:#ff636f">&amp;lt;&lt;/span>&lt;span style="color:#58a1dd">Character&lt;/span>, &lt;span style="color:#58a1dd">stream_output_adapter&lt;/span>&lt;span style="color:#ff636f">&amp;lt;&lt;/span>&lt;span style="color:#58a1dd">Character&lt;/span>&lt;span style="color:#ff636f">&amp;gt;&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff636f">public&lt;/span>&lt;span style="color:#ff636f">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">typedef&lt;/span> &lt;span style="color:#58a1dd">__acrt_stdio_char_traits&lt;/span>&lt;span style="color:#ff636f">&amp;lt;&lt;/span>&lt;span style="color:#58a1dd">Character&lt;/span>&lt;span style="color:#ff636f">&amp;gt;&lt;/span> &lt;span style="color:#58a1dd">char_traits&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">stream_output_adapter&lt;/span>(&lt;span style="color:#58a1dd">FILE&lt;/span>&lt;span style="color:#ff636f">*&lt;/span> &lt;span style="color:#ff636f">const&lt;/span> &lt;span style="color:#58a1dd">public_stream&lt;/span>) &lt;span style="color:#ff636f">throw&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">:&lt;/span> &lt;span style="color:#58a1dd">_stream&lt;/span>{&lt;span style="color:#58a1dd">public_stream&lt;/span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">bool&lt;/span> &lt;span style="color:#58a1dd">validate&lt;/span>() &lt;span style="color:#ff636f">const&lt;/span> &lt;span style="color:#ff636f">throw&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">_VALIDATE_RETURN&lt;/span>(&lt;span style="color:#58a1dd">_stream&lt;/span>.&lt;span style="color:#58a1dd">valid&lt;/span>(), &lt;span style="color:#58a1dd">EINVAL&lt;/span>, &lt;span style="color:#58a1dd">false&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">return&lt;/span> &lt;span style="color:#58a1dd">char_traits&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">validate_stream_is_ansi_if_required&lt;/span>(&lt;span style="color:#58a1dd">_stream&lt;/span>.&lt;span style="color:#58a1dd">public_stream&lt;/span>());
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">bool&lt;/span> &lt;span style="color:#58a1dd">write_character_without_count_update&lt;/span>(&lt;span style="color:#58a1dd">Character&lt;/span> &lt;span style="color:#ff636f">const&lt;/span> &lt;span style="color:#58a1dd">c&lt;/span>) &lt;span style="color:#ff636f">const&lt;/span> &lt;span style="color:#ff636f">throw&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">if&lt;/span> (&lt;span style="color:#58a1dd">_stream&lt;/span>.&lt;span style="color:#58a1dd">is_string_backed&lt;/span>() &lt;span style="color:#ff636f">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#58a1dd">_stream&lt;/span>&lt;span style="color:#ff636f">-&amp;gt;&lt;/span>&lt;span style="color:#58a1dd">_base&lt;/span> &lt;span style="color:#ff636f">==&lt;/span> &lt;span style="color:#ff636f">nullptr&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">return&lt;/span> &lt;span style="color:#58a1dd">true&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">return&lt;/span> &lt;span style="color:#58a1dd">char_traits&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">puttc_nolock&lt;/span>(&lt;span style="color:#58a1dd">c&lt;/span>, &lt;span style="color:#58a1dd">_stream&lt;/span>.&lt;span style="color:#58a1dd">public_stream&lt;/span>()) &lt;span style="color:#ff636f">!=&lt;/span> &lt;span style="color:#58a1dd">char_traits&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">eof&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">void&lt;/span> &lt;span style="color:#58a1dd">write_string&lt;/span>(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">Character&lt;/span> &lt;span style="color:#ff636f">const&lt;/span>&lt;span style="color:#ff636f">*&lt;/span> &lt;span style="color:#ff636f">const&lt;/span> &lt;span style="color:#58a1dd">string&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">int&lt;/span> &lt;span style="color:#ff636f">const&lt;/span> &lt;span style="color:#58a1dd">length&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">int&lt;/span>&lt;span style="color:#ff636f">*&lt;/span> &lt;span style="color:#ff636f">const&lt;/span> &lt;span style="color:#58a1dd">count_written&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">__crt_deferred_errno_cache&lt;/span>&lt;span style="color:#ff636f">&amp;amp;&lt;/span> &lt;span style="color:#58a1dd">status&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ) &lt;span style="color:#ff636f">const&lt;/span> &lt;span style="color:#ff636f">throw&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">if&lt;/span> (&lt;span style="color:#58a1dd">_stream&lt;/span>.&lt;span style="color:#58a1dd">is_string_backed&lt;/span>() &lt;span style="color:#ff636f">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#58a1dd">_stream&lt;/span>&lt;span style="color:#ff636f">-&amp;gt;&lt;/span>&lt;span style="color:#58a1dd">_base&lt;/span> &lt;span style="color:#ff636f">==&lt;/span> &lt;span style="color:#ff636f">nullptr&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">*&lt;/span>&lt;span style="color:#58a1dd">count_written&lt;/span> &lt;span style="color:#ff636f">+=&lt;/span> &lt;span style="color:#58a1dd">length&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">return&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">write_string_impl&lt;/span>(&lt;span style="color:#58a1dd">string&lt;/span>, &lt;span style="color:#58a1dd">length&lt;/span>, &lt;span style="color:#58a1dd">count_written&lt;/span>, &lt;span style="color:#58a1dd">status&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff636f">private&lt;/span>&lt;span style="color:#ff636f">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">__crt_stdio_stream&lt;/span> &lt;span style="color:#58a1dd">_stream&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>};
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>File stream 的写入流程是 &lt;code>write_strings&lt;/code> -&amp;gt; &lt;code>write_string_impl&lt;/code> -&amp;gt; &lt;code>write_character&lt;/code> -&amp;gt; &lt;code>write_character_without_count_update&lt;/code> ,然后是 &lt;code>char_traits::puttc_nolock&lt;/code>。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#1d2432;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c++" data-lang="c++">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">#define _CORECRT_GENERATE_FORWARDER(prefix, callconv, name, callee_name) \
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic"> __pragma(warning(push)) \
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic"> __pragma(warning(disable: 4100)) &lt;/span>&lt;span style="color:#828b96;font-style:italic">/* unreferenced formal parameter */&lt;/span>&lt;span style="color:#828b96;font-style:italic"> \
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic"> template &amp;lt;typename... Params&amp;gt; \
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic"> prefix auto callconv name(Params&amp;amp;&amp;amp;... args) throw() -&amp;gt; decltype(callee_name(args...)) \
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic"> { \
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic"> _BEGIN_SECURE_CRT_DEPRECATION_DISABLE \
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic"> return callee_name(args...); \
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic"> _END_SECURE_CRT_DEPRECATION_DISABLE \
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic"> } \
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic"> __pragma(warning(pop))
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>char_traits::puttch_nolock&lt;/code> 实际上是通过 &lt;code>__acrt_stdio_char_traits&lt;/code> &lt;code>__crt_char_traits&lt;/code> 定义的静态成员函数，，printf 对应的是 &lt;code>_fputc_nolock&lt;/code>。&lt;/p>
&lt;p>&lt;code>_fputc_nolock&lt;/code> 和 &lt;code>fputc&lt;/code> 类似，实际上 &lt;code>fputc&lt;/code> 也会调用它，在 &lt;code>_fputc_nolock&lt;/code> 中调用了 &lt;code>__acrt_stdio_flush_and_write_narrow_nolock&lt;/code>，在源码 &lt;code>stdio/_flsbuf.cpp&lt;/code> 中，
&lt;code>__acrt_stdio_flush_and_write_narrow_nolock&lt;/code> 又调用了 &lt;code>common_flush_and_write_nolock&amp;lt;char&amp;gt;&lt;/code>&lt;/p>
&lt;p>往下一步走会调用 &lt;code>write_buffer_nolock&lt;/code> -&amp;gt; &lt;code>_write&lt;/code> -&amp;gt;&lt;code>_write_nolock(lowio/write.cpp)&lt;/code>&lt;/p>
&lt;p>然后根据不同设备和字符类型，&lt;code>_write_nolock&lt;/code> 会调用：&lt;/p>
&lt;ul>
&lt;li>Console ANSI write_double_translated_ansi_nolock&lt;/li>
&lt;li>Console UTF16 write_double_translated_unicode_nolock&lt;/li>
&lt;li>File ANSI write_text_ansi_nolock&lt;/li>
&lt;li>File UTF16 write_text_utf16le_nolock&lt;/li>
&lt;li>File UTF8 write_text_utf8_nolock&lt;/li>
&lt;li>File Binary write_binary_nolock&lt;/li>
&lt;/ul>
&lt;p>最后终究要调用 &lt;code>WriteFile&lt;/code>，对于不需要缓冲区的文件读写为什么不直接使用 &lt;code>WriteFile&lt;/code> ？&lt;/p>
&lt;p>值得一提的是，在 Windows 中，如果使用 FILE 读写文件，尽量使用 &lt;code>rb&lt;/code> &lt;code>wb&lt;/code> 之类的标志，显示的指定文件类型是 &lt;code>binary&lt;/code>, 否则自动添加 &lt;code>CR&lt;/code> 就不好了。&lt;/p>
&lt;p>通过源码，我们还知道 UTF-16 或者 UTF-8 一般还是需要转换成 Ansi 才能输出到控制台。&lt;/p>
&lt;p>UCRT 还提供了 &lt;code>_cputs&lt;/code> &lt;code>_cprintf&lt;/code> &lt;code>_cputws&lt;/code> &lt;code>_cwprintf&lt;/code> 这样的函数，这些函数处理流程类似但要简单的多，&lt;code>output_processor&lt;/code> 的输出适配器是 &lt;code>console_output_adapter&lt;/code>，无论是字符类型是 wchar_t 还是 char 最终都会调用 &lt;code>_putwch_nolock&lt;/code> 及 &lt;code>__dcrt_write_console_w&lt;/code>，最后使用 &lt;code>WriteConsoleW&lt;/code> 写入到控制台。&lt;/p>
&lt;p>&lt;code>_cwprintf&lt;/code> 与 &lt;code>wprintf&lt;/code> 相比，输出 Unicode 字符要容易的多，不过，在使用标准输出的时候，你不能假定程序一定拥有控制台。&lt;/p>
&lt;h2 id="writeconsole-内部原理">WriteConsole 内部原理&lt;/h2>
&lt;p>虽然在 Windows/ReactOS 中，CRT 写入到标准输出的使用了 &lt;code>WriteFile&lt;/code> ，WriteFile 是如何写到控制台的？&lt;/p>
&lt;p>在 &lt;code>ReactOS&lt;/code> 源码中，WriteFile 将检查 &lt;code>hFile&lt;/code> 其值是否为 &lt;code>STD_INPUT_HANDLE&lt;/code> ,&lt;code>STD_OUTPUT_HANDLE&lt;/code> ,&lt;code>STD_ERROR_HANDLE&lt;/code> 如果是就从 PEB 中获得对应的控制台句柄，否则使用句柄 &lt;code>hFile&lt;/code> 原本的值，然后就判断是否是控制台句柄，如果是控制台，则调用 &lt;code>WriteConsoleA&lt;/code>，对于其他类型文件会直接调用 &lt;code>NtWriteFile&lt;/code>。&lt;/p>
&lt;p>将 &lt;code>STD_*_HANDLE&lt;/code> 转换为 Windows 内核对象：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#1d2432;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c++" data-lang="c++">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#58a1dd">HANDLE&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#58a1dd">TranslateStdHandle&lt;/span>(&lt;span style="color:#58a1dd">IN&lt;/span> &lt;span style="color:#58a1dd">HANDLE&lt;/span> &lt;span style="color:#58a1dd">hHandle&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">PRTL_USER_PROCESS_PARAMETERS&lt;/span> &lt;span style="color:#58a1dd">Ppb&lt;/span> &lt;span style="color:#ff636f">=&lt;/span> &lt;span style="color:#58a1dd">NtCurrentPeb&lt;/span>()&lt;span style="color:#ff636f">-&amp;gt;&lt;/span>&lt;span style="color:#58a1dd">ProcessParameters&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">switch&lt;/span> ((&lt;span style="color:#58a1dd">ULONG&lt;/span>)&lt;span style="color:#58a1dd">hHandle&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">case&lt;/span> &lt;span style="color:#58a1dd">STD_INPUT_HANDLE&lt;/span>: &lt;span style="color:#ff636f">return&lt;/span> &lt;span style="color:#58a1dd">Ppb&lt;/span>&lt;span style="color:#ff636f">-&amp;gt;&lt;/span>&lt;span style="color:#58a1dd">StandardInput&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">case&lt;/span> &lt;span style="color:#58a1dd">STD_OUTPUT_HANDLE&lt;/span>: &lt;span style="color:#ff636f">return&lt;/span> &lt;span style="color:#58a1dd">Ppb&lt;/span>&lt;span style="color:#ff636f">-&amp;gt;&lt;/span>&lt;span style="color:#58a1dd">StandardOutput&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">case&lt;/span> &lt;span style="color:#58a1dd">STD_ERROR_HANDLE&lt;/span>: &lt;span style="color:#ff636f">return&lt;/span> &lt;span style="color:#58a1dd">Ppb&lt;/span>&lt;span style="color:#ff636f">-&amp;gt;&lt;/span>&lt;span style="color:#58a1dd">StandardError&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">return&lt;/span> &lt;span style="color:#58a1dd">hHandle&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>判断是否是控制台文件：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#1d2432;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c++" data-lang="c++">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">#define IsConsoleHandle(h) \
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic"> (((ULONG_PTR)(h) &amp;amp; 0x10000003) == 0x3)
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>或者&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#1d2432;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c++" data-lang="c++">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#58a1dd">BOOL&lt;/span> &lt;span style="color:#58a1dd">IsConsoleHandle&lt;/span>(&lt;span style="color:#58a1dd">HANDLE&lt;/span> &lt;span style="color:#58a1dd">hHandle&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">DWORD&lt;/span> &lt;span style="color:#58a1dd">dwMode&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#828b96;font-style:italic">/* Check whether the handle may be that of a console... */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">if&lt;/span> ((&lt;span style="color:#58a1dd">GetFileType&lt;/span>(&lt;span style="color:#58a1dd">hHandle&lt;/span>) &lt;span style="color:#ff636f">&amp;amp;&lt;/span> &lt;span style="color:#ff636f">~&lt;/span>&lt;span style="color:#58a1dd">FILE_TYPE_REMOTE&lt;/span>) &lt;span style="color:#ff636f">!=&lt;/span> &lt;span style="color:#58a1dd">FILE_TYPE_CHAR&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">return&lt;/span> &lt;span style="color:#58a1dd">FALSE&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#828b96;font-style:italic">/*
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic"> * It may be. Perform another test... The idea comes from the
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic"> * MSDN description of the WriteConsole API:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic"> *
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic"> * &amp;#34;WriteConsole fails if it is used with a standard handle
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic"> * that is redirected to a file. If an application processes
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic"> * multilingual output that can be redirected, determine whether
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic"> * the output handle is a console handle (one method is to call
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic"> * the GetConsoleMode function and check whether it succeeds).
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic"> * If the handle is a console handle, call WriteConsole. If the
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic"> * handle is not a console handle, the output is redirected and
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic"> * you should call WriteFile to perform the I/O.&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic"> */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">return&lt;/span> &lt;span style="color:#58a1dd">GetConsoleMode&lt;/span>(&lt;span style="color:#58a1dd">hHandle&lt;/span>, &lt;span style="color:#ff636f">&amp;amp;&lt;/span>&lt;span style="color:#58a1dd">dwMode&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>有兴趣的可以参阅 ReactOS WriteFile 源码：
&lt;a href="https://github.com/reactos/reactos/blob/40a16a9cf1cdfca399e9154b42d32c30b63480f5/reactos/dll/win32/kernel32/client/file/rw.c#L38">WriteFile to Console&lt;/a>&lt;/p>
&lt;p>对于控制台句柄，CloseHandle，ReadFile，CreateFile ，以及 WriteFile 都要单独的调用对象的控制台 API。比如说，如果文件名是 &lt;code>CON&lt;/code>, &lt;code>CONOUT$&lt;/code>, &lt;code>CONIN$&lt;/code>, &lt;code>\\.\CON&lt;/code> 时就会使用 &lt;code>OpenConsoleW&lt;/code> 打开控制台。然后返回控制台的句柄。&lt;/p>
&lt;p>WriteConsoleA 又是如何写入到图形界面呢？在 Windows Technet 有两幅图分别介绍了 Vista 以前的控制台结构和 Windows 7 的控制台架构 &lt;a href="https://blogs.technet.microsoft.com/askperf/2009/10/05/windows-7-windows-server-2008-r2-console-host/">Windows 7 / Windows Server 2008 R2: Console Host&lt;/a>&lt;/p>
&lt;p>在 Windows 7 以前，WriteConsole 通过 LPC 与 CSRSS（Client Server Runtime Process） 通信：&lt;/p>
&lt;p>&lt;img src="https://msdnshared.blob.core.windows.net/media/TNBlogsFS/BlogFileStorage/blogs_technet/askperf/WindowsLiveWriter/Windows7WindowsServer2008R2ConsoleHost_7F3D/image_c064c0f7-4048-4dba-86bd-4a9722b53a11.png" alt="Windows">&lt;/p>
&lt;p>由于CSRSS 以 &lt;code>Local System&lt;/code> 权限运行，这样的逻辑容易导致 &lt;a href="https://en.wikipedia.org/wiki/Shatter_attack">Shatter attack&lt;/a>，于是在 Windows 7 中出现了新的 &lt;code>Console Host&lt;/code> ：&lt;/p>
&lt;p>&lt;img src="https://msdnshared.blob.core.windows.net/media/TNBlogsFS/BlogFileStorage/blogs_technet/askperf/WindowsLiveWriter/Windows7WindowsServer2008R2ConsoleHost_7F3D/image_7f7ebef5-47db-4d0c-aa78-5dd0e6bb75c8.png" alt="Windows7OrLater">&lt;/p>
&lt;p>在这种架构中，WriteConsole LPC 调用将控制台消息发送到了一个 Conhost 宿主进程，这个进程是在 CreateProcess 中自动创建的。&lt;/p>
&lt;p>在 ReactOS 中，依然使用的是 &lt;code>CsrCaptureMessageBuffer&lt;/code> 将数据发送到 CSRSS。源码在这里： &lt;a href="https://github.com/reactos/reactos/blob/master/reactos/dll/win32/kernel32/client/console/readwrite.c">WriteConsole&lt;/a>&lt;/p>
&lt;p>ReactOS 文档：&lt;a href="https://doxygen.reactos.org/index.html">ReactOS&lt;/a>&lt;/p>
&lt;p>WriteFile 输出到控制台时，实际调用的是 &lt;strong>WriteConsoleA&lt;/strong>，在前面我们还知道使用 wprintf 时，CRT 会将文本内容转换成 Ansi(Codepage) 然后再使用 WriteFile 写入到控制台窗口。&lt;/p>
&lt;p>我们知道，绘制字符的时候，ANSI 文本最终将会转换成 UTF-16LE 文本，然后经 DrawTextExW 或者其他函数绘制出来，如果使用了 wprintf 这样的函数，势必会经过两次转换 &lt;strong>UTF16-&amp;gt;CodePage-&amp;gt;UTF16&lt;/strong>，在 Unicode 中存在的字符不一定存在于代码页中，这就导致文本在转换编码的时候发生丢失，输出到控制台时，可能是乱码或者干脆截断了。所以在 Windows 控制台中， Unicode 编码，特别是 emoji 还是不要妄想通过 wprintf 输出。&lt;/p>
&lt;p>在 Windows 中，内码是 Unicode，而控制台也支持使用 &lt;code>WriteConsoleW&lt;/code> 这样的 API 输出文本，如果我们直接使用 &lt;code>WriteConsoleW&lt;/code> 就可以避免出现字符无法呈现或者乱码的问题了。如果控制台的图形对各种字体字符支持更好，这个 API 也就能够输出彩色字符或者更多的 Emoji。遗憾的是，目前 Console 字体渲染的改进任然在计划中，暂时不支持 Emoji 和各种特殊字体。&lt;/p>
&lt;h2 id="控制台彩色输出">控制台彩色输出&lt;/h2>
&lt;p>讲了这么长一段，该讲如何实现彩色输出了，首先，我们要知道 Windows 控制台 API 是支持颜色输出的，不过，这些 API 仅支持 16 色输出。
在 .Net Core &lt;a href="https://github.com/dotnet/corefx/blob/master/src/System.Console/src/System/ConsoleColor.cs#L10">corefx&lt;/a> 有如下一个枚举定义了控制台基本的颜色：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#1d2432;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#58a1dd"> [Serializable]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">public&lt;/span> &lt;span style="color:#ff636f">enum&lt;/span> &lt;span style="color:#58a1dd">ConsoleColor&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">Black&lt;/span> = &lt;span style="color:#a6be9d">0&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">DarkBlue&lt;/span> = &lt;span style="color:#a6be9d">1&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">DarkGreen&lt;/span> = &lt;span style="color:#a6be9d">2&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">DarkCyan&lt;/span> = &lt;span style="color:#a6be9d">3&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">DarkRed&lt;/span> = &lt;span style="color:#a6be9d">4&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">DarkMagenta&lt;/span> = &lt;span style="color:#a6be9d">5&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">DarkYellow&lt;/span> = &lt;span style="color:#a6be9d">6&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">Gray&lt;/span> = &lt;span style="color:#a6be9d">7&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">DarkGray&lt;/span> = &lt;span style="color:#a6be9d">8&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">Blue&lt;/span> = &lt;span style="color:#a6be9d">9&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">Green&lt;/span> = &lt;span style="color:#a6be9d">10&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">Cyan&lt;/span> = &lt;span style="color:#a6be9d">11&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">Red&lt;/span> = &lt;span style="color:#a6be9d">12&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">Magenta&lt;/span> = &lt;span style="color:#a6be9d">13&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">Yellow&lt;/span> = &lt;span style="color:#a6be9d">14&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">White&lt;/span> = &lt;span style="color:#a6be9d">15&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>在 C++ 中，如果在 &lt;code>WriteConsoleW&lt;/code> 调用之前使用了 &lt;code>SetConsoleTextAttribute&lt;/code> 设置输出格式，那么就能输出带有上述颜色的文本内容了。在 Privexec.Console 中，使用控制台 API 输出颜色代码如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#1d2432;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c++" data-lang="c++">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff636f">int&lt;/span> &lt;span style="color:#58a1dd">WriteConhost&lt;/span>(&lt;span style="color:#ff636f">int&lt;/span> &lt;span style="color:#58a1dd">color&lt;/span>, &lt;span style="color:#ff636f">const&lt;/span> &lt;span style="color:#ff636f">wchar_t&lt;/span> &lt;span style="color:#ff636f">*&lt;/span>&lt;span style="color:#58a1dd">data&lt;/span>, &lt;span style="color:#58a1dd">size_t&lt;/span> &lt;span style="color:#58a1dd">len&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">CONSOLE_SCREEN_BUFFER_INFO&lt;/span> &lt;span style="color:#58a1dd">csbi&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">auto&lt;/span> &lt;span style="color:#58a1dd">hConsole&lt;/span> &lt;span style="color:#ff636f">=&lt;/span> &lt;span style="color:#58a1dd">GetStdHandle&lt;/span>(&lt;span style="color:#58a1dd">STD_OUTPUT_HANDLE&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">GetConsoleScreenBufferInfo&lt;/span>(&lt;span style="color:#58a1dd">hConsole&lt;/span>, &lt;span style="color:#ff636f">&amp;amp;&lt;/span>&lt;span style="color:#58a1dd">csbi&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">WORD&lt;/span> &lt;span style="color:#58a1dd">oldColor&lt;/span> &lt;span style="color:#ff636f">=&lt;/span> &lt;span style="color:#58a1dd">csbi&lt;/span>.&lt;span style="color:#58a1dd">wAttributes&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">WORD&lt;/span> &lt;span style="color:#58a1dd">color_&lt;/span> &lt;span style="color:#ff636f">=&lt;/span> &lt;span style="color:#ff636f">static_cast&lt;/span>&lt;span style="color:#ff636f">&amp;lt;&lt;/span>&lt;span style="color:#58a1dd">WORD&lt;/span>&lt;span style="color:#ff636f">&amp;gt;&lt;/span>(&lt;span style="color:#58a1dd">color&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">WORD&lt;/span> &lt;span style="color:#58a1dd">newColor&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">if&lt;/span> (&lt;span style="color:#58a1dd">color&lt;/span> &lt;span style="color:#ff636f">&amp;gt;&lt;/span> &lt;span style="color:#58a1dd">console&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">fc&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">White&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">newColor&lt;/span> &lt;span style="color:#ff636f">=&lt;/span> (&lt;span style="color:#58a1dd">oldColor&lt;/span> &lt;span style="color:#ff636f">&amp;amp;&lt;/span> &lt;span style="color:#a6be9d">0x0F&lt;/span>) &lt;span style="color:#ff636f">|&lt;/span> &lt;span style="color:#58a1dd">color_&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } &lt;span style="color:#ff636f">else&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">newColor&lt;/span> &lt;span style="color:#ff636f">=&lt;/span> (&lt;span style="color:#58a1dd">oldColor&lt;/span> &lt;span style="color:#ff636f">&amp;amp;&lt;/span> &lt;span style="color:#a6be9d">0xF0&lt;/span>) &lt;span style="color:#ff636f">|&lt;/span> &lt;span style="color:#58a1dd">color_&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">SetConsoleTextAttribute&lt;/span>(&lt;span style="color:#58a1dd">hConsole&lt;/span>, &lt;span style="color:#58a1dd">newColor&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">DWORD&lt;/span> &lt;span style="color:#58a1dd">dwWrite&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">WriteConsoleW&lt;/span>(&lt;span style="color:#58a1dd">hConsole&lt;/span>, &lt;span style="color:#58a1dd">data&lt;/span>, (&lt;span style="color:#58a1dd">DWORD&lt;/span>)&lt;span style="color:#58a1dd">len&lt;/span>, &lt;span style="color:#ff636f">&amp;amp;&lt;/span>&lt;span style="color:#58a1dd">dwWrite&lt;/span>, &lt;span style="color:#ff636f">nullptr&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">SetConsoleTextAttribute&lt;/span>(&lt;span style="color:#58a1dd">hConsole&lt;/span>, &lt;span style="color:#58a1dd">oldColor&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">return&lt;/span> &lt;span style="color:#ff636f">static_cast&lt;/span>&lt;span style="color:#ff636f">&amp;lt;&lt;/span>&lt;span style="color:#ff636f">int&lt;/span>&lt;span style="color:#ff636f">&amp;gt;&lt;/span>(&lt;span style="color:#58a1dd">dwWrite&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>在这里，我们选择的是 &lt;code>STD_OUTPUT_HANDLE&lt;/code>，使用 &lt;code>&amp;amp;0x0F&lt;/code> 或者 &lt;code>&amp;amp;0xF0&lt;/code> 的目的是不修改原有的背景色或者前景色，第二次调用 &lt;code>SetConsoleTextAttribute&lt;/code> 的目的是恢复控制台原有的颜色。&lt;/p>
&lt;h2 id="终端模拟器彩色输出">终端模拟器彩色输出&lt;/h2>
&lt;p>在 Windows 上，还有 Cygwin 和 MSYS2 MSYS 这样的模拟 Unix 的环境。wsudo 对其支持也非常有必要。
这些环境启动进程往往是通过管道通信，这个时候，我们可以判断是否是终端还是控制台。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#1d2432;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c++" data-lang="c++">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff636f">bool&lt;/span> &lt;span style="color:#58a1dd">IsWindowsConhost&lt;/span>(&lt;span style="color:#58a1dd">HANDLE&lt;/span> &lt;span style="color:#58a1dd">hConsole&lt;/span>, &lt;span style="color:#ff636f">bool&lt;/span> &lt;span style="color:#ff636f">&amp;amp;&lt;/span>&lt;span style="color:#58a1dd">isvt&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">if&lt;/span> (&lt;span style="color:#58a1dd">GetFileType&lt;/span>(&lt;span style="color:#58a1dd">hConsole&lt;/span>) &lt;span style="color:#ff636f">!=&lt;/span> &lt;span style="color:#58a1dd">FILE_TYPE_CHAR&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">return&lt;/span> &lt;span style="color:#58a1dd">false&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">DWORD&lt;/span> &lt;span style="color:#58a1dd">mode&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">if&lt;/span> (&lt;span style="color:#ff636f">!&lt;/span>&lt;span style="color:#58a1dd">GetConsoleMode&lt;/span>(&lt;span style="color:#58a1dd">hConsole&lt;/span>, &lt;span style="color:#ff636f">&amp;amp;&lt;/span>&lt;span style="color:#58a1dd">mode&lt;/span>)) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">return&lt;/span> &lt;span style="color:#58a1dd">false&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">if&lt;/span> ((&lt;span style="color:#58a1dd">mode&lt;/span> &lt;span style="color:#ff636f">&amp;amp;&lt;/span> &lt;span style="color:#58a1dd">ENABLE_VIRTUAL_TERMINAL_PROCESSING&lt;/span>) &lt;span style="color:#ff636f">!=&lt;/span> &lt;span style="color:#a6be9d">0&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">isvt&lt;/span> &lt;span style="color:#ff636f">=&lt;/span> &lt;span style="color:#58a1dd">true&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">return&lt;/span> &lt;span style="color:#58a1dd">true&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>如果使用 GetFileType(hConsole) 得到的文件类型不是 &lt;code>FILE_TYPE_CHAR&lt;/code> 我们就可以确定不是控制台，并且如果不支持 &lt;code>GetConsoleMode&lt;/code> 函数，也要视其不是控制台。&lt;/p>
&lt;p>核心代码如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#1d2432;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c++" data-lang="c++">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff636f">namespace&lt;/span> &lt;span style="color:#58a1dd">console&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#58a1dd">std&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">string&lt;/span> &lt;span style="color:#58a1dd">wchar2utf8&lt;/span>(&lt;span style="color:#ff636f">const&lt;/span> &lt;span style="color:#ff636f">wchar_t&lt;/span> &lt;span style="color:#ff636f">*&lt;/span>&lt;span style="color:#58a1dd">buf&lt;/span>, &lt;span style="color:#58a1dd">size_t&lt;/span> &lt;span style="color:#58a1dd">len&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">std&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">string&lt;/span> &lt;span style="color:#58a1dd">str&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">auto&lt;/span> &lt;span style="color:#58a1dd">N&lt;/span> &lt;span style="color:#ff636f">=&lt;/span> &lt;span style="color:#58a1dd">WideCharToMultiByte&lt;/span>(&lt;span style="color:#58a1dd">CP_UTF8&lt;/span>, &lt;span style="color:#a6be9d">0&lt;/span>, &lt;span style="color:#58a1dd">buf&lt;/span>, (&lt;span style="color:#ff636f">int&lt;/span>)&lt;span style="color:#58a1dd">len&lt;/span>, &lt;span style="color:#ff636f">nullptr&lt;/span>, &lt;span style="color:#a6be9d">0&lt;/span>, &lt;span style="color:#ff636f">nullptr&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">nullptr&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">str&lt;/span>.&lt;span style="color:#58a1dd">resize&lt;/span>(&lt;span style="color:#58a1dd">N&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">WideCharToMultiByte&lt;/span>(&lt;span style="color:#58a1dd">CP_UTF8&lt;/span>, &lt;span style="color:#a6be9d">0&lt;/span>, &lt;span style="color:#58a1dd">buf&lt;/span>, (&lt;span style="color:#ff636f">int&lt;/span>)&lt;span style="color:#58a1dd">len&lt;/span>, &lt;span style="color:#ff636f">&amp;amp;&lt;/span>&lt;span style="color:#58a1dd">str&lt;/span>[&lt;span style="color:#a6be9d">0&lt;/span>], &lt;span style="color:#58a1dd">N&lt;/span>, &lt;span style="color:#ff636f">nullptr&lt;/span>, &lt;span style="color:#ff636f">nullptr&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">return&lt;/span> &lt;span style="color:#58a1dd">str&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff636f">struct&lt;/span> &lt;span style="color:#58a1dd">TerminalsColorTable&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">int&lt;/span> &lt;span style="color:#58a1dd">index&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">bool&lt;/span> &lt;span style="color:#58a1dd">blod&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff636f">namespace&lt;/span> &lt;span style="color:#58a1dd">vt&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff636f">namespace&lt;/span> &lt;span style="color:#58a1dd">fg&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff636f">enum&lt;/span> &lt;span style="color:#58a1dd">Color&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">Black&lt;/span> &lt;span style="color:#ff636f">=&lt;/span> &lt;span style="color:#a6be9d">30&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">Red&lt;/span> &lt;span style="color:#ff636f">=&lt;/span> &lt;span style="color:#a6be9d">31&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">Green&lt;/span> &lt;span style="color:#ff636f">=&lt;/span> &lt;span style="color:#a6be9d">32&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">Yellow&lt;/span> &lt;span style="color:#ff636f">=&lt;/span> &lt;span style="color:#a6be9d">33&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">Blue&lt;/span> &lt;span style="color:#ff636f">=&lt;/span> &lt;span style="color:#a6be9d">34&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">Magenta&lt;/span> &lt;span style="color:#ff636f">=&lt;/span> &lt;span style="color:#a6be9d">35&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">Cyan&lt;/span> &lt;span style="color:#ff636f">=&lt;/span> &lt;span style="color:#a6be9d">36&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">Gray&lt;/span> &lt;span style="color:#ff636f">=&lt;/span> &lt;span style="color:#a6be9d">37&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">Reset&lt;/span> &lt;span style="color:#ff636f">=&lt;/span> &lt;span style="color:#a6be9d">39&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff636f">namespace&lt;/span> &lt;span style="color:#58a1dd">bg&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff636f">enum&lt;/span> &lt;span style="color:#58a1dd">Color&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">Black&lt;/span> &lt;span style="color:#ff636f">=&lt;/span> &lt;span style="color:#a6be9d">40&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">Red&lt;/span> &lt;span style="color:#ff636f">=&lt;/span> &lt;span style="color:#a6be9d">41&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">Green&lt;/span> &lt;span style="color:#ff636f">=&lt;/span> &lt;span style="color:#a6be9d">42&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">Yellow&lt;/span> &lt;span style="color:#ff636f">=&lt;/span> &lt;span style="color:#a6be9d">43&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">Blue&lt;/span> &lt;span style="color:#ff636f">=&lt;/span> &lt;span style="color:#a6be9d">44&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">Magenta&lt;/span> &lt;span style="color:#ff636f">=&lt;/span> &lt;span style="color:#a6be9d">45&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">Cyan&lt;/span> &lt;span style="color:#ff636f">=&lt;/span> &lt;span style="color:#a6be9d">46&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">Gray&lt;/span> &lt;span style="color:#ff636f">=&lt;/span> &lt;span style="color:#a6be9d">47&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">Reset&lt;/span> &lt;span style="color:#ff636f">=&lt;/span> &lt;span style="color:#a6be9d">49&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff636f">bool&lt;/span> &lt;span style="color:#58a1dd">TerminalsConvertColor&lt;/span>(&lt;span style="color:#ff636f">int&lt;/span> &lt;span style="color:#58a1dd">color&lt;/span>, &lt;span style="color:#58a1dd">TerminalsColorTable&lt;/span> &lt;span style="color:#ff636f">&amp;amp;&lt;/span>&lt;span style="color:#58a1dd">co&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">std&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">unordered_map&lt;/span>&lt;span style="color:#ff636f">&amp;lt;&lt;/span>&lt;span style="color:#ff636f">int&lt;/span>, &lt;span style="color:#58a1dd">TerminalsColorTable&lt;/span>&lt;span style="color:#ff636f">&amp;gt;&lt;/span> &lt;span style="color:#58a1dd">tables&lt;/span> &lt;span style="color:#ff636f">=&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {&lt;span style="color:#58a1dd">console&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">fc&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">Black&lt;/span>, {&lt;span style="color:#58a1dd">vt&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">fg&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">Black&lt;/span>, &lt;span style="color:#58a1dd">false&lt;/span>}},
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {&lt;span style="color:#58a1dd">console&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">fc&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">DarkBlue&lt;/span>, {&lt;span style="color:#58a1dd">vt&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">fg&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">Blue&lt;/span>, &lt;span style="color:#58a1dd">false&lt;/span>}},
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {&lt;span style="color:#58a1dd">console&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">fc&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">DarkGreen&lt;/span>, {&lt;span style="color:#58a1dd">vt&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">fg&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">Green&lt;/span>, &lt;span style="color:#58a1dd">false&lt;/span>}},
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {&lt;span style="color:#58a1dd">console&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">fc&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">DarkCyan&lt;/span>, {&lt;span style="color:#58a1dd">vt&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">fg&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">Cyan&lt;/span>, &lt;span style="color:#58a1dd">false&lt;/span>}},
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {&lt;span style="color:#58a1dd">console&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">fc&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">DarkRed&lt;/span>, {&lt;span style="color:#58a1dd">vt&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">fg&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">Red&lt;/span>, &lt;span style="color:#58a1dd">false&lt;/span>}},
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {&lt;span style="color:#58a1dd">console&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">fc&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">DarkMagenta&lt;/span>, {&lt;span style="color:#58a1dd">vt&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">fg&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">Magenta&lt;/span>, &lt;span style="color:#58a1dd">false&lt;/span>}},
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {&lt;span style="color:#58a1dd">console&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">fc&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">DarkYellow&lt;/span>, {&lt;span style="color:#58a1dd">vt&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">fg&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">Yellow&lt;/span>, &lt;span style="color:#58a1dd">false&lt;/span>}},
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {&lt;span style="color:#58a1dd">console&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">fc&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">DarkGray&lt;/span>, {&lt;span style="color:#58a1dd">vt&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">fg&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">Gray&lt;/span>, &lt;span style="color:#58a1dd">false&lt;/span>}},
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {&lt;span style="color:#58a1dd">console&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">fc&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">Blue&lt;/span>, {&lt;span style="color:#58a1dd">vt&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">fg&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">Blue&lt;/span>, &lt;span style="color:#58a1dd">true&lt;/span>}},
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {&lt;span style="color:#58a1dd">console&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">fc&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">Green&lt;/span>, {&lt;span style="color:#58a1dd">vt&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">fg&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">Green&lt;/span>, &lt;span style="color:#58a1dd">true&lt;/span>}},
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {&lt;span style="color:#58a1dd">console&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">fc&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">Cyan&lt;/span>, {&lt;span style="color:#58a1dd">vt&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">fg&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">Cyan&lt;/span>, &lt;span style="color:#58a1dd">true&lt;/span>}},
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {&lt;span style="color:#58a1dd">console&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">fc&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">Red&lt;/span>, {&lt;span style="color:#58a1dd">vt&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">fg&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">Red&lt;/span>, &lt;span style="color:#58a1dd">true&lt;/span>}},
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {&lt;span style="color:#58a1dd">console&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">fc&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">Magenta&lt;/span>, {&lt;span style="color:#58a1dd">vt&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">fg&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">Magenta&lt;/span>, &lt;span style="color:#58a1dd">true&lt;/span>}},
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {&lt;span style="color:#58a1dd">console&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">fc&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">Yellow&lt;/span>, {&lt;span style="color:#58a1dd">vt&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">fg&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">Yellow&lt;/span>, &lt;span style="color:#58a1dd">true&lt;/span>}},
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {&lt;span style="color:#58a1dd">console&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">fc&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">White&lt;/span>, {&lt;span style="color:#58a1dd">vt&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">fg&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">Gray&lt;/span>, &lt;span style="color:#58a1dd">true&lt;/span>}},
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {&lt;span style="color:#58a1dd">console&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">bc&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">Black&lt;/span>, {&lt;span style="color:#58a1dd">vt&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">bg&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">Black&lt;/span>, &lt;span style="color:#58a1dd">false&lt;/span>}},
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {&lt;span style="color:#58a1dd">console&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">bc&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">Blue&lt;/span>, {&lt;span style="color:#58a1dd">vt&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">bg&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">Blue&lt;/span>, &lt;span style="color:#58a1dd">false&lt;/span>}},
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {&lt;span style="color:#58a1dd">console&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">bc&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">Green&lt;/span>, {&lt;span style="color:#58a1dd">vt&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">bg&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">Green&lt;/span>, &lt;span style="color:#58a1dd">false&lt;/span>}},
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {&lt;span style="color:#58a1dd">console&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">bc&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">Cyan&lt;/span>, {&lt;span style="color:#58a1dd">vt&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">bg&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">Cyan&lt;/span>, &lt;span style="color:#58a1dd">false&lt;/span>}},
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {&lt;span style="color:#58a1dd">console&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">bc&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">Red&lt;/span>, {&lt;span style="color:#58a1dd">vt&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">bg&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">Red&lt;/span>, &lt;span style="color:#58a1dd">false&lt;/span>}},
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {&lt;span style="color:#58a1dd">console&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">bc&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">Magenta&lt;/span>, {&lt;span style="color:#58a1dd">vt&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">bg&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">Magenta&lt;/span>, &lt;span style="color:#58a1dd">false&lt;/span>}},
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {&lt;span style="color:#58a1dd">console&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">bc&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">Yellow&lt;/span>, {&lt;span style="color:#58a1dd">vt&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">bg&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">Yellow&lt;/span>, &lt;span style="color:#58a1dd">false&lt;/span>}},
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {&lt;span style="color:#58a1dd">console&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">bc&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">DarkGray&lt;/span>, {&lt;span style="color:#58a1dd">vt&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">bg&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">Gray&lt;/span>, &lt;span style="color:#58a1dd">false&lt;/span>}},
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {&lt;span style="color:#58a1dd">console&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">bc&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">LightBlue&lt;/span>, {&lt;span style="color:#58a1dd">vt&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">bg&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">Blue&lt;/span>, &lt;span style="color:#58a1dd">true&lt;/span>}},
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {&lt;span style="color:#58a1dd">console&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">bc&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">LightGreen&lt;/span>, {&lt;span style="color:#58a1dd">vt&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">bg&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">Green&lt;/span>, &lt;span style="color:#58a1dd">true&lt;/span>}},
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {&lt;span style="color:#58a1dd">console&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">bc&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">LightCyan&lt;/span>, {&lt;span style="color:#58a1dd">vt&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">bg&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">Cyan&lt;/span>, &lt;span style="color:#58a1dd">true&lt;/span>}},
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {&lt;span style="color:#58a1dd">console&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">bc&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">LightRed&lt;/span>, {&lt;span style="color:#58a1dd">vt&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">fg&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">Red&lt;/span>, &lt;span style="color:#58a1dd">true&lt;/span>}},
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {&lt;span style="color:#58a1dd">console&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">bc&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">LightMagenta&lt;/span>, {&lt;span style="color:#58a1dd">vt&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">bg&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">Magenta&lt;/span>, &lt;span style="color:#58a1dd">true&lt;/span>}},
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {&lt;span style="color:#58a1dd">console&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">bc&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">LightYellow&lt;/span>, {&lt;span style="color:#58a1dd">vt&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">bg&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">Yellow&lt;/span>, &lt;span style="color:#58a1dd">true&lt;/span>}},
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {&lt;span style="color:#58a1dd">console&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">bc&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">LightWhite&lt;/span>, {&lt;span style="color:#58a1dd">vt&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">bg&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">Gray&lt;/span>, &lt;span style="color:#58a1dd">true&lt;/span>}},
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> };
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">auto&lt;/span> &lt;span style="color:#58a1dd">iter&lt;/span> &lt;span style="color:#ff636f">=&lt;/span> &lt;span style="color:#58a1dd">tables&lt;/span>.&lt;span style="color:#58a1dd">find&lt;/span>(&lt;span style="color:#58a1dd">color&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">if&lt;/span> (&lt;span style="color:#58a1dd">iter&lt;/span> &lt;span style="color:#ff636f">==&lt;/span> &lt;span style="color:#58a1dd">tables&lt;/span>.&lt;span style="color:#58a1dd">end&lt;/span>()) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">return&lt;/span> &lt;span style="color:#58a1dd">false&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">co&lt;/span> &lt;span style="color:#ff636f">=&lt;/span> &lt;span style="color:#58a1dd">iter&lt;/span>&lt;span style="color:#ff636f">-&amp;gt;&lt;/span>&lt;span style="color:#58a1dd">second&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">return&lt;/span> &lt;span style="color:#58a1dd">true&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff636f">int&lt;/span> &lt;span style="color:#58a1dd">WriteTerminals&lt;/span>(&lt;span style="color:#ff636f">int&lt;/span> &lt;span style="color:#58a1dd">color&lt;/span>, &lt;span style="color:#ff636f">const&lt;/span> &lt;span style="color:#ff636f">wchar_t&lt;/span> &lt;span style="color:#ff636f">*&lt;/span>&lt;span style="color:#58a1dd">data&lt;/span>, &lt;span style="color:#58a1dd">size_t&lt;/span> &lt;span style="color:#58a1dd">len&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">TerminalsColorTable&lt;/span> &lt;span style="color:#58a1dd">co&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">auto&lt;/span> &lt;span style="color:#58a1dd">str&lt;/span> &lt;span style="color:#ff636f">=&lt;/span> &lt;span style="color:#58a1dd">wchar2utf8&lt;/span>(&lt;span style="color:#58a1dd">data&lt;/span>, &lt;span style="color:#58a1dd">len&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">if&lt;/span> (&lt;span style="color:#ff636f">!&lt;/span>&lt;span style="color:#58a1dd">TerminalsConvertColor&lt;/span>(&lt;span style="color:#58a1dd">color&lt;/span>, &lt;span style="color:#58a1dd">co&lt;/span>)) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">return&lt;/span> &lt;span style="color:#ff636f">static_cast&lt;/span>&lt;span style="color:#ff636f">&amp;lt;&lt;/span>&lt;span style="color:#ff636f">int&lt;/span>&lt;span style="color:#ff636f">&amp;gt;&lt;/span>(&lt;span style="color:#58a1dd">fwrite&lt;/span>(&lt;span style="color:#58a1dd">str&lt;/span>.&lt;span style="color:#58a1dd">data&lt;/span>(), &lt;span style="color:#a6be9d">1&lt;/span>, &lt;span style="color:#58a1dd">str&lt;/span>.&lt;span style="color:#58a1dd">size&lt;/span>(), &lt;span style="color:#58a1dd">stdout&lt;/span>));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">if&lt;/span> (&lt;span style="color:#58a1dd">co&lt;/span>.&lt;span style="color:#58a1dd">blod&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">fprintf&lt;/span>(&lt;span style="color:#58a1dd">stdout&lt;/span>, &lt;span style="color:#a6be9d">&amp;#34;&lt;/span>&lt;span style="color:#a6be9d">\33&lt;/span>&lt;span style="color:#a6be9d">[1;%dm&amp;#34;&lt;/span>, &lt;span style="color:#58a1dd">co&lt;/span>.&lt;span style="color:#58a1dd">index&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } &lt;span style="color:#ff636f">else&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">fprintf&lt;/span>(&lt;span style="color:#58a1dd">stdout&lt;/span>, &lt;span style="color:#a6be9d">&amp;#34;&lt;/span>&lt;span style="color:#a6be9d">\33&lt;/span>&lt;span style="color:#a6be9d">[%dm&amp;#34;&lt;/span>, &lt;span style="color:#58a1dd">co&lt;/span>.&lt;span style="color:#58a1dd">index&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">auto&lt;/span> &lt;span style="color:#58a1dd">l&lt;/span> &lt;span style="color:#ff636f">=&lt;/span> &lt;span style="color:#58a1dd">fwrite&lt;/span>(&lt;span style="color:#58a1dd">str&lt;/span>.&lt;span style="color:#58a1dd">data&lt;/span>(), &lt;span style="color:#a6be9d">1&lt;/span>, &lt;span style="color:#58a1dd">str&lt;/span>.&lt;span style="color:#58a1dd">size&lt;/span>(), &lt;span style="color:#58a1dd">stdout&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">fwrite&lt;/span>(&lt;span style="color:#a6be9d">&amp;#34;&lt;/span>&lt;span style="color:#a6be9d">\33&lt;/span>&lt;span style="color:#a6be9d">[0m&amp;#34;&lt;/span>, &lt;span style="color:#a6be9d">1&lt;/span>, &lt;span style="color:#ff636f">sizeof&lt;/span>(&lt;span style="color:#a6be9d">&amp;#34;&lt;/span>&lt;span style="color:#a6be9d">\33&lt;/span>&lt;span style="color:#a6be9d">[0m&amp;#34;&lt;/span>) &lt;span style="color:#ff636f">-&lt;/span> &lt;span style="color:#a6be9d">1&lt;/span>, &lt;span style="color:#58a1dd">stdout&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">return&lt;/span> &lt;span style="color:#ff636f">static_cast&lt;/span>&lt;span style="color:#ff636f">&amp;lt;&lt;/span>&lt;span style="color:#ff636f">int&lt;/span>&lt;span style="color:#ff636f">&amp;gt;&lt;/span>(&lt;span style="color:#58a1dd">l&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>这些终端环境基本上将文本视为 UTF8 编码，为了让文字正常显示，我们需要将其转换为 UTF8。经过测试，中文都能正常显示。&lt;/p>
&lt;h2 id="vt-模式颜色输出">VT 模式颜色输出&lt;/h2>
&lt;p>在 Windows 10 中，新增了 &lt;strong>Windows Subsystem for Linux&lt;/strong> ，可以通过 Bash 命令启动终端运行 Linux 程序，Windows 控制台还增加了 VT 模式 &lt;a href="https://msdn.microsoft.com/en-us/library/windows/desktop/mt638032.aspx">Console Virtual Terminal Sequences&lt;/a>，并且支持24-Bit 颜色：&lt;a href="https://blogs.msdn.microsoft.com/commandline/2016/09/22/24-bit-color-in-the-windows-console/">24-bit Color in the Windows Console!&lt;/a>，这意味着，可以像 Linux 一样在 printf 中添加转义字符控制颜色输出。
在 Github 中也有 Issues 讨论: &lt;a href="https://github.com/Microsoft/BashOnWindows/issues/345">support 256 color&lt;/a>
笔者在开发时发现 WriteConsoleW 也支持 VT 模式，对于也添加了代码支持 VT 模式：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#1d2432;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c++" data-lang="c++">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff636f">int&lt;/span> &lt;span style="color:#58a1dd">WriteConsoleInternal&lt;/span>(&lt;span style="color:#ff636f">const&lt;/span> &lt;span style="color:#ff636f">wchar_t&lt;/span> &lt;span style="color:#ff636f">*&lt;/span>&lt;span style="color:#58a1dd">buffer&lt;/span>, &lt;span style="color:#58a1dd">size_t&lt;/span> &lt;span style="color:#58a1dd">len&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">DWORD&lt;/span> &lt;span style="color:#58a1dd">dwWrite&lt;/span> &lt;span style="color:#ff636f">=&lt;/span> &lt;span style="color:#a6be9d">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">auto&lt;/span> &lt;span style="color:#58a1dd">hConsole&lt;/span> &lt;span style="color:#ff636f">=&lt;/span> &lt;span style="color:#58a1dd">GetStdHandle&lt;/span>(&lt;span style="color:#58a1dd">STD_OUTPUT_HANDLE&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">if&lt;/span> (&lt;span style="color:#58a1dd">WriteConsoleW&lt;/span>(&lt;span style="color:#58a1dd">hConsole&lt;/span>, &lt;span style="color:#58a1dd">buffer&lt;/span>, (&lt;span style="color:#58a1dd">DWORD&lt;/span>)&lt;span style="color:#58a1dd">len&lt;/span>, &lt;span style="color:#ff636f">&amp;amp;&lt;/span>&lt;span style="color:#58a1dd">dwWrite&lt;/span>, &lt;span style="color:#ff636f">nullptr&lt;/span>)) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">return&lt;/span> &lt;span style="color:#ff636f">static_cast&lt;/span>&lt;span style="color:#ff636f">&amp;lt;&lt;/span>&lt;span style="color:#ff636f">int&lt;/span>&lt;span style="color:#ff636f">&amp;gt;&lt;/span>(&lt;span style="color:#58a1dd">dwWrite&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">return&lt;/span> &lt;span style="color:#a6be9d">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff636f">int&lt;/span> &lt;span style="color:#58a1dd">WriteVTConsole&lt;/span>(&lt;span style="color:#ff636f">int&lt;/span> &lt;span style="color:#58a1dd">color&lt;/span>, &lt;span style="color:#ff636f">const&lt;/span> &lt;span style="color:#ff636f">wchar_t&lt;/span> &lt;span style="color:#ff636f">*&lt;/span>&lt;span style="color:#58a1dd">data&lt;/span>, &lt;span style="color:#58a1dd">size_t&lt;/span> &lt;span style="color:#58a1dd">len&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">TerminalsColorTable&lt;/span> &lt;span style="color:#58a1dd">co&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">if&lt;/span> (&lt;span style="color:#ff636f">!&lt;/span>&lt;span style="color:#58a1dd">TerminalsConvertColor&lt;/span>(&lt;span style="color:#58a1dd">color&lt;/span>, &lt;span style="color:#58a1dd">co&lt;/span>)) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">return&lt;/span> &lt;span style="color:#58a1dd">WriteConsoleInternal&lt;/span>(&lt;span style="color:#58a1dd">data&lt;/span>, &lt;span style="color:#58a1dd">len&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">std&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">wstring&lt;/span> &lt;span style="color:#58a1dd">buf&lt;/span>(&lt;span style="color:#a6be9d">L&lt;/span>&lt;span style="color:#a6be9d">&amp;#34;&lt;/span>&lt;span style="color:#a6be9d">\x1b&lt;/span>&lt;span style="color:#a6be9d">[&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">if&lt;/span> (&lt;span style="color:#58a1dd">co&lt;/span>.&lt;span style="color:#58a1dd">blod&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">buf&lt;/span>.&lt;span style="color:#58a1dd">append&lt;/span>(&lt;span style="color:#a6be9d">L&lt;/span>&lt;span style="color:#a6be9d">&amp;#34;1;&amp;#34;&lt;/span>).&lt;span style="color:#58a1dd">append&lt;/span>(&lt;span style="color:#58a1dd">std&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">to_wstring&lt;/span>(&lt;span style="color:#58a1dd">co&lt;/span>.&lt;span style="color:#58a1dd">index&lt;/span>)).&lt;span style="color:#58a1dd">push_back&lt;/span>(&lt;span style="color:#a6be9d">L&lt;/span>&lt;span style="color:#a6be9d">&amp;#39;m&amp;#39;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } &lt;span style="color:#ff636f">else&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">buf&lt;/span>.&lt;span style="color:#58a1dd">append&lt;/span>(&lt;span style="color:#58a1dd">std&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">to_wstring&lt;/span>(&lt;span style="color:#58a1dd">co&lt;/span>.&lt;span style="color:#58a1dd">index&lt;/span>)).&lt;span style="color:#58a1dd">push_back&lt;/span>(&lt;span style="color:#a6be9d">L&lt;/span>&lt;span style="color:#a6be9d">&amp;#39;m&amp;#39;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">WriteConsoleInternal&lt;/span>(&lt;span style="color:#58a1dd">buf&lt;/span>.&lt;span style="color:#58a1dd">data&lt;/span>(), (&lt;span style="color:#58a1dd">DWORD&lt;/span>)&lt;span style="color:#58a1dd">buf&lt;/span>.&lt;span style="color:#58a1dd">size&lt;/span>());
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">auto&lt;/span> &lt;span style="color:#58a1dd">N&lt;/span> &lt;span style="color:#ff636f">=&lt;/span> &lt;span style="color:#58a1dd">WriteConsoleInternal&lt;/span>(&lt;span style="color:#58a1dd">data&lt;/span>, (&lt;span style="color:#58a1dd">DWORD&lt;/span>)&lt;span style="color:#58a1dd">len&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">WriteConsoleInternal&lt;/span>(&lt;span style="color:#a6be9d">L&lt;/span>&lt;span style="color:#a6be9d">&amp;#34;&lt;/span>&lt;span style="color:#a6be9d">\x1b&lt;/span>&lt;span style="color:#a6be9d">[0m&amp;#34;&lt;/span>, (&lt;span style="color:#ff636f">sizeof&lt;/span>(&lt;span style="color:#a6be9d">&amp;#34;&lt;/span>&lt;span style="color:#a6be9d">\x1b&lt;/span>&lt;span style="color:#a6be9d">[0m&amp;#34;&lt;/span>) &lt;span style="color:#ff636f">-&lt;/span> &lt;span style="color:#a6be9d">1&lt;/span>));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">return&lt;/span> &lt;span style="color:#ff636f">static_cast&lt;/span>&lt;span style="color:#ff636f">&amp;lt;&lt;/span>&lt;span style="color:#ff636f">int&lt;/span>&lt;span style="color:#ff636f">&amp;gt;&lt;/span>(&lt;span style="color:#58a1dd">N&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff636f">template&lt;/span> &lt;span style="color:#ff636f">&amp;lt;&lt;/span>&lt;span style="color:#ff636f">typename&lt;/span>... &lt;span style="color:#58a1dd">Args&lt;/span>&lt;span style="color:#ff636f">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff636f">int&lt;/span> &lt;span style="color:#58a1dd">PrintConsole&lt;/span>(&lt;span style="color:#ff636f">const&lt;/span> &lt;span style="color:#ff636f">wchar_t&lt;/span> &lt;span style="color:#ff636f">*&lt;/span>&lt;span style="color:#58a1dd">format&lt;/span>, &lt;span style="color:#58a1dd">Args&lt;/span>... &lt;span style="color:#58a1dd">args&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">std&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">wstring&lt;/span> &lt;span style="color:#58a1dd">buffer&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">size_t&lt;/span> &lt;span style="color:#58a1dd">size&lt;/span> &lt;span style="color:#ff636f">=&lt;/span> &lt;span style="color:#58a1dd">StringPrint&lt;/span>(&lt;span style="color:#ff636f">nullptr&lt;/span>, &lt;span style="color:#a6be9d">0&lt;/span>, &lt;span style="color:#58a1dd">format&lt;/span>, &lt;span style="color:#58a1dd">args&lt;/span>...);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">buffer&lt;/span>.&lt;span style="color:#58a1dd">resize&lt;/span>(&lt;span style="color:#58a1dd">size&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">size&lt;/span> &lt;span style="color:#ff636f">=&lt;/span> &lt;span style="color:#58a1dd">StringPrint&lt;/span>(&lt;span style="color:#ff636f">&amp;amp;&lt;/span>&lt;span style="color:#58a1dd">buffer&lt;/span>[&lt;span style="color:#a6be9d">0&lt;/span>], &lt;span style="color:#58a1dd">buffer&lt;/span>.&lt;span style="color:#58a1dd">size&lt;/span>() &lt;span style="color:#ff636f">+&lt;/span> &lt;span style="color:#a6be9d">1&lt;/span>, &lt;span style="color:#58a1dd">format&lt;/span>, &lt;span style="color:#58a1dd">args&lt;/span>...);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">return&lt;/span> &lt;span style="color:#58a1dd">WriteConsoleInternal&lt;/span>(&lt;span style="color:#58a1dd">buffer&lt;/span>.&lt;span style="color:#58a1dd">data&lt;/span>(), &lt;span style="color:#58a1dd">size&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>由于 VT 模式支持 256 色，这里还增加了 &lt;code>PrintConsole&lt;/code> 模板函数，支持用户自定义输出多一些色彩。&lt;/p>
&lt;h2 id="输出函数自动选择">输出函数自动选择&lt;/h2>
&lt;p>在不考虑 freopen 这样的重新设置标准输出输出的情况下，Privexec.Console 使用如下代码支持自动选择不同的输出函数&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#1d2432;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c++" data-lang="c++">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff636f">class&lt;/span> &lt;span style="color:#58a1dd">ConsoleInternal&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff636f">public&lt;/span>&lt;span style="color:#ff636f">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">ConsoleInternal&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">HANDLE&lt;/span> &lt;span style="color:#58a1dd">hConsole&lt;/span> &lt;span style="color:#ff636f">=&lt;/span> &lt;span style="color:#58a1dd">GetStdHandle&lt;/span>(&lt;span style="color:#58a1dd">STD_OUTPUT_HANDLE&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">if&lt;/span> (&lt;span style="color:#58a1dd">hConsole&lt;/span> &lt;span style="color:#ff636f">==&lt;/span> &lt;span style="color:#58a1dd">INVALID_HANDLE_VALUE&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">impl&lt;/span> &lt;span style="color:#ff636f">=&lt;/span> &lt;span style="color:#58a1dd">WriteFiles&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">return&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">if&lt;/span> (&lt;span style="color:#58a1dd">GetFileType&lt;/span>(&lt;span style="color:#58a1dd">hConsole&lt;/span>) &lt;span style="color:#ff636f">==&lt;/span> &lt;span style="color:#58a1dd">FILE_TYPE_DISK&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">impl&lt;/span> &lt;span style="color:#ff636f">=&lt;/span> &lt;span style="color:#58a1dd">WriteFiles&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">return&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">bool&lt;/span> &lt;span style="color:#58a1dd">isvt&lt;/span> &lt;span style="color:#ff636f">=&lt;/span> &lt;span style="color:#58a1dd">false&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">if&lt;/span> (&lt;span style="color:#58a1dd">IsWindowsConhost&lt;/span>(&lt;span style="color:#58a1dd">hConsole&lt;/span>, &lt;span style="color:#58a1dd">isvt&lt;/span>)) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">if&lt;/span> (&lt;span style="color:#58a1dd">isvt&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">impl&lt;/span> &lt;span style="color:#ff636f">=&lt;/span> &lt;span style="color:#58a1dd">WriteVTConsole&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">return&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">impl&lt;/span> &lt;span style="color:#ff636f">=&lt;/span> &lt;span style="color:#58a1dd">WriteConhost&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">return&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">impl&lt;/span> &lt;span style="color:#ff636f">=&lt;/span> &lt;span style="color:#58a1dd">WriteTerminals&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">int&lt;/span> &lt;span style="color:#58a1dd">WriteRealize&lt;/span>(&lt;span style="color:#ff636f">int&lt;/span> &lt;span style="color:#58a1dd">color&lt;/span>, &lt;span style="color:#ff636f">const&lt;/span> &lt;span style="color:#ff636f">wchar_t&lt;/span> &lt;span style="color:#ff636f">*&lt;/span>&lt;span style="color:#58a1dd">data&lt;/span>, &lt;span style="color:#58a1dd">size_t&lt;/span> &lt;span style="color:#58a1dd">len&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">return&lt;/span> &lt;span style="color:#ff636f">this&lt;/span>&lt;span style="color:#ff636f">-&amp;gt;&lt;/span>&lt;span style="color:#58a1dd">impl&lt;/span>(&lt;span style="color:#58a1dd">color&lt;/span>, &lt;span style="color:#58a1dd">data&lt;/span>, &lt;span style="color:#58a1dd">len&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff636f">private&lt;/span>&lt;span style="color:#ff636f">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">int&lt;/span> (&lt;span style="color:#ff636f">*&lt;/span>&lt;span style="color:#58a1dd">impl&lt;/span>)(&lt;span style="color:#ff636f">int&lt;/span> &lt;span style="color:#58a1dd">color&lt;/span>, &lt;span style="color:#ff636f">const&lt;/span> &lt;span style="color:#ff636f">wchar_t&lt;/span> &lt;span style="color:#ff636f">*&lt;/span>&lt;span style="color:#58a1dd">data&lt;/span>, &lt;span style="color:#58a1dd">size_t&lt;/span> &lt;span style="color:#58a1dd">len&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff636f">int&lt;/span> &lt;span style="color:#58a1dd">WriteInternal&lt;/span>(&lt;span style="color:#ff636f">int&lt;/span> &lt;span style="color:#58a1dd">color&lt;/span>, &lt;span style="color:#ff636f">const&lt;/span> &lt;span style="color:#ff636f">wchar_t&lt;/span> &lt;span style="color:#ff636f">*&lt;/span>&lt;span style="color:#58a1dd">buf&lt;/span>, &lt;span style="color:#58a1dd">size_t&lt;/span> &lt;span style="color:#58a1dd">len&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">static&lt;/span> &lt;span style="color:#58a1dd">ConsoleInternal&lt;/span> &lt;span style="color:#58a1dd">provider&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">return&lt;/span> &lt;span style="color:#58a1dd">provider&lt;/span>.&lt;span style="color:#58a1dd">WriteRealize&lt;/span>(&lt;span style="color:#58a1dd">color&lt;/span>, &lt;span style="color:#58a1dd">buf&lt;/span>, &lt;span style="color:#58a1dd">len&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>使用 &lt;code>console::Print&lt;/code> 不用担心乱码和颜色问题，在这几个主流的环境中都能正常显示（包括 ConEmu）。Print 使用的完全是 wchar_t。&lt;/p>
&lt;h2 id="其他">其他&lt;/h2>
&lt;p>很欣慰的是 Windows 控制台团队在 Windows 10 开发之处就在不断改进控制台： 比如 &lt;a href="https://blogs.windows.com/buildingapps/2014/10/07/console-improvements-in-the-windows-10-technical-preview/">Console Improvements in the Windows 10 Technical Preview&lt;/a>&lt;/p>
&lt;p>还有计划中的 Emoji 支持： &lt;a href="https://github.com/Microsoft/BashOnWindows/issues/590">Add emoji support to Windows Console&lt;/a>&lt;/p>
&lt;p>以及基于 DirectWrite 改进控制台字体渲染的计划： &lt;a href="https://github.com/Microsoft/BashOnWindows/issues/75#issuecomment-304415019">UTF-8 rendering woes&lt;/a>&lt;/p>
&lt;p>当然 ConEmu 也有计划使用 DirectWrite 改进其渲染。&lt;/p>
&lt;p>不过遗憾的是，Mintty 的开发者并不认为有使用 DirectWrite 改进渲染的必要。&lt;/p>
&lt;p>基于 Rust 的跨平台 GPU 终端 &lt;a href="https://github.com/jwilm/alacritty">Alacritty - A cross-platform, GPU-accelerated terminal emulator&lt;/a> 也计划在 1.0 时对 Windows 提供支持，字体渲染也有 DirectWrite 的身影。&lt;/p>
&lt;p>Privexec.Console 官方并不会支持 Windows 10 以前的版本，毕竟作者精力有限。&lt;/p>
&lt;h2 id="备注">备注&lt;/h2>
&lt;ol>
&lt;li>父进程未显式设置标准输入输出和标准错误时，子进程会继承父进程的值，在 Windows 中，GUI 程序的标准输入输出和 Unix 下重定向到 &lt;code>/dev/null&lt;/code> 类似，但启动的 CUI 子进程默认下依然有控制台窗口&lt;/li>
&lt;/ol>
- https://forcemz.net/posts/2017/2017-06-05-color-console/ - Copyright (c) 2009-2024 J23</description></item><item><title>Kismet 杂谈</title><link>https://forcemz.net/posts/2017/2017-05-14-kismet/</link><pubDate>Sun, 14 May 2017 10:00:00 +0800</pubDate><guid>https://forcemz.net/posts/2017/2017-05-14-kismet/</guid><description>江二十三的思考 https://forcemz.net/posts/2017/2017-05-14-kismet/ -&lt;h1 id="前言">前言&lt;/h1>
&lt;p>年初以来，互联网安全领域频繁发生大事件，二月下旬，Google 研究人员攻破了 SHA-1算法，在版本控制领域，主要的版本控制系统都使用了 SHA-1 算法&lt;sup>1&lt;/sup>，由于工作需要，我对此格外关注，也了解了其他 SHA 算法，比如 SHA-256/SHA-512 ，基于 Keccak 的 SHA-3 等，寻找 GUI Hash 计算工具时发现大多数工具都未提供 SHA-3 算法支持，并且界面也不符合我的喜好，在闲暇时间，我就开发了 kismat Hash 计算工具，包括传统的Win32 桌面程序和 UWP 程序。&lt;/p>
&lt;h2 id="sha-3">SHA-3&lt;/h2>
&lt;p>在 SHA-1 被攻破的十年前，NIST 就已经开始了 SHA-3 算法的征集，经过几年的选拔和测试，2012 年 Keccak 被选为优胜者，成为了 SHA-3。&lt;/p>
&lt;p>&lt;strong>Keccak&lt;/strong> 官方网站：&lt;a href="http://keccak.noekeon.org/">http://keccak.noekeon.org/&lt;/a> 在这里，你可以下载 NIST 的原始版本。
在 &lt;a href="https://github.com/gvanas/KeccakCodePackage">Keccak Code Package&lt;/a>&lt;sup>2&lt;/sup> 项目中你可以下载 SHA-3 以及各种变种。&lt;/p>
&lt;p>Github 上 C/C++ 的 SHA-3 实现非常多，但是基础平台的加密算法库都未实现，如 Windows CNG, Apple Security.framework,OpenSSL。在 Window 中截至到 Windows 10 10.0.15063, CNG 依然没有支持 SHA-3，同样的，虽然 OpenSSL 添加了 &lt;code>keccak1600.c&lt;/code> 但是其 SHA-3 依然未完全实现。&lt;/p>
&lt;p>ARM mbed 的 &lt;code>mbedtls&lt;/code>&lt;sup>3&lt;/sup> Google 的 &lt;code>Boringssl&lt;/code>&lt;sup>4&lt;/sup> OpenBSD 的 &lt;code>LibreSSL&lt;/code>&lt;sup>5&lt;/sup> 也未支持 SHA-3。&lt;/p>
&lt;p>下面是 &lt;code>bcrypt.h&lt;/code> 关于加密算法的定义：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#1d2432;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c++" data-lang="c++">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">#define BCRYPT_RSA_ALGORITHM L&amp;#34;RSA&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">#define BCRYPT_RSA_SIGN_ALGORITHM L&amp;#34;RSA_SIGN&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">#define BCRYPT_DH_ALGORITHM L&amp;#34;DH&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">#define BCRYPT_DSA_ALGORITHM L&amp;#34;DSA&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">#define BCRYPT_RC2_ALGORITHM L&amp;#34;RC2&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">#define BCRYPT_RC4_ALGORITHM L&amp;#34;RC4&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">#define BCRYPT_AES_ALGORITHM L&amp;#34;AES&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">#define BCRYPT_DES_ALGORITHM L&amp;#34;DES&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">#define BCRYPT_DESX_ALGORITHM L&amp;#34;DESX&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">#define BCRYPT_3DES_ALGORITHM L&amp;#34;3DES&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">#define BCRYPT_3DES_112_ALGORITHM L&amp;#34;3DES_112&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">#define BCRYPT_MD2_ALGORITHM L&amp;#34;MD2&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">#define BCRYPT_MD4_ALGORITHM L&amp;#34;MD4&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">#define BCRYPT_MD5_ALGORITHM L&amp;#34;MD5&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">#define BCRYPT_SHA1_ALGORITHM L&amp;#34;SHA1&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">#define BCRYPT_SHA256_ALGORITHM L&amp;#34;SHA256&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">#define BCRYPT_SHA384_ALGORITHM L&amp;#34;SHA384&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">#define BCRYPT_SHA512_ALGORITHM L&amp;#34;SHA512&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">#define BCRYPT_AES_GMAC_ALGORITHM L&amp;#34;AES-GMAC&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">#define BCRYPT_AES_CMAC_ALGORITHM L&amp;#34;AES-CMAC&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">#define BCRYPT_ECDSA_P256_ALGORITHM L&amp;#34;ECDSA_P256&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">#define BCRYPT_ECDSA_P384_ALGORITHM L&amp;#34;ECDSA_P384&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">#define BCRYPT_ECDSA_P521_ALGORITHM L&amp;#34;ECDSA_P521&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">#define BCRYPT_ECDH_P256_ALGORITHM L&amp;#34;ECDH_P256&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">#define BCRYPT_ECDH_P384_ALGORITHM L&amp;#34;ECDH_P384&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">#define BCRYPT_ECDH_P521_ALGORITHM L&amp;#34;ECDH_P521&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">#define BCRYPT_RNG_ALGORITHM L&amp;#34;RNG&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">#define BCRYPT_RNG_FIPS186_DSA_ALGORITHM L&amp;#34;FIPS186DSARNG&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">#define BCRYPT_RNG_DUAL_EC_ALGORITHM L&amp;#34;DUALECRNG&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">#if (NTDDI_VERSION &amp;gt;= NTDDI_WIN8)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">#define BCRYPT_SP800108_CTR_HMAC_ALGORITHM L&amp;#34;SP800_108_CTR_HMAC&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">#define BCRYPT_SP80056A_CONCAT_ALGORITHM L&amp;#34;SP800_56A_CONCAT&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">#define BCRYPT_PBKDF2_ALGORITHM L&amp;#34;PBKDF2&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">#define BCRYPT_CAPI_KDF_ALGORITHM L&amp;#34;CAPI_KDF&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">#define BCRYPT_TLS1_1_KDF_ALGORITHM L&amp;#34;TLS1_1_KDF&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">#define BCRYPT_TLS1_2_KDF_ALGORITHM L&amp;#34;TLS1_2_KDF&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">#endif
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">#if (NTDDI_VERSION &amp;gt;= NTDDI_WINTHRESHOLD)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">#define BCRYPT_ECDSA_ALGORITHM L&amp;#34;ECDSA&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">#define BCRYPT_ECDH_ALGORITHM L&amp;#34;ECDH&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">#define BCRYPT_XTS_AES_ALGORITHM L&amp;#34;XTS-AES&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">#endif
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>如果开发者需要支持 SHA-3 ，又要考虑提供库的稳定性，可以选择 &lt;a href="https://github.com/rhash/RHash">RHash&lt;/a> , CMake 3.8 开始使用 RHash 支持 SHA-3 ,地址为：&lt;a href="https://gitlab.kitware.com/cmake/cmake/tree/master/Utilities/cmlibrhash">Utilities/cmlibrhash&lt;/a>。&lt;/p>
&lt;p>在其他语言中，大多是第三方库支持 SHA-3，然而标准库或者平台 API 并未实现（这些语言标准库可能使用 Windows CNG 或者 OpenSSL 的加密算法实现）。&lt;/p>
&lt;h2 id="kismet">Kismet&lt;/h2>
&lt;p>Kismet 是一个传统的 Win32 程序，使用 ATL 封装窗口，Direct2D 绘制界面，Hash 库使用的正是 RHash，RHash 支持 MD4,MD5,SHA-1,SHA-224/256,SHA-384/512,SHA-3 (224,256,384,512) ,能够很大程度的避免引入多个依赖库。如果使用 Windows CNG，还需要额外添加 SHA-3 支持，反而没有直接使用 RHash 方便。&lt;/p>
&lt;p>Kismet Github 托管地址为： &lt;a href="https://github.com/fcharlie/Kismet">https://github.com/fcharlie/Kismet&lt;/a> 开源协议为 MIT。&lt;/p>
&lt;p>Kismet 包装 RHash 的代码在： &lt;a href="https://github.com/fcharlie/Kismet/blob/master/Kismet/Hashsum.cpp">Hashusm.cpp&lt;/a> 中，Hashsum 接口类为：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#1d2432;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c++" data-lang="c++">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff636f">class&lt;/span> &lt;span style="color:#58a1dd">Hashsum&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff636f">public&lt;/span>&lt;span style="color:#ff636f">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">virtual&lt;/span> &lt;span style="color:#ff636f">void&lt;/span> &lt;span style="color:#58a1dd">Initialize&lt;/span>(&lt;span style="color:#ff636f">int&lt;/span> &lt;span style="color:#58a1dd">width&lt;/span>) &lt;span style="color:#ff636f">=&lt;/span> &lt;span style="color:#a6be9d">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">virtual&lt;/span> &lt;span style="color:#ff636f">void&lt;/span> &lt;span style="color:#58a1dd">Update&lt;/span>(&lt;span style="color:#ff636f">const&lt;/span> &lt;span style="color:#ff636f">unsigned&lt;/span> &lt;span style="color:#ff636f">char&lt;/span> &lt;span style="color:#ff636f">*&lt;/span>&lt;span style="color:#58a1dd">buf&lt;/span>, &lt;span style="color:#58a1dd">size_t&lt;/span> &lt;span style="color:#58a1dd">len&lt;/span>) &lt;span style="color:#ff636f">=&lt;/span> &lt;span style="color:#a6be9d">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">virtual&lt;/span> &lt;span style="color:#ff636f">void&lt;/span> &lt;span style="color:#58a1dd">Final&lt;/span>(&lt;span style="color:#ff636f">bool&lt;/span> &lt;span style="color:#58a1dd">ucase&lt;/span>, &lt;span style="color:#58a1dd">std&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">wstring&lt;/span> &lt;span style="color:#ff636f">&amp;amp;&lt;/span>&lt;span style="color:#58a1dd">hash&lt;/span>) &lt;span style="color:#ff636f">=&lt;/span> &lt;span style="color:#a6be9d">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>};
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>二进制数据转 16 进制：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#1d2432;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c++" data-lang="c++">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff636f">static&lt;/span> &lt;span style="color:#ff636f">inline&lt;/span> &lt;span style="color:#ff636f">void&lt;/span> &lt;span style="color:#58a1dd">BinaryToHex&lt;/span>(&lt;span style="color:#ff636f">const&lt;/span> &lt;span style="color:#ff636f">unsigned&lt;/span> &lt;span style="color:#ff636f">char&lt;/span> &lt;span style="color:#ff636f">*&lt;/span>&lt;span style="color:#58a1dd">buf&lt;/span>, &lt;span style="color:#58a1dd">size_t&lt;/span> &lt;span style="color:#58a1dd">len&lt;/span>, &lt;span style="color:#58a1dd">std&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">wstring&lt;/span> &lt;span style="color:#ff636f">&amp;amp;&lt;/span>&lt;span style="color:#58a1dd">str&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">char&lt;/span> &lt;span style="color:#58a1dd">to_hex&lt;/span>[] &lt;span style="color:#ff636f">=&lt;/span> &lt;span style="color:#a6be9d">&amp;#34;0123456789abcdef&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">for&lt;/span> (&lt;span style="color:#ff636f">uint32_t&lt;/span> &lt;span style="color:#58a1dd">i&lt;/span> &lt;span style="color:#ff636f">=&lt;/span> &lt;span style="color:#a6be9d">0&lt;/span>; &lt;span style="color:#58a1dd">i&lt;/span> &lt;span style="color:#ff636f">&amp;lt;&lt;/span> &lt;span style="color:#58a1dd">len&lt;/span>; &lt;span style="color:#58a1dd">i&lt;/span>&lt;span style="color:#ff636f">++&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">unsigned&lt;/span> &lt;span style="color:#ff636f">int&lt;/span> &lt;span style="color:#58a1dd">val&lt;/span> &lt;span style="color:#ff636f">=&lt;/span> &lt;span style="color:#58a1dd">buf&lt;/span>[&lt;span style="color:#58a1dd">i&lt;/span>];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">str&lt;/span>.&lt;span style="color:#58a1dd">push_back&lt;/span>(&lt;span style="color:#58a1dd">to_hex&lt;/span>[&lt;span style="color:#58a1dd">val&lt;/span> &lt;span style="color:#ff636f">&amp;gt;&amp;gt;&lt;/span> &lt;span style="color:#a6be9d">4&lt;/span>]);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">str&lt;/span>.&lt;span style="color:#58a1dd">push_back&lt;/span>(&lt;span style="color:#58a1dd">to_hex&lt;/span>[&lt;span style="color:#58a1dd">val&lt;/span> &lt;span style="color:#ff636f">&amp;amp;&lt;/span> &lt;span style="color:#a6be9d">0xf&lt;/span>]);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff636f">static&lt;/span> &lt;span style="color:#ff636f">inline&lt;/span> &lt;span style="color:#ff636f">void&lt;/span> &lt;span style="color:#58a1dd">BinaryToHexUCase&lt;/span>(&lt;span style="color:#ff636f">const&lt;/span> &lt;span style="color:#ff636f">unsigned&lt;/span> &lt;span style="color:#ff636f">char&lt;/span> &lt;span style="color:#ff636f">*&lt;/span>&lt;span style="color:#58a1dd">buf&lt;/span>, &lt;span style="color:#58a1dd">size_t&lt;/span> &lt;span style="color:#58a1dd">len&lt;/span>, &lt;span style="color:#58a1dd">std&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">wstring&lt;/span> &lt;span style="color:#ff636f">&amp;amp;&lt;/span>&lt;span style="color:#58a1dd">str&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">char&lt;/span> &lt;span style="color:#58a1dd">to_hex&lt;/span>[] &lt;span style="color:#ff636f">=&lt;/span> &lt;span style="color:#a6be9d">&amp;#34;0123456789ABCDEF&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">for&lt;/span> (&lt;span style="color:#ff636f">uint32_t&lt;/span> &lt;span style="color:#58a1dd">i&lt;/span> &lt;span style="color:#ff636f">=&lt;/span> &lt;span style="color:#a6be9d">0&lt;/span>; &lt;span style="color:#58a1dd">i&lt;/span> &lt;span style="color:#ff636f">&amp;lt;&lt;/span> &lt;span style="color:#58a1dd">len&lt;/span>; &lt;span style="color:#58a1dd">i&lt;/span>&lt;span style="color:#ff636f">++&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">unsigned&lt;/span> &lt;span style="color:#ff636f">int&lt;/span> &lt;span style="color:#58a1dd">val&lt;/span> &lt;span style="color:#ff636f">=&lt;/span> &lt;span style="color:#58a1dd">buf&lt;/span>[&lt;span style="color:#58a1dd">i&lt;/span>];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">str&lt;/span>.&lt;span style="color:#58a1dd">push_back&lt;/span>(&lt;span style="color:#58a1dd">to_hex&lt;/span>[&lt;span style="color:#58a1dd">val&lt;/span> &lt;span style="color:#ff636f">&amp;gt;&amp;gt;&lt;/span> &lt;span style="color:#a6be9d">4&lt;/span>]);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">str&lt;/span>.&lt;span style="color:#58a1dd">push_back&lt;/span>(&lt;span style="color:#58a1dd">to_hex&lt;/span>[&lt;span style="color:#58a1dd">val&lt;/span> &lt;span style="color:#ff636f">&amp;amp;&lt;/span> &lt;span style="color:#a6be9d">0xf&lt;/span>]);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>而使用 Hashsum 的代码如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#1d2432;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c++" data-lang="c++">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#58a1dd">Hashsum&lt;/span> &lt;span style="color:#ff636f">*&lt;/span> &lt;span style="color:#58a1dd">CreateHashsum&lt;/span>(&lt;span style="color:#ff636f">const&lt;/span> &lt;span style="color:#58a1dd">std&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">wstring&lt;/span> &lt;span style="color:#ff636f">&amp;amp;&lt;/span> &lt;span style="color:#58a1dd">file&lt;/span>, &lt;span style="color:#ff636f">int&lt;/span> &lt;span style="color:#58a1dd">alg&lt;/span>, &lt;span style="color:#ff636f">int&lt;/span> &lt;span style="color:#58a1dd">width&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">Hashsum&lt;/span> &lt;span style="color:#ff636f">*&lt;/span>&lt;span style="color:#58a1dd">sum&lt;/span> &lt;span style="color:#ff636f">=&lt;/span> &lt;span style="color:#ff636f">nullptr&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">switch&lt;/span> (&lt;span style="color:#58a1dd">alg&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">case&lt;/span> &lt;span style="color:#58a1dd">kFilesumMD5&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">sum&lt;/span> &lt;span style="color:#ff636f">=&lt;/span> &lt;span style="color:#ff636f">new&lt;/span> &lt;span style="color:#58a1dd">MD5Hashsum&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">sum&lt;/span>&lt;span style="color:#ff636f">-&amp;gt;&lt;/span>&lt;span style="color:#58a1dd">Initialize&lt;/span>(&lt;span style="color:#58a1dd">width&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">break&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">case&lt;/span> &lt;span style="color:#58a1dd">kFilesumSHA1&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">sum&lt;/span> &lt;span style="color:#ff636f">=&lt;/span> &lt;span style="color:#ff636f">new&lt;/span> &lt;span style="color:#58a1dd">SHA1Sum&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">sum&lt;/span>&lt;span style="color:#ff636f">-&amp;gt;&lt;/span>&lt;span style="color:#58a1dd">Initialize&lt;/span>(&lt;span style="color:#58a1dd">width&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">break&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">case&lt;/span> &lt;span style="color:#58a1dd">kFilesumSHA1DC&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">sum&lt;/span> &lt;span style="color:#ff636f">=&lt;/span> &lt;span style="color:#ff636f">new&lt;/span> &lt;span style="color:#58a1dd">SHADC1Sum&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">sum&lt;/span>&lt;span style="color:#ff636f">-&amp;gt;&lt;/span>&lt;span style="color:#58a1dd">Initialize&lt;/span>(&lt;span style="color:#58a1dd">width&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">break&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">case&lt;/span> &lt;span style="color:#58a1dd">kFilesumSHA2&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">if&lt;/span> (&lt;span style="color:#58a1dd">width&lt;/span> &lt;span style="color:#ff636f">&amp;lt;=&lt;/span> &lt;span style="color:#a6be9d">256&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">sum&lt;/span> &lt;span style="color:#ff636f">=&lt;/span> &lt;span style="color:#ff636f">new&lt;/span> &lt;span style="color:#58a1dd">SHA256Sum&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">sum&lt;/span>&lt;span style="color:#ff636f">-&amp;gt;&lt;/span>&lt;span style="color:#58a1dd">Initialize&lt;/span>(&lt;span style="color:#58a1dd">width&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">else&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">sum&lt;/span> &lt;span style="color:#ff636f">=&lt;/span> &lt;span style="color:#ff636f">new&lt;/span> &lt;span style="color:#58a1dd">SHA512Sum&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">sum&lt;/span>&lt;span style="color:#ff636f">-&amp;gt;&lt;/span>&lt;span style="color:#58a1dd">Initialize&lt;/span>(&lt;span style="color:#58a1dd">width&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">break&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">case&lt;/span> &lt;span style="color:#58a1dd">kFilesumSHA3&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">sum&lt;/span> &lt;span style="color:#ff636f">=&lt;/span> &lt;span style="color:#ff636f">new&lt;/span> &lt;span style="color:#58a1dd">SHA3Sum&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">sum&lt;/span>&lt;span style="color:#ff636f">-&amp;gt;&lt;/span>&lt;span style="color:#58a1dd">Initialize&lt;/span>(&lt;span style="color:#58a1dd">width&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">break&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">default&lt;/span>&lt;span style="color:#ff636f">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">return&lt;/span> &lt;span style="color:#ff636f">nullptr&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">return&lt;/span> &lt;span style="color:#58a1dd">sum&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>在 GUI 程序的开发过程中，如果在主线程执行耗时的操作会导致界面失去响应，这个时候就需要使用多线程，使用 Win32 API &lt;code>CreateThread&lt;/code> CRT 的 &lt;code>_beginthread&lt;/code> 这些都需要传递全局函数，使用 lambda 的话非常 Ugly。这个是用可以使用 &lt;code>std::thread&lt;/code> 但是如果执行了多个计算过程，就会需要启动多个线程，不过对于 Kismet 这样的小工具无关紧要。我在开发 Git LFS Server (Moses) 时使用了 &lt;code>cpprestsdk&lt;/code> 了解了 &lt;code>PPL&lt;/code>&lt;sup>6&lt;/sup> ,在 Windows 10 中，如果使用 C++/CX 开发 App 时也是使用了 PPL&lt;sup>7&lt;/sup>。在 Kismet 中，我也就采用了 PPL，代码如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#1d2432;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c++" data-lang="c++">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#58a1dd">LRESULT&lt;/span> &lt;span style="color:#58a1dd">NeonWindow&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">Filesum&lt;/span>(&lt;span style="color:#ff636f">const&lt;/span> &lt;span style="color:#58a1dd">std&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">wstring&lt;/span> &lt;span style="color:#ff636f">&amp;amp;&lt;/span> &lt;span style="color:#58a1dd">file&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">if&lt;/span> (&lt;span style="color:#58a1dd">file&lt;/span>.&lt;span style="color:#58a1dd">empty&lt;/span>()) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">return&lt;/span> &lt;span style="color:#58a1dd">S_FALSE&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">if&lt;/span> (&lt;span style="color:#58a1dd">locked&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">return&lt;/span> &lt;span style="color:#58a1dd">S_FALSE&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">FilesumAlgw&lt;/span> &lt;span style="color:#58a1dd">aw&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">if&lt;/span> (&lt;span style="color:#ff636f">!&lt;/span>&lt;span style="color:#58a1dd">HashsumAlgmCheck&lt;/span>(&lt;span style="color:#58a1dd">ComboBox_GetCurSel&lt;/span>(&lt;span style="color:#58a1dd">hCombo&lt;/span>), &lt;span style="color:#58a1dd">aw&lt;/span>)) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">return&lt;/span> &lt;span style="color:#58a1dd">false&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">filetext&lt;/span>.&lt;span style="color:#58a1dd">clear&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">hash&lt;/span>.&lt;span style="color:#58a1dd">clear&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">sizetext&lt;/span>.&lt;span style="color:#58a1dd">clear&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">std&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">wstring&lt;/span> &lt;span style="color:#58a1dd">title&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">title&lt;/span>.&lt;span style="color:#58a1dd">append&lt;/span>(&lt;span style="color:#a6be9d">L&lt;/span>&lt;span style="color:#a6be9d">&amp;#34;(&amp;#34;&lt;/span>).&lt;span style="color:#58a1dd">append&lt;/span>(&lt;span style="color:#58a1dd">aw&lt;/span>.&lt;span style="color:#58a1dd">name&lt;/span>).&lt;span style="color:#58a1dd">append&lt;/span>(&lt;span style="color:#a6be9d">L&lt;/span>&lt;span style="color:#a6be9d">&amp;#34;) &amp;#34;&lt;/span>).&lt;span style="color:#58a1dd">append&lt;/span>(&lt;span style="color:#58a1dd">PathFindFileNameW&lt;/span>(&lt;span style="color:#58a1dd">file&lt;/span>.&lt;span style="color:#58a1dd">data&lt;/span>()));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">UpdateTitle&lt;/span>(&lt;span style="color:#58a1dd">title&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">showerror&lt;/span> &lt;span style="color:#ff636f">=&lt;/span> &lt;span style="color:#58a1dd">false&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">Concurrency&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">create_task&lt;/span>([&lt;span style="color:#ff636f">this&lt;/span>, &lt;span style="color:#58a1dd">file&lt;/span>,&lt;span style="color:#58a1dd">aw&lt;/span>]()&lt;span style="color:#ff636f">-&amp;gt;&lt;/span>&lt;span style="color:#ff636f">bool&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">std&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">shared_ptr&lt;/span>&lt;span style="color:#ff636f">&amp;lt;&lt;/span>&lt;span style="color:#58a1dd">Hashsum&lt;/span>&lt;span style="color:#ff636f">&amp;gt;&lt;/span> &lt;span style="color:#58a1dd">sum&lt;/span>(&lt;span style="color:#58a1dd">CreateHashsum&lt;/span>(&lt;span style="color:#58a1dd">file&lt;/span>, &lt;span style="color:#58a1dd">aw&lt;/span>.&lt;span style="color:#58a1dd">alm&lt;/span>, &lt;span style="color:#58a1dd">aw&lt;/span>.&lt;span style="color:#58a1dd">width&lt;/span>));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">if&lt;/span> (&lt;span style="color:#ff636f">!&lt;/span>&lt;span style="color:#58a1dd">sum&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">return&lt;/span> &lt;span style="color:#58a1dd">false&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">AllocSingle&lt;/span> &lt;span style="color:#58a1dd">as&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">BYTE&lt;/span> &lt;span style="color:#ff636f">*&lt;/span>&lt;span style="color:#58a1dd">buffer&lt;/span> &lt;span style="color:#ff636f">=&lt;/span> &lt;span style="color:#58a1dd">as&lt;/span>.&lt;span style="color:#58a1dd">Alloc&lt;/span>&lt;span style="color:#ff636f">&amp;lt;&lt;/span>&lt;span style="color:#58a1dd">BYTE&lt;/span>&lt;span style="color:#ff636f">&amp;gt;&lt;/span>(&lt;span style="color:#58a1dd">AllocSingle&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">kInternalBufferSize&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">if&lt;/span> (&lt;span style="color:#58a1dd">as&lt;/span>.&lt;span style="color:#58a1dd">size&lt;/span>() &lt;span style="color:#ff636f">==&lt;/span> &lt;span style="color:#a6be9d">0&lt;/span> &lt;span style="color:#ff636f">||&lt;/span> &lt;span style="color:#58a1dd">buffer&lt;/span> &lt;span style="color:#ff636f">==&lt;/span> &lt;span style="color:#ff636f">nullptr&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">return&lt;/span> &lt;span style="color:#58a1dd">false&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">auto&lt;/span> &lt;span style="color:#58a1dd">hFile&lt;/span> &lt;span style="color:#ff636f">=&lt;/span> &lt;span style="color:#58a1dd">CreateFileW&lt;/span>(&lt;span style="color:#58a1dd">file&lt;/span>.&lt;span style="color:#58a1dd">data&lt;/span>(),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">GENERIC_READ&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">FILE_SHARE_READ&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">NULL&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">OPEN_EXISTING&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">FILE_ATTRIBUTE_NORMAL&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">nullptr&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">if&lt;/span> (&lt;span style="color:#58a1dd">hFile&lt;/span> &lt;span style="color:#ff636f">==&lt;/span> &lt;span style="color:#58a1dd">INVALID_HANDLE_VALUE&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">return&lt;/span> &lt;span style="color:#58a1dd">false&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">LARGE_INTEGER&lt;/span> &lt;span style="color:#58a1dd">li&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">GetFileSizeEx&lt;/span>(&lt;span style="color:#58a1dd">hFile&lt;/span>, &lt;span style="color:#ff636f">&amp;amp;&lt;/span>&lt;span style="color:#58a1dd">li&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">if&lt;/span> (&lt;span style="color:#58a1dd">file&lt;/span>.&lt;span style="color:#58a1dd">size&lt;/span>() &lt;span style="color:#ff636f">&amp;gt;&lt;/span> &lt;span style="color:#a6be9d">64&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">filetext&lt;/span>.&lt;span style="color:#58a1dd">assign&lt;/span>(&lt;span style="color:#58a1dd">PathFindFileNameW&lt;/span>(&lt;span style="color:#58a1dd">file&lt;/span>.&lt;span style="color:#58a1dd">data&lt;/span>()));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">if&lt;/span> (&lt;span style="color:#58a1dd">filetext&lt;/span>.&lt;span style="color:#58a1dd">size&lt;/span>() &lt;span style="color:#ff636f">&amp;gt;&lt;/span> &lt;span style="color:#a6be9d">64&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">filetext&lt;/span>.&lt;span style="color:#58a1dd">resize&lt;/span>(&lt;span style="color:#a6be9d">64&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">filetext&lt;/span>.&lt;span style="color:#58a1dd">append&lt;/span>(&lt;span style="color:#a6be9d">L&lt;/span>&lt;span style="color:#a6be9d">&amp;#34;...&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">else&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">filetext&lt;/span> &lt;span style="color:#ff636f">=&lt;/span> &lt;span style="color:#58a1dd">file&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">sizetext&lt;/span>.&lt;span style="color:#58a1dd">assign&lt;/span>(&lt;span style="color:#58a1dd">std&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">to_wstring&lt;/span>(&lt;span style="color:#58a1dd">li&lt;/span>.&lt;span style="color:#58a1dd">QuadPart&lt;/span>));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">InvalidateRect&lt;/span>(&lt;span style="color:#ff636f">nullptr&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">DWORD&lt;/span> &lt;span style="color:#58a1dd">dwRead&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">int64_t&lt;/span> &lt;span style="color:#58a1dd">cmsize&lt;/span> &lt;span style="color:#ff636f">=&lt;/span> &lt;span style="color:#a6be9d">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">uint32_t&lt;/span> &lt;span style="color:#58a1dd">pg&lt;/span> &lt;span style="color:#ff636f">=&lt;/span> &lt;span style="color:#a6be9d">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">for&lt;/span> (;;) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">if&lt;/span> (&lt;span style="color:#ff636f">!&lt;/span>&lt;span style="color:#58a1dd">ReadFile&lt;/span>(&lt;span style="color:#58a1dd">hFile&lt;/span>, &lt;span style="color:#58a1dd">buffer&lt;/span>, &lt;span style="color:#58a1dd">AllocSingle&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">kInternalBufferSize&lt;/span>, &lt;span style="color:#ff636f">&amp;amp;&lt;/span>&lt;span style="color:#58a1dd">dwRead&lt;/span>, &lt;span style="color:#ff636f">nullptr&lt;/span>)) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">break&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">sum&lt;/span>&lt;span style="color:#ff636f">-&amp;gt;&lt;/span>&lt;span style="color:#58a1dd">Update&lt;/span>(&lt;span style="color:#58a1dd">buffer&lt;/span>, &lt;span style="color:#58a1dd">dwRead&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">cmsize&lt;/span> &lt;span style="color:#ff636f">+=&lt;/span> &lt;span style="color:#58a1dd">dwRead&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">auto&lt;/span> &lt;span style="color:#58a1dd">N&lt;/span> &lt;span style="color:#ff636f">=&lt;/span> (&lt;span style="color:#ff636f">uint32_t&lt;/span>)(&lt;span style="color:#58a1dd">cmsize&lt;/span> &lt;span style="color:#ff636f">*&lt;/span> &lt;span style="color:#a6be9d">100&lt;/span> &lt;span style="color:#ff636f">/&lt;/span> &lt;span style="color:#58a1dd">li&lt;/span>.&lt;span style="color:#58a1dd">QuadPart&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">progress&lt;/span> &lt;span style="color:#ff636f">=&lt;/span> (&lt;span style="color:#ff636f">uint32_t&lt;/span>)&lt;span style="color:#58a1dd">N&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#828b96;font-style:italic">/// when number is modify, Flush Window
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span> &lt;span style="color:#ff636f">if&lt;/span> (&lt;span style="color:#58a1dd">pg&lt;/span> &lt;span style="color:#ff636f">!=&lt;/span> &lt;span style="color:#58a1dd">N&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">pg&lt;/span> &lt;span style="color:#ff636f">=&lt;/span> (&lt;span style="color:#ff636f">uint32_t&lt;/span>)&lt;span style="color:#58a1dd">N&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">InvalidateRect&lt;/span>(&lt;span style="color:#ff636f">nullptr&lt;/span>,&lt;span style="color:#58a1dd">FALSE&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">if&lt;/span> (&lt;span style="color:#58a1dd">dwRead&lt;/span>&lt;span style="color:#ff636f">&amp;lt;&lt;/span>&lt;span style="color:#58a1dd">AllocSingle&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">kInternalBufferSize&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">break&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">CloseHandle&lt;/span>(&lt;span style="color:#58a1dd">hFile&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">hash&lt;/span>.&lt;span style="color:#58a1dd">clear&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">bool&lt;/span> &lt;span style="color:#58a1dd">ucase&lt;/span> &lt;span style="color:#ff636f">=&lt;/span> (&lt;span style="color:#58a1dd">Button_GetCheck&lt;/span>(&lt;span style="color:#58a1dd">hCheck&lt;/span>) &lt;span style="color:#ff636f">==&lt;/span> &lt;span style="color:#58a1dd">BST_CHECKED&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">sum&lt;/span>&lt;span style="color:#ff636f">-&amp;gt;&lt;/span>&lt;span style="color:#58a1dd">Final&lt;/span>(&lt;span style="color:#58a1dd">ucase&lt;/span>, &lt;span style="color:#58a1dd">hash&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">return&lt;/span> &lt;span style="color:#58a1dd">true&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }).&lt;span style="color:#58a1dd">then&lt;/span>([&lt;span style="color:#ff636f">this&lt;/span>](&lt;span style="color:#ff636f">bool&lt;/span> &lt;span style="color:#58a1dd">result&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">if&lt;/span> (&lt;span style="color:#ff636f">!&lt;/span>&lt;span style="color:#58a1dd">result&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">showerror&lt;/span> &lt;span style="color:#ff636f">=&lt;/span> &lt;span style="color:#58a1dd">true&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">InvalidateRect&lt;/span>(&lt;span style="color:#ff636f">nullptr&lt;/span>,&lt;span style="color:#58a1dd">FALSE&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">locked&lt;/span> &lt;span style="color:#ff636f">=&lt;/span> &lt;span style="color:#58a1dd">false&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> });
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">return&lt;/span> &lt;span style="color:#58a1dd">S_OK&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>使用 PPL 和 lambda 能够很方便的使用窗口类的变量，PPL 使用线程池也是非常高效的。&lt;/p>
&lt;p>窗口图形方面，我使用的是 Direct2D，在 Windows 10 中，Direct2D 对 Emoji 的支持更好了，能够支持彩色 ❤ 。同样在文字渲染方面也优于 GDI。&lt;/p>
&lt;p>使用 Direct2D &lt;code>ID2D1RenderTarget::DrawText&lt;/code> 时，将 &lt;code>D2D1_DRAW_TEXT_OPTIONS options&lt;/code> 设置为 &lt;code>D2D1_DRAW_TEXT_OPTIONS_ENABLE_COLOR_FONT&lt;/code>，就可以支持彩色 Emoji 了。下面是 Kismet 工具的一些截图：&lt;/p>
&lt;p>无状态窗口：&lt;/p>
&lt;p>&lt;img src="https://github.com/fcharlie/Kismet/raw/master/docs/images/none.png" alt="none">&lt;/p>
&lt;p>自定义标题栏：&lt;/p>
&lt;p>&lt;img src="https://github.com/fcharlie/Kismet/raw/master/docs/images/title.png" alt="title">&lt;/p>
&lt;p>冲突检测：&lt;/p>
&lt;p>&lt;img src="https://github.com/fcharlie/Kismet/raw/master/docs/images/coll.png" alt="coll">&lt;/p>
&lt;p>计算中：&lt;/p>
&lt;p>&lt;img src="https://github.com/fcharlie/Kismet/raw/master/docs/images/progress.png" alt="progress">&lt;/p>
&lt;p>计算完成：&lt;/p>
&lt;p>&lt;img src="https://github.com/fcharlie/Kismet/raw/master/docs/images/complete.png" alt="complete">&lt;/p>
&lt;p>SHA-3 512：&lt;/p>
&lt;p>&lt;img src="https://github.com/fcharlie/Kismet/raw/master/docs/images/sha3-512.png" alt="sha3-512">&lt;/p>
&lt;p>自定义主题色：&lt;/p>
&lt;p>&lt;img src="https://github.com/fcharlie/Kismet/raw/master/docs/images/theme.png" alt="theme">&lt;/p>
&lt;h2 id="kismet-uwp">Kismet UWP&lt;/h2>
&lt;p>UWP 程序应该是以后 Windows App 开发的趋势，作为 Microsoft 技术爱好者，自然也会开发简易的 UWP App 。&lt;/p>
&lt;p>RHash 移植到 UWP 还是很容易的，得益于 Windows ucrt&lt;sup>8&lt;/sup>, RHash 可以无缝迁移到 UWP 中，唯一比较麻烦的是，UWP App 读取文件的缓冲区是 &lt;code>Windows::Storage::Streams::IBuffer&lt;/code>，而 RHash 使用的是直接内存，解决方案如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#1d2432;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c++" data-lang="c++">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#58a1dd">byte&lt;/span> &lt;span style="color:#ff636f">*&lt;/span> &lt;span style="color:#58a1dd">KismetUWP&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">MainPage&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">GetPointerToPixelData&lt;/span>(&lt;span style="color:#58a1dd">Windows&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">Storage&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">Streams&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">IBuffer&lt;/span> &lt;span style="color:#ff636f">^&lt;/span> &lt;span style="color:#58a1dd">pixelBuffer&lt;/span>, &lt;span style="color:#ff636f">unsigned&lt;/span> &lt;span style="color:#ff636f">int&lt;/span> &lt;span style="color:#ff636f">*&lt;/span> &lt;span style="color:#58a1dd">length&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">Object&lt;/span>&lt;span style="color:#ff636f">^&lt;/span> &lt;span style="color:#58a1dd">obj&lt;/span> &lt;span style="color:#ff636f">=&lt;/span> &lt;span style="color:#58a1dd">pixelBuffer&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">ComPtr&lt;/span>&lt;span style="color:#ff636f">&amp;lt;&lt;/span>&lt;span style="color:#58a1dd">IInspectable&lt;/span>&lt;span style="color:#ff636f">&amp;gt;&lt;/span> &lt;span style="color:#58a1dd">insp&lt;/span>(&lt;span style="color:#ff636f">reinterpret_cast&lt;/span>&lt;span style="color:#ff636f">&amp;lt;&lt;/span>&lt;span style="color:#58a1dd">IInspectable&lt;/span>&lt;span style="color:#ff636f">*&amp;gt;&lt;/span>(&lt;span style="color:#58a1dd">obj&lt;/span>));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#828b96;font-style:italic">// Query the IBufferByteAccess interface.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span> &lt;span style="color:#58a1dd">ComPtr&lt;/span>&lt;span style="color:#ff636f">&amp;lt;&lt;/span>&lt;span style="color:#58a1dd">IBufferByteAccess&lt;/span>&lt;span style="color:#ff636f">&amp;gt;&lt;/span> &lt;span style="color:#58a1dd">bufferByteAccess&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">insp&lt;/span>.&lt;span style="color:#58a1dd">As&lt;/span>(&lt;span style="color:#ff636f">&amp;amp;&lt;/span>&lt;span style="color:#58a1dd">bufferByteAccess&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#828b96;font-style:italic">// Retrieve the buffer data.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span> &lt;span style="color:#58a1dd">byte&lt;/span>&lt;span style="color:#ff636f">*&lt;/span> &lt;span style="color:#58a1dd">pixels&lt;/span> &lt;span style="color:#ff636f">=&lt;/span> &lt;span style="color:#ff636f">nullptr&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">bufferByteAccess&lt;/span>&lt;span style="color:#ff636f">-&amp;gt;&lt;/span>&lt;span style="color:#58a1dd">Buffer&lt;/span>(&lt;span style="color:#ff636f">&amp;amp;&lt;/span>&lt;span style="color:#58a1dd">pixels&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">return&lt;/span> &lt;span style="color:#58a1dd">pixels&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>通过 &lt;code>GetPointerToPixelData&lt;/code> 将 IBuffer 转换为 &lt;code>BYTE*&lt;/code>。这样是有代价的，一个较大的文件 Kismet 的计算速度快于 Kismet UWP。&lt;/p>
&lt;p>在 UWP 程序中，IO 的读写往往异步的，开发者使用 PPL 即可，如果在 Visual Studio 2015 Update 2 以上版本中设置了 &lt;code>/await&lt;/code> 就可以使用 &lt;code>co_wait&lt;/code> 简化异步操作。MSDN 文档：&lt;a href="https://blogs.msdn.microsoft.com/vcblog/2016/04/04/using-c-coroutines-to-simplify-async-uwp-code/">https://blogs.msdn.microsoft.com/vcblog/2016/04/04/using-c-coroutines-to-simplify-async-uwp-code/&lt;/a>&lt;/p>
&lt;p>Kismet UWP 在 Github 上的地址为：&lt;a href="https://github.com/fcharlie/KismetUWP">https://github.com/fcharlie/KismetUWP&lt;/a>&lt;/p>
&lt;p>Kismet UWP 的截图如下：&lt;/p>
&lt;p>初始界面：&lt;/p>
&lt;p>&lt;img src="https://github.com/fcharlie/KismetUWP/raw/master/docs/images/none.png" alt="u1">&lt;/p>
&lt;p>计算完成：&lt;/p>
&lt;p>&lt;img src="https://github.com/fcharlie/KismetUWP/raw/master/docs/images/hash.png" alt="u2">&lt;/p>
&lt;p>由于开发者账号的缘故，Kismet UWP 并未发布到 Windows Store，需要使用的用户可以自己克隆构建。&lt;/p>
&lt;h2 id="附录">附录&lt;/h2>
&lt;ol>
&lt;li>Git 将对象类型（blob,tree,commit）与长度以及文件内容连接在一起做 SHA-1 计算。Subversion 的 SHA-1 冲突要严重多了。&lt;/li>
&lt;li>KCP KeccakCodePackage &lt;a href="https://github.com/gvanas/KeccakCodePackage">(https://github.com/gvanas/KeccakCodePackage) &lt;/a>&lt;/li>
&lt;li>Mbedtls &lt;a href="https://github.com/ARMmbed/mbedtls">https://github.com/ARMmbed/mbedtls&lt;/a>&lt;/li>
&lt;li>BoringSSL &lt;a href="https://github.com/google/boringssl">https://github.com/google/boringssl&lt;/a>&lt;/li>
&lt;li>LibreSSL &lt;a href="http://www.libressl.org/">http://www.libressl.org/&lt;/a>&lt;/li>
&lt;li>Parallel Patterns Library (PPL) &lt;a href="https://msdn.microsoft.com/en-us/library/dd492418.aspx">https://msdn.microsoft.com/en-us/library/dd492418.aspx&lt;/a>&lt;/li>
&lt;li>Asynchronous programming in C++ &lt;a href="https://docs.microsoft.com/en-us/windows/uwp/threading-async/asynchronous-programming-in-cpp-universal-windows-platform-apps">https://docs.microsoft.com/en-us/windows/uwp/threading-async/asynchronous-programming-in-cpp-universal-windows-platform-apps&lt;/a>&lt;/li>
&lt;li>CRT Library Features &lt;a href="https://msdn.microsoft.com/en-us/library/abx4dbyh.aspx">https://msdn.microsoft.com/en-us/library/abx4dbyh.aspx&lt;/a>&lt;/li>
&lt;/ol>
- https://forcemz.net/posts/2017/2017-05-14-kismet/ - Copyright (c) 2009-2024 J23</description></item></channel></rss>