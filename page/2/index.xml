<?xml-stylesheet href="/rss.xsl" type="text/xsl"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>江二十三的思考</title><link>https://forcemz.net/</link><description>Recent content on 江二十三的思考</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><copyright>Copyright (c) 2009-2024 J23</copyright><lastBuildDate>Mon, 01 Apr 2024 20:00:00 +0800</lastBuildDate><atom:link href="https://forcemz.net/index.xml" rel="self" type="application/rss+xml"/><item><title>Baulk - 开发一个简单的包管理工具历程</title><link>https://forcemz.net/posts/2020/2020-07-18-baulk/</link><pubDate>Sat, 18 Jul 2020 20:00:00 +0800</pubDate><guid>https://forcemz.net/posts/2020/2020-07-18-baulk/</guid><description>江二十三的思考 https://forcemz.net/posts/2020/2020-07-18-baulk/ -&lt;h2 id="前言">前言&lt;/h2>
&lt;p>相对于其他操作系统，我更习惯使用 Windows，但一直以来 Windows 缺乏官方的包管理器，而第三方无论是 Scoop 还是 Chocolatey 都无法满足我独特的需求，我的要求很简单，所有的软件包都应该使用绿色解压模式，这包括了 MSI 安装包，另外安装软件时不应该修改系统和用户环境变量。包管理工具应该足够快，还要支持创建启动器等等。&lt;/p>
&lt;p>从毕业工作以来，我开发了 &lt;a href="https://github.com/fstudio/clangbuilder">clangbuilder&lt;/a>，一个简化在 Windows 上使用 Visual Studio 构建 LLVM/Clang 的工具（含 GUI 工具），为了解决安装构建 LLVM 时所需工具依赖的问题，后来多次开坑编写各种软件，多年的失败经验与认知不断积累，于是在今年这个环球同此凉热的年份，我开始了新坑 ➡ &lt;a href="https://github.com/baulk/baulk">baulk&lt;/a>，baulk 花费了我半年的下班时间，现在基本可用，ReadMe 也写好了，应该可以给大家分享一下了。&lt;/p>
&lt;h2 id="安装和使用-baulk">安装和使用 Baulk&lt;/h2>
&lt;p>这个步骤只有四五步，下载 baulk 二进制包，解压 baulk 二进制包，点击 baulkterminal，更新元数据，安装你需要的软件，🆗，你可以使用 baulk 安装的软件了。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#1d2432;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-powershell" data-lang="powershell">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#58a1dd">baulk&lt;/span> &lt;span style="color:#58a1dd">update&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic"># i 是 install 的别名&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic"># baulk i cmake curl 7z ...&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#58a1dd">baulk&lt;/span> &lt;span style="color:#58a1dd">install&lt;/span> &lt;span style="color:#58a1dd">cmake&lt;/span> &lt;span style="color:#58a1dd">curl &lt;/span>&lt;span style="color:#58a1dd">7z&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#58a1dd">cmake&lt;/span> -&lt;span style="color:#58a1dd">-version&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>baulk 升级命令可以使用如下命令：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#1d2432;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-powershell" data-lang="powershell">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#58a1dd">baulk&lt;/span> &lt;span style="color:#58a1dd">update&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#58a1dd">baulk&lt;/span> &lt;span style="color:#58a1dd">upgrade&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>也可以使用别名：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#1d2432;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-powershell" data-lang="powershell">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic"># u 是特殊的别名，包含 update 和 upgrade 两个步骤&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic"># baulk update and upgrade&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#58a1dd">baulk&lt;/span> &lt;span style="color:#58a1dd">u&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>升级 baulk 自身可以使用帮助程序 &lt;code>baulk-update&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#1d2432;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-powershell" data-lang="powershell">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#58a1dd">baulk-update&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>卸载软件也很容易：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#1d2432;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-powershell" data-lang="powershell">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic"># r 是 uninstall 的别名&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#58a1dd">baulk&lt;/span> &lt;span style="color:#58a1dd">uninstall&lt;/span> &lt;span style="color:#58a1dd">7z&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>在开发 baulk 时，我就决定只支持 Windows 10 1903 或更新的版本，好处显而易见，可以使用 Windows Terminal，利用 ANSI 转义输出颜色，体验非常不错：&lt;/p>
&lt;p>&lt;img src="https://s1.ax1x.com/2020/07/19/UWpROA.png" alt="">&lt;/p>
&lt;p>baulk 提供了 baulk-exec 在命令行中执行 baulk-exec 可以初始化 baulk 环境，还提供了 ssh-askpass-baulk，ssh-askpass-baulk 用于 &lt;a href="https://github.com/balibuild/tunnelssh">TunnelSSH&lt;/a> 某些 ssh 无法打开标准输入时请求输入密码，截图如下：&lt;/p>
&lt;p>&lt;img src="https://s1.ax1x.com/2020/07/19/UW9O3D.png" alt="">&lt;/p>
&lt;p>在 baulk 中我引入了 VirtualEnv 机制，这种机制能够使得用户并行安装多个软件版本，在 baulk-exec，baulkterminal 中通过指定参数支持启动任意的 VENV，baulk 还提供了 baulk-dock 能够选择按照特定的 VENV 启动环境：&lt;/p>
&lt;p>&lt;img src="https://s1.ax1x.com/2020/07/19/UW9wcQ.png" alt="">&lt;/p>
&lt;p>在 Baulk 元数据存储库 &lt;a href="https://github.com/baulk/bucket">bucket&lt;/a>，收录了 OpenJDK8(Java)，OpenJDK9(Java)，GraalVM8(Java)，Zulu14(Java)，Go(golang)，DMD(dlang) 等支持 VENV 的包，如果有人想把 Ruby 收录一下，在 Windows 上实现类似 rbenv 功能也不是什么难事。&lt;/p>
&lt;h2 id="baulk-的内幕">Baulk 的内幕&lt;/h2>
&lt;p>入门说完，可以稍稍讲一下 Baulk 的实现细节，baulk 的包管理类似于 Scoop，即将包的元数据存储在 Github 上，官方源为 &lt;a href="https://github.com/baulk/bucket">baulk/bucket&lt;/a>，baulk 还可以通过编写 &lt;code>$BAULK_ROOT/config/baulk.json&lt;/code> 添加新的源，或者删除某个源，如果不同的源中存在相同名字的包，baulk 还能根据 bucket 的权重去选择使用哪个源，但目前为止，只有 &lt;a href="https://github.com/baulk/bucket">baulk/bucket&lt;/a> 一个源。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#1d2432;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-json" data-lang="json">&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">&amp;#34;bucket&amp;#34;&lt;/span>: [
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">&amp;#34;description&amp;#34;&lt;/span>: &lt;span style="color:#a6be9d">&amp;#34;Baulk default bucket&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">&amp;#34;name&amp;#34;&lt;/span>: &lt;span style="color:#a6be9d">&amp;#34;Baulk&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">&amp;#34;url&amp;#34;&lt;/span>: &lt;span style="color:#a6be9d">&amp;#34;https://github.com/baulk/bucket&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">&amp;#34;weights&amp;#34;&lt;/span>: &lt;span style="color:#a6be9d">100&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>baulk update&lt;/code> 命令更新 bucket，这里我们使用了 Github Atom RSS 机制，以官方源为例，通过 HTTP 请求项目的 &lt;code>commits/master.atom&lt;/code> 获得当前的最新的 commitID，如果本地不存在或者与其不同，则说明 bucket 有更新，于是 baulk 下载对应的 bucket 的压缩包，解压完成元数据的更新。然后检测本地已安装的包是否存在更新版本，存在就输出提示。&lt;/p>
&lt;blockquote>
&lt;p>GET &lt;a href="https://github.com/baulk/bucket/commits/master.atom">https://github.com/baulk/bucket/commits/master.atom&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;p>当人们运行 &lt;code>baulk upgrade&lt;/code> 时，就会真正的升级已安装的包，更新元数据和升级分开这种机制类似于 &lt;code>apt-get&lt;/code>，为了简化操作，baulk 提供了 &lt;code>baulk u&lt;/code> 别名将 update/upgrade 合并在一起简化升级。&lt;/p>
&lt;p>在 Baulk 中，安装软件大的步骤只有解压和生成启动器（创建符号链接），不存在什么执行初始化脚本，修改注册表，关联文件打开方式等等等等等。我的想法是最好做到隔离互不影响，因此，在开发 baulk 的过程中，我一直时朝这个方向去设计。在 baulk 中的 package 中，存在 &lt;code>extension&lt;/code> 的关键字，&lt;code>extension&lt;/code> 用于描述 package 压缩包（安装包）如何被 baulk 解压缩， &lt;code>extension&lt;/code> 支持 &lt;code>zip&lt;/code>, &lt;code>msi&lt;/code>, &lt;code>7z&lt;/code>, &lt;code>exe&lt;/code>，&lt;code>tar&lt;/code>，baulk 按照 &lt;code>extension&lt;/code> 的类型执行相应的解压缩程序。扩展的解压程序如下：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>扩展&lt;/th>
&lt;th>解压程序&lt;/th>
&lt;th>限制&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>exe&lt;/code>&lt;/td>
&lt;td>-&lt;/td>
&lt;td>-&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>zip&lt;/code>&lt;/td>
&lt;td>内置，基于 minizip&lt;/td>
&lt;td>支持 deflate/bzip2/zstd，不支持加密和 deflate64（deflate64 可以使用 &lt;code>7z&lt;/code>）&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>msi&lt;/code>&lt;/td>
&lt;td>内置，基于 MSI API&lt;/td>
&lt;td>此方式仅作解压，和在资源管理器点击安装不同&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>7z&lt;/code>&lt;/td>
&lt;td>优先级：&lt;/br>baulk7z - Baulk 发行版&lt;/br>7z - 使用 baulk install 安装的&lt;/br>7z - 环境变量中的&lt;/td>
&lt;td>&lt;code>tar.*&lt;/code> 之类格式解压不能一次完成，因此建议使用 &lt;code>tar&lt;/code> 解压 &lt;code>tar.*&lt;/code> 压缩包&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>tar&lt;/code>&lt;/td>
&lt;td>优先级：&lt;/br>baulktar - BaulkTar bsdtar 的现代重构&lt;/br>bsdtar - Baulk 构建版&lt;/br>MSYS2 tar - Git for Windows 携带的&lt;/br>Windows tar&lt;/td>
&lt;td>Windows 内置的 tar 不支持 xz（基于 libarchive bsdtar），但 baulk 构建的 bsdtar 支持，解压 zip 时均不不支持 deflate64&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>baulk 的哲学是不要修改系统和用户环境变量，环境变量的生效应该是和终端关联或者启动器关联，因此，在 baulk 中，我编写了 baulkterminal 和 baulk-exec 以及 baulk-dock 程序，baulkterminal 主要用于用户通过创建桌面快捷方式或者将 baulkterminal 添加到桌面、文件夹右键菜单，通过用户点击快速打开初始化 Baulk 环境的 Windows Terminal（如果没有安装 Windows Terminal 则打开 Windows 控制台），而 baulk-exec 则是一个启动器，在运行 baulk-exec 时，根据输入的命令行参数 baulk-exec 初始化环境变量，然后启动相关的子命令，比如 Windows 操作系统中没有安装 cmake，而 baulk 安装了 cmake，以下命令就能够正常运行：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#1d2432;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-powershell" data-lang="powershell">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic"># 打印 cmake 版本信息&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#58a1dd">baulk-exec&lt;/span> &lt;span style="color:#58a1dd">cmake&lt;/span> -&lt;span style="color:#58a1dd">-version&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>为了避免环境变量中 &lt;code>PATH&lt;/code> 条目过多，降低 &lt;code>SearchPath&lt;/code> 搜索相关命令的命中率，baulk 使用了 &lt;code>links&lt;/code> 机制，对于一些不依赖自身目录下的 dll 的命令，我们使用创建符号链接的方式将其软连接到 baulk 根目录的 &lt;code>bin\links&lt;/code> 目录，如果自身依赖发行携带的 dll，或者需要处理 GetModuleFileName 且没有正确处理符号链接行为的命令，我们使用 &lt;code>launchers&lt;/code> 机制，根据命令的类型调用 MSVC 生成特定的启动器，启动器大小 5K 左右，体积能够接受。如果用户没有安装 Visual Studio，则使用 &lt;code>baulk-lnk&lt;/code> 实现相关逻辑（baulk-lnk 需要解析 &lt;code>baulk.linkmeta.json&lt;/code>，效率有一点点损失）。baulk 在环境变量和启动器这块做了很多事情，需要解析 PE 可执行文件的信息，还需要获得 PE 文件的版本信息，在之前使用 PowerShell 编写的 devi 中，同样是这样做的，但 PowerShell 脚本执行不太快，baulk 相比是一个巨大的效率提升。&lt;/p>
&lt;p>baulk 使用 WinHTTP 实现 HTTP 下载功能，能够很好的处理代理的情况，另外，baulk 还会解析 &lt;code>HTTPS_PROXY&lt;/code> 环境变量，还支持 &lt;code>--https-proxy&lt;/code> 设置代理，但是，我们建议应该优先使用支持设置 Windows 系统代理的工具。&lt;/p>
&lt;p>baulk 基于 minizip 内置了 zip 提取能力，支持使用 ZSTD 压缩算法的 ZIP 文件，这比市面上很多压缩软件要快一步。baulk 还内置了 &lt;code>bela::hash&lt;/code> 支持 SHA2(SHA224, SHA256, SHA384, SHA512) SHA3(SHA3-224, SHA3-256, SHA3-384, SHA3-512)，以及 BLAKE3。由于安全问题不支持 MD5 和 SHA1，因此在 bucket 存储包哈希时应该选择使用这里列出的哈希算法，哈希字符串使用前缀匹配，默认即无前缀时为 SHA256。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#1d2432;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c++" data-lang="c++">&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">constexpr&lt;/span> &lt;span style="color:#58a1dd">HashPrefix&lt;/span> &lt;span style="color:#58a1dd">hnmaps&lt;/span>[] &lt;span style="color:#ff636f">=&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {&lt;span style="color:#a6be9d">L&lt;/span>&lt;span style="color:#a6be9d">&amp;#34;BLAKE3&amp;#34;&lt;/span>, &lt;span style="color:#58a1dd">hash_t&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">BLAKE3&lt;/span>}, &lt;span style="color:#828b96;font-style:italic">// BLAKE3
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span> {&lt;span style="color:#a6be9d">L&lt;/span>&lt;span style="color:#a6be9d">&amp;#34;SHA224&amp;#34;&lt;/span>, &lt;span style="color:#58a1dd">hash_t&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">SHA224&lt;/span>}, &lt;span style="color:#828b96;font-style:italic">// SHA224
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span> {&lt;span style="color:#a6be9d">L&lt;/span>&lt;span style="color:#a6be9d">&amp;#34;SHA256&amp;#34;&lt;/span>, &lt;span style="color:#58a1dd">hash_t&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">SHA256&lt;/span>}, &lt;span style="color:#828b96;font-style:italic">// SHA256
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span> {&lt;span style="color:#a6be9d">L&lt;/span>&lt;span style="color:#a6be9d">&amp;#34;SHA384&amp;#34;&lt;/span>, &lt;span style="color:#58a1dd">hash_t&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">SHA384&lt;/span>}, &lt;span style="color:#828b96;font-style:italic">// SHA384
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span> {&lt;span style="color:#a6be9d">L&lt;/span>&lt;span style="color:#a6be9d">&amp;#34;SHA512&amp;#34;&lt;/span>, &lt;span style="color:#58a1dd">hash_t&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">SHA512&lt;/span>}, &lt;span style="color:#828b96;font-style:italic">// SHA512
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span> {&lt;span style="color:#a6be9d">L&lt;/span>&lt;span style="color:#a6be9d">&amp;#34;SHA3&amp;#34;&lt;/span>, &lt;span style="color:#58a1dd">hash_t&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">SHA3&lt;/span>}, &lt;span style="color:#828b96;font-style:italic">// SHA3 alias for SHA3-256
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span> {&lt;span style="color:#a6be9d">L&lt;/span>&lt;span style="color:#a6be9d">&amp;#34;SHA3-224&amp;#34;&lt;/span>, &lt;span style="color:#58a1dd">hash_t&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">SHA3_224&lt;/span>}, &lt;span style="color:#828b96;font-style:italic">// SHA3-224
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span> {&lt;span style="color:#a6be9d">L&lt;/span>&lt;span style="color:#a6be9d">&amp;#34;SHA3-256&amp;#34;&lt;/span>, &lt;span style="color:#58a1dd">hash_t&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">SHA3_256&lt;/span>}, &lt;span style="color:#828b96;font-style:italic">// SHA3-256
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span> {&lt;span style="color:#a6be9d">L&lt;/span>&lt;span style="color:#a6be9d">&amp;#34;SHA3-384&amp;#34;&lt;/span>, &lt;span style="color:#58a1dd">hash_t&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">SHA3_384&lt;/span>}, &lt;span style="color:#828b96;font-style:italic">// SHA3-384
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span> {&lt;span style="color:#a6be9d">L&lt;/span>&lt;span style="color:#a6be9d">&amp;#34;SHA3-512&amp;#34;&lt;/span>, &lt;span style="color:#58a1dd">hash_t&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">SHA3_512&lt;/span>}, &lt;span style="color:#828b96;font-style:italic">// SHA3-512
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span> };
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="baulk-virtualenv-介绍">Baulk VirtualEnv 介绍&lt;/h3>
&lt;p>这里需要重点说的时 Baulk VirtualEnv，很多时候，开发者不得不并行安装一个软件的多个版本以适配不同的开发需求，但这些软件在处理环境变量的时候并没有做的那么好，因此有了 VirtualEnv 这样的工具，比如 rbenv 。baulk 目前能够很好的大多数编程语言开发工具的 VirtualEnv，以下截图是加载 Zulu14(Java JDK) 和 Go 的截图：&lt;/p>
&lt;p>&lt;img src="https://s1.ax1x.com/2020/07/19/UW1obq.png" alt="">&lt;/p>
&lt;p>目前 baulkterminal 和 baulk-exec 能够加载任意的 venv，baulk-dock 仅支持一个。&lt;/p>
&lt;h2 id="最后">最后&lt;/h2>
&lt;p>baulk 花费了我很多的时间，我自己用还是很好用的，并且 baulk 沉淀了我这些年来在 Windows 系统上的技术积累，所以写一篇文章记录一下还是有一些必要的，如果有人对 baulk 里面的技术细节感兴趣，可以与我本人联系。&lt;/p>
- https://forcemz.net/posts/2020/2020-07-18-baulk/ - Copyright (c) 2009-2024 J23</description></item><item><title>胡说八道文件压缩</title><link>https://forcemz.net/posts/2020/2020-06-30-nonsense-file-compression/</link><pubDate>Tue, 30 Jun 2020 20:00:00 +0800</pubDate><guid>https://forcemz.net/posts/2020/2020-06-30-nonsense-file-compression/</guid><description>江二十三的思考 https://forcemz.net/posts/2020/2020-06-30-nonsense-file-compression/ -&lt;h1 id="前言">前言&lt;/h1>
&lt;p>在我们日常使用计算机的时候，经常会遇到或者使用一些文件，它们通常以 &lt;code>.zip&lt;/code>，&lt;code>.rar&lt;/code>，&lt;code>.7z&lt;/code> 结尾，这些文件就是本文所说的压缩文件，我们可以通过资源管理器，WinRAR，WinZip，或者 7-zip 将其解压，然后查看，编辑，或者进行其他操作。压缩软件被广泛运用于文件分享，软件分发，或作为一个容器承载其他文件集合，比如我们如果使用 Office 2007 以及更高的版本保存 Word/PPT/Excel 文档时，这些文档实际上就是特殊的 ZIP 压缩文件，Word/PPT/Excel 的格式实际上就是将描述元素（文本框，标题&amp;hellip;） 信息的 XML 文件，以及一些资源文件使用 Deflate(Fastest) 压缩算法压缩到一个 ZIP 格式文件中。还有 Java 程序员需要经常见到的 Jar 包，Android 开发者打包的 APK 文件，以及 Windows 开发者创建的 Appx(以及 MSIX) 安装包，这些文件都是压缩文件，准确的说，这几种都是 ZIP 压缩文件。&lt;/p>
&lt;p>压缩软件的格式非常多，有 ZIP，RAR，7Z，TAR，CAB 等等，其中 ZIP 是运用最广泛的压缩文件格式，而在 Unix 世界 TAR 则更受欢迎。探讨文件的压缩实际上是个有趣的过程，而本文也就是对压缩文件进行一个胡乱的分析。&lt;/p>
&lt;h2 id="常见的文件压缩格式比较">常见的文件压缩格式比较&lt;/h2>
&lt;h3 id="zip-轶闻和现状">ZIP 轶闻和现状&lt;/h3>
&lt;p>如果我们使用 VIM 自带的十六进制查看工具 xxd（或者 &lt;a href="https://github.com/sharkdp/hexyl">hexyl&lt;/a>，你也就可以使用 baulk 安装 belautils，然后使用 hastyhex），我们可以发现，&lt;a href="https://en.wikipedia.org/wiki/Zip_(file_format)">ZIP&lt;/a> 压缩文件以 &lt;code>PK&lt;/code> 开头。&lt;code>PK&lt;/code>
是已故著名程序员 &lt;em>Phil Katz&lt;/em> 的英文缩写。值得一说的是，虽然 Phil Katz 创造了 ZIP 格式，但他却贫困潦倒，死在了汽车旅馆（&lt;a href="http://www.bbsdocumentary.com/library/CONTROVERSY/LAWSUITS/SEA/katzbio.txt">Phil Katz 的故事&lt;/a>）。目前 ZIP 的规范由 PKWARE 发布，PKWARE 是 Phil Katz 创立，Phil Katz 死后，其家人将 PKWARE 卖出，目前 ZIP 的格式规范版本为 &lt;a href="https://pkware.cachefly.net/webdocs/APPNOTE/APPNOTE-6.3.9.TXT">APPNOTE-6.3.9.TXT&lt;/a>，规范可以阅读但不可分发。&lt;/p>
&lt;p>ZIP 的格式可以大致描述为：&lt;em>文件头+文件压缩内容+文件头+文件压缩内容&amp;hellip;&lt;/em>，这种布局的好处是，不需要解压缩就可以直到压缩文件的原始大小，可以获得压缩包中所有的文件信息，所以我们可以在使用 7z 快速打开压缩包后，只解压特定的文件。(下图来源于 &lt;a href="https://en.wikipedia.org/wiki/Zip_(file_format)#/media/File:ZIP-64_Internal_Layout.svg">wikipedia&lt;/a>)&lt;/p>
&lt;p>&lt;img src="https://s1.ax1x.com/2020/07/18/U28wXn.png" alt="">&lt;/p>
&lt;p>ZIP 的使用非常广泛，比如 Microsoft Office 2007 后的 &lt;code>.pptx&lt;/code>，&lt;code>.docx&lt;/code>，&lt;code>.xslx&lt;/code> 文件，如果使用 7z GUI 打开，我们可以发现，这就是一个 ZIP 压缩文件，同样的，Java 的 Jar 包，Android 的 APK，Windows UWP 的 appx 文件无一不是基于 ZIP 格式。&lt;/p>
&lt;p>在 2006 年之前，ZIP 格式不支持 Unicode，所以我们经常会遇到，下载其他 Windows 上压缩的 ZIP 文件可能出现乱码，这是因为二者的代码页不相同，使用的本地编码不同，2006 年的 APPNOTE-6.3.0.TXT 规定了在 ZIP 文件中按照 UTF-8 存储文件名的机制，具体可以参考 Minizip/&lt;code>archive/zip&lt;/code> 中的相关字段。在此之前，如果要存储 UTF-8 的文件名，InfoZip 使用了额外的字段将 UTF-8 文件名保存到中央目录头，也就是上图中的尾部。14 年过去了，一些软件比如 7z/Explorer 在创建 ZIP 时，仍然没有使用 UTF-8 存储文件名，也没有使用 InfoZip 的兼容机制，在分享包含非 ASCII 字符文件名的压缩包时，不同的代码页的系统就会出现乱码。计算机软件应该与时俱进，不要保持老掉牙的惯例。minizip 内部编码全为 UTF-8，创建压缩文件时就使用了 UTF-8，这就很好。在我维护的 7z 版本 &lt;a href="https://github.com/baulk/baulk7z">baulk7z&lt;/a> 中，默认设置 ZIP 压缩时选择 UTF-8。另外，git 在创建 ZIP 格式的 archive 也会标记文件名编码为 UTF-8。&lt;/p>
&lt;p>ZIP 压缩文件格式在文件头中会使用魔数标明压缩文件条目的压缩算法，常见的魔数（常用）如下:&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>压缩算法&lt;/th>
&lt;th>魔数&lt;/th>
&lt;th>备注&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>Store&lt;/td>
&lt;td>0&lt;/td>
&lt;td>存储目录&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>8&lt;/td>
&lt;td>deflate&lt;/td>
&lt;td>默认格式&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>9&lt;/td>
&lt;td>deflate64&lt;/td>
&lt;td>与 deflate 类似，但字典要大一些，开源 ZIP 基本不支持&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>12&lt;/td>
&lt;td>bzip2&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>14&lt;/td>
&lt;td>lzma&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>20&lt;/td>
&lt;td>deprecated (use method 93 for zstd)&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>93&lt;/td>
&lt;td>Zstandard (zstd) Compression&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>94&lt;/td>
&lt;td>MP3 Compression&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>95&lt;/td>
&lt;td>XZ Compression&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>96&lt;/td>
&lt;td>JPEG variant&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>97&lt;/td>
&lt;td>WavPack&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>98&lt;/td>
&lt;td>PPMd verson I, Rev 1&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>99&lt;/td>
&lt;td>AE-x encryption marker&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>Deflate 压缩算法使用非常广泛，比如我们使用的 git 版本控制软件在将文件纳入版本控制时，就会使用 deflate 算法将其压缩，说到 deflate，就不得不提 &lt;code>zlib&lt;/code>，&lt;code>zlib&lt;/code> 提供了 deflate 压缩算法实现，操作系统，浏览器，数据库，IDE，办公软件，很多软件都可能在使用 zlib。deflate64 是 deflate 的大字典版本，但受限于专利，开源软件支持 deflate64 的较少，目前已知的是 7z、Windows 资源管理器，.Net 能够压缩解压 deflate64 压缩的 ZIP 文件，LZMA 压缩算法压缩的 ZIP 文件通常是 7z 创建的，但 7z 的机制有点反常规，因此其他 ZIP 库对其支持较差。&lt;/p>
&lt;p>Zstandard 是 Facebook 开发的一个新的压缩算法，无论在压缩率还是速度都有一个较好的均衡，同样的压缩比，要比 deflate 速度快很多，许可协议友好，很多开源软件使用，就连 Linux 内核都在使用，而早期 WinZip 将数字 93 添加为 Zstandard 压缩算法的魔数，提供了 ZIPX 压缩格式，这个事情不知是不是 PKWARE 开发者忽略了还是怎么的，PKWARE 今年在规范中将数字 20 作为 ZSTD 的魔数，后来有开发者在 &lt;a href="https://github.com/mcmilk/7-Zip-zstd">7-Zip-zstd&lt;/a> 上寻求在 ZIP 中添加 ZSTD 压缩算法的支持，遇到这个情况，我赶紧给 minizip 提交了实现代码，还给 archiver 贡献了对 ZSTD 的支持。但在 7-Zip-zstd 作者发送邮件给 PKWARE 之后，PKWARE 赶紧又更新了规范，把 20 给废弃了。于是我贡献的项目又得一一的发送 PR 去更新对 ZSTD 的支持。&lt;/p>
&lt;p>在 &lt;a href="https://github.com/balibuild/bali">bali&lt;/a> &lt;a href="https://github.com/baulk/baulk">baulk&lt;/a> 这些我自己开发的软件中，我都在其压缩（解压）ZIP 时增加了 ZSTD 压缩算法的支持。回顾给 &lt;a href="https://github.com/nmoinvaz/minizip/pulls?q=is%3Apr+author%3Afcharlie+is%3Aclosed">minizip&lt;/a>，&lt;a href="https://github.com/nih-at/libzip/pull/181">libzip&lt;/a>，&lt;a href="https://github.com/mcmilk/7-Zip-zstd/pull/140">7-zip-zstd&lt;/a>，&lt;a href="https://github.com/mholt/archiver/pulls?q=is%3Apr+is%3Aclosed+author%3Afcharlie">archiver&lt;/a>，这些 ZIP 压缩库（压缩软件）的维护都十分有限，PR/Issue 解决较慢，或者根本不理，有一种劝退感，开发软件的基础设施维护和演进确实不那么美好。&lt;/p>
&lt;p>说到 ZIP 不得不说一下 WinZip，最初，WinZip 使用 PKZIP 提供 ZIP 压缩解压能力，1993 年，WinZip 使用了 Info-ZIP 压缩代码，不再使用 PKZIP，Info-ZIP 是被移植最多的软件之一，至今在 POSIX 平台使用的 zip/unzip 就是 Info-ZIP。WinZip 在 ZIP 格式中的修改通常时增加压缩算法，WinZip 称之为 &lt;code>zipx&lt;/code>，WinZip 在 ZIP 格式中具有较大的影响力，以至于 PKWARE 为了兼容 WinZip 多次修改 ZIP 规范。另外 PKZIP 自 2014 年也未见后更新（我使用的是评估版本，是否有更新不得而知）。&lt;/p>
&lt;h3 id="tar-需要压缩算法">Tar 需要压缩算法&lt;/h3>
&lt;p>&lt;a href="https://en.wikipedia.org/wiki/Tar_(computing)">&lt;code>tar&lt;/code>&lt;/a> 通常称为 &lt;code>tarball&lt;/code>，是 POSIX 世界使用最广泛的归档文件格式，但我们需要注意，TAR 本身并不提供压缩功能，而需要 GZIP/BZIP2/LZMA/ZSTD 这样的压缩算法组合制作压缩软件，GNU Tar 通常需要其他 xz, gzip 这样的命令提供创建相关压缩软件的能力，而基于 libarchive 的 bsdtar 则要好一些，可以将压缩能力集成到内置的 filter 中，这样不用调用外部命令就可以支持多种格式。&lt;/p>
&lt;p>tar 与常见压缩算法组合如下：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>后缀名&lt;/th>
&lt;th>压缩算法&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>tgz, tar.gz&lt;/td>
&lt;td>GZIP (deflate)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>tbz, tar.bz2&lt;/td>
&lt;td>bzip2&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>txz, tar.xz&lt;/td>
&lt;td>lzma&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>tar.sz&lt;/td>
&lt;td>snappy&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>tar.br&lt;/td>
&lt;td>brotli&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>tar.zst&lt;/td>
&lt;td>zstd&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>不同的压缩算法提供了不同的压缩比，压缩解压的速度也不一样，下图是 &lt;a href="https://github.com/facebook/zstd">zstd&lt;/a> Benchmark 获得的一个结果：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Compressor name&lt;/th>
&lt;th>Ratio&lt;/th>
&lt;th>Compression&lt;/th>
&lt;th>Decompress.&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;strong>zstd 1.4.5 -1&lt;/strong>&lt;/td>
&lt;td>2.884&lt;/td>
&lt;td>500 MB/s&lt;/td>
&lt;td>1660 MB/s&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>zlib 1.2.11 -1&lt;/td>
&lt;td>2.743&lt;/td>
&lt;td>90 MB/s&lt;/td>
&lt;td>400 MB/s&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>brotli 1.0.7 -0&lt;/td>
&lt;td>2.703&lt;/td>
&lt;td>400 MB/s&lt;/td>
&lt;td>450 MB/s&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>zstd 1.4.5 &amp;ndash;fast=1&lt;/strong>&lt;/td>
&lt;td>2.434&lt;/td>
&lt;td>570 MB/s&lt;/td>
&lt;td>2200 MB/s&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>zstd 1.4.5 &amp;ndash;fast=3&lt;/strong>&lt;/td>
&lt;td>2.312&lt;/td>
&lt;td>640 MB/s&lt;/td>
&lt;td>2300 MB/s&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>quicklz 1.5.0 -1&lt;/td>
&lt;td>2.238&lt;/td>
&lt;td>560 MB/s&lt;/td>
&lt;td>710 MB/s&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>zstd 1.4.5 &amp;ndash;fast=5&lt;/strong>&lt;/td>
&lt;td>2.178&lt;/td>
&lt;td>700 MB/s&lt;/td>
&lt;td>2420 MB/s&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>lzo1x 2.10 -1&lt;/td>
&lt;td>2.106&lt;/td>
&lt;td>690 MB/s&lt;/td>
&lt;td>820 MB/s&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>lz4 1.9.2&lt;/td>
&lt;td>2.101&lt;/td>
&lt;td>740 MB/s&lt;/td>
&lt;td>4530 MB/s&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>zstd 1.4.5 &amp;ndash;fast=7&lt;/strong>&lt;/td>
&lt;td>2.096&lt;/td>
&lt;td>750 MB/s&lt;/td>
&lt;td>2480 MB/s&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>lzf 3.6 -1&lt;/td>
&lt;td>2.077&lt;/td>
&lt;td>410 MB/s&lt;/td>
&lt;td>860 MB/s&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>snappy 1.1.8&lt;/td>
&lt;td>2.073&lt;/td>
&lt;td>560 MB/s&lt;/td>
&lt;td>1790 MB/s&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>ZSTD vs Deflate 压缩：&lt;/p>
&lt;p>&lt;img src="https://s1.ax1x.com/2020/07/19/URKpg1.png" alt="">&lt;/p>
&lt;p>ZSTD vs Deflate 解压缩：&lt;/p>
&lt;p>&lt;img src="https://s1.ax1x.com/2020/07/19/URKiDK.png" alt="">&lt;/p>
&lt;p>在使用 tar 时，我们创建 tar 归档文件后，再选择合适的压缩算法，就可以制作一个合适的压缩文件，比如 XZ 的压缩比很好高，所以现在很多开源软件使用 &lt;code>tar.xz&lt;/code> 分发压缩包，但 &lt;code>xz&lt;/code> 的速度非常慢，这就需要取舍。&lt;/p>
&lt;p>于 ZIP 不同的是，&lt;code>tar.*&lt;/code> 是先归档再压缩，因此如果需要读取 tar 家族压缩包，则需要先解压 tar 包才能读取相关信息，这就带来一个问题，无法随机读写 &lt;code>tar.*&lt;/code> 压缩包。而于 ZIP 不同的是，在 &lt;code>tar.*&lt;/code> 压缩包中，所有的文件头部信息先被归档了，和文件内容一起被压缩，这样的好处是有序的数据转变为无序的数据，信息量高，压缩比高。&lt;/p>
&lt;h3 id="7z-极致的黑客">7z 极致的黑客&lt;/h3>
&lt;p>我的编辑器 Visual Studio Code 和公司电脑上的 Windows Terminal 使用了国内字体界大牛，微软开发者 &lt;a href="https://github.com/be5invis">be5invis&lt;/a> 的&lt;a href="https://github.com/be5invis/Sarasa-Gothic">更纱黑体&lt;/a>，在 Github 下载页面，字体文件使用 7z 压缩，ttf 字体压缩包大小通常为 200 多 MB。解压后至少 1GB（sarasa-gothic-ttf-0.12.10 解压后 10.2 GB），二进制文件 7z 压缩率非常可观。&lt;/p>
&lt;p>&lt;a href="https://en.wikipedia.org/wiki/7z">&lt;code>7z&lt;/code>&lt;/a> 是 &lt;a href="https://en.wikipedia.org/wiki/7-Zip">7-Zip&lt;/a> 自带的压缩文件格式，由俄罗斯开发者 Igor Pavlov 创建。7z 格式是一种高压缩比的压缩文件格式，在 7z 格式中需要建立流的概念，不如 ZIP/TAR 格式清晰，实现起来有点复杂，除了 7-zip 的官方实现外，&lt;a href="https://github.com/libarchive">libarchive&lt;/a> 也支持 7z 的压缩和解压。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#1d2432;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-txt" data-lang="txt">&lt;span style="display:flex;">&lt;span>Archive structure
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>~~~~~~~~~~~~~~~~~
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>SignatureHeader
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>[PackedStreams]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>[PackedStreamsForHeaders]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>[
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Header
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> or
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Packed Header
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> HeaderInfo
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>]
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>7z 支持 Unicode 编码，支持加密标头，这就是说可以连文件名也加密，ZIP 则只做到文件内容加密。7z 不支持存储文件系统权限信息，这基本上限制了它在 POSIX 系统中的使用，7z 不支持提取损坏的文件，不支持随机读取。&lt;/p>
&lt;p>7z 的特性做到了极致也限制了它在其他领域的使用。&lt;/p>
&lt;h3 id="rar-互联网分享而兴起">RAR 互联网分享而兴起&lt;/h3>
&lt;p>虽然 WinRAR 是专业软件，但盗版的门槛非常低，早期互联网上，很多人使用 &lt;code>RAR&lt;/code> 格式分享文件，RAR 格式一度非常流行，RAR 支持分卷压缩，支持按照 Unicode(UTF-16) 存储文件名，2014 年，RAR5 格式推出，查看技术规范 &lt;a href="https://www.rarlab.com/technote.htm">RAR5 technode.html&lt;/a> ，通过分析 RAR5 格式，我们可以发现与 ZIP 格式有一定的相似之处，RAR5 是不是借鉴了 ZIP 格式不得而知。RAR5 支持存储 UTF-8 文件名，强度更高的 AES 加密，支持 NTFS 符号链接和硬链接等等。&lt;/p>
&lt;p>RAR/RAR5 格式属于专有格式，虽然 RAR5 的技术规格开放了，但是并不意味着人们可以按照规范实现兼容的 RAR 压缩软件，根据协议，只能提供 RAR 解压功能，rarlab 可以直接下载 &lt;a href="https://www.rarlab.com/rar_add.htm">unrar&lt;/a> 源码或者命令行，用于解压 RAR 文件。&lt;/p>
&lt;h3 id="zip-vs-tar-vs-7z-技术的殊途">ZIP vs Tar vs 7z 技术的殊途&lt;/h3>
&lt;p>ZIP 的机制有利于其他格式采用，比如 Office（2007+） 文档格式，Android APK，Windows APPX，Java Jar，iOS ipa 等等，都是使用了 ZIP 格式。在 Linux 等 POSIX 系统，除了 &lt;code>tar.*&lt;/code>，其他格式似乎都不是最常规的选择，当然也可以选择 ZIP，但系统默认都安装了 tar，不一定安装了 Info-ZIP。在 Windows 系统中，而为了提供更高的压缩率，Chrome 安装包则会将文件打包成 chrome.7z，并内置一个 7Z 解压它，实际上这个思路在一些安装包制作软件中也有使用。三种格式代表着三种不同的方向，实际上也是计算机技术的分歧，不同的人有不同的看法。&lt;/p>
&lt;h2 id="最后">最后&lt;/h2>
&lt;p>这篇文章比较短，主要是最近事情比较多。&lt;/p>
- https://forcemz.net/posts/2020/2020-06-30-nonsense-file-compression/ - Copyright (c) 2009-2024 J23</description></item><item><title>文件的真实路径</title><link>https://forcemz.net/posts/2020/2020-04-24-realpath/</link><pubDate>Fri, 24 Apr 2020 10:00:00 +0800</pubDate><guid>https://forcemz.net/posts/2020/2020-04-24-realpath/</guid><description>江二十三的思考 https://forcemz.net/posts/2020/2020-04-24-realpath/ -&lt;h1 id="前言">前言&lt;/h1>
&lt;p>最近浏览 Windows Terminal 提交，发现其文档中链接了一个 PowerShell 的 Issue：&lt;a href="https://github.com/PowerShell/PowerShell/issues/9970">Windows Store applications incorrectly assumed to be console applications &lt;/a>，这个问题描述起来很简单，就是在 PowerShell 中打开 &lt;code>wt.exe&lt;/code>， PowerShell 会一直等待 Windows Terminal 的退出，但实际上 Windows Terminal 是一个 GUI 程序，按照 Windows 的默认行为，PowerShell 在创建 Windows Terminal 进程后，就应该返回。这个问题是怎么产生的，其实很简单，&lt;code>wt.exe&lt;/code> 是 Windows Terminal 的 &lt;code>AppExecutionAlias&lt;/code>，&lt;code>AppExecutionAlias&lt;/code> 是一类特殊的重解析点，Windows 在创建进程时会根据 &lt;code>AppExecutionAlias&lt;/code> 设施的信息启动对应的 Store App。那么 PowerShell 应当获得相应 Store App 的主程序的 &lt;code>Subsystem&lt;/code> 才能正确的决定是否应该等待进程退出。因此这里获得其真实路径是必不可少的。&lt;/p>
&lt;h2 id="文件的真实路径">文件的真实路径&lt;/h2>
&lt;p>在 POSIX 中，我们可以使用 &lt;code>realpath&lt;/code> 获得文件的真实路径，如果一个文件是常规文件则返回它的绝对路径，如果一个文件是符号链接，则返回它指向的目标文件的绝对路径。就这么简单。在 Windows 上我们该怎么做？&lt;/p>
&lt;p>在 Windows 中，符号链接是使用 &lt;a href="https://docs.microsoft.com/en-us/windows/win32/fileio/reparse-points">Reparse Point&lt;/a> 机制实现的，其 &lt;code>ReparseTag&lt;/code> &lt;code>IO_REPARSE_TAG_SYMLINK&lt;/code> 值为 &lt;code>0xA000000C&lt;/code>，&lt;a href="https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-fscc/8ac44452-328c-4d7b-a784-d72afd19bd9f#gt_4fed0b53-5fc8-4818-886f-93d87f3035e1">描述信息&lt;/a>如下：&lt;/p>
&lt;blockquote>
&lt;p>symbolic link: A symbolic link is a reparse point that points to another file system object. The object being pointed to is called the target. Symbolic links are transparent to users; the links appear as normal files or directories, and can be acted upon by the user or application in exactly the same manner. Symbolic links can be created using the FSCTL_SET_REPARSE_POINT request as specified in [MS-FSCC] section 2.3.61. They can be deleted using the FSCTL_DELETE_REPARSE_POINT request as specified in [MS-FSCC] section 2.3.5. Implementing symbolic links is optional for a file system.&lt;/p>
&lt;/blockquote>
&lt;p>那么我们可以通过解析重解析点获得符号链接的真实路径。但我们通常不这么做，因此 Windows 有个 API 可以帮助我们做到这件事。&lt;a href="https://docs.microsoft.com/en-us/windows/win32/api/fileapi/nf-fileapi-getfinalpathnamebyhandlew">GetFinalPathNameByHandleW&lt;/a> 能够帮助我们获得已打开的文件的最终路径，也就是真实路径，而我们在打开符号链接时，&lt;code>IoCreateFile&lt;/code> 最终将打开符号链接的目标文件，因此，通过 &lt;code>GetFinalPathNameByHandleW&lt;/code> 我们就可以获得其真实路径。话不多说代码如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#1d2432;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c++" data-lang="c++">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff636f">template&lt;/span> &lt;span style="color:#ff636f">&amp;lt;&lt;/span>&lt;span style="color:#ff636f">class&lt;/span> &lt;span style="color:#58a1dd">_Ty&lt;/span>&lt;span style="color:#ff636f">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#58a1dd">[[nodiscard]]&lt;/span> &lt;span style="color:#58a1dd">_Ty&lt;/span> &lt;span style="color:#58a1dd">_Unaligned_load&lt;/span>(&lt;span style="color:#ff636f">const&lt;/span> &lt;span style="color:#ff636f">void&lt;/span> &lt;span style="color:#ff636f">*&lt;/span>&lt;span style="color:#58a1dd">_Ptr&lt;/span>) { &lt;span style="color:#828b96;font-style:italic">// load a _Ty from _Ptr
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span> &lt;span style="color:#ff636f">static_assert&lt;/span>(&lt;span style="color:#58a1dd">std&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">is_trivial_v&lt;/span>&lt;span style="color:#ff636f">&amp;lt;&lt;/span>&lt;span style="color:#58a1dd">_Ty&lt;/span>&lt;span style="color:#ff636f">&amp;gt;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6be9d">&amp;#34;Unaligned loads require trivial types&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">_Ty&lt;/span> &lt;span style="color:#58a1dd">_Tmp&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">std&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">memcpy&lt;/span>(&lt;span style="color:#ff636f">&amp;amp;&lt;/span>&lt;span style="color:#58a1dd">_Tmp&lt;/span>, &lt;span style="color:#58a1dd">_Ptr&lt;/span>, &lt;span style="color:#ff636f">sizeof&lt;/span>(&lt;span style="color:#58a1dd">_Tmp&lt;/span>));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">return&lt;/span> &lt;span style="color:#58a1dd">_Tmp&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#58a1dd">[[nodiscard]]&lt;/span> &lt;span style="color:#ff636f">inline&lt;/span> &lt;span style="color:#ff636f">bool&lt;/span> &lt;span style="color:#58a1dd">_Is_drive_prefix&lt;/span>(&lt;span style="color:#ff636f">const&lt;/span> &lt;span style="color:#ff636f">wchar_t&lt;/span> &lt;span style="color:#ff636f">*&lt;/span>&lt;span style="color:#ff636f">const&lt;/span> &lt;span style="color:#58a1dd">_First&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#828b96;font-style:italic">// test if _First points to a prefix of the form X:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span> &lt;span style="color:#828b96;font-style:italic">// pre: _First points to at least 2 wchar_t instances
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span> &lt;span style="color:#828b96;font-style:italic">// pre: Little endian
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span> &lt;span style="color:#ff636f">auto&lt;/span> &lt;span style="color:#58a1dd">_Value&lt;/span> &lt;span style="color:#ff636f">=&lt;/span> &lt;span style="color:#58a1dd">_Unaligned_load&lt;/span>&lt;span style="color:#ff636f">&amp;lt;&lt;/span>&lt;span style="color:#ff636f">unsigned&lt;/span> &lt;span style="color:#ff636f">int&lt;/span>&lt;span style="color:#ff636f">&amp;gt;&lt;/span>(&lt;span style="color:#58a1dd">_First&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">_Value&lt;/span> &lt;span style="color:#ff636f">&amp;amp;=&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6be9d">0xFFFF&amp;#39;FFDFu&lt;/span>; &lt;span style="color:#828b96;font-style:italic">// transform lowercase drive letters into uppercase ones
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span> &lt;span style="color:#58a1dd">_Value&lt;/span> &lt;span style="color:#ff636f">-=&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (&lt;span style="color:#ff636f">static_cast&lt;/span>&lt;span style="color:#ff636f">&amp;lt;&lt;/span>&lt;span style="color:#ff636f">unsigned&lt;/span> &lt;span style="color:#ff636f">int&lt;/span>&lt;span style="color:#ff636f">&amp;gt;&lt;/span>(&lt;span style="color:#a6be9d">L&lt;/span>&lt;span style="color:#a6be9d">&amp;#39;:&amp;#39;&lt;/span>) &lt;span style="color:#ff636f">&amp;lt;&amp;lt;&lt;/span> (&lt;span style="color:#ff636f">sizeof&lt;/span>(&lt;span style="color:#ff636f">wchar_t&lt;/span>) &lt;span style="color:#ff636f">*&lt;/span> &lt;span style="color:#58a1dd">CHAR_BIT&lt;/span>)) &lt;span style="color:#ff636f">|&lt;/span> &lt;span style="color:#a6be9d">L&lt;/span>&lt;span style="color:#a6be9d">&amp;#39;A&amp;#39;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">return&lt;/span> &lt;span style="color:#58a1dd">_Value&lt;/span> &lt;span style="color:#ff636f">&amp;lt;&lt;/span> &lt;span style="color:#a6be9d">26&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff636f">inline&lt;/span> &lt;span style="color:#ff636f">bool&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#58a1dd">_Is_drive_prefix_with_slash_slash_question&lt;/span>(&lt;span style="color:#ff636f">const&lt;/span> &lt;span style="color:#58a1dd">std&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">wstring_view&lt;/span> &lt;span style="color:#58a1dd">text&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">return&lt;/span> &lt;span style="color:#58a1dd">text&lt;/span>.&lt;span style="color:#58a1dd">size&lt;/span>() &lt;span style="color:#ff636f">&amp;gt;&lt;/span> &lt;span style="color:#a6be9d">6&lt;/span> &lt;span style="color:#ff636f">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#58a1dd">bela&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">StartsWith&lt;/span>(&lt;span style="color:#58a1dd">text&lt;/span>, &lt;span style="color:#58a1dd">LR&lt;/span>&lt;span style="color:#a6be9d">&amp;#34;(&lt;/span>&lt;span style="color:#a6be9d">\\&lt;/span>&lt;span style="color:#a6be9d">?\)&amp;#34;&lt;/span>) &lt;span style="color:#ff636f">&amp;amp;&amp;amp;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">_Is_drive_prefix&lt;/span>(&lt;span style="color:#58a1dd">text&lt;/span>.&lt;span style="color:#58a1dd">data&lt;/span>() &lt;span style="color:#ff636f">+&lt;/span> &lt;span style="color:#a6be9d">4&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#58a1dd">std&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">optional&lt;/span>&lt;span style="color:#ff636f">&amp;lt;&lt;/span>&lt;span style="color:#58a1dd">std&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">wstring&lt;/span>&lt;span style="color:#ff636f">&amp;gt;&lt;/span> &lt;span style="color:#58a1dd">RealPathByHandle&lt;/span>(&lt;span style="color:#58a1dd">HANDLE&lt;/span> &lt;span style="color:#58a1dd">FileHandle&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">bela&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">error_code&lt;/span> &lt;span style="color:#ff636f">&amp;amp;&lt;/span>&lt;span style="color:#58a1dd">ec&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">std&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">wstring&lt;/span> &lt;span style="color:#58a1dd">buffer&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">buffer&lt;/span>.&lt;span style="color:#58a1dd">resize&lt;/span>(&lt;span style="color:#a6be9d">260&lt;/span>); &lt;span style="color:#828b96;font-style:italic">// opt
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span> &lt;span style="color:#58a1dd">DWORD&lt;/span> &lt;span style="color:#58a1dd">kind&lt;/span> &lt;span style="color:#ff636f">=&lt;/span> &lt;span style="color:#58a1dd">VOLUME_NAME_DOS&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">for&lt;/span> (;;) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">const&lt;/span> &lt;span style="color:#ff636f">auto&lt;/span> &lt;span style="color:#58a1dd">blen&lt;/span> &lt;span style="color:#ff636f">=&lt;/span> &lt;span style="color:#58a1dd">buffer&lt;/span>.&lt;span style="color:#58a1dd">size&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">auto&lt;/span> &lt;span style="color:#58a1dd">len&lt;/span> &lt;span style="color:#ff636f">=&lt;/span> &lt;span style="color:#58a1dd">GetFinalPathNameByHandleW&lt;/span>(&lt;span style="color:#58a1dd">FileHandle&lt;/span>, &lt;span style="color:#58a1dd">buffer&lt;/span>.&lt;span style="color:#58a1dd">data&lt;/span>(),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">static_cast&lt;/span>&lt;span style="color:#ff636f">&amp;lt;&lt;/span>&lt;span style="color:#58a1dd">DWORD&lt;/span>&lt;span style="color:#ff636f">&amp;gt;&lt;/span>(&lt;span style="color:#58a1dd">blen&lt;/span>), &lt;span style="color:#58a1dd">kind&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">if&lt;/span> (&lt;span style="color:#58a1dd">len&lt;/span> &lt;span style="color:#ff636f">==&lt;/span> &lt;span style="color:#a6be9d">0&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">auto&lt;/span> &lt;span style="color:#58a1dd">e&lt;/span> &lt;span style="color:#ff636f">=&lt;/span> &lt;span style="color:#58a1dd">GetLastError&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">if&lt;/span> (&lt;span style="color:#58a1dd">e&lt;/span> &lt;span style="color:#ff636f">==&lt;/span> &lt;span style="color:#58a1dd">ERROR_PATH_NOT_FOUND&lt;/span> &lt;span style="color:#ff636f">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#58a1dd">kind&lt;/span> &lt;span style="color:#ff636f">==&lt;/span> &lt;span style="color:#58a1dd">VOLUME_NAME_DOS&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">kind&lt;/span> &lt;span style="color:#ff636f">=&lt;/span> &lt;span style="color:#58a1dd">VOLUME_NAME_NT&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">continue&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">ec&lt;/span>.&lt;span style="color:#58a1dd">code&lt;/span> &lt;span style="color:#ff636f">=&lt;/span> &lt;span style="color:#58a1dd">e&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">ec&lt;/span>.&lt;span style="color:#58a1dd">message&lt;/span> &lt;span style="color:#ff636f">=&lt;/span> &lt;span style="color:#58a1dd">bela&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">resolve_system_error_message&lt;/span>(&lt;span style="color:#58a1dd">ec&lt;/span>.&lt;span style="color:#58a1dd">code&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">return&lt;/span> &lt;span style="color:#58a1dd">std&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">nullopt&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">buffer&lt;/span>.&lt;span style="color:#58a1dd">resize&lt;/span>(&lt;span style="color:#58a1dd">len&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">if&lt;/span> (&lt;span style="color:#58a1dd">len&lt;/span> &lt;span style="color:#ff636f">&amp;lt;&lt;/span> &lt;span style="color:#ff636f">static_cast&lt;/span>&lt;span style="color:#ff636f">&amp;lt;&lt;/span>&lt;span style="color:#58a1dd">DWORD&lt;/span>&lt;span style="color:#ff636f">&amp;gt;&lt;/span>(&lt;span style="color:#58a1dd">blen&lt;/span>)) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">break&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">if&lt;/span> (&lt;span style="color:#58a1dd">kind&lt;/span> &lt;span style="color:#ff636f">!=&lt;/span> &lt;span style="color:#58a1dd">VOLUME_NAME_DOS&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#828b96;font-style:italic">// result is in the NT namespace, so apply the DOS to NT namespace prefix
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span> &lt;span style="color:#ff636f">constexpr&lt;/span> &lt;span style="color:#58a1dd">std&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">wstring_view&lt;/span> &lt;span style="color:#58a1dd">ntprefix&lt;/span> &lt;span style="color:#ff636f">=&lt;/span> &lt;span style="color:#58a1dd">LR&lt;/span>&lt;span style="color:#a6be9d">&amp;#34;(&lt;/span>&lt;span style="color:#a6be9d">\\&lt;/span>&lt;span style="color:#a6be9d">?\GLOBALROOT)&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">return&lt;/span> &lt;span style="color:#58a1dd">bela&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">StringCat&lt;/span>(&lt;span style="color:#58a1dd">ntprefix&lt;/span>, &lt;span style="color:#58a1dd">buffer&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#828b96;font-style:italic">// &amp;#39;\\?\C:\Path&amp;#39;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span> &lt;span style="color:#ff636f">if&lt;/span> (&lt;span style="color:#58a1dd">_Is_drive_prefix_with_slash_slash_question&lt;/span>(&lt;span style="color:#58a1dd">buffer&lt;/span>)) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">return&lt;/span> &lt;span style="color:#58a1dd">std&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">make_optional&lt;/span>(&lt;span style="color:#58a1dd">buffer&lt;/span>.&lt;span style="color:#58a1dd">substr&lt;/span>(&lt;span style="color:#a6be9d">4&lt;/span>));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">if&lt;/span> (&lt;span style="color:#58a1dd">bela&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">StartsWithIgnoreCase&lt;/span>(&lt;span style="color:#58a1dd">buffer&lt;/span>, &lt;span style="color:#58a1dd">LR&lt;/span>&lt;span style="color:#a6be9d">&amp;#34;(&lt;/span>&lt;span style="color:#a6be9d">\\&lt;/span>&lt;span style="color:#a6be9d">?\UNC\)&amp;#34;&lt;/span>)) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">std&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">wstring_view&lt;/span> &lt;span style="color:#58a1dd">sv&lt;/span>(&lt;span style="color:#58a1dd">buffer&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">return&lt;/span> &lt;span style="color:#58a1dd">std&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">make_optional&lt;/span>(&lt;span style="color:#58a1dd">bela&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">StringCat&lt;/span>(&lt;span style="color:#58a1dd">LR&lt;/span>&lt;span style="color:#a6be9d">&amp;#34;(&lt;/span>&lt;span style="color:#a6be9d">\\&lt;/span>&lt;span style="color:#a6be9d">)&amp;#34;&lt;/span>, &lt;span style="color:#58a1dd">sv&lt;/span>.&lt;span style="color:#58a1dd">substr&lt;/span>(&lt;span style="color:#a6be9d">6&lt;/span>)));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">return&lt;/span> &lt;span style="color:#58a1dd">std&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">make_optional&lt;/span>(&lt;span style="color:#58a1dd">std&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">move&lt;/span>(&lt;span style="color:#58a1dd">buffer&lt;/span>));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#58a1dd">std&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">optional&lt;/span>&lt;span style="color:#ff636f">&amp;lt;&lt;/span>&lt;span style="color:#58a1dd">std&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">wstring&lt;/span>&lt;span style="color:#ff636f">&amp;gt;&lt;/span> &lt;span style="color:#58a1dd">RealPath&lt;/span>(&lt;span style="color:#58a1dd">std&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">wstring_view&lt;/span> &lt;span style="color:#58a1dd">src&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">bela&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">error_code&lt;/span> &lt;span style="color:#ff636f">&amp;amp;&lt;/span>&lt;span style="color:#58a1dd">ec&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">auto&lt;/span> &lt;span style="color:#58a1dd">FileHandle&lt;/span> &lt;span style="color:#ff636f">=&lt;/span> &lt;span style="color:#58a1dd">CreateFileW&lt;/span>(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">src&lt;/span>.&lt;span style="color:#58a1dd">data&lt;/span>(), &lt;span style="color:#a6be9d">0&lt;/span>, &lt;span style="color:#58a1dd">FILE_SHARE_READ&lt;/span> &lt;span style="color:#ff636f">|&lt;/span> &lt;span style="color:#58a1dd">FILE_SHARE_WRITE&lt;/span> &lt;span style="color:#ff636f">|&lt;/span> &lt;span style="color:#58a1dd">FILE_SHARE_DELETE&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">nullptr&lt;/span>, &lt;span style="color:#58a1dd">OPEN_EXISTING&lt;/span>, &lt;span style="color:#58a1dd">FILE_FLAG_BACKUP_SEMANTICS&lt;/span>, &lt;span style="color:#ff636f">nullptr&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#828b96;font-style:italic">// FILE_FLAG_BACKUP_SEMANTICS open directory require
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span> &lt;span style="color:#ff636f">if&lt;/span> (&lt;span style="color:#58a1dd">FileHandle&lt;/span> &lt;span style="color:#ff636f">==&lt;/span> &lt;span style="color:#58a1dd">INVALID_HANDLE_VALUE&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">ec&lt;/span> &lt;span style="color:#ff636f">=&lt;/span> &lt;span style="color:#58a1dd">bela&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">make_system_error_code&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">return&lt;/span> &lt;span style="color:#58a1dd">std&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">nullopt&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">auto&lt;/span> &lt;span style="color:#58a1dd">closer&lt;/span> &lt;span style="color:#ff636f">=&lt;/span> &lt;span style="color:#58a1dd">bela&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">finally&lt;/span>([&lt;span style="color:#ff636f">&amp;amp;&lt;/span>] { &lt;span style="color:#58a1dd">CloseHandle&lt;/span>(&lt;span style="color:#58a1dd">FileHandle&lt;/span>); });
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">return&lt;/span> &lt;span style="color:#58a1dd">bela&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">RealPathByHandle&lt;/span>(&lt;span style="color:#58a1dd">FileHandle&lt;/span>, &lt;span style="color:#58a1dd">ec&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>这里需要注意 &lt;code>FILE_FLAG_BACKUP_SEMANTICS&lt;/code> 用于打开目录，这个时候我们不需要读写，因此第二个参数 &lt;code>dwDesiredAccess&lt;/code> 值为 &lt;code>0&lt;/code>。如果使用了 &lt;code>FILE_FLAG_OPEN_REPARSE_POINT&lt;/code> 标志打开符号链接，则不会打开目标文件。&lt;/p>
&lt;p>但我们使用这个函数去查询 &lt;code>AppExecutionAlias&lt;/code> 的真实路径时，由于没有设置 &lt;code>FILE_FLAG_OPEN_REPARSE_POINT&lt;/code> 因此无法打开文件。&lt;/p>
&lt;h2 id="通过重解析点获得真实路径">通过重解析点获得真实路径&lt;/h2>
&lt;p>我们如果去解析重解析点，然后经过特殊处理，这样也是可以获得文件的真实路径。解析重解析点主要的难题在于获得一些不透明的结构，包含 &lt;code>AppExecutionAlias&lt;/code> 的 &lt;code>REPARSE_DATA_BUFFER&lt;/code> 结构如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#1d2432;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c++" data-lang="c++">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff636f">typedef&lt;/span> &lt;span style="color:#ff636f">struct&lt;/span> &lt;span style="color:#58a1dd">_REPARSE_DATA_BUFFER&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">ULONG&lt;/span> &lt;span style="color:#58a1dd">ReparseTag&lt;/span>; &lt;span style="color:#828b96;font-style:italic">// Reparse tag type
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span> &lt;span style="color:#58a1dd">USHORT&lt;/span> &lt;span style="color:#58a1dd">ReparseDataLength&lt;/span>; &lt;span style="color:#828b96;font-style:italic">// Length of the reparse data
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span> &lt;span style="color:#58a1dd">USHORT&lt;/span> &lt;span style="color:#58a1dd">Reserved&lt;/span>; &lt;span style="color:#828b96;font-style:italic">// Used internally by NTFS to store remaining length
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">union&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#828b96;font-style:italic">// Structure for IO_REPARSE_TAG_SYMLINK
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span> &lt;span style="color:#828b96;font-style:italic">// Handled by nt!IoCompleteRequest
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span> &lt;span style="color:#ff636f">struct&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">USHORT&lt;/span> &lt;span style="color:#58a1dd">SubstituteNameOffset&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">USHORT&lt;/span> &lt;span style="color:#58a1dd">SubstituteNameLength&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">USHORT&lt;/span> &lt;span style="color:#58a1dd">PrintNameOffset&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">USHORT&lt;/span> &lt;span style="color:#58a1dd">PrintNameLength&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">ULONG&lt;/span> &lt;span style="color:#58a1dd">Flags&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">WCHAR&lt;/span> &lt;span style="color:#58a1dd">PathBuffer&lt;/span>[&lt;span style="color:#a6be9d">1&lt;/span>];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#828b96;font-style:italic">// Example of distinction between substitute and print names:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span> &lt;span style="color:#828b96;font-style:italic">// mklink /d ldrive c:\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic"> // SubstituteName: c:\\??\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic"> // PrintName: c:\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic"> } SymbolicLinkReparseBuffer;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#828b96;font-style:italic">// Structure for IO_REPARSE_TAG_MOUNT_POINT
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span> &lt;span style="color:#828b96;font-style:italic">// Handled by nt!IoCompleteRequest
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span> &lt;span style="color:#ff636f">struct&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">USHORT&lt;/span> &lt;span style="color:#58a1dd">SubstituteNameOffset&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">USHORT&lt;/span> &lt;span style="color:#58a1dd">SubstituteNameLength&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">USHORT&lt;/span> &lt;span style="color:#58a1dd">PrintNameOffset&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">USHORT&lt;/span> &lt;span style="color:#58a1dd">PrintNameLength&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">WCHAR&lt;/span> &lt;span style="color:#58a1dd">PathBuffer&lt;/span>[&lt;span style="color:#a6be9d">1&lt;/span>];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } &lt;span style="color:#58a1dd">MountPointReparseBuffer&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#828b96;font-style:italic">// Structure for IO_REPARSE_TAG_WIM
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span> &lt;span style="color:#828b96;font-style:italic">// Handled by wimmount!FPOpenReparseTarget-&amp;gt;wimserv.dll
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span> &lt;span style="color:#828b96;font-style:italic">// (wimsrv!ImageExtract)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span> &lt;span style="color:#ff636f">struct&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">GUID&lt;/span> &lt;span style="color:#58a1dd">ImageGuid&lt;/span>; &lt;span style="color:#828b96;font-style:italic">// GUID of the mounted VIM image
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span> &lt;span style="color:#58a1dd">BYTE&lt;/span> &lt;span style="color:#58a1dd">ImagePathHash&lt;/span>[&lt;span style="color:#a6be9d">0x14&lt;/span>]; &lt;span style="color:#828b96;font-style:italic">// Hash of the path to the file within the image
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span> } &lt;span style="color:#58a1dd">WimImageReparseBuffer&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#828b96;font-style:italic">// Structure for IO_REPARSE_TAG_WOF
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span> &lt;span style="color:#828b96;font-style:italic">// Handled by FSCTL_GET_EXTERNAL_BACKING, FSCTL_SET_EXTERNAL_BACKING in NTFS
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span> &lt;span style="color:#828b96;font-style:italic">// (Windows 10+)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span> &lt;span style="color:#ff636f">struct&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#828b96;font-style:italic">//-- WOF_EXTERNAL_INFO --------------------
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span> &lt;span style="color:#58a1dd">ULONG&lt;/span> &lt;span style="color:#58a1dd">Wof_Version&lt;/span>; &lt;span style="color:#828b96;font-style:italic">// Should be 1 (WOF_CURRENT_VERSION)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span> &lt;span style="color:#58a1dd">ULONG&lt;/span> &lt;span style="color:#58a1dd">Wof_Provider&lt;/span>; &lt;span style="color:#828b96;font-style:italic">// Should be 2 (WOF_PROVIDER_FILE)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#828b96;font-style:italic">//-- FILE_PROVIDER_EXTERNAL_INFO_V1 --------------------
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span> &lt;span style="color:#58a1dd">ULONG&lt;/span> &lt;span style="color:#58a1dd">FileInfo_Version&lt;/span>; &lt;span style="color:#828b96;font-style:italic">// Should be 1 (FILE_PROVIDER_CURRENT_VERSION)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span> &lt;span style="color:#58a1dd">ULONG&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">FileInfo_Algorithm&lt;/span>; &lt;span style="color:#828b96;font-style:italic">// Usually 0 (FILE_PROVIDER_COMPRESSION_XPRESS4K)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span> } &lt;span style="color:#58a1dd">WofReparseBuffer&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#828b96;font-style:italic">// Structure for IO_REPARSE_TAG_APPEXECLINK
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span> &lt;span style="color:#ff636f">struct&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">ULONG&lt;/span> &lt;span style="color:#58a1dd">StringCount&lt;/span>; &lt;span style="color:#828b96;font-style:italic">// Number of the strings in the StringList, separated
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span> &lt;span style="color:#828b96;font-style:italic">// by &amp;#39;\0&amp;#39;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span> &lt;span style="color:#58a1dd">WCHAR&lt;/span> &lt;span style="color:#58a1dd">StringList&lt;/span>[&lt;span style="color:#a6be9d">1&lt;/span>]; &lt;span style="color:#828b96;font-style:italic">// Multistring (strings separated by &amp;#39;\0&amp;#39;, terminated
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span> &lt;span style="color:#828b96;font-style:italic">// by &amp;#39;\0\0&amp;#39;)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span> } &lt;span style="color:#58a1dd">AppExecLinkReparseBuffer&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#828b96;font-style:italic">// Structure for IO_REPARSE_TAG_WCI (0x80000018)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span> &lt;span style="color:#ff636f">struct&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">ULONG&lt;/span> &lt;span style="color:#58a1dd">Version&lt;/span>; &lt;span style="color:#828b96;font-style:italic">// Expected to be 1 by wcifs.sys
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span> &lt;span style="color:#58a1dd">ULONG&lt;/span> &lt;span style="color:#58a1dd">Reserved&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">GUID&lt;/span> &lt;span style="color:#58a1dd">LookupGuid&lt;/span>; &lt;span style="color:#828b96;font-style:italic">// GUID used for lookup in wcifs!WcLookupLayer
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span> &lt;span style="color:#58a1dd">USHORT&lt;/span> &lt;span style="color:#58a1dd">WciNameLength&lt;/span>; &lt;span style="color:#828b96;font-style:italic">// Length of the WCI subname, in bytes
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span> &lt;span style="color:#58a1dd">WCHAR&lt;/span> &lt;span style="color:#58a1dd">WciName&lt;/span>[&lt;span style="color:#a6be9d">1&lt;/span>]; &lt;span style="color:#828b96;font-style:italic">// The WCI subname (not zero terminated)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span> } &lt;span style="color:#58a1dd">WcifsReparseBuffer&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#828b96;font-style:italic">// Handled by cldflt.sys!HsmpRpReadBuffer
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span> &lt;span style="color:#ff636f">struct&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">USHORT&lt;/span> &lt;span style="color:#58a1dd">Flags&lt;/span>; &lt;span style="color:#828b96;font-style:italic">// Flags (0x8000 = not compressed)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span> &lt;span style="color:#58a1dd">USHORT&lt;/span> &lt;span style="color:#58a1dd">Length&lt;/span>; &lt;span style="color:#828b96;font-style:italic">// Length of the data (uncompressed)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span> &lt;span style="color:#58a1dd">BYTE&lt;/span> &lt;span style="color:#58a1dd">RawData&lt;/span>[&lt;span style="color:#a6be9d">1&lt;/span>]; &lt;span style="color:#828b96;font-style:italic">// To be RtlDecompressBuffer-ed
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span> } &lt;span style="color:#58a1dd">HsmReparseBufferRaw&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#828b96;font-style:italic">// Dummy structure
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span> &lt;span style="color:#ff636f">struct&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">UCHAR&lt;/span> &lt;span style="color:#58a1dd">DataBuffer&lt;/span>[&lt;span style="color:#a6be9d">1&lt;/span>];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } &lt;span style="color:#58a1dd">GenericReparseBuffer&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } &lt;span style="color:#58a1dd">DUMMYUNIONNAME&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>} &lt;span style="color:#58a1dd">REPARSE_DATA_BUFFER&lt;/span>, &lt;span style="color:#ff636f">*&lt;/span>&lt;span style="color:#58a1dd">PREPARSE_DATA_BUFFER&lt;/span>;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>知道这个结构，我们就能对其进行解析了：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#1d2432;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c++" data-lang="c++">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">// https://github.com/fcharlie/bela/blob/728a4b726f303e7c861823232991de7fdea4d992/src/belawin/reparsepoint.cc#L32
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span>&lt;span style="color:#ff636f">bool&lt;/span> &lt;span style="color:#58a1dd">FileReparser&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">FileDeviceLookup&lt;/span>(&lt;span style="color:#58a1dd">std&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">wstring_view&lt;/span> &lt;span style="color:#58a1dd">file&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">bela&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">error_code&lt;/span> &lt;span style="color:#ff636f">&amp;amp;&lt;/span>&lt;span style="color:#58a1dd">ec&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">if&lt;/span> (&lt;span style="color:#58a1dd">buffer&lt;/span> &lt;span style="color:#ff636f">=&lt;/span> &lt;span style="color:#ff636f">reinterpret_cast&lt;/span>&lt;span style="color:#ff636f">&amp;lt;&lt;/span>&lt;span style="color:#58a1dd">REPARSE_DATA_BUFFER&lt;/span> &lt;span style="color:#ff636f">*&amp;gt;&lt;/span>(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">HeapAlloc&lt;/span>(&lt;span style="color:#58a1dd">GetProcessHeap&lt;/span>(), &lt;span style="color:#a6be9d">0&lt;/span>, &lt;span style="color:#58a1dd">MAXIMUM_REPARSE_DATA_BUFFER_SIZE&lt;/span>));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">buffer&lt;/span> &lt;span style="color:#ff636f">==&lt;/span> &lt;span style="color:#ff636f">nullptr&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">ec&lt;/span> &lt;span style="color:#ff636f">=&lt;/span> &lt;span style="color:#58a1dd">bela&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">make_system_error_code&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">return&lt;/span> &lt;span style="color:#58a1dd">false&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">if&lt;/span> (&lt;span style="color:#58a1dd">FileHandle&lt;/span> &lt;span style="color:#ff636f">=&lt;/span> &lt;span style="color:#58a1dd">CreateFileW&lt;/span>(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">file&lt;/span>.&lt;span style="color:#58a1dd">data&lt;/span>(), &lt;span style="color:#a6be9d">0&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">FILE_SHARE_READ&lt;/span> &lt;span style="color:#ff636f">|&lt;/span> &lt;span style="color:#58a1dd">FILE_SHARE_WRITE&lt;/span> &lt;span style="color:#ff636f">|&lt;/span> &lt;span style="color:#58a1dd">FILE_SHARE_DELETE&lt;/span>, &lt;span style="color:#ff636f">nullptr&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">OPEN_EXISTING&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">FILE_FLAG_BACKUP_SEMANTICS&lt;/span> &lt;span style="color:#ff636f">|&lt;/span> &lt;span style="color:#58a1dd">FILE_FLAG_OPEN_REPARSE_POINT&lt;/span>, &lt;span style="color:#ff636f">nullptr&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">FileHandle&lt;/span> &lt;span style="color:#ff636f">==&lt;/span> &lt;span style="color:#58a1dd">INVALID_HANDLE_VALUE&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">ec&lt;/span> &lt;span style="color:#ff636f">=&lt;/span> &lt;span style="color:#58a1dd">bela&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">make_system_error_code&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">return&lt;/span> &lt;span style="color:#58a1dd">false&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">if&lt;/span> (&lt;span style="color:#58a1dd">DeviceIoControl&lt;/span>(&lt;span style="color:#58a1dd">FileHandle&lt;/span>, &lt;span style="color:#58a1dd">FSCTL_GET_REPARSE_POINT&lt;/span>, &lt;span style="color:#ff636f">nullptr&lt;/span>, &lt;span style="color:#a6be9d">0&lt;/span>, &lt;span style="color:#58a1dd">buffer&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">MAXIMUM_REPARSE_DATA_BUFFER_SIZE&lt;/span>, &lt;span style="color:#ff636f">&amp;amp;&lt;/span>&lt;span style="color:#58a1dd">len&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">nullptr&lt;/span>) &lt;span style="color:#ff636f">!=&lt;/span> &lt;span style="color:#58a1dd">TRUE&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">if&lt;/span> (&lt;span style="color:#58a1dd">ec&lt;/span>.&lt;span style="color:#58a1dd">code&lt;/span> &lt;span style="color:#ff636f">=&lt;/span> &lt;span style="color:#58a1dd">GetLastError&lt;/span>(); &lt;span style="color:#58a1dd">ec&lt;/span>.&lt;span style="color:#58a1dd">code&lt;/span> &lt;span style="color:#ff636f">!=&lt;/span> &lt;span style="color:#58a1dd">ERROR_NOT_A_REPARSE_POINT&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">ec&lt;/span>.&lt;span style="color:#58a1dd">message&lt;/span> &lt;span style="color:#ff636f">=&lt;/span> &lt;span style="color:#58a1dd">bela&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">resolve_system_error_message&lt;/span>(&lt;span style="color:#58a1dd">ec&lt;/span>.&lt;span style="color:#58a1dd">code&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">return&lt;/span> &lt;span style="color:#58a1dd">false&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">return&lt;/span> &lt;span style="color:#58a1dd">true&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff636f">inline&lt;/span> &lt;span style="color:#ff636f">bool&lt;/span> &lt;span style="color:#58a1dd">DecodeAppLink&lt;/span>(&lt;span style="color:#ff636f">const&lt;/span> &lt;span style="color:#58a1dd">REPARSE_DATA_BUFFER&lt;/span> &lt;span style="color:#ff636f">*&lt;/span>&lt;span style="color:#58a1dd">buffer&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">AppExecTarget&lt;/span> &lt;span style="color:#ff636f">&amp;amp;&lt;/span>&lt;span style="color:#58a1dd">target&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">LPWSTR&lt;/span> &lt;span style="color:#58a1dd">szString&lt;/span> &lt;span style="color:#ff636f">=&lt;/span> (&lt;span style="color:#58a1dd">LPWSTR&lt;/span>)&lt;span style="color:#58a1dd">buffer&lt;/span>&lt;span style="color:#ff636f">-&amp;gt;&lt;/span>&lt;span style="color:#58a1dd">AppExecLinkReparseBuffer&lt;/span>.&lt;span style="color:#58a1dd">StringList&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">std&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">vector&lt;/span>&lt;span style="color:#ff636f">&amp;lt;&lt;/span>&lt;span style="color:#58a1dd">std&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">wstring_view&lt;/span>&lt;span style="color:#ff636f">&amp;gt;&lt;/span> &lt;span style="color:#58a1dd">strv&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">for&lt;/span> (&lt;span style="color:#58a1dd">ULONG&lt;/span> &lt;span style="color:#58a1dd">i&lt;/span> &lt;span style="color:#ff636f">=&lt;/span> &lt;span style="color:#a6be9d">0&lt;/span>; &lt;span style="color:#58a1dd">i&lt;/span> &lt;span style="color:#ff636f">&amp;lt;&lt;/span> &lt;span style="color:#58a1dd">buffer&lt;/span>&lt;span style="color:#ff636f">-&amp;gt;&lt;/span>&lt;span style="color:#58a1dd">AppExecLinkReparseBuffer&lt;/span>.&lt;span style="color:#58a1dd">StringCount&lt;/span>; &lt;span style="color:#58a1dd">i&lt;/span>&lt;span style="color:#ff636f">++&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">auto&lt;/span> &lt;span style="color:#58a1dd">len&lt;/span> &lt;span style="color:#ff636f">=&lt;/span> &lt;span style="color:#58a1dd">wcslen&lt;/span>(&lt;span style="color:#58a1dd">szString&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">strv&lt;/span>.&lt;span style="color:#58a1dd">emplace_back&lt;/span>(&lt;span style="color:#58a1dd">szString&lt;/span>, &lt;span style="color:#58a1dd">len&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">szString&lt;/span> &lt;span style="color:#ff636f">+=&lt;/span> &lt;span style="color:#58a1dd">len&lt;/span> &lt;span style="color:#ff636f">+&lt;/span> &lt;span style="color:#a6be9d">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">if&lt;/span> (&lt;span style="color:#58a1dd">strv&lt;/span>.&lt;span style="color:#58a1dd">empty&lt;/span>()) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">return&lt;/span> &lt;span style="color:#58a1dd">false&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">target&lt;/span>.&lt;span style="color:#58a1dd">pkid&lt;/span> &lt;span style="color:#ff636f">=&lt;/span> &lt;span style="color:#58a1dd">strv&lt;/span>[&lt;span style="color:#a6be9d">0&lt;/span>];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">if&lt;/span> (&lt;span style="color:#58a1dd">strv&lt;/span>.&lt;span style="color:#58a1dd">size&lt;/span>() &lt;span style="color:#ff636f">&amp;gt;&lt;/span> &lt;span style="color:#a6be9d">1&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">target&lt;/span>.&lt;span style="color:#58a1dd">appuserid&lt;/span> &lt;span style="color:#ff636f">=&lt;/span> &lt;span style="color:#58a1dd">strv&lt;/span>[&lt;span style="color:#a6be9d">1&lt;/span>];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">if&lt;/span> (&lt;span style="color:#58a1dd">strv&lt;/span>.&lt;span style="color:#58a1dd">size&lt;/span>() &lt;span style="color:#ff636f">&amp;gt;&lt;/span> &lt;span style="color:#a6be9d">2&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">target&lt;/span>.&lt;span style="color:#58a1dd">target&lt;/span> &lt;span style="color:#ff636f">=&lt;/span> &lt;span style="color:#58a1dd">strv&lt;/span>[&lt;span style="color:#a6be9d">2&lt;/span>];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">return&lt;/span> &lt;span style="color:#58a1dd">true&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">// https://github.com/fcharlie/bela/blob/728a4b726f303e7c861823232991de7fdea4d992/src/belawin/reparsepoint.cc#L278
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span>&lt;span style="color:#58a1dd">std&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">optional&lt;/span>&lt;span style="color:#ff636f">&amp;lt;&lt;/span>&lt;span style="color:#58a1dd">std&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">wstring&lt;/span>&lt;span style="color:#ff636f">&amp;gt;&lt;/span> &lt;span style="color:#58a1dd">RealPathEx&lt;/span>(&lt;span style="color:#58a1dd">std&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">wstring_view&lt;/span> &lt;span style="color:#58a1dd">src&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">bela&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">error_code&lt;/span> &lt;span style="color:#ff636f">&amp;amp;&lt;/span>&lt;span style="color:#58a1dd">ec&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">FileReparser&lt;/span> &lt;span style="color:#58a1dd">reparser&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">if&lt;/span> (&lt;span style="color:#ff636f">!&lt;/span>&lt;span style="color:#58a1dd">reparser&lt;/span>.&lt;span style="color:#58a1dd">FileDeviceLookup&lt;/span>(&lt;span style="color:#58a1dd">src&lt;/span>, &lt;span style="color:#58a1dd">ec&lt;/span>)) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">if&lt;/span> (&lt;span style="color:#58a1dd">ec&lt;/span>.&lt;span style="color:#58a1dd">code&lt;/span> &lt;span style="color:#ff636f">==&lt;/span> &lt;span style="color:#58a1dd">ERROR_NOT_A_REPARSE_POINT&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">ec&lt;/span>.&lt;span style="color:#58a1dd">code&lt;/span> &lt;span style="color:#ff636f">=&lt;/span> &lt;span style="color:#a6be9d">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">return&lt;/span> &lt;span style="color:#58a1dd">std&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">make_optional&lt;/span>(&lt;span style="color:#58a1dd">bela&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">PathAbsolute&lt;/span>(&lt;span style="color:#58a1dd">src&lt;/span>));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">return&lt;/span> &lt;span style="color:#58a1dd">std&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">nullopt&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">switch&lt;/span> (&lt;span style="color:#58a1dd">reparser&lt;/span>.&lt;span style="color:#58a1dd">buffer&lt;/span>&lt;span style="color:#ff636f">-&amp;gt;&lt;/span>&lt;span style="color:#58a1dd">ReparseTag&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">case&lt;/span> &lt;span style="color:#58a1dd">IO_REPARSE_TAG_APPEXECLINK&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">if&lt;/span> (&lt;span style="color:#58a1dd">AppExecTarget&lt;/span> &lt;span style="color:#58a1dd">target&lt;/span>; &lt;span style="color:#58a1dd">DecodeAppLink&lt;/span>(&lt;span style="color:#58a1dd">reparser&lt;/span>.&lt;span style="color:#58a1dd">buffer&lt;/span>, &lt;span style="color:#58a1dd">target&lt;/span>)) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">return&lt;/span> &lt;span style="color:#58a1dd">std&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">make_optional&lt;/span>(&lt;span style="color:#58a1dd">std&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">move&lt;/span>(&lt;span style="color:#58a1dd">target&lt;/span>.&lt;span style="color:#58a1dd">target&lt;/span>));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">ec&lt;/span> &lt;span style="color:#ff636f">=&lt;/span> &lt;span style="color:#58a1dd">bela&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">make_error_code&lt;/span>(&lt;span style="color:#a6be9d">1&lt;/span>, &lt;span style="color:#a6be9d">L&lt;/span>&lt;span style="color:#a6be9d">&amp;#34;BAD: unable decode AppLinkExec&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">return&lt;/span> &lt;span style="color:#58a1dd">std&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">nullopt&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">case&lt;/span> &lt;span style="color:#58a1dd">IO_REPARSE_TAG_SYMLINK&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">CloseHandle&lt;/span>(&lt;span style="color:#58a1dd">reparser&lt;/span>.&lt;span style="color:#58a1dd">FileHandle&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">reparser&lt;/span>.&lt;span style="color:#58a1dd">FileHandle&lt;/span> &lt;span style="color:#ff636f">=&lt;/span> &lt;span style="color:#58a1dd">INVALID_HANDLE_VALUE&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">if&lt;/span> (&lt;span style="color:#ff636f">auto&lt;/span> &lt;span style="color:#58a1dd">target&lt;/span> &lt;span style="color:#ff636f">=&lt;/span> &lt;span style="color:#58a1dd">bela&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">RealPath&lt;/span>(&lt;span style="color:#58a1dd">src&lt;/span>, &lt;span style="color:#58a1dd">ec&lt;/span>); &lt;span style="color:#58a1dd">target&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">return&lt;/span> &lt;span style="color:#58a1dd">std&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">make_optional&lt;/span>(&lt;span style="color:#58a1dd">std&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">move&lt;/span>(&lt;span style="color:#ff636f">*&lt;/span>&lt;span style="color:#58a1dd">target&lt;/span>));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">return&lt;/span> &lt;span style="color:#58a1dd">std&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">nullopt&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">case&lt;/span> &lt;span style="color:#58a1dd">IO_REPARSE_TAG_GLOBAL_REPARSE&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">if&lt;/span> (&lt;span style="color:#58a1dd">std&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">wstring&lt;/span> &lt;span style="color:#58a1dd">target&lt;/span>; &lt;span style="color:#58a1dd">DecodeSymbolicLink&lt;/span>(&lt;span style="color:#58a1dd">reparser&lt;/span>.&lt;span style="color:#58a1dd">buffer&lt;/span>, &lt;span style="color:#58a1dd">target&lt;/span>)) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">return&lt;/span> &lt;span style="color:#58a1dd">std&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">make_optional&lt;/span>(&lt;span style="color:#58a1dd">std&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">move&lt;/span>(&lt;span style="color:#58a1dd">target&lt;/span>));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">ec&lt;/span> &lt;span style="color:#ff636f">=&lt;/span> &lt;span style="color:#58a1dd">bela&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">make_error_code&lt;/span>(&lt;span style="color:#a6be9d">1&lt;/span>, &lt;span style="color:#a6be9d">L&lt;/span>&lt;span style="color:#a6be9d">&amp;#34;BAD: unable decode Global SymbolicLink&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">return&lt;/span> &lt;span style="color:#58a1dd">std&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">nullopt&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">default&lt;/span>&lt;span style="color:#ff636f">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">break&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">return&lt;/span> &lt;span style="color:#58a1dd">std&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">make_optional&lt;/span>&lt;span style="color:#ff636f">&amp;lt;&lt;/span>&lt;span style="color:#58a1dd">std&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">wstring&lt;/span>&lt;span style="color:#ff636f">&amp;gt;&lt;/span>(&lt;span style="color:#58a1dd">src&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>对于 &lt;code>AppExecutionAlias&lt;/code>，我们可以先使用 &lt;code>Target&lt;/code> 作为其真实路径，然后再去解析 PE 文件的子系统，这样就能避免 PowerShell 的那个问题发生。解析符号链接时，为了避免需要繁琐的解析目标文件，我们重新使用 &lt;code>bela::RealPath&lt;/code> 获得真实路径。&lt;/p>
&lt;h2 id="最后">最后&lt;/h2>
&lt;p>在 Windows 中，比如 Git for VFS，Azure，OneDrive，Container 等服务或者功能也都使用了特定的重解析点。有兴趣可以去了解一下。&lt;/p>
- https://forcemz.net/posts/2020/2020-04-24-realpath/ - Copyright (c) 2009-2024 J23</description></item><item><title>谈吃肉</title><link>https://forcemz.net/posts/2020/2020-01-10-talking-about-eating-pork/</link><pubDate>Fri, 10 Jan 2020 10:00:00 +0800</pubDate><guid>https://forcemz.net/posts/2020/2020-01-10-talking-about-eating-pork/</guid><description>江二十三的思考 https://forcemz.net/posts/2020/2020-01-10-talking-about-eating-pork/ -&lt;p>2019 年早已过去，这年下半年最显著的感受是肉价腾贵，11 月初，听闻凯哥来深出差，于周日邀请他来住所做饭吃。或是许久未吃过回锅肉，买菜的时候，凯哥特意要求称了一块价值 16 元的猪肉，单价 40 一斤。若做其它肉菜，本以为够哥俩吃一顿，但回锅肉却是需要分量的，那一顿吃的颇不尽兴。一周之后，在浪基住处又做了一次回锅肉，此时购买了两块共计四十块的猪肉，此次回锅肉依然没有吃尽兴，不过好在还有我带过去的腊牛肉，干豆角，小干鱼，以及主人家买的基围虾，秋葵，牛肉反而吃得尽兴。&lt;/p>
&lt;p>从记事起，从未见过普普通通的猪肉达 40 元一斤，按照母亲所说，回锅肉至少需要一斤半才能吃顿好的，花 60 元的猪肉做一份回锅肉也忒贵了，吃肉格外不易啊。&lt;/p>
&lt;p>说起吃肉，便口水不止。猪头肉好吃，便有“凉拌猪耳挤猪头，丁香蒜泥腊卤煮”。猪骨更能做出美味，香煎排骨，龙骨煲汤，拆骨剃肉可上酒；红烧酱香卤，隆江潮汕猪脚饭。猪的内脏也是不可多得的美味，猪肚鸡，熘肝尖，卤口条，小炒腰花，干煸肥肠，青椒炒猪心，小肠灌腊肠，腊味喷香煲仔饭。里脊二刀五花肉，小炒农家一碗香，红烧狮子炖粉条，肉糜蒸蛋何不食，小炒煎炸炖煮蒸。&lt;/p>
&lt;p>中国人大抵是爱吃猪肉的，2018 年中国的猪肉消费总量是 5590 万吨，人均 40 KG。全球 1.13 约亿吨（来源：中国产业信息网），不到全球 20% 的人口消费了全球 50% 的猪。&lt;/p>
&lt;p>但 2019 年却吃不起猪肉了，非洲猪瘟来势汹汹，2018 年 8 月在国内确诊首例非洲猪瘟，截至 2019 年 10 月 12 日，全国 31 个省份发生 154 起猪瘟，累计扑杀 120 余万头，出现非洲猪瘟的养殖场复养之路漫长，2018 年处于生猪价格周期的低潮，按照经济规律，价格低时用户会减少养殖，但生猪的养殖是存在周期的，非洲猪瘟和生猪价格周期叠加造成了猪肉的短缺和价格迅速上扬，一些地方的禁养限养更加剧了这一情况。中国人逢年过节猪肉的消费都要增加，比如中秋国庆，家人团聚婚庆酒席少不了大鱼大肉。冬至过后，很多人家会腌制腊肉，需求旺盛，猪肉价格也始终维持高位。&lt;/p>
&lt;p>脊索动物门脊椎动物亚门哺乳纲真兽亚纲偶蹄目猪形亚目猪科猪属的猪其染色体 2n 是 36~38，亚种有14个，虽然染色体数目不同，但是没有生殖隔离。猪的驯化历史可能接近一万年，距今9000年前出土于河南省舞阳县贾湖遗址的猪骨已经属于家猪（&lt;a href="https://new.qq.com/omn/20190124/20190124B19OOP.html">猪年说猪：家猪的起源与驯化，以及我们的猪文化&lt;/a>），几千年间，中国人培育了 100 多种地方猪种，其中以&lt;strong>荣昌猪&lt;/strong>、&lt;strong>太湖猪&lt;/strong>、&lt;strong>金华猪&lt;/strong>、&lt;strong>宁乡猪&lt;/strong>最为著名，幼时外曾祖母家邻居墙壁上便写了&lt;strong>供应宁乡仔猪&lt;/strong>几个大字。或许是中国古人历经饥饿，这些种类的猪瘦肉占比较少，肥肉较多；这些猪种大多生长较慢，出栏时间长。建国后，生猪养殖品种主要转变为杜洛克，大约克，约克夏等，这些品种的猪肉瘦肉率较高，出栏快，但风味不如地方猪种。近些年，随着消费习惯的多样化，地方猪种的养殖再度复兴，还有一些养殖者将野猪与家猪杂交，培育的子三代（+）上市销售，受到了热捧。&lt;/p>
&lt;p>在中国的广大农村，还有一些农户会自家养殖一些鸡鸭，还有猪，尤其是山区，1998 年前，旧房子猪圈里养过猪，那时年幼我看到邻居家杀猪，便跑过去蹭饭吃，还大声的说：“我们杀了猪请你们去吃法！”，拆掉旧房子建楼房后再未养过猪，如今若不是财政批款建了鸡舍，我妈还不见的会养鸡鸭。看看我们村，渐渐的除了建养殖场养猪的农户几乎没有人家养猪了。前年南哥结婚，摩托车翻过 1000 米的新化和叙浦交界山峰，弯弯曲曲的到达南哥的老家，便看到了主人家正在剃骨分肉，猪是自家养的，猪圈里还有几头。村里人都外出了，慢慢的没几个人了，养猪的还有多少呢？&lt;/p>
&lt;p>非洲猪瘟对散户的影响是巨大的，一旦发生疫情，整年的辛勤劳动一下子化为乌有，而企业虽然也会出现巨大亏损，但企业养猪在养殖管理，融资能力要远远的强于散户，我想以后养猪的散户越来越少吧。&lt;/p>
&lt;p>父亲曾说过在他小时候只有在家里来了客人后才会端上猪肉，待客人离开，奶奶便将猪肉收入碗柜，父亲偷食便会被筷子打手。2018 年人均 40 KG，似乎再也不愁肉吃了，就算肉价腾贵，总还有鸡肉，鸭肉，牛肉可以替代。但世上还有很多人没那么多肉食，非洲还很多人无法填饱肚子，倘若这些人都要吃得这么多肉，地球受的起吗？以 2.4 （这是非常高的料肉比）的料肉比计算，5590 万吨的猪肉需要 13416 万吨饲料，中国 2019 年粮食产量为 66384 万吨。夸张的说，需要 1/5 的粮食来养猪。当然这只是一个不精确的计算，实际情况复杂很多，另外中国还要进口大量的粮食，特别是绝大多数大豆都是进口的。&lt;/p>
&lt;p>近几年，人造肉在国外火了起来，人造肉有两个流派，一个是植物蛋白合成人造肉，一个是组织培养人造肉，前者需要添加血红蛋白实际感受较差，后者缺乏风味物质，好吃的人造肉之路漫长。以后会不会有人造猪肉呢？可能是有的，培养猪组织细胞若脂肪细胞能有一定占比，或许人造肉的风味不差。如果能够实现新能源人工合成葡萄糖，人工合成有机物，有机物培养人造肉，那么人类的未来还是很好的。&lt;/p>
&lt;p>脑子里构思吃肉这篇文章很久，但真正写作时才发现语噎词穷，近些日子，天天观看各种美食节目，猪年已入尾声，年关将近，愿归乡后能做顿好的以谢父母。&lt;/p>
- https://forcemz.net/posts/2020/2020-01-10-talking-about-eating-pork/ - Copyright (c) 2009-2024 J23</description></item><item><title>探讨 Git 代码托管平台的若干问题 - 2019 版</title><link>https://forcemz.net/posts/2019/2019-10-01-explore-some-issues-with-git-host/</link><pubDate>Tue, 01 Oct 2019 10:00:00 +0800</pubDate><guid>https://forcemz.net/posts/2019/2019-10-01-explore-some-issues-with-git-host/</guid><description>江二十三的思考 https://forcemz.net/posts/2019/2019-10-01-explore-some-issues-with-git-host/ -&lt;h2 id="关于-git">关于 Git&lt;/h2>
&lt;p>版本控制软件种类繁多，维基百科收录的最早的版本控制系统是 1972 年贝尔实验室开发的 &lt;a href="https://en.wikipedia.org/wiki/Source_Code_Control_System">Source Code Control System&lt;/a>。1986 年 &lt;a href="https://en.wikipedia.org/wiki/Concurrent_Versions_System">Concurrent Versions System(CVS)&lt;/a> 诞生，CVS 曾非常流行，但今时用之寥寥无几，不过 OpenBSD 仍在使用 CVS。2000 年 CollabNet 创建了 Subversion 项目，2009年，Subversion 被 Apache 基金会接受成为顶级项目并被命名为 &lt;a href="https://en.wikipedia.org/wiki/Apache_Subversion">Apache Subversion&lt;/a>。2005 年 &lt;a href="https://en.wikipedia.org/wiki/Git">Linus Torvalds&lt;/a> 创建了 Git，2007 Github 诞生后，Git 随着 Github 的发展愈发流行，14 年间，Git 成为了最流行的版本控制系统，无论是 Windows 还是 Linux 或是 Android，MySQL 等等大型软件都使用 git 进行版本控制。纵观版本控制系统流行史，前有 CVS 后有 SVN，今日 Git 更风流。俱往矣，数风流人物，还看今朝，版本控制系统莫不如斯。&lt;/p>
&lt;p>与 CVS/Subversion 这种集中式版本控制系统不同的是，Git 的存储库数据会被存储在本地，提交也是发生在本地，远程可以看作是本地存储库的一个镜像。而 CVS/Subversion 的提交都是在线的。这就是分布式版本控制系统的核心特征。（理解这一问题的关联在于区分工作树 &lt;code>worktree&lt;/code> 和存储库 &lt;code>repository&lt;/code>。）&lt;/p>
&lt;p>Git 的源码托管在 &lt;a href="https://git.kernel.org/pub/scm/git/git.git/">git.kernel.org&lt;/a> 上，Github 上也有只读镜像 &lt;a href="https://github.com/git/git">github.com/git/git&lt;/a>。Git 主页 &lt;a href="https://git-scm.com">https://git-scm.com&lt;/a> 的网页源码则托管在 Github 上。通常给 git 提交 PR 需要注册 &lt;a href="https://public-inbox.org">public-inbox.org&lt;/a> 邮件列表，然后发送补丁。者通常比较麻烦，好在有微软开发者&lt;a href="https://github.com/dscho">Johannes Schindelin&lt;/a> 使用 TypeScript 开发 &lt;a href="https://github.com/gitgitgadget/gitgitgadget">gitgitgadget&lt;/a> ，当你在 Github 上像 &lt;a href="https://github.com/gitgitgadget/git">gitgitgadget/git&lt;/a> 提交 PR 时，gitgitgadget 会将你的 PR 发送到 public-inbox，一旦补丁被 git 维护者接受，gitgitgadget 则会关闭那个 PR。gitgitgadget 简化了给 git 贡献代码的难度，省去了注册 Inbox 的麻烦，这年头开发者大多都有 Github 帐号。我就使用 gitgitgadget 给 git 提交了一个&lt;a href="https://github.com/gitgitgadget/git/pull/69">补丁&lt;/a>用于支持 HTTP/2。&lt;/p>
&lt;p>&lt;a href="https://github.com/dscho">Johannes Schindelin&lt;/a> 此人也是 &lt;a href="https://github.com/git-for-windows/git">git-for-windows&lt;/a> 的维护者。
Git 的维护者则是 Google 的开发者 &lt;a href="https://github.com/gitster">Junio C Hamano&lt;/a>。大多数 Git 开发者来自于 Google/Microsoft（包括 Github）。libgit2 的开发者主要来自 Microsoft（包括 Github）。而 JGit 的开发者则主要来自 Google。已故 JGit 的创始人 Shawn Pearce 还开发了著名的 &lt;a href="https://www.gerritcodereview.com/">Gerrit Code Review&lt;/a>。这些开发者的无私奉献才能使我们用上这么优秀的版本控制系统，感谢他们的付出。&lt;/p>
&lt;p>Git 与远程存储库之间的传输协议有 HTTP, GIT(&lt;code>git://&lt;/code>)，SSH. 在 &lt;a href="https://git-scm.com/book/en/v2/Git-on-the-Server-The-Protocols">《Pro Git - 2nd Edition》4.1 Git on the Server - The Protocols&lt;/a> 中有介绍。其中 HTTP 协议包括哑协议和智能协议，由于哑协议是只读协议，目前大多数代码托管平台均不再提供支持。HTTP 智能协议和 GIT 协议，SSH 协议类似，都是特定几组 客户端/服务端 git 命令之间的输入输出数据传输和交换。Git 传输协议较为简单，以智能传输协议 v1 为例，基本的 &lt;code>fetch/push&lt;/code> 流程如下：&lt;/p>
&lt;p>Git 拉取流程：&lt;/p>
&lt;p>&lt;img src="https://s1.ax1x.com/2020/09/20/w7i84e.png" alt="Fetch Flow">&lt;/p>
&lt;p>Git 推送流程：&lt;/p>
&lt;p>&lt;img src="https://s1.ax1x.com/2020/09/20/w7iaut.png" alt="Push Flow">&lt;/p>
&lt;p>虽然在 2018 年 5 月，git 推出了 &lt;a href="https://opensource.googleblog.com/2018/05/introducing-git-protocol-version-2.html">&lt;code>Wire Protocol&lt;/code>&lt;/a>（即 Git v2 协议），增加了 Git 协议的复杂性，但在服务器上支持 git 协议（包括 v2 协议）仍然只需要在服务器上运行 git-upload-pack/git-receive-pack。这使得开发者很容易实现对 git 协议的支持。正因为 Git 协议表征的简单，所以针对不同的用户和存储库数量规模，Git 也都比 Subversion，Mercurial 有更多的选择。&lt;/p>
&lt;p>Git 使用文件快照记录文件变更，当对象存储到松散文件目录时，每一次大小不变的文件修改相当于存储库中增加特定文件的大小，Git 使用 zlib &lt;a href="https://en.wikipedia.org/wiki/DEFLATE">deflate&lt;/a> 压缩对象，对象头包括对象类型，原始大小。基于快照的方式使得 Git 在提交代码，检出文件时都比较高效，但存储库的占用缺比较高。但运行 &lt;code>git gc&lt;/code> 时，Git 会将松散的对象打包到 pack 文件中，这个时候会使用特定的机制存储一部分文件的 &lt;code>OFS_DELTA&lt;/code>，这样就能节省一部分空间。&lt;/p>
&lt;p>zlib（deflate） 压缩算法通常来说除了没有版权限制，无论是压缩比还是速度，CPU 使用率都不是一个最佳的选择，引用来自的 &lt;a href="https://github.com/facebook/zstd/tree/2164a130f353e64a1e89c8e60f36cf2498ab1eea#benchmarks">https://github.com/facebook/zstd&lt;/a> 基准测试，zlib 看起来必后起之秀 &lt;code>brotli&lt;/code>/&lt;code>zstd&lt;/code> 差多了：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Compressor name&lt;/th>
&lt;th>Ratio&lt;/th>
&lt;th>Compression&lt;/th>
&lt;th>Decompress.&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>zstd 1.4.0 -1&lt;/td>
&lt;td>2.884&lt;/td>
&lt;td>530 MB/s&lt;/td>
&lt;td>1360 MB/s&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>zlib 1.2.11 -1&lt;/strong>&lt;/td>
&lt;td>2.743&lt;/td>
&lt;td>110 MB/s&lt;/td>
&lt;td>440 MB/s&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>brotli 1.0.7 -0&lt;/td>
&lt;td>2.701&lt;/td>
&lt;td>430 MB/s&lt;/td>
&lt;td>470 MB/s&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>quicklz 1.5.0 -1&lt;/td>
&lt;td>2.238&lt;/td>
&lt;td>600 MB/s&lt;/td>
&lt;td>800 MB/s&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>lzo1x 2.09 -1&lt;/td>
&lt;td>2.106&lt;/td>
&lt;td>680 MB/s&lt;/td>
&lt;td>950 MB/s&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>lz4 1.8.3&lt;/td>
&lt;td>2.101&lt;/td>
&lt;td>800 MB/s&lt;/td>
&lt;td>4220 MB/s&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>snappy 1.1.4&lt;/td>
&lt;td>2.073&lt;/td>
&lt;td>580 MB/s&lt;/td>
&lt;td>2020 MB/s&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>lzf 3.6 -1&lt;/td>
&lt;td>2.077&lt;/td>
&lt;td>440 MB/s&lt;/td>
&lt;td>930 MB/s&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>当开发者要将 git 集成到其他软件或者系统中时，可以通过命令行调用 git 命令捕获输出，也可以使用 libgit2/JGit 等库。&lt;/p>
&lt;p>libgit2 最初是由 Shawn Pearce 创建了&lt;a href="https://github.com/libgit2/libgit2/tree/c15648cbd059b92c177586ab1701a167222c7681">初始 commit&lt;/a>。目前主要维护者来自微软。libgit2 提供一些基础的 API，功能基本上是完整的，除了一部分实现性能没有 git 那么好，其他方面令人满意，并且有多种语言绑定，包括 C++/D/Golang/Ruby/.NET/Node.js/Perl/Perl6/Ruby/Rust 等等。Gitee 原生钩子就使用了 libgit2，Gitee-gitlab 项目使用了 rugged。&lt;/p>
&lt;p>JGit 也是有 Shawn Pearce 创建的，目前属于 Eclipse 基金会，运行在 JVM 上，国内腾讯的工峰的 TGit 也是使用的 JGit。&lt;/p>
&lt;p>在 &lt;a href="https://git.github.io/rev_news/2019/02/27/edition-48/">Git Rev News 第48期&lt;/a>，编辑推荐了 &lt;a href="https://github.com/src-d/gitbase">gitbase&lt;/a> 通过 SQL 的方式查询 git 存储库，这个工具基于 &lt;a href="https://github.com/src-d/go-git">src-d/go-git&lt;/a>，go-git 是纯 Golang 实现的，如果基于 Golang 的项目需要简单的读写存储库，可以使用 go-git。与 libgit2 的 Golang 绑定 git2go 相比，不需要使用 CGO。&lt;/p>
&lt;p>当然还有一些其他的 git 实现，大多是实验性的，不建议用于生产环境，比如基于 Rust 的 &lt;a href="https://github.com/chrisdickinson/git-rs">git-rs&lt;/a>。&lt;/p>
&lt;h2 id="不同伸缩性的-git-代码托管平台">不同伸缩性的 Git 代码托管平台&lt;/h2>
&lt;h3 id="基于内置工具搭建-git-代码托管服务">基于内置工具搭建 Git 代码托管服务&lt;/h3>
&lt;p>Git 最初由 Linus Torvalds 开发用来取代 BitKeeper 作为 Linux 内核源码的版本控制工具，所以 Git 一直和 Linux 内核源码托管在同一个服务器上。官方地址是：&lt;a href="https://git.kernel.org/">https://git.kernel.org/&lt;/a>。在 git.kernel.org 上，Git 代码托管功能是由 git 内置的工具实现的。用户使用 HTTPS 协议访问 &lt;a href="https://git.kernel.org/">https://git.kernel.org/&lt;/a> 时，Nginx 会以 CGI 的方式将浏览器的请求转发到 &lt;a href="https://git.wiki.kernel.org/index.php/Gitweb">GitWeb&lt;/a>。GitWeb 是一个使用 Perl 编写的 CGI 程序，为用户提供简单的 git 在线交互图形界面。GitWeb 的源码地址可以在 &lt;a href="https://github.com/git/git/blob/master/gitweb/gitweb.perl">Github Git 镜像&lt;/a> 中查看。GitWeb 界面比较不够精美，相比于 Github 这样的代码托管平台，功能寥寥无几。当用户需要使用 HTTP/HTTPS 协议拉取推送源码时，Nginx 会以 CGI的方式将请求转发给 &lt;a href="https://git-scm.com/docs/git-http-backend">git-http-backend&lt;/a> 处理。git-http-backend 是 &lt;strong>Git Over HTTP&lt;/strong> 的服务端实现。当用户 GIT 协议 (&lt;code>git://&lt;/code>) 在 git.kernel.org 上拉取源码是，请求会被 &lt;a href="https://git-scm.com/docs/git-daemon">git-daemon&lt;/a> 处理。&lt;a href="https://git-scm.com/docs/git-daemon">git-daemon&lt;/a> 默默的监听 9418 端口，静静的等待 git 客户端的访问。&lt;/p>
&lt;p>使用 Git 内置的 GitWeb/git-http-backend/git-daemon，我们能够搭建一个简易的 Git 代码托管服务器，但这里没有 SSH 协议支持。而实现 SSH 协议支持也非常简单，只需要在服务器上运行 &lt;code>sshd&lt;/code> (OpenSSH)，并允许命令 &lt;code>git-upload-pack/git-receive-pack/git-upload-archive&lt;/code> 命令的运行，对于 SSH 协议的验证，我们则可以使用 &lt;code>authorized_keys&lt;/code> 机制，将需要允许的用户的 SSH 公钥添加到 &lt;code>authorized_keys&lt;/code> 文件。&lt;/p>
&lt;p>这种方案通常使用 &lt;a href="https://gitolite.com/gitolite/">Gitolite&lt;/a> 增强访问控制，Gitolite 主要使用 Perl 编写，这和 GitWeb 一致，ssh 的验证是将 &lt;a href="https://github.com/sitaramc/gitolite/blob/master/src/gitolite-shell">gitolite-shell&lt;/a> 添加到 &lt;code> ~/.ssh/authorized_keys&lt;/code> 中被 sshd 调用实现的。git.kernenl.org 正是使用 Gitolite 实现 Git Over SSH 访问控制。&lt;/p>
&lt;p>&lt;a href="https://git.kernel.org/">https://git.kernel.org/&lt;/a> 网站托管了 Linux 内核源码，驱动，文档等大概有 1000 多个存储库，较大的存储库比如 Linux 内核源码磁盘占用大概是 2GB，因此在理想情况下，一块 2TB 磁盘的服务器便可支撑 &lt;a href="https://git.kernel.org/">https://git.kernel.org/&lt;/a> 这个网站的运行（实际情况则并不是如此，由于 Linux 内核的流行，git.kernel.org 的请求将比较多，对硬件的需求将更高一点）。基于 Git 内置功能搭建的代码托管服务，麻雀虽小五脏俱全，不过回过头来说，这样的代码托管服务功能有限，可伸缩性和扩展性不佳。&lt;/p>
&lt;h3 id="小型的-git-代码托管平台">小型的 Git 代码托管平台&lt;/h3>
&lt;p>当用户需要搭建一个几人到几十几百人规模的 Git 代码托管服务，通常有非常多的选择，下面是几个目前仍然比较活跃的小型 Git 代码托管平台。&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>名称&lt;/th>
&lt;th>平台&lt;/th>
&lt;th>语言&lt;/th>
&lt;th>技术概述&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;a href="https://github.com/jakubgarfield/Bonobo-Git-Server">Bonobo Git Server&lt;/a>&lt;/td>
&lt;td>Windows Only&lt;/td>
&lt;td>C#&lt;/td>
&lt;td>基于 .Net Famework 4.6（迁移到 .Net Core 的建议在 2017 年便被提出，但截至目前仍为迁移到 .Net Core）。使用 &lt;a href="https://github.com/libgit2/libgit2sharp/">LibGit2Sharp&lt;/a> 操作存储库，但版本较老，不支持 SSH 协议访问。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a href="https://github.com/gogs/gogs">Gogs&lt;/a>&lt;/td>
&lt;td>Cross Platform&lt;/td>
&lt;td>Golang&lt;/td>
&lt;td>基于 Golang 编写，Web 读写 Git 存储库由 &lt;a href="https://github.com/gogs/git-module">git-module&lt;/a> 封装 Git 命令实现，SSH 由 Golang &lt;a href="https://github.com/golang/crypto/tree/master/ssh">crypto/ssh&lt;/a> 提供，支持多种数据库，是一个极简的代码托管平台，可以在 Raspberry Pi 上运行&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a href="https://github.com/go-gitea/gitea">Gitea&lt;/a>&lt;/td>
&lt;td>Cross Platform&lt;/td>
&lt;td>Golang&lt;/td>
&lt;td>是 Gogs 的开源分叉，Web 读写 Git 存储库使用了 &lt;a href="https://github.com/src-d/go-git">src-d/go-git&lt;/a>，使用 &lt;a href="https://github.com/gliderlabs/ssh">gliderlabs/ssh&lt;/a> 提供 SSH 接入功能，支持多种数据库，可以在 Raspberry Pi 上运行。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a href="https://github.com/gitbucket/gitbucket">GitBucket&lt;/a>&lt;/td>
&lt;td>Cross Platform&lt;/td>
&lt;td>Scala/Java&lt;/td>
&lt;td>使用 &lt;a href="https://github.com/apache/mina-sshd">Apache Mina SSHD&lt;/a> 实现 SSH 功能。Mina SSHD 还专门针对 JGit 实现了一个 &lt;a href="https://github.com/apache/mina-sshd/tree/master/sshd-git">sshd-git&lt;/a> 模块，但 GitBucket 是直接使用 JGit 的 &lt;a href="https://github.com/eclipse/jgit/blob/master/org.eclipse.jgit/src/org/eclipse/jgit/transport">&lt;code>transport&lt;/code>&lt;/a> 相关类。Eclipse JGit 主要由 Google 开发者参与贡献。&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>除了上述定位为代码托管平台的服务，还有像 &lt;a href="https://www.phacility.com/">Phabricator&lt;/a> 这样的 Web 软件也提供 Git 代码托管功能，但 Phabricator 的重点更多是缺陷追踪，代码审核。LLVM &lt;a href="https://reviews.llvm.org/">https://reviews.llvm.org/&lt;/a> 和 libssh &lt;a href="https://bugs.libssh.org/">https://bugs.libssh.org/&lt;/a> 就是基于 Phabricator。&lt;/p>
&lt;h3 id="云服务级别的-git-代码托管平台">云服务级别的 Git 代码托管平台&lt;/h3>
&lt;p>随着用户规模和存储库规模的增长，达到一定级别后，上述代码托管平台往往变得力不从心，而下面的代码托管平台却深耕于此，能够支撑巨大规模的用户量和存储库数量。&lt;/p>
&lt;p>&lt;a href="https://github.com">Github&lt;/a> 是全球最大的代码托管平台，目前 Github &lt;a href="https://github.com/about">官方数据&lt;/a>显示注册用户数量为 4000万，项目数量为 1亿。Github 网站主要的技术是 &lt;a href="https://rubyonrails.org/">Ruby on Rails&lt;/a> 内部进程名为 &lt;code>github-unicorn&lt;/code>，最近他们将其升级到了 &lt;a href="https://github.blog/2019-09-09-running-github-on-rails-6-0/">Rails 6.0&lt;/a>。Github 使用 Spokes 负责文件系统上存储库的复制，同步和备份。Github 之前使用 libssh 开发 Git SSH 服务器，目前的 SSH 服务器的标识为 &lt;code>babeld-*&lt;/code>，但不确定 babeld 是否依然基于 libssh。Git 验证服务为 &lt;code>github-gitauth&lt;/code>。Github 的大多数服务都是闭源的，因此分析 Github 的技术内幕通常是 Github 官方的一些技术博客， 当然也可以分析 &lt;code>Github Enterprise&lt;/code> 去窥测 Github 内幕。&lt;/p>
&lt;p>关于 Github Spokes 的大致原理可以阅读 &lt;a href="https://githubengineering.com/introducing-dgit/">Introducing DGit&lt;/a> 和 &lt;a href="https://github.blog/2016-09-07-building-resilience-in-spokes/">Building resilience in Spokes&lt;/a>。&lt;/p>
&lt;p>在开发 &lt;a href="https://gitlab.com/gitlab-org/gitaly">Gitaly&lt;/a> 之后， &lt;a href="https://gitlab.com">Gitlab&lt;/a> 摆脱了 NFS 的禁锢，在平台的伸缩性方面得到了巨大的提升。要知道 Gitlab 使用 Gitaly 的原因可以阅读 &lt;a href="https://about.gitlab.com/2018/09/12/the-road-to-gitaly-1-0/">The road to Gitaly v1.0&lt;/a>。Gitaly 使用 RPC 将存储服务器上的 git 命令包转成前端服务机器上的 git 命令，并为 gitlab 服务提供存储库的读写。 Gitlab 的 SSH 功能仍然由 OpenSSH 提供，而一些静态资源，文件下载，附件等功能则由 Golang 编写的 &lt;a href="https://gitlab.com/gitlab-org/gitlab-workhorse">gitlab-workhorse&lt;/a> 实现，gitlab-workhorse 需要与 Gitaly 通信。&lt;/p>
&lt;p>&lt;a href="https://bitbucket.org">Bitbucket&lt;/a> 是 &lt;a href="https://www.atlassian.com">Atlassian&lt;/a> 开发的代码托管平台，与 Github/Gitlab 不同，Bitbucket 还提供了原生 Mercurial 支持，不过最近，Bitbucket 宣布要逐步关闭 Mercurial 的支持。Atlassian 还开发了 Jira/Sourcetree 这样著名的软件，Bitbucket 源码没有开发，推测主要使用 Java 技术栈（这个从一次 Bitbucket VFSForGit 安装包分析可得）。&lt;/p>
&lt;p>&lt;a href="https://gitee.com">Gitee&lt;/a> 是目前国内最大的代码托管平台之一，早在 2015 年便开始了分布式改造，并编写了一系列服务实现分布式架构，编写了 Nginx 路由模块实现动态路由，基于 libssh 开发了 Basalt v1 SSH 服务器，基于 Golang 开发了 Basalt v2 SSH 服务器，还开发了 git-srv 智能服务后端，brzox Git HTTP/Archive 服务。以及 git-diamond git 协议内部传输服务等等。Gitee 最初代码基于 Gitlab，几年之间已经与 Gitlab 有了很大的差异，现在 Gitee 已经逐步将一些功能从 gitlab 中剥离，实现云平台的微服务，比如目前的 git/svn/hook 验证服务是基于 Golang 编写的 banjo。Gitee 需要以有限的硬件实现更多的用户接入，所以在服务的设计上更倾向于提供资源使用率，对一些比较容易造成计算资源紧张的服务进行降级。&lt;/p>
&lt;h2 id="git-代码托管平台服务实现">Git 代码托管平台服务实现&lt;/h2>
&lt;!--SSH/HTTP/GIT, LFS, GitVFS....-->
&lt;p>Git 代码托管平台的基本服务应该包括浏览器接入支持和 git 客户端接入支持，前者需要平台开发网页提供若干服务供用户访问。后者需要支持 git 客户端推拉代码。通过网站访问存储库意味着 HTTP 服务需要通过一定的途径读写存储库，在 GitWeb 中，这通常使用 git 命令实现，比如使用 &lt;code>git tree&lt;/code> 查看 &lt;code>tree&lt;/code>，使用 &lt;code>git archive&lt;/code> 打包文件等等。在 Gogs 中，使用的 &lt;a href="https://github.com/gogs/git-module">git-module&lt;/a> 同样使用了命令读写存储库。而 Gogs 的分叉 Gitea 则使用的是 &lt;a href="https://github.com/src-d/go-git">src-d/go-git&lt;/a> 读写存储库。实际上我们常常有那种感觉，使用命令行可能会比直接调用 API 慢，并且错误难以处理，这通常是对的。比如我们查看 &lt;code>HEAD&lt;/code> 对应的引用，使用命令我们可以运行 &lt;code>git symbolic-ref HEAD&lt;/code>，运行这个命令我们需要 fork 出一个进程，fork 成功后马上在子进程中执行 exec git symbolic-ref，为了读取 git symbolic-ref 的输出，我们还需要创建几对 Pipe，并检测 git symbolic-ref 的退出值。而使用 libgit2 API 我们只需要调用 &lt;code>git_repository_open&lt;/code>,&lt;code>git_reference_open&lt;/code>,&lt;code>git_reference_symbolic_target&lt;/code> 即可拿到对应的引用。而对于服务程序而言，fork-exec 的代价可能不小。当然你也可以直接使用 &lt;code>open(&amp;quot;/path/to/.git/HEAD&amp;quot;)&lt;/code> 然后解析 HEAD 对应的引用。GitBucket 使用 JGit 读写存储库，Gitlab 曾经历了 Grit (Grit 部分命令部分 Git 纯 Ruby 实现，Github 曾经使用)。后来的 Rugged，到现在 Gitaly 的纯命令 + Ruby Repository（Gitlab 现在的架构我对其保留意见，至少 IO 复制将增加多次）。Github 目前使用 Rugged 读写存储库，当然一些更多的细节因为没有源码不得而知。Gitee 目前使用 Rugged，但一部分 libgit2 实现不佳的则直接采用 git 命令实现。&lt;/p>
&lt;p>实现 Git Over HTTP，Gitlab 最初采用了 Grack, 运行在 &lt;code>unicorn&lt;/code> 中的 Grack 并发有限且容易影响 Web 访问（即 Git 请求较多时，Web 拒绝服务），而基于 Golang 开发的 Gogs，Gitea 使用 Golang 原生 HTTP 库编写 Git HTTP Server 功能，这要比 Grack 好要好很多，Golang HTTP 模型能够支撑更多的并发。目前 Gitee 的 Git HTTP Server Brzox 也是使用 Golang 编写。&lt;/p>
&lt;p>实现 Git Over SSH，Gitlab 目前依然使用的是 OpenSSH，而不像 Github/BitBucket/Gitee 直接编写 SSH 服务器，直接编写 SSH 服务器可以禁用 SSH 登录，自定义错误消息，简化验证流程，减少数据拷贝。Github 早先是基于 libssh 编写的 SSH Server, 目前不得而知。BitBucket 技术上偏向 Java, 则有可能使用 Apache Mina SSHD, GitBucket 使用 Apache Mina SSHD + JGit 实现 Git Over SSH 功能。而 Gogs/Gitea 在虽然使用 Golang crypto/ssh 编写了 SSH 服务，但在实现时仍然使用了中间命令，这就导致数据拷贝次数的增加，观测 Gogs/Gitea 的各种服务实现，这可能是设计不足的妥协吧。&lt;/p>
&lt;p>实现 Git Over TCP （git:// 协议）也非常简单，但 Git 协议并不提供验证机制，Git 代码托管平台提不提供 Git 协议支持也无关紧要，但 Git 协议无需加密，协议简单，作为平台内部传输服务倒是可以，目前 Gitee 使用 C++ Asio 编写 git-diamond 支持内部同步，企业存储库备份等功能。&lt;/p>
&lt;h2 id="git-代码托管平台的伸缩性">Git 代码托管平台的伸缩性&lt;/h2>
&lt;!--存储库分片，分布式文件系统-->
&lt;p>伸缩性是 Git 代码托管能否支撑成千上万用户/存储库的重要指标。像 Gogs/Gitea 这样的代码托管系统尽量认为自身运行在单一服务器上，因此这类 Git 代码托管平台伸缩性非常有限，当然如果使用 NFS/Ceph 这类分布式文件系统能够在单一服务器上支持更多的存储库，但 NFS/Ceph 这种分布式系统的做为 Git 代码托管系统的存储层，除了分布式文件系统带来的性能下降，还会带来内网带宽过高等更多的问题。&lt;/p>
&lt;p>我们以使用 NFS 挂载实现伸缩性的平台和 Gitee 分布式模型 git 请求 对比，I/O 细节简化如下：&lt;/p>
&lt;p>NFS I/O 细节：&lt;/p>
&lt;p>&lt;img src="https://s1.ax1x.com/2020/09/20/w7idDP.png" alt="NFS">&lt;/p>
&lt;p>Gitee Basalt I/O 细节：&lt;/p>
&lt;p>&lt;img src="https://s1.ax1x.com/2020/09/20/w7iDUS.png" alt="Basalt">&lt;/p>
&lt;p>计算机是质朴的，流程的增加往往需要更多的计算资源，与 Basalt-GitSrv 相比，NFS 的 I/O 拷贝要多一些，排除 Git 协议影响我们可能会认为 Basalt 的机制要比 NFS 更节省 I/O。如果考虑到 Git 协议的影响，我们应该确信如此，git 推送或者拉取都需要耗费大量的 CPU 计算资源，而在 NFS 模型中，计算全部都是发生在前端服务器，当请求数量较多时，前端服务器则容易出现 CPU 竞争的局面，这将非常影响服务器性能，另外，对于 NFS 这样的文件系统，读写 Git 松散对象都是不得力的。另外，由于 NFS 的缓存机制，负载较高时会出现 &lt;code>master.lock&lt;/code> 这样的锁定情况，导致用户使用异常。而对于 Basalt，git 则是在存储服务器上直接操作存储库，打包压缩，解压等对 CPU 需求较高的活动也在存储服务器上，这样意味着，CPU 计算被摊薄到存储服务器上了，另外 basalt-gitsrv 中间传输的是打包后的数据，这与 NFS 读写多个文件相比，网络数据量实际上是下降的。&lt;/p>
&lt;p>Gitee 作为国内最早的 Git 代码托管平台之一，最开始使用 NFS 实现伸缩性，随着用户规模增长很快出现了上述所有 NFS 容易遇到的问题，后来尝试切换到 Ceph，git 松散对象给其致命一击，上线便宣告失败，出现了严重的宕机事故，数据被毁，只能从备份恢复。后来迁移到分布式架构后基本稳定运行至今（这种方案基本上增加机器即可，前端负载高加前端，存储满了加存储）。&lt;/p>
&lt;p>Github 目前有大约 1亿个项目，我们假设 Github 上存储库大小平均为 10MB，目前 Github 存储库使用三副本机制，大概需要的磁盘容量为 2861 TB，按照硬盘出厂的规则（1000GB=1TB）,则是需要最小 3PB。这么大的磁盘容量并不是一个标准服务器能够提供的，按照目前企业级硬盘容量较大的每个 16TB, 则需要硬盘大概 188 块。你能想象到这样大的规模能够简单的运行在分布式文件系统上吗？目前的技术基本上不太现实。&lt;/p>
&lt;p>实现 Git 代码托管平台的可伸缩性重要的是实现资源的分片，最开始 Gitee 分布式时使用的是基于用户（namespace）的资源分片，也就是存储库所在的机器与 namespace 所属的机器像匹配，这实际上是一种先入为主的设计，在使用 NFS 挂载的时代，Gitee 的存储库就是按照 namespace 的前两个字母分片存储到不同服务器上，挂载到前端服务器上。因此，基于 namespace 的分片带来了一些问题，比如用户转移存储库可能需要跨机器，fork 存储库也可能需要跨机器，这就无法实现高效的轻量级 fork 功能。从去年开始迁移到基于存储库的分片，基于存储库分片基本上可以解决这些问题，但由于历史原因，轻量级 fork 等功能道阻且长。&lt;/p>
&lt;p>资源的分片和请求的路由相伴而生，将存储库存储到不同服务器上后，则需要在这些服务器上实现对应的服务支持前端的请求，而前端也需要实现特定的路由机制，关于 Gitee 的路由机制架构，可以参考相关演讲或者博客。Gitee 存储服务器上使用了 git-srv 作为 Git 传输协议后端服务，而 Github 则使用了 DGit/Spokes，Gitlab 使用了 Gitaly。不同平台的技术各有侧重，比如 Gitlab Gitaly 侧重兼容旧的 OpenSSH，而 Gitee 的 Basalt-GitSrv 针对实际情况优化，与 Gitaly 相比要少一次 I/O 拷贝。 Gitee 目前不足之处是存没有完全剥离 Web(基于早期 Gitlab 发展而来)，而 Gitaly 也有 Ruby 代码实现存储库读写（这块代码用 Golang 封装 I/O 多了一次拷贝）。与 Gitee 类似，Gitea 还有另一种方案，即将 Gitea 部署到多个服务器上共用 DB 支持分片，比如 &lt;a href="https://gitea.com">gitea.com&lt;/a> 便是这样的平台，但 gitea.com 似乎并不支持 SSH，因此并不能算有效的分片。&lt;/p>
&lt;p>前端服务器的扩展性实际上要比存储服务器好，前端服务器的迁移一般不需要像存储服务器那样转移存储库，服务也一般更简单。&lt;/p>
&lt;p>存储库分片之后还是无法避免特定存储库请求过多的问题，Github 的解决方案是使用三副本读写分离的 Spokes 机制，这一方案最多能够提供 3倍于单一服务器的并发读取能力，但不支持并发写入存储库。三副本机制需要解决分布式系统常见的一致性问题，引入并发写入可能会带来更多的数据冲突，破坏一致性，因此 Github 完全禁止并发写入存储库副本（即同时有不同的写存储库请求）。Gitlab 没有实现这样的技术，BitBucket 则没有披露相关资讯，Gitee 受限与硬件限制和开发资源限制，也没有实施。&lt;/p>
&lt;p>github-dfs：&lt;/p>
&lt;p>&lt;img src="https://s1.ax1x.com/2020/09/20/w7i63j.png" alt="DGIT">&lt;/p>
&lt;p>除了存储库的分片，代码托管平台还需要考虑数据库 SQL/NoSQL 能否支撑大规模并发，数据库的分布式集群是一个比较成熟的方案，而 Redis 最新的版本也支持集群，因此数据库的伸缩性一般不会存在太大问题，增加机器搭建集群即可。选择关系性数据库时还需要考虑许可证，数据库自身的功能等，比如 Gitlab 目前已经放弃对 MySQL 的支持，而是选择了 PostgreSQL，不过 Gitlab 的选择对于其他代码托管平台来说，也只能算作&lt;strong>仅作参考&lt;/strong>。MariaDB 是 MySQL 的分支版本，随着 MySQL 被 Oracle 收购，开源社区渐渐丧失了对 MySQL 的兴趣，虽然 MySQL 8.0 发布已经很久，但采用 MySQL 8.0 的发行版本寥寥无几，很多还停留在 MySQL 5.X，有些发行版还使用 &lt;a href="https://github.com/MariaDB/mariadb-connector-c">mariadb-connector-c&lt;/a> 替代 &lt;code>libmysqlclient&lt;/code> 作为数据库连接器，使用 MySQL 的平台很容易迁移到 MariaDB 而不用修改客户端数据库连接代码 ，MariaDB 支持线程池，而 MySQL 仅在企业版中支持线程池。一些 MariaDB 与 MySQL 的对比这里不赘述了。Gogs/Gitea 还支持使用 SQLite，但其使用 SQLite 时，基本上是放弃了伸缩性，不过目前有一个使用 Raft+libuv 实现的分布式 SQLite &lt;a href="https://github.com/canonical/dqlite">canonical/dqlite&lt;/a>，可以尝试一下。Redis 一般可以作为 Web 缓存或者任务队列的中间件，目前 Redis 虽然支持集群，但就单机 Redis 而言，由于它是单线程的服务，在将内存数据持久化到磁盘是还是可能出现超时，并且单线程服务性能终究有限，在 Github 上，&lt;a href="https://github.com/JohnSully/KeyDB">KeyDB&lt;/a> 是官方 Redis 的另一个选择，KeyDB 是 Redis 的分支，完全兼容 Redis 协议，KeyDB 支持多线程，有更好的内存效率和高吞吐量。&lt;/p>
&lt;h2 id="git-代码托管平台的增强功能">Git 代码托管平台的增强功能&lt;/h2>
&lt;!--大存储库，大文件，保护分支，只读目录，安全，两步验证/WebAuthn (https://github.com/duo-labs/webauthn)...-->
&lt;p>除了支持用户通过 Git 协议或者通过网页方式读写远程存储库，代码托管平台一般还需要提供一些与开发相关的功能增强用户体验，这些功能在不同平台之间的对比时显得非常重要。&lt;/p>
&lt;h3 id="缺陷追踪">缺陷追踪&lt;/h3>
&lt;p>&lt;a href="https://www.sqlite.org">SQLite3&lt;/a> 使用 2007 年诞生的版本控制系统 &lt;a href="https://fossil-scm.org">Fossil&lt;/a> 托管其源码，与前辈 Git 相比，它集成了 Bug 追踪，Wiki，论坛和技术报告。而对于 Git 来说，这些则需要 Git 代码托管平台自己实现，当然现在无论是 Github/Gitee/Gitlab/BitBucket 还是 Gogs/Gitea 都提供了 &lt;code>Issues&lt;/code>这样的机制方便开发者第一时间报告软件缺陷或者提出功能建议。&lt;code>Issues&lt;/code> 这样的功能实现主要在于让用户参与其中，也就是用的人多了，才有人气。而 Github 的 &lt;code>Issues&lt;/code> 相比其他平台是最活跃的。另外 Github 还提供依赖警报功能（详情可以阅读 &lt;a href="https://github.blog/2017-11-16-introducing-security-alerts-on-github/">Introducing security alerts on GitHub&lt;/a>），另外 Github 还收购了 Semmle 代码分析用于连续漏洞检测 (参考：&lt;a href="https://github.blog/2019-09-18-securing-software-together/">Securing software, together&lt;/a>），这也是其他 Git 代码托管平台可以借鉴的功能。&lt;/p>
&lt;h3 id="持续集成">持续集成&lt;/h3>
&lt;p>在微软收购 Github之后，Github 有了更充足的财力在给用户提供持续集成功能，今年以来 Github 推出了 &lt;a href="https://github.com/features/package-registry">GitHub Package Registry&lt;/a> 和 &lt;a href="https://github.com/features/actions">Github Actions&lt;/a> （相关文章：&lt;a href="https://github.blog/2019-08-08-github-actions-now-supports-ci-cd/">GitHub Actions now supports CI/CD, free for public repositories&lt;/a>，&lt;a href="https://github.blog/2019-05-10-introducing-github-package-registry/">Introducing GitHub Package Registry&lt;/a>），在推出 Github Actions 之前，开发者在 Github 上大多是通过第三方软件实现 CI/CD 功能，比如我的 &lt;a href="https://github.com/M2Team/Privexec">M2Team/Privexec&lt;/a> 就使用 Appveroy。Windows Terminal 则使用 Azure Pipeline。平台的生态繁荣得益于第三方的支持，而对于其他平台，这些 CI/CD 支持就没有这么大的力度了，这也促使其他代码托管平台的 API 趋向 Github 化，WebHook 也逐步趋同，Github 形成了事实上的标准。比如 Gitee 的 APIv5 就保持了对 Github 的兼容。&lt;/p>
&lt;p>&lt;strong>2020-09-20 更新&lt;/strong> Github 的 Actions 已经是一个成熟的持续集成流水线，目前 &lt;a href="https://github.com/M2Team/Privexec">M2Team/Privexec&lt;/a> 已经迁移到 Github Actions，另外我开发的 Windows 包管理工具 &lt;a href="https://github.com/baulk/baulk">baulk&lt;/a> 也使用了 Github Actions。通过编写 Github Actions 插件，可以完成编译测试部署等工作，不能认为其是单一的持续集成工具。&lt;/p>
&lt;h3 id="保护分支和只读目录">保护分支和只读目录&lt;/h3>
&lt;p>Gitee 很早就实现了类似 SVN 的保护分支功能，而 Github 目前也同样支持保护分支。实现保护分支的途径很很多条，通常通过服务端 Git 钩子实现，我曾写过 &lt;a href="https://forcemz.net/git/2019/07/31/GNKServerSide/">《服务端 Git 钩子的妙用》&lt;/a> 介绍了如何通过钩子实现保护分支功能。&lt;/p>
&lt;p>只读目录功能同样可以通过钩子实现，如果不通过钩子，而是在 git 命令中实现，则要面临修改 git 源码，需要投入大量人力维护的情况。《服务端 Git 钩子的妙用》和 &lt;a href="https://forcemz.net/git/2019/04/01/ImplementGitDirPermissionControl/">《实现 Git 目录权限控制》&lt;/a>对实现目录权限控制有详细介绍。&lt;/p>
&lt;h3 id="其他版本控制系统接入">其他版本控制系统接入&lt;/h3>
&lt;p>将使用其他版本控制系统的存储库转为 Git 非常简单，git 自身提供了 &lt;code>git svn&lt;/code> 命令，可以将远程 svn 存储库一个个版本递归的转变为 Git 存储库，详细的操作可以参考 &lt;a href="https://git-scm.com/book/en/v2/Git-and-Other-Systems-Migrating-to-Git">《Pro Git 2nd Edition》9.2 Git and Other Systems - Migrating to Git&lt;/a>，这种方案的缺点比较是比较耗时，Gitee 开发者曾经帮助国内某汽车制造企业将 Subversion 存储库迁移到 Git，一开始使用 &lt;code>git svn&lt;/code>，发现耗费时间太长，于是我找到了一个开源工具： &lt;a href="https://github.com/satori/git-svn-fast-import">git-svn-fast-import&lt;/a>，将其编译好并修复特定 BUG 交给相关同事，后来该企业的迁移工作顺利完成。这个工具直接解析存储库将其转换为 git 存储库，省去了网络传输的消耗。&lt;/p>
&lt;p>除了支持从其他版本控制系统导入外，一些代码 Git 代码托管平台也支持其他协议接入，Github/Gitee 都支持 Subversion 接入，也就是同一个存储库同时支持 git 客户端和 svn 客户端接入（像 BitBucket 支持 Mercurial 的实现实际上是单独搭建 Mercurial 存储库，不属于此类情况）。实现 Subversion 的接入几个难点，一是 Subversion 各种传输协议细节完全不同，HTTP 基于 WebDAV，而 SVN 协议又是一种自定义的 &lt;a href="https://github.com/apache/subversion/blob/trunk/subversion/libsvn_ra_svn/protocol">ABNF 格式协议&lt;/a>，如果在考虑支持 Subversion 接入时还需要考虑选择哪种协议，两类协议都支持通常是不现实的，费时费力。二是 Subversion 自身也在不断发展，但实际上在愿意在 Git 代码托管平台使用 svn 的毕竟还是少数，实现 Subversion 接入通常是费力不讨好，投入与产出不成正比。&lt;/p>
&lt;p>Github 实现的是 svn HTTP 协议，将 git 存储库的 commit 映射到 svn 的 revs。Github 的实现并不完美，由于需要通过 commit 计算 svn 版本信息，第一次通过 svn 协议访问存储库时会比较慢，如果当存储库较大时，检出还很容易失败，并且一次检出操作可能需要发送的非常多的请求，大概是所有目录所有文件数目之和。&lt;/p>
&lt;p>Gitee 使用了 &lt;a href="https://github.com/bozaro/git-as-svn">git-as-svn&lt;/a> 实现对 svn 的支持，支持的协议有 &lt;code>svn://&lt;/code> 和 &lt;code>svn+ssh://&lt;/code>，&lt;code>svn+ssh://&lt;/code> 实际上是 &lt;code>svn://&lt;/code> 协议通过 SSH 隧道传输，在 Gitee 中，当 Basalt 接收到客户端请求在远程服务器上运行 &lt;code>svnserve -t&lt;/code> 命令，则会将请求转发到 git-as-svn。在 Gitea 开发者的贡献下，git-as-svn 增加了 &lt;code>svnserve&lt;/code> 命令包装，即当 Gitea 接收到 &lt;code>svn+ssh://&lt;/code> 协议请求时，则是启动包装的命令，进行一些列授权后然后在 shell 中与使用命令 &lt;code>exec 3&amp;lt;&amp;gt;/dev/tcp/localhost/3690&lt;/code> 与 git-as-svn 通信，Gitee 的设计简化了验证流程，能够支持分布式架构，Gitea 目前还不能做到。git-as-svn 的基于 Java 开发，早期，开发者似乎对 git 的理念研究不够透彻，git-as-svn 的内部实现细节变动非常大，早前的实现机制不太理想，性能不佳。在 Gitee 中，我们为了避免存储库较大时开启 svn 支持带来的性能下降，额外增加了对通过 svn 协议访问存储库的限制，目前是通过 svn 协议访问存储库时，存储库的大小限制为 400MB。&lt;/p>
&lt;p>在早期，兼容其他版本控制系统可能是吸引用户的一大法宝，但随着 Git 的越来越流行，支持其他版本控制系统接入逐渐成了鸡肋，前人有言：“食之无肉，弃之可惜”，正是如此。像 Github/Gitee 这样的平台虽然支持 svn，但 svn 访问的还是极少数，而支持 svn 则需要花费一些人力物力，并且在系统架构设计时增加了复杂度。如果现在开发一个 Git 代码托管平台则没有必要支持 svn。Gitee 虽然支持 svn，但 svn 每日的请求数不足 1%，在这 1% 中，又有 50% 以上的请求是特定的用户使用定时命令发送的。&lt;/p>
&lt;h3 id="大文件大存储库">大文件大存储库&lt;/h3>
&lt;p>公共 Git 代码托管平台很多时候实际上是给用户提供免费服务，为了过多避免大文件大存储库占用平台资源，对其作出限制必不可少，通常是大文件限制 100MB, 存储库限制 1GB. 存储库的检测简单的遍历存储库 objects 目录即可，而大文件的检测则复杂一些。Gitee 最初使用 Grit 检测 commit 是否引入了 blob 原始大小大于限制的文件，但这种机制需要解析 Git 对象，检测容易坍塌（一是检测超时，二是检测逃逸，三是存储库体积膨胀），后开使用原生钩子，改变了检测机制，则避免了这些问题。详细情况可以阅读&lt;a href="https://forcemz.net/git/2019/07/31/GNKServerSide/">《服务端 Git 钩子的妙用》&lt;/a>。&lt;/p>
&lt;p>禁止大文件推送这只是堵，那么大文件应该如何存放呢？Github 推出了 LFS 方案，目前 LFS 功能已经被大多数平台支持，Github 将 LFS 存储到 AWS 上，而 Gitee/Gitlab/Gogs/Gitea 大多使用自建的 LFS 服务器，存储在特定服务器上。&lt;/p>
&lt;p>如果一个存储库自身就已经非常大了，如何去解决用户的访问难题呢？比如 Windows 源码超过 &lt;code>300GB&lt;/code>，如果用户克隆存储库，按照每秒 1MB/s 的速度，需要 85 小时，这在任何代码托管平台都是不太现实的，好在微软 2017 年发布了 GVFS（现在叫 &lt;a href="https://github.com/microsoft/VFSForGit">VFSforGit&lt;/a>）,在使用 VFSforGit 获取远程存储库时，可以只获得目录结构，并在本地创建占位文件，但用户操作这些占位文件时，VFSforGit 客户端才会去请求服务器下载对应的对象，这大大改善了巨型存储库的操作体验。VFSforGit 本地涉及到的主要技术是 &lt;a href="https://docs.microsoft.com/en-us/windows/win32/projfs/projected-file-system">ProjFS&lt;/a>，在 Windows 上，VFSforGit 会创建 &lt;code>IO_REPARSE_TAG_PROJFS&lt;/code> 类型的 ReparsePoint（NTFS 重解析点），读写到这些重解析点时，ProjFS 驱动会转发到 VFSForGit 客户端下载相应的对象。微软很多开发者在 macOS 上开发，所以官方增加了对 macOS 的支持，而 &lt;a href="https://github.com/github/VFSForGit">Github 的 VFSForGit fork&lt;/a> 则增加了对 Linux 的支持，不过离实用还有一些时日，Github ProjFS 实现库是 &lt;a href="https://github.com/github/libprojfs">libprojfs&lt;/a>。&lt;/p>
&lt;p>Git 代码托管平台支持 VFSforGit 客户端比较容易，目前除了 Visual Studio Online，还有 BitBucket 也增加了对 VFSforGit 的支持。我曾用 libgit2 开发了一个 &lt;code>git-vfs-serve&lt;/code> 命令，用户访问 brzox 时，brzox 请求 git-srv，git-srv 执行 git-vfs-serve 便可以支持 VFSforGit 客户端的访问，不过并未上线。&lt;/p>
&lt;h3 id="安全性增强">安全性增强&lt;/h3>
&lt;p>Github 最近宣布了支持 WebAuthn: &lt;a href="https://github.blog/2019-08-21-github-supports-webauthn-for-security-keys/">GitHub supports Web Authentication (WebAuthn) for security keys&lt;/a>，这种机制可以使用生物识别从而避免输入用户密码，随着信息技术的不断发展，一方面，安全机制不断完善，另一方面，用户面临的风险也会多样化，复杂化。代码托管平台管理了开发者的核心资产，因此在安全上绝不能掉以轻心。当然需要做的不仅仅是及时跟进新的安全机制，还需要对整个系统及时进行安全升级，淘汰旧的协议（比如 SSL3/TLS1.1），旧的加密，哈希算法（DSA，MD5/SHA1），及时采用新的协议（TLS1.3）,新的加密，哈希算法（ED25519，SHA3）等等。&lt;/p>
&lt;h2 id="文件服务">文件服务&lt;/h2>
&lt;!--附件下载，发布文件，Archive 下载-->
&lt;p>一个优秀的 Git 代码托管平台，应该在软件的开发整个周期都给用户提供帮助，比如下载源码，软件发布。源码下载主要指 Archive 功能，软件的发布则需要平台提供 Release/附件下载功能。&lt;/p>
&lt;h3 id="archive">Archive&lt;/h3>
&lt;p>我们知道 git-archive 命令可以将存储库特定的 commit/branch 打包成一个 zip/tar 文件，而在 Git Over SSH（Git Over TCP） 实现中，只要我们允许 &lt;code>git-upload-archive&lt;/code> 命令在远程服务器上运行，就打包远程服务器上的存储库的特定分支。但由于 git-upload-archive 与 git-upload-pack/git-receive-pack 存在一些不同，是的 HTTP 协议无法实现 archive 协商。提供 archive 下载则需要另辟蹊径。&lt;/p>
&lt;p>我们在远程服务器上运行 git-archive 将其输出作为响应体的内容返回给 HTTP Client 便可实现 archive 下载功能，由于 archive 下载实际上是将 git tree/blob 遍历然后写入到归档文件后压缩（tar.gz/tar.bz2 &amp;hellip;）或者是压缩后写入文件（zip），二者都非常消耗 CPU 资源，因此我们在实现 archive 下载功能的同时应该设计 archive 的缓存功能（当然缓存应该支持过期）。gitlab-workhorse 实现的 archive 下载功能便是先尝试命中缓存，如果没有缓存则调用 git 命令然后生成写入到缓存文件。Gitee 最近实现的 blaze-archive 也采用了类似的机制，但 blaze-archive 是一个独立的命令，这个命令实际上是被 git-srv 调用，brzox 与 git-srv 通信，brzox 将 archive 返回给 HTTP Client，而缓存的删除则是 blaze 负责的。&lt;/p>
&lt;h3 id="附件release">附件，Release&lt;/h3>
&lt;p>附件，Release 可以选择云方案，如果要将附件和 LFS 统一管理，实际上国内的阿里云，腾讯云之类的并不合适，这些平台对并不支持类似 AWS &lt;code>x-amz-content-sha256&lt;/code> 这样的头部，而是 &lt;code>Content-MD5&lt;/code> 因此这些云平台要支持 LFS 则要花费多一些功夫。选择国外的 AWS, Azure 则需要考虑经济，网络等问题。当然无论如何使用云平台都需要考虑经济问题。&lt;/p>
&lt;p>平台自建附件，Release 功能可以使用分布式文件系统，如 FastDFS, 但 FastFDS 并不是一个好的选择，历史比较久，存储机制安全机制现在来说都不是很优秀。有个更好的选择是 &lt;a href="https://github.com/minio/minio">Minio&lt;/a>, minio 使用 Golang 开发，支持 AWS API。许可协议是 &lt;code>Apache 2.0&lt;/code>，商用没有阻碍，因此是用来搭建附件，Release 以及 LFS 存储服务器的不二选择。&lt;/p>
&lt;h2 id="git-的未来">Git 的未来&lt;/h2>
&lt;p>Git 虽然是当前最受欢迎的代码托管系统，但 Git 也面临了一些难题，一类是如何支持大文件大存储库，这些问题有 Git LFS, VFSforGit 这样的第三方解决方案，也有微软，Google 开发者参与的官方 &lt;a href="https://git-scm.com/docs/partial-clone/en">Partial Clone&lt;/a>，部分克隆需要 Wire 协议支持，离可用还为时尚早。&lt;/p>
&lt;p>2017年2月，Google 开发者宣布攻破 SHA1，这曾经给一些 git 用户带来了担忧，因为 git 使用 SHA1 计算对象 ID，但 git 使用的实际上是一种特殊的 SHA1，将对象类型对象长度以及对象内容合并在一起计算 SHA1，由于有长度校验，这使得 SHA1 的冲突可能被降低了，但无论如何，SHA1 也不再是安全的，Git 在源码中增加了 &lt;a href="https://github.com/cr-marcstevens/sha1collisiondetection">sha1collisiondetection&lt;/a> 来避免 SHA1 冲突，并且增加了计划迁移到 SHA-256，并且将一些涉及到 Hash 的代码从单一的 SHA1 转变成 &lt;code>object_id&lt;/code>。 关于 Hash 转换，可以查看文档 &lt;a href="https://github.com/git/git/blob/master/Documentation/technical/hash-function-transition.txt">Git hash function transition&lt;/a>。&lt;/p>
&lt;p>Git 从 SHA1 迁移到 SHA-256 困难重重，从&lt;a href="https://github.com/git/git/commit/752414ae4310cd304f5e31649aaab2dcf307057c">首次增加文档&lt;/a>距今已经有两年时间，而 SHA-256 的实现还不见全貌。与 Hash 迁移相比，压缩算法的演进不重要更难实施，时至今日，zlib 压缩已经不再优秀，但 Git 可能还要负重前行。&lt;/p>
&lt;h2 id="道路漫漫">道路漫漫&lt;/h2>
&lt;p>软件开发一直是一个飞速变化的领域，而代码托管也要不断面临新的挑战，道路漫漫，吾辈不休。&lt;/p>
&lt;h2 id="更新">更新&lt;/h2>
&lt;ol>
&lt;li>2020-03-17 由于 src-d 已经破产，目前 go-git 已经 Hard fork 到 [https://github.com/go-git/go-git]&lt;/li>
&lt;/ol>
- https://forcemz.net/posts/2019/2019-10-01-explore-some-issues-with-git-host/ - Copyright (c) 2009-2024 J23</description></item><item><title>在 Windows 中实现 sudo</title><link>https://forcemz.net/posts/2019/2019-08-07-implement-sudo-in-windows/</link><pubDate>Wed, 07 Aug 2019 12:00:00 +0800</pubDate><guid>https://forcemz.net/posts/2019/2019-08-07-implement-sudo-in-windows/</guid><description>江二十三的思考 https://forcemz.net/posts/2019/2019-08-07-implement-sudo-in-windows/ -&lt;h1 id="前言">前言&lt;/h1>
&lt;p>&lt;em>这篇文章的想法来源于我在 &lt;a href="https://github.com/microsoft/terminal/issues/146">Windows Terminal Issue#146&lt;/a> 的&lt;a href="https://github.com/microsoft/terminal/issues/146#issuecomment-515812461">评论&lt;/a>。&lt;/em>&lt;/p>
&lt;p>&lt;a href="https://linux.die.net/man/8/sudo">sudo&lt;/a> 以另一个用户执行命令，通常是 &lt;code>root&lt;/code>。当普通用户需要以其他权限执行某项工作时，通常需要获得指定用户的权限，以目标权限 &lt;code>root&lt;/code> 为例，我们期望以 root 权限运行，可以使用 &lt;code>su&lt;/code> 登录到 &lt;code>root&lt;/code> 用户，在这种情况下，一直到退出 &lt;code>root&lt;/code>。都使用的是 &lt;code>root&lt;/code> 权限，这实际上并不是安全的，处于高级别权限的时间应当尽量的短。而使用 &lt;code>sudo&lt;/code> 获得 root 权限要安全的多，这种情况下，只有特定的命令才会获得 root 权限，而不是整个用户和 shell. 话又说回来，sudo 是如何获得 root 权限的？在 Windows 中的 sudo 又是怎么一回事，如何在 Windows 中实现类似的 sudo.&lt;/p>
&lt;h2 id="linux-的-sudo-内幕">Linux 的 sudo 内幕&lt;/h2>
&lt;p>Linux 的权限机制大致概括为 &lt;code>UGO&lt;/code> 和 &lt;code>RWX&lt;/code>，文件权限为 &lt;code>R&lt;/code> 读权限，&lt;code>W&lt;/code> 写权限，&lt;code>X&lt;/code> 可执行权限。基于 UGO 模型设置。&lt;code>U&lt;/code> 代表用户， &lt;code>G&lt;/code> 代表组，&lt;code>O&lt;/code> 代表其他用户。&lt;/p>
&lt;p>了解 Linux sudo 的原理之前，我们需要先了解文件的属性。我们可以通过 &lt;code>stat&lt;/code> 命令或者 &lt;code>stat&lt;/code> 系统调用查看文件的属性，这里我们以 &lt;a href="https://github.com/bminor/musl/blob/master/arch/x86_64/bits/stat.h">musl: arch/x86_64/bits/stat.h&lt;/a> 为参考：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#1d2432;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c" data-lang="c">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">#ifndef S_IRUSR
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">#define S_ISUID 04000
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">#define S_ISGID 02000
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">#define S_ISVTX 01000
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">#define S_IRUSR 0400
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">#define S_IWUSR 0200
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">#define S_IXUSR 0100
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">#define S_IRWXU 0700
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">#define S_IRGRP 0040
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">#define S_IWGRP 0020
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">#define S_IXGRP 0010
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">#define S_IRWXG 0070
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">#define S_IROTH 0004
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">#define S_IWOTH 0002
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">#define S_IXOTH 0001
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">#define S_IRWXO 0007
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">#endif
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff636f">struct&lt;/span> &lt;span style="color:#58a1dd">stat&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">dev_t&lt;/span> &lt;span style="color:#58a1dd">st_dev&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">ino_t&lt;/span> &lt;span style="color:#58a1dd">st_ino&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">nlink_t&lt;/span> &lt;span style="color:#58a1dd">st_nlink&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">mode_t&lt;/span> &lt;span style="color:#58a1dd">st_mode&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">uid_t&lt;/span> &lt;span style="color:#58a1dd">st_uid&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">gid_t&lt;/span> &lt;span style="color:#58a1dd">st_gid&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">unsigned&lt;/span> &lt;span style="color:#ff636f">int&lt;/span> &lt;span style="color:#58a1dd">__pad0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">dev_t&lt;/span> &lt;span style="color:#58a1dd">st_rdev&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">off_t&lt;/span> &lt;span style="color:#58a1dd">st_size&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">blksize_t&lt;/span> &lt;span style="color:#58a1dd">st_blksize&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">blkcnt_t&lt;/span> &lt;span style="color:#58a1dd">st_blocks&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">struct&lt;/span> &lt;span style="color:#58a1dd">timespec&lt;/span> &lt;span style="color:#58a1dd">st_atim&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">struct&lt;/span> &lt;span style="color:#58a1dd">timespec&lt;/span> &lt;span style="color:#58a1dd">st_mtim&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">struct&lt;/span> &lt;span style="color:#58a1dd">timespec&lt;/span> &lt;span style="color:#58a1dd">st_ctim&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">long&lt;/span> &lt;span style="color:#58a1dd">__unused&lt;/span>[&lt;span style="color:#a6be9d">3&lt;/span>];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>};
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>我们使用 &lt;code>stat&lt;/code> 命令查看 &lt;code>/usr/bin/sudo&lt;/code> 命令属性：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#1d2432;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-txt" data-lang="txt">&lt;span style="display:flex;">&lt;span> File: /usr/bin/sudo
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Size: 149080 Blocks: 296 IO Block: 4096 regular file
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Device: 2h/2d Inode: 3659174697569688 Links: 1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Access: (4755/-rwsr-xr-x) Uid: ( 0/ root) Gid: ( 0/ root)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Access: 2018-05-12 07:38:43.000000000 +0800
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Modify: 2018-01-18 08:08:16.000000000 +0800
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Change: 2018-05-12 07:49:34.051952000 +0800
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Birth: -
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;img src="https://user-images.githubusercontent.com/6904176/62181312-84b53080-b385-11e9-822d-89833ef8ac3a.png" alt="">&lt;/p>
&lt;p>这里我们可以看到 sudo 命令的程序文件，所有者 ID 和 组 ID 都是 &lt;strong>0&lt;/strong>，即 &lt;code>root&lt;/code>，与普通文件不同之处 &lt;code>sudo&lt;/code> 设置了 &lt;code>S_ISUID&lt;/code> 我们查看 GNU &lt;a href="https://www.gnu.org/software/libc/manual/html_node/Permission-Bits.html">14.9.5 The Mode Bits for Access Permission&lt;/a> 以及 &lt;a href="https://www.gnu.org/software/libc/manual/html_node/How-Change-Persona.html#How-Change-Persona">30.4 How an Application Can Change Persona&lt;/a> 其中有一段&lt;/p>
&lt;blockquote>
&lt;p>If a process has a file ID (user or group), then it can at any time change its effective ID to its real ID and back to its file ID. Programs use this feature to relinquish their special privileges except when they actually need them. This makes it less likely that they can be tricked into doing something inappropriate with their privileges.&lt;/p>
&lt;/blockquote>
&lt;p>sudo 命令启动后可以运行 &lt;code>setuid(0)&lt;/code> 将自身权限设置为 &lt;code>root&lt;/code> 然后验证用户凭据，有效时则可以以 root 用户权限运行相应的命令。在 Linux/POSIX 系统中，虽然 &lt;code>sudo&lt;/code> 的原理并不复杂，但是实现一个 sudo 程序，处理好不同用户的环境变量，权限的有效期，这些都需要一些代码实现，索性有开源的 &lt;code>sudo&lt;/code> 可供人使用。&lt;/p>
&lt;h2 id="在-windows-实现-sudo">在 Windows 实现 Sudo&lt;/h2>
&lt;p>理解 Windows 权限机制需要了解 &lt;a href="https://en.wikipedia.org/wiki/Access-control_list">ACL&lt;/a> 以及 &lt;a href="https://en.wikipedia.org/wiki/User_Account_Control">User Account Control (UAC)&lt;/a>。在 Windows 系统上并不存在原生的 sudo 命令，标准用户的提权在开启 UAC 时，会出现一个提权对话框和安全桌面，那么在 Windows 中，从标准用户到特权用户 (Administrator) 内部是怎样的实现呢？如果我们需要实现一个不需要 UI 交互的 &lt;code>Windows sudo&lt;/code> 又应该如何实现呢？&lt;/p>
&lt;blockquote>
&lt;p>Windows 属于多用户操作系统，这里的权限讨论并未讲述来宾账户，仅限于标准账户，即同时属于 User 和 Administrators 组且开启了 UAC 提示的账户。&lt;/p>
&lt;/blockquote>
&lt;h3 id="uac-提权与-sudo-实现探讨">UAC 提权与 sudo 实现探讨&lt;/h3>
&lt;p>在 &lt;a href="https://forcemz.net/windows/2018/12/01/PrivexecNew/">《Privexec 杂谈》&lt;/a> 一文中，就讲过 UAC 提权，这里再重复一遍。&lt;/p>
&lt;p>在 Windows 中，如果要实现 &lt;code>UAC&lt;/code> 提权，需要调用 &lt;code>ShellExecute&lt;/code> 以 &lt;code>runas&lt;/code> 的参数启动新的进程。或者设置引用程序清单（此类由 shell 打开时会提权，也是 ShellExecute 一类），清单示例如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#1d2432;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-xml" data-lang="xml">&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">&amp;lt;trustInfo&lt;/span> &lt;span style="color:#58a1dd">xmlns=&lt;/span>&lt;span style="color:#a6be9d">&amp;#34;urn:schemas-microsoft-com:asm.v2&amp;#34;&lt;/span>&lt;span style="color:#58a1dd">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">&amp;lt;security&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">&amp;lt;requestedPrivileges&lt;/span> &lt;span style="color:#58a1dd">xmlns=&lt;/span>&lt;span style="color:#a6be9d">&amp;#34;urn:schemas-microsoft-com:asm.v3&amp;#34;&lt;/span>&lt;span style="color:#58a1dd">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">&amp;lt;requestedExecutionLevel&lt;/span> &lt;span style="color:#58a1dd">level=&lt;/span>&lt;span style="color:#a6be9d">&amp;#39;requireAdministrator&amp;#39;&lt;/span> &lt;span style="color:#58a1dd">uiAccess=&lt;/span>&lt;span style="color:#a6be9d">&amp;#39;false&amp;#39;&lt;/span> &lt;span style="color:#58a1dd">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">&amp;lt;/requestedPrivileges&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">&amp;lt;/security&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">&amp;lt;/trustInfo&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>以 &lt;code>Windows 10&lt;/code> 为例，&lt;code>ShellExecute&lt;/code> 提权最终由 &lt;code>AicLaunchAdminProcess&lt;/code> 函数实现，此函数目前实现在 &lt;code>Windows.Storage.dll&lt;/code> 中，UAC 提权需要与 &lt;code>Appinfo&lt;/code> 服务通信，&lt;code>Appinfo&lt;/code> 验证提权行为后使用 &lt;code>CreateProcessAsUserW&lt;/code> 启动进程，并将其父进程设置为 &lt;code>ShellExecute&lt;/code> 调用者。调用细节(Windows Vista)&lt;sup>1&lt;/sup>如下：&lt;/p>
&lt;ol>
&lt;li>AppInfo goes and talks to the Local Security Authority to get the elevated token of the logged in user of Session 1.&lt;/li>
&lt;li>AppInfo loads up a STARTUPINFOEX structure (new to Vista), and calls the brand new Vista API InitializeProcThreadAttributeList() with room for one attribute.&lt;/li>
&lt;li>OpenProcess() is called to get a handle to the process that initiated the RPC call.&lt;/li>
&lt;li>UpdateProcThreadAttribute() is called with &lt;code>PROC_THREAD_ATTRIBUTE_PARENT_PROCESS&lt;/code>, and uses the handle retrieved in step 3.&lt;/li>
&lt;li>CreateProcessAsUser() is called with &lt;code>EXTENDED_STARTUPINFO_PRESENT&lt;/code> and the results of steps 1 and 4.&lt;/li>
&lt;li>DeleteProcThreadAttributeList() is called.&lt;/li>
&lt;li>Results are gathered, and handles are cleaned up.&lt;/li>
&lt;/ol>
&lt;p>Appinfo 服务描述：&lt;/p>
&lt;blockquote>
&lt;p>使用辅助管理权限便于交互式应用程序的运行。如果停止此服务，用户将无法使用辅助管理权限启动应用程序，而执行所需用户任务可能需要这些权限。&lt;/p>
&lt;/blockquote>
&lt;p>如果在标准用户中使用 &lt;code>CreateProcessW&lt;/code> 启动需要提升的进程，会返回 &lt;code>elevation required&lt;/code>（GetLastError 740）错误。&lt;/p>
&lt;p>我们可以看到 Windows 中，提权本质上是通过去特权服务进行通信，校验后，由特权用户创建进程，这里并没有使用 &lt;code>S_ISUID&lt;/code> 这样的机制，当然 UAC 白名单的自动提升和 &lt;code>setuid&lt;/code> 也是不一样的，前者是系统创建进程便是创建了管理员权限，后者是 fork-exec 后，通过 &lt;code>setuid&lt;/code> 切换到 &lt;code>root&lt;/code>（Linux/Apple sudo 均是如此）。&lt;/p>
&lt;p>sudo 是 CUI 程序，如果我们需要实现类似 sudo 这样的程序，像标准输入输出的继承，工作目录的设置都必不可少，遗憾的是，在使用 ShellExecuteEx 启动管理员进程时，无法设置子进程的工作目录，也无法让子进程继承当前的控制台，终端，因此提权后，如果子进程子系统是 &lt;code>Windows CUI&lt;/code> 时，会弹出一个新的控制台窗口。&lt;/p>
&lt;p>在 UAC 提权的过程，我们知道创建进程实际上是由 Appinfo 服务创建的，因此，如果在 &lt;code>CreateProcessAsUserW&lt;/code> 之际直接 &lt;code>lpCurrentDirectory&lt;/code> 即可设置子进程的工作目录。&lt;/p>
&lt;p>sudo 不需要 UI 交互验证用户的权限，这个时候，可以在终端或者控制台提示用户输入密码，在 Appinfo 中调用 &lt;a href="https://docs.microsoft.com/en-us/windows/win32/api/winbase/nf-winbase-logonuserw">&lt;code>LogonUserW&lt;/code>&lt;/a> 验证用户凭据的合法性。当然，密码在跨进程传输的过程中要保证安全。&lt;/p>
&lt;p>唯一值得商榷的是，AppInfo 服务如何获得调用进程的标准输入输出标准错误，将控制台或者管道给子进程继承。Windows 拥有控制台 API &lt;a href="https://docs.microsoft.com/en-us/windows/console/attachconsole">&lt;code>AttachConsole&lt;/code>&lt;/a>，可以让进程连接到另一个进程的控制台，这在后面有介绍，但是否可以不需要 &lt;code>AttachConsole&lt;/code> 直接获取特定进程的控制台句柄，并将子进程的 &lt;code>STARTUPINFOW&lt;/code> 的 &lt;code>hStdInput&lt;/code>,&lt;code>hStdOutput&lt;/code> 以及 &lt;code>hStdError&lt;/code> 设置到控制台。如果调用进程的终端是 cygwin，msys2 这样的以管道模拟的，则需要获得这些管道的名称，然后使用 &lt;code>CreateFileA&lt;/code> 创建句柄，绑定到子进程的输入输出错误。要处理不同的情况还是比较麻烦。&lt;/p>
&lt;p>在 Appinfo 服务中实现 sudo 的逻辑的困难在于 Windows 团队需要谨慎处理各种情况，避免安全问题引入 Windows。并且，实现 sudo 逻辑到上线可能需要几个 Windows 发行版。&lt;/p>
&lt;h3 id="sudo-bridge-设想">sudo bridge 设想&lt;/h3>
&lt;p>在 WSL 发布之后，&lt;a href="https://github.com/rprichard/winpty">winpty&lt;/a> Ryan Prichard 开源了 &lt;a href="https://github.com/rprichard/wslbridge">wslbridge&lt;/a> 项目，wslbridge 分为前端和后端，前端是一个基于 cygwin 的 Windows 程序，后端是一个 Linux 程序，当使用 PTY 模式时 wslbridge-backend 会使用 &lt;code>forkpty&lt;/code> 创建一个 &lt;code>pseudoterminal&lt;/code> 然后将终端的数据通过 socket 发送到 wslbridge-frontend （通常会被 mintty conemu 这样的终端读取呈现给用户）. wslbridge-frontend 接受到用户输入的数据发送到 wslbridge-backend. 如果不使用 &lt;code>PTY&lt;/code> 模式，wslbridge 还可以使用 Pipe 去模拟终端行为，这和 Cygwin/MSYS 在 Windows 的机制是一样的。&lt;/p>
&lt;p>Windows Terminal 项目实际上包括了 Windows conhost 的源码，基本上 OpenConsole 与目前 Windows 10 conhost.exe 的代码绝大多数是相同的。要了解控制台的一些源码可以好好的看看代码。&lt;/p>
&lt;p>WindowsTerminal.exe 是一个 UWP 程序，在启动终端时，通过 conhost.exe(OpenConsole) 创建一个 PTY 模式的终端: &lt;a href="https://github.com/microsoft/terminal/blob/8fa42e09dfc6cd57d29e517a002d8c7a99e2aebd/src/cascadia/TerminalConnection/ConhostConnection.cpp#L94">CreateConPty&lt;/a>。创建终端的 &lt;code>CreateConPty&lt;/code> 代码如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#1d2432;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c++" data-lang="c++">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">// Function Description:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">// - Creates a headless conhost in &amp;#34;pty mode&amp;#34; and launches the given commandline
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">// attached to the conhost. Gives back handles to three different pipes:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">// * hInput: The caller can write input to the conhost, encoded in utf-8, on
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">// this pipe. For keys that don&amp;#39;t have character representations, the
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">// caller should use the `TERM=xterm` VT sequences for encoding the input.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">// * hOutput: The caller should read from this pipe. The headless conhost will
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">// &amp;#34;render&amp;#34; it&amp;#39;s state to a stream of utf-8 encoded text with VT sequences.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">// * hSignal: The caller can use this to resize the size of the underlying PTY
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">// using the SignalResizeWindow function.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">// Arguments:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">// - cmdline: The commandline to launch as a console process attached to the pty
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">// that&amp;#39;s created.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">// - startingDirectory: The directory to start the process in
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">// - w: The initial width of the pty, in characters
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">// - h: The initial height of the pty, in characters
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">// - hInput: A handle to the pipe for writing input to the pty.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">// - hOutput: A handle to the pipe for reading the output of the pty.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">// - hSignal: A handle to the pipe for writing signal messages to the pty.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">// - piPty: The PROCESS_INFORMATION of the pty process. NOTE: This is *not* the
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">// PROCESS_INFORMATION of the process that&amp;#39;s created as a result the cmdline.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">// - extraEnvVars : A map of pairs of (Name, Value) representing additional
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">// environment variable strings and values to be set in the client process
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">// environment. May override any already present in parent process.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">// Return Value:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">// - S_OK if we succeeded, or an appropriate HRESULT for failing format the
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">// commandline or failing to launch the conhost
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span>&lt;span style="color:#58a1dd">[[nodiscard]]&lt;/span> &lt;span style="color:#ff636f">__declspec&lt;/span>(&lt;span style="color:#58a1dd">noinline&lt;/span>) &lt;span style="color:#ff636f">inline&lt;/span> &lt;span style="color:#58a1dd">HRESULT&lt;/span> &lt;span style="color:#58a1dd">CreateConPty&lt;/span>(&lt;span style="color:#ff636f">const&lt;/span> &lt;span style="color:#58a1dd">std&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">wstring&lt;/span>&lt;span style="color:#ff636f">&amp;amp;&lt;/span> &lt;span style="color:#58a1dd">cmdline&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">std&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">optional&lt;/span>&lt;span style="color:#ff636f">&amp;lt;&lt;/span>&lt;span style="color:#58a1dd">std&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">wstring&lt;/span>&lt;span style="color:#ff636f">&amp;gt;&lt;/span> &lt;span style="color:#58a1dd">startingDirectory&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">const&lt;/span> &lt;span style="color:#ff636f">unsigned&lt;/span> &lt;span style="color:#ff636f">short&lt;/span> &lt;span style="color:#58a1dd">w&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">const&lt;/span> &lt;span style="color:#ff636f">unsigned&lt;/span> &lt;span style="color:#ff636f">short&lt;/span> &lt;span style="color:#58a1dd">h&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">HANDLE&lt;/span>&lt;span style="color:#ff636f">*&lt;/span> &lt;span style="color:#ff636f">const&lt;/span> &lt;span style="color:#58a1dd">hInput&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">HANDLE&lt;/span>&lt;span style="color:#ff636f">*&lt;/span> &lt;span style="color:#ff636f">const&lt;/span> &lt;span style="color:#58a1dd">hOutput&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">HANDLE&lt;/span>&lt;span style="color:#ff636f">*&lt;/span> &lt;span style="color:#ff636f">const&lt;/span> &lt;span style="color:#58a1dd">hSignal&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">PROCESS_INFORMATION&lt;/span>&lt;span style="color:#ff636f">*&lt;/span> &lt;span style="color:#ff636f">const&lt;/span> &lt;span style="color:#58a1dd">piPty&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">DWORD&lt;/span> &lt;span style="color:#58a1dd">dwCreationFlags&lt;/span> &lt;span style="color:#ff636f">=&lt;/span> &lt;span style="color:#a6be9d">0&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">const&lt;/span> &lt;span style="color:#58a1dd">EnvironmentVariableMapW&lt;/span>&lt;span style="color:#ff636f">&amp;amp;&lt;/span> &lt;span style="color:#58a1dd">extraEnvVars&lt;/span> &lt;span style="color:#ff636f">=&lt;/span> {}) &lt;span style="color:#ff636f">noexcept&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#828b96;font-style:italic">// Create some anon pipes so we can pass handles down and into the console.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span> &lt;span style="color:#828b96;font-style:italic">// IMPORTANT NOTE:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span> &lt;span style="color:#828b96;font-style:italic">// We&amp;#39;re creating the pipe here with un-inheritable handles, then marking
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span> &lt;span style="color:#828b96;font-style:italic">// the conhost sides of the pipes as inheritable. We do this because if
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span> &lt;span style="color:#828b96;font-style:italic">// the entire pipe is marked as inheritable, when we pass the handles
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span> &lt;span style="color:#828b96;font-style:italic">// to CreateProcess, at some point the entire pipe object is copied to
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span> &lt;span style="color:#828b96;font-style:italic">// the conhost process, which includes the terminal side of the pipes
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span> &lt;span style="color:#828b96;font-style:italic">// (_inPipe and _outPipe). This means that if we die, there&amp;#39;s still
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span> &lt;span style="color:#828b96;font-style:italic">// outstanding handles to our side of the pipes, and those handles are
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span> &lt;span style="color:#828b96;font-style:italic">// in conhost, despite conhost being unable to reference those handles
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span> &lt;span style="color:#828b96;font-style:italic">// and close them.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span> &lt;span style="color:#828b96;font-style:italic">// CRITICAL: Close our side of the handles. Otherwise you&amp;#39;ll get the same
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span> &lt;span style="color:#828b96;font-style:italic">// problem if you close conhost, but not us (the terminal).
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span> &lt;span style="color:#58a1dd">HANDLE&lt;/span> &lt;span style="color:#58a1dd">outPipeConhostSide&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">HANDLE&lt;/span> &lt;span style="color:#58a1dd">inPipeConhostSide&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">HANDLE&lt;/span> &lt;span style="color:#58a1dd">signalPipeConhostSide&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">SECURITY_ATTRIBUTES&lt;/span> &lt;span style="color:#58a1dd">sa&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">sa&lt;/span> &lt;span style="color:#ff636f">=&lt;/span> { &lt;span style="color:#a6be9d">0&lt;/span> };
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">sa&lt;/span>.&lt;span style="color:#58a1dd">nLength&lt;/span> &lt;span style="color:#ff636f">=&lt;/span> &lt;span style="color:#ff636f">sizeof&lt;/span>(&lt;span style="color:#58a1dd">sa&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">sa&lt;/span>.&lt;span style="color:#58a1dd">bInheritHandle&lt;/span> &lt;span style="color:#ff636f">=&lt;/span> &lt;span style="color:#58a1dd">FALSE&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">sa&lt;/span>.&lt;span style="color:#58a1dd">lpSecurityDescriptor&lt;/span> &lt;span style="color:#ff636f">=&lt;/span> &lt;span style="color:#ff636f">nullptr&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">CreatePipe&lt;/span>(&lt;span style="color:#ff636f">&amp;amp;&lt;/span>&lt;span style="color:#58a1dd">inPipeConhostSide&lt;/span>, &lt;span style="color:#58a1dd">hInput&lt;/span>, &lt;span style="color:#ff636f">&amp;amp;&lt;/span>&lt;span style="color:#58a1dd">sa&lt;/span>, &lt;span style="color:#a6be9d">0&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">CreatePipe&lt;/span>(&lt;span style="color:#58a1dd">hOutput&lt;/span>, &lt;span style="color:#ff636f">&amp;amp;&lt;/span>&lt;span style="color:#58a1dd">outPipeConhostSide&lt;/span>, &lt;span style="color:#ff636f">&amp;amp;&lt;/span>&lt;span style="color:#58a1dd">sa&lt;/span>, &lt;span style="color:#a6be9d">0&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">CreatePipe&lt;/span>(&lt;span style="color:#ff636f">&amp;amp;&lt;/span>&lt;span style="color:#58a1dd">signalPipeConhostSide&lt;/span>, &lt;span style="color:#58a1dd">hSignal&lt;/span>, &lt;span style="color:#ff636f">&amp;amp;&lt;/span>&lt;span style="color:#58a1dd">sa&lt;/span>, &lt;span style="color:#a6be9d">0&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">SetHandleInformation&lt;/span>(&lt;span style="color:#58a1dd">inPipeConhostSide&lt;/span>, &lt;span style="color:#58a1dd">HANDLE_FLAG_INHERIT&lt;/span>, &lt;span style="color:#a6be9d">1&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">SetHandleInformation&lt;/span>(&lt;span style="color:#58a1dd">outPipeConhostSide&lt;/span>, &lt;span style="color:#58a1dd">HANDLE_FLAG_INHERIT&lt;/span>, &lt;span style="color:#a6be9d">1&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">SetHandleInformation&lt;/span>(&lt;span style="color:#58a1dd">signalPipeConhostSide&lt;/span>, &lt;span style="color:#58a1dd">HANDLE_FLAG_INHERIT&lt;/span>, &lt;span style="color:#a6be9d">1&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">std&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">wstring&lt;/span> &lt;span style="color:#58a1dd">conhostCmdline&lt;/span> &lt;span style="color:#ff636f">=&lt;/span> &lt;span style="color:#a6be9d">L&lt;/span>&lt;span style="color:#a6be9d">&amp;#34;conhost.exe&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">conhostCmdline&lt;/span> &lt;span style="color:#ff636f">+=&lt;/span> &lt;span style="color:#a6be9d">L&lt;/span>&lt;span style="color:#a6be9d">&amp;#34; --headless&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">std&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">wstringstream&lt;/span> &lt;span style="color:#58a1dd">ss&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">if&lt;/span> (&lt;span style="color:#58a1dd">w&lt;/span> &lt;span style="color:#ff636f">!=&lt;/span> &lt;span style="color:#a6be9d">0&lt;/span> &lt;span style="color:#ff636f">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#58a1dd">h&lt;/span> &lt;span style="color:#ff636f">!=&lt;/span> &lt;span style="color:#a6be9d">0&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">ss&lt;/span> &lt;span style="color:#ff636f">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#a6be9d">L&lt;/span>&lt;span style="color:#a6be9d">&amp;#34; --width &amp;#34;&lt;/span> &lt;span style="color:#ff636f">&amp;lt;&amp;lt;&lt;/span> (&lt;span style="color:#ff636f">unsigned&lt;/span> &lt;span style="color:#ff636f">long&lt;/span>)&lt;span style="color:#58a1dd">w&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">ss&lt;/span> &lt;span style="color:#ff636f">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#a6be9d">L&lt;/span>&lt;span style="color:#a6be9d">&amp;#34; --height &amp;#34;&lt;/span> &lt;span style="color:#ff636f">&amp;lt;&amp;lt;&lt;/span> (&lt;span style="color:#ff636f">unsigned&lt;/span> &lt;span style="color:#ff636f">long&lt;/span>)&lt;span style="color:#58a1dd">h&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">ss&lt;/span> &lt;span style="color:#ff636f">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#a6be9d">L&lt;/span>&lt;span style="color:#a6be9d">&amp;#34; --signal 0x&amp;#34;&lt;/span> &lt;span style="color:#ff636f">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#58a1dd">std&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">hex&lt;/span> &lt;span style="color:#ff636f">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#58a1dd">HandleToUlong&lt;/span>(&lt;span style="color:#58a1dd">signalPipeConhostSide&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">conhostCmdline&lt;/span> &lt;span style="color:#ff636f">+=&lt;/span> &lt;span style="color:#58a1dd">ss&lt;/span>.&lt;span style="color:#58a1dd">str&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">conhostCmdline&lt;/span> &lt;span style="color:#ff636f">+=&lt;/span> &lt;span style="color:#a6be9d">L&lt;/span>&lt;span style="color:#a6be9d">&amp;#34; -- &amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">conhostCmdline&lt;/span> &lt;span style="color:#ff636f">+=&lt;/span> &lt;span style="color:#58a1dd">cmdline&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">STARTUPINFO&lt;/span> &lt;span style="color:#58a1dd">si&lt;/span> &lt;span style="color:#ff636f">=&lt;/span> { &lt;span style="color:#a6be9d">0&lt;/span> };
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">si&lt;/span>.&lt;span style="color:#58a1dd">cb&lt;/span> &lt;span style="color:#ff636f">=&lt;/span> &lt;span style="color:#ff636f">sizeof&lt;/span>(&lt;span style="color:#58a1dd">STARTUPINFOW&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">si&lt;/span>.&lt;span style="color:#58a1dd">hStdInput&lt;/span> &lt;span style="color:#ff636f">=&lt;/span> &lt;span style="color:#58a1dd">inPipeConhostSide&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">si&lt;/span>.&lt;span style="color:#58a1dd">hStdOutput&lt;/span> &lt;span style="color:#ff636f">=&lt;/span> &lt;span style="color:#58a1dd">outPipeConhostSide&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">si&lt;/span>.&lt;span style="color:#58a1dd">hStdError&lt;/span> &lt;span style="color:#ff636f">=&lt;/span> &lt;span style="color:#58a1dd">outPipeConhostSide&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">si&lt;/span>.&lt;span style="color:#58a1dd">dwFlags&lt;/span> &lt;span style="color:#ff636f">|=&lt;/span> &lt;span style="color:#58a1dd">STARTF_USESTDHANDLES&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">std&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">unique_ptr&lt;/span>&lt;span style="color:#ff636f">&amp;lt;&lt;/span>&lt;span style="color:#ff636f">wchar_t&lt;/span>[]&lt;span style="color:#ff636f">&amp;gt;&lt;/span> &lt;span style="color:#58a1dd">mutableCommandline&lt;/span> &lt;span style="color:#ff636f">=&lt;/span> &lt;span style="color:#58a1dd">std&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">make_unique&lt;/span>&lt;span style="color:#ff636f">&amp;lt;&lt;/span>&lt;span style="color:#ff636f">wchar_t&lt;/span>[]&lt;span style="color:#ff636f">&amp;gt;&lt;/span>(&lt;span style="color:#58a1dd">conhostCmdline&lt;/span>.&lt;span style="color:#58a1dd">length&lt;/span>() &lt;span style="color:#ff636f">+&lt;/span> &lt;span style="color:#a6be9d">1&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">if&lt;/span> (&lt;span style="color:#58a1dd">mutableCommandline&lt;/span> &lt;span style="color:#ff636f">==&lt;/span> &lt;span style="color:#ff636f">nullptr&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">return&lt;/span> &lt;span style="color:#58a1dd">E_OUTOFMEMORY&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">HRESULT&lt;/span> &lt;span style="color:#58a1dd">hr&lt;/span> &lt;span style="color:#ff636f">=&lt;/span> &lt;span style="color:#58a1dd">StringCchCopy&lt;/span>(&lt;span style="color:#58a1dd">mutableCommandline&lt;/span>.&lt;span style="color:#58a1dd">get&lt;/span>(), &lt;span style="color:#58a1dd">conhostCmdline&lt;/span>.&lt;span style="color:#58a1dd">length&lt;/span>() &lt;span style="color:#ff636f">+&lt;/span> &lt;span style="color:#a6be9d">1&lt;/span>, &lt;span style="color:#58a1dd">conhostCmdline&lt;/span>.&lt;span style="color:#58a1dd">c_str&lt;/span>());
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">if&lt;/span> (&lt;span style="color:#ff636f">!&lt;/span>&lt;span style="color:#58a1dd">SUCCEEDED&lt;/span>(&lt;span style="color:#58a1dd">hr&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">return&lt;/span> &lt;span style="color:#58a1dd">hr&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">LPCWSTR&lt;/span> &lt;span style="color:#58a1dd">lpCurrentDirectory&lt;/span> &lt;span style="color:#ff636f">=&lt;/span> &lt;span style="color:#58a1dd">startingDirectory&lt;/span>.&lt;span style="color:#58a1dd">has_value&lt;/span>() &lt;span style="color:#ff636f">?&lt;/span> &lt;span style="color:#58a1dd">startingDirectory&lt;/span>.&lt;span style="color:#58a1dd">value&lt;/span>().&lt;span style="color:#58a1dd">c_str&lt;/span>() &lt;span style="color:#ff636f">:&lt;/span> &lt;span style="color:#ff636f">nullptr&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">std&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">vector&lt;/span>&lt;span style="color:#ff636f">&amp;lt;&lt;/span>&lt;span style="color:#ff636f">wchar_t&lt;/span>&lt;span style="color:#ff636f">&amp;gt;&lt;/span> &lt;span style="color:#58a1dd">newEnvVars&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">auto&lt;/span> &lt;span style="color:#58a1dd">zeroNewEnv&lt;/span> &lt;span style="color:#ff636f">=&lt;/span> &lt;span style="color:#58a1dd">wil&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">scope_exit&lt;/span>([&lt;span style="color:#ff636f">&amp;amp;&lt;/span>] {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">SecureZeroMemory&lt;/span>(&lt;span style="color:#58a1dd">newEnvVars&lt;/span>.&lt;span style="color:#58a1dd">data&lt;/span>(),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">newEnvVars&lt;/span>.&lt;span style="color:#58a1dd">size&lt;/span>() &lt;span style="color:#ff636f">*&lt;/span> &lt;span style="color:#ff636f">sizeof&lt;/span>(&lt;span style="color:#ff636f">decltype&lt;/span>(&lt;span style="color:#58a1dd">newEnvVars&lt;/span>.&lt;span style="color:#58a1dd">begin&lt;/span>())&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">value_type&lt;/span>));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> });
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">if&lt;/span> (&lt;span style="color:#ff636f">!&lt;/span>&lt;span style="color:#58a1dd">extraEnvVars&lt;/span>.&lt;span style="color:#58a1dd">empty&lt;/span>())
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">EnvironmentVariableMapW&lt;/span> &lt;span style="color:#58a1dd">tempEnvMap&lt;/span>{ &lt;span style="color:#58a1dd">extraEnvVars&lt;/span> };
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">auto&lt;/span> &lt;span style="color:#58a1dd">zeroEnvMap&lt;/span> &lt;span style="color:#ff636f">=&lt;/span> &lt;span style="color:#58a1dd">wil&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">scope_exit&lt;/span>([&lt;span style="color:#ff636f">&amp;amp;&lt;/span>] {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#828b96;font-style:italic">// Can&amp;#39;t zero the keys, but at least we can zero the values.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span> &lt;span style="color:#ff636f">for&lt;/span> (&lt;span style="color:#ff636f">auto&lt;/span>&lt;span style="color:#ff636f">&amp;amp;&lt;/span> [&lt;span style="color:#58a1dd">name&lt;/span>, &lt;span style="color:#58a1dd">value&lt;/span>] &lt;span style="color:#ff636f">:&lt;/span> &lt;span style="color:#58a1dd">tempEnvMap&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">SecureZeroMemory&lt;/span>(&lt;span style="color:#58a1dd">value&lt;/span>.&lt;span style="color:#58a1dd">data&lt;/span>(), &lt;span style="color:#58a1dd">value&lt;/span>.&lt;span style="color:#58a1dd">size&lt;/span>() &lt;span style="color:#ff636f">*&lt;/span> &lt;span style="color:#ff636f">sizeof&lt;/span>(&lt;span style="color:#ff636f">decltype&lt;/span>(&lt;span style="color:#58a1dd">value&lt;/span>.&lt;span style="color:#58a1dd">begin&lt;/span>())&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">value_type&lt;/span>));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">tempEnvMap&lt;/span>.&lt;span style="color:#58a1dd">clear&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> });
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">RETURN_IF_FAILED&lt;/span>(&lt;span style="color:#58a1dd">UpdateEnvironmentMapW&lt;/span>(&lt;span style="color:#58a1dd">tempEnvMap&lt;/span>));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">RETURN_IF_FAILED&lt;/span>(&lt;span style="color:#58a1dd">EnvironmentMapToEnvironmentStringsW&lt;/span>(&lt;span style="color:#58a1dd">tempEnvMap&lt;/span>, &lt;span style="color:#58a1dd">newEnvVars&lt;/span>));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#828b96;font-style:italic">// Required when using a unicode environment block.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span> &lt;span style="color:#58a1dd">dwCreationFlags&lt;/span> &lt;span style="color:#ff636f">|=&lt;/span> &lt;span style="color:#58a1dd">CREATE_UNICODE_ENVIRONMENT&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">LPWCH&lt;/span> &lt;span style="color:#58a1dd">lpEnvironment&lt;/span> &lt;span style="color:#ff636f">=&lt;/span> &lt;span style="color:#58a1dd">newEnvVars&lt;/span>.&lt;span style="color:#58a1dd">empty&lt;/span>() &lt;span style="color:#ff636f">?&lt;/span> &lt;span style="color:#ff636f">nullptr&lt;/span> &lt;span style="color:#ff636f">:&lt;/span> &lt;span style="color:#58a1dd">newEnvVars&lt;/span>.&lt;span style="color:#58a1dd">data&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">bool&lt;/span> &lt;span style="color:#58a1dd">fSuccess&lt;/span> &lt;span style="color:#ff636f">=&lt;/span> &lt;span style="color:#ff636f">!!&lt;/span>&lt;span style="color:#58a1dd">CreateProcessW&lt;/span>(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">nullptr&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">mutableCommandline&lt;/span>.&lt;span style="color:#58a1dd">get&lt;/span>(),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">nullptr&lt;/span>, &lt;span style="color:#828b96;font-style:italic">// lpProcessAttributes
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span> &lt;span style="color:#ff636f">nullptr&lt;/span>, &lt;span style="color:#828b96;font-style:italic">// lpThreadAttributes
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span> &lt;span style="color:#58a1dd">true&lt;/span>, &lt;span style="color:#828b96;font-style:italic">// bInheritHandles
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span> &lt;span style="color:#58a1dd">dwCreationFlags&lt;/span>, &lt;span style="color:#828b96;font-style:italic">// dwCreationFlags
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span> &lt;span style="color:#58a1dd">lpEnvironment&lt;/span>, &lt;span style="color:#828b96;font-style:italic">// lpEnvironment
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span> &lt;span style="color:#58a1dd">lpCurrentDirectory&lt;/span>, &lt;span style="color:#828b96;font-style:italic">// lpCurrentDirectory
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span> &lt;span style="color:#ff636f">&amp;amp;&lt;/span>&lt;span style="color:#58a1dd">si&lt;/span>, &lt;span style="color:#828b96;font-style:italic">// lpStartupInfo
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span> &lt;span style="color:#58a1dd">piPty&lt;/span> &lt;span style="color:#828b96;font-style:italic">// lpProcessInformation
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span> );
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">CloseHandle&lt;/span>(&lt;span style="color:#58a1dd">inPipeConhostSide&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">CloseHandle&lt;/span>(&lt;span style="color:#58a1dd">outPipeConhostSide&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">CloseHandle&lt;/span>(&lt;span style="color:#58a1dd">signalPipeConhostSide&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">return&lt;/span> &lt;span style="color:#58a1dd">fSuccess&lt;/span> &lt;span style="color:#ff636f">?&lt;/span> &lt;span style="color:#58a1dd">S_OK&lt;/span> : &lt;span style="color:#58a1dd">HRESULT_FROM_WIN32&lt;/span>(&lt;span style="color:#58a1dd">GetLastError&lt;/span>());
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>实际上是通过三根管道与 conhost 相连，conhost.exe 将数据通过管道发送到 WindowsTerminal.exe，从管道接收到信号和数据。&lt;/p>
&lt;p>在实现 wsudo 的过程中，我们也可以使用类似的机制，简单点就是创建一个 sudo-service 作为特权服务运行，当用户运行 sudo 时，与服务通信，授权成功后，sudo-service 创建一个 &lt;code>ConPty&lt;/code> （或者直接使用 OpenConsole）与作为特权进程的父进程。sudo-service 与 sudo 交互数据即可。架构如下图所示：&lt;/p>
&lt;p>&lt;img src="https://user-images.githubusercontent.com/6904176/62018098-da55d580-b1eb-11e9-8cab-8a68ea273d46.png" alt="">&lt;/p>
&lt;p>这种机制的缺陷是，需要多次转发数据，以输入为例，数据输入从用户到 sudo, sudo 发送给 sudo-service, sudo-service 写入到 OpenConsole. OpenConsole 写入到特权进程。这样一来，大量数据时，可能需要大量 IO 和 CPU。不过这种情况下无需考虑 Console 和 Cygwin/MSYS PTY 的差异。&lt;/p>
&lt;h3 id="ntsetinformationprocess-的-sudo-机制">NtSetInformationProcess 的 sudo 机制&lt;/h3>
&lt;p>在 Github 上，Parker Snell 开发了 &lt;a href="https://github.com/parkovski/wsudo">wsudo: Proof of concept sudo for Windows&lt;/a>（和 Privexec wsudo 同名），在这个 wsudo 里面，使用 C/S 架构和 &lt;code>NtSetInformationProcess&lt;/code> 实现了 sudo 的机制，这种机制实际上与 Linux sudo 类似，即都是从标准用户中启动，这样便可以完整的继承当前的终端设备，环境变量，不同之处在于，这里是 wsudo_client 是通过请求 wsudo_server，授权请求成功返回后，使用 &lt;code>CREATE_SUSPENDED&lt;/code> 标志创建暂停的子进程，将进程的句柄发送给 &lt;code>wsudo_server&lt;/code>，&lt;code>wsudo_server&lt;/code> 使用 &lt;code>NtSetInformationProcess&lt;/code> 修改子进程的 &lt;code>Token&lt;/code>，将其提升为特权进程，wsudo_client 再运行 &lt;code>ResumeThread&lt;/code> 将其唤醒。在 ReactOS 中 &lt;code>CreateProcessAsUser&lt;/code> 实际上同样使用了 &lt;code>NtSetInformationProcess&lt;/code>，即使用 &lt;code>CreateProcessW&lt;/code> 创建挂起的进程后，使用 &lt;code>NtSetInformationProcess&lt;/code> 设置进程的 &lt;code>Token&lt;/code> 然后使进程的主线程恢复运行。在 Windows &lt;code>CreateProcessAsUser&lt;/code> 的机制大致如此，但具体的实现细节存在差异。此方案与 &lt;code>CreateProcessAsUser&lt;/code> 不同的是并非由子进程的父进程去修改 &lt;code>Token&lt;/code>，而是交由 &lt;code>wsudo_server&lt;/code> 这样的特权服务修改其 &lt;code>Token&lt;/code>。因此 &lt;code>CreateProcessAsUser&lt;/code> 实际更倾向于降权。而在 &lt;code>wsudo_server&lt;/code> 这一端，实际上也是一种降权（Local System 权限高于 Administrator），不过整体上看就不一样了。&lt;/p>
&lt;p>不过在此例中，wsudo_server 是直接拷贝的服务的 &lt;code>Token&lt;/code>，这种机制有很大的风险，建议的策略是使用 &lt;code>LogonUserW&lt;/code> 获得受限的管理员 Token 后，再使用 &lt;code>GetTokenInformation&lt;/code> 获得 &lt;code>TokenLinkedToken&lt;/code>，由 &lt;code>LinkedToken&lt;/code> 创建管理员进程，这与 appinfo 服务的机制类似。当然也可以使用 &lt;code>WTSQueryUserToken&lt;/code> 获得管理员进程的 Token 再使用 &lt;code>GetTokenInformation&lt;/code> 获得 &lt;code>TokenLinkedToken&lt;/code> 创建管理员进程，但 &lt;code>LogonUserW&lt;/code> 生成的令牌可能有一些限制。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#1d2432;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c++" data-lang="c++">&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">HObject&lt;/span> &lt;span style="color:#58a1dd">currentToken&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#828b96;font-style:italic">// if (!OpenProcessToken(clientProcess, TOKEN_DUPLICATE | TOKEN_READ,
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span> &lt;span style="color:#ff636f">if&lt;/span> (&lt;span style="color:#ff636f">!&lt;/span>&lt;span style="color:#58a1dd">OpenProcessToken&lt;/span>(&lt;span style="color:#58a1dd">GetCurrentProcess&lt;/span>(), &lt;span style="color:#58a1dd">TOKEN_DUPLICATE&lt;/span> &lt;span style="color:#ff636f">|&lt;/span> &lt;span style="color:#58a1dd">TOKEN_READ&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">&amp;amp;&lt;/span>&lt;span style="color:#58a1dd">currentToken&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">log&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">error&lt;/span>(&lt;span style="color:#a6be9d">&amp;#34;Client {}: Couldn&amp;#39;t open client process token: {}&amp;#34;&lt;/span>, &lt;span style="color:#58a1dd">_clientId&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">lastErrorString&lt;/span>());
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">return&lt;/span> &lt;span style="color:#58a1dd">false&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">PSID&lt;/span> &lt;span style="color:#58a1dd">ownerSid&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">PSID&lt;/span> &lt;span style="color:#58a1dd">groupSid&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">PACL&lt;/span> &lt;span style="color:#58a1dd">dacl&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">PACL&lt;/span> &lt;span style="color:#58a1dd">sacl&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">PSECURITY_DESCRIPTOR&lt;/span> &lt;span style="color:#58a1dd">secDesc&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">if&lt;/span> (&lt;span style="color:#ff636f">!&lt;/span>&lt;span style="color:#58a1dd">SUCCEEDED&lt;/span>(&lt;span style="color:#58a1dd">GetSecurityInfo&lt;/span>(&lt;span style="color:#58a1dd">currentToken&lt;/span>, &lt;span style="color:#58a1dd">SE_KERNEL_OBJECT&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">DACL_SECURITY_INFORMATION&lt;/span> &lt;span style="color:#ff636f">|&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">SACL_SECURITY_INFORMATION&lt;/span> &lt;span style="color:#ff636f">|&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">GROUP_SECURITY_INFORMATION&lt;/span> &lt;span style="color:#ff636f">|&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">OWNER_SECURITY_INFORMATION&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">&amp;amp;&lt;/span>&lt;span style="color:#58a1dd">ownerSid&lt;/span>, &lt;span style="color:#ff636f">&amp;amp;&lt;/span>&lt;span style="color:#58a1dd">groupSid&lt;/span>, &lt;span style="color:#ff636f">&amp;amp;&lt;/span>&lt;span style="color:#58a1dd">dacl&lt;/span>, &lt;span style="color:#ff636f">&amp;amp;&lt;/span>&lt;span style="color:#58a1dd">sacl&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">&amp;amp;&lt;/span>&lt;span style="color:#58a1dd">secDesc&lt;/span>)))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">log&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">error&lt;/span>(&lt;span style="color:#a6be9d">&amp;#34;Client {}: Couldn&amp;#39;t get security info: {}&amp;#34;&lt;/span>, &lt;span style="color:#58a1dd">_clientId&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">lastErrorString&lt;/span>());
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">return&lt;/span> &lt;span style="color:#58a1dd">false&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">WSUDO_SCOPEEXIT&lt;/span> { &lt;span style="color:#58a1dd">LocalFree&lt;/span>(&lt;span style="color:#58a1dd">secDesc&lt;/span>); };
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">SECURITY_ATTRIBUTES&lt;/span> &lt;span style="color:#58a1dd">secAttr&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">secAttr&lt;/span>.&lt;span style="color:#58a1dd">nLength&lt;/span> &lt;span style="color:#ff636f">=&lt;/span> &lt;span style="color:#ff636f">sizeof&lt;/span>(&lt;span style="color:#58a1dd">SECURITY_ATTRIBUTES&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">secAttr&lt;/span>.&lt;span style="color:#58a1dd">bInheritHandle&lt;/span> &lt;span style="color:#ff636f">=&lt;/span> &lt;span style="color:#58a1dd">true&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">secAttr&lt;/span>.&lt;span style="color:#58a1dd">lpSecurityDescriptor&lt;/span> &lt;span style="color:#ff636f">=&lt;/span> &lt;span style="color:#58a1dd">secDesc&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#828b96;font-style:italic">//
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">HObject&lt;/span> &lt;span style="color:#58a1dd">newToken&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">if&lt;/span> (&lt;span style="color:#ff636f">!&lt;/span>&lt;span style="color:#58a1dd">DuplicateTokenEx&lt;/span>(&lt;span style="color:#58a1dd">currentToken&lt;/span>, &lt;span style="color:#58a1dd">MAXIMUM_ALLOWED&lt;/span>, &lt;span style="color:#ff636f">&amp;amp;&lt;/span>&lt;span style="color:#58a1dd">secAttr&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">SecurityImpersonation&lt;/span>, &lt;span style="color:#58a1dd">TokenPrimary&lt;/span>, &lt;span style="color:#ff636f">&amp;amp;&lt;/span>&lt;span style="color:#58a1dd">newToken&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">log&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">error&lt;/span>(&lt;span style="color:#a6be9d">&amp;#34;Client {}: Couldn&amp;#39;t duplicate token: {}&amp;#34;&lt;/span>, &lt;span style="color:#58a1dd">_clientId&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">lastErrorString&lt;/span>());
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">return&lt;/span> &lt;span style="color:#58a1dd">false&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">_userToken&lt;/span> &lt;span style="color:#ff636f">=&lt;/span> &lt;span style="color:#58a1dd">std&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">move&lt;/span>(&lt;span style="color:#58a1dd">newToken&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">log&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">info&lt;/span>(&lt;span style="color:#a6be9d">&amp;#34;Client {}: Authorized; stored new token.&amp;#34;&lt;/span>, &lt;span style="color:#58a1dd">_clientId&lt;/span>);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>这种在 Windows 中实现 &lt;code>sudo&lt;/code> 的机制较简单，复杂性较低。当然需要安装服务，进程间安全通信，避免提权漏洞，这些问题都需要解决，所以并不是那么容易的。而且对于使用 &lt;code>NtSetInformationProcess&lt;/code> 修改进程权限，Windows 内核团队好像并不意见用户这样做（&lt;a href="https://social.msdn.microsoft.com/forums/windowsdesktop/en-US/86602194-c8f7-4c42-b349-fd78e1bdb5f2/ntsetinformationprocess-processaccesstoken-fails-with-statusnotsupported">NTSetInformationProcess (ProcessAccessToken) fails with STATUS_NOT_SUPPORTED&lt;/a> 2007-01-03）：&lt;/p>
&lt;pre tabindex="0">&lt;code>Hello.
I am a developer on the Windows Kernel Team. Before continuing, I want to stress as a disclaimer that NtSetInformationProcess, class ProcessAccessToken, is an undocumented and unsupported infterface. It is reserved for system component use and is subject to change between operating system releases. That being said, I would like to address your particular concern.
The NT kernel was never intended to allow token switching once a process started running. This is because handles, etc. may have been opened in an old security context, inflight operations may use inconsistent security contexts, etc. As such, it typically does not make sense to switch a process&amp;#39; token once it has begun execution. However, this was not enforced until Vista.
Unfortunately, it is difficult to properly implement setuid() semantics on NT as you have noted, though it too could be susceptible to the issues outlined above. After exploring alternative implementations for Interix we settled on leaving the lazy swap behavior intact for EXEs launched from POSIX binaries (image type = POSIX in the PE image). This was a reasonable compromise since the change was not security-based in nature, and allowed the legacy behavior to persist in conjunction with binaries that had (or should have) better control of their environment.
Arun Kishan
Windows Kernel Team
&lt;/code>&lt;/pre>&lt;p>不过上述回复是 2007 年，时至今日，不知道 Windows 内核团队有没有新的看法。&lt;/p>
&lt;p>遗憾的是 Parker Snell 采取的是 GPLv3 协议，如果要使用此方案，则可能需要在 &lt;code>cleanroot&lt;/code> 中实现，在 Windows Terminal 的评论中，我也没有添加此方案的介绍。&lt;/p>
&lt;h3 id="需要-ui-交互的-wsudo">需要 UI 交互的 wsudo&lt;/h3>
&lt;p>前面三种情况都是需要重新实现一个服务或者在现有服务基础上改进，在服务中创建管理员进程的 Token，这对于微软来说存在诸多顾虑，而第三方开发者实现也需要慎重考虑避免安全问题，如果我们在保留 UAC 的基础上，可以使用下面的方案。&lt;/p>
&lt;p>前面说到，我们可以使用 &lt;a href="https://docs.microsoft.com/en-us/windows/console/attachconsole">AttachConsole&lt;/a> 将进程附加到旧的控制台上，如果可以接受需要 UI 交互，我们可以使用 &lt;code>AttachConsole&lt;/code> 实现不完整的 &lt;code>sudo&lt;/code>。&lt;/p>
&lt;p>在 &lt;a href="https://github.com/M2Team/Privexec">Privexec&lt;/a> 中，我通过 &lt;a href="https://github.com/M2Team/Privexec/blob/master/wsudo/wsudo-tie.cc">&lt;code>wsudo-tie&lt;/code>&lt;/a> 命令作为中间件实现不完整的 &lt;code>sudo&lt;/code>。当用户在控制台中使用 &lt;code>wsudo -A&lt;/code> 启动管理员进程时，如果目标可执行程序的子系统为 &lt;code>Windows CUI&lt;/code>（或者后缀为 &lt;code>.bat&lt;/code>,&lt;code>.com&lt;/code>,&lt;code>.cmd&lt;/code>），并且启动参数没有 &lt;code>--hide&lt;/code> &lt;code>--new-console&lt;/code>则使用 ShellExecuteEx 启动 &lt;code>wsudo-tie&lt;/code>，在 &lt;code>wsudo-tie&lt;/code> 中，设置好工作目录，环境变量，并调用 &lt;code>FreeConsole&lt;/code>，&lt;code>AttachConsole&lt;/code> 后，启动新的进程，这样无论是工作目录还是环境变量等，都与预期的相符。下图在控制台中使用 wsudo 启动一个管理员权限的 wsudo，后者再启动了 &lt;code>TrustedInstaller&lt;/code> 的 &lt;code>pwsh&lt;/code>。&lt;/p>
&lt;p>&lt;img src="https://user-images.githubusercontent.com/6904176/62051234-8972cb00-b245-11e9-958d-e3af4ca614f7.png" alt="">&lt;/p>
&lt;p>这种方案借鉴了 &lt;a href="https://github.com/lukesampson/psutils/blob/master/sudo.ps1">lukesampson/psutils&lt;/a> 的 sudo 机制，但有所改善。&lt;/p>
&lt;p>wsudo-tie 的方案并不适合 Cygwin/MSYS 的终端，如 Mintty，因为这些终端使用管道模拟而不是像 ConEmu 内部有个控制台，此时使用 AttachConsole 会失败。&lt;/p>
&lt;p>另外需要注意的是，在 &lt;code>wsudo-tie&lt;/code> 中，&lt;code>CreateProcessW&lt;/code> 启动 &lt;code>.bat&lt;/code>/&lt;code>.cmd&lt;/code> 可能会出现找不到文件的情况，我这里使用 &lt;code>bela::ExecutableExistsInPath&lt;/code> 避免这种情况的发生。&lt;/p>
&lt;p>在这种方案中，弹出安全桌面时，显示的是 wsudo-tie 的信息，而不是目标进程的信息，这就意味着没有对目标程序进行数字签名校验，要实现数字签名校验，还有很多事情要做。&lt;/p>
&lt;p>AttachConsole 的相关流程可以参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/microsoft/terminal/blob/0d8f2998d6fdfa6013854ea66ccf26ed34ba8de2/src/server/IoDispatchers.cpp#L141">Windows Terminal: oDispatchers::ConsoleHandleConnectionRequest&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/microsoft/terminal/blob/0d8f2998d6fdfa6013854ea66ccf26ed34ba8de2/src/server/IoDispatchers.cpp#L267">Windows Terminal: IoDispatchers::ConsoleClientDisconnectRoutine&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/reactos/reactos/blob/3f1ab92d3aca8b7b0965a1004e4a5f25b4d64025/dll/win32/kernel32/client/console/console.c#L2675">ReactOS: AttachConsole&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="最后">最后&lt;/h2>
&lt;p>在 Windows 上实现非 Windows 哲学的 sudo 还是比较复杂的，sudo 虽然好玩，但我们还是应该遵循 &lt;strong>最小特权原则 &lt;a href="https://en.wikipedia.org/wiki/Principle_of_least_privilege">Principle of least privilege&lt;/a>&lt;/strong> ，减少提权请求。&lt;/p>
&lt;h2 id="备注">备注&lt;/h2>
&lt;ol>
&lt;li>&lt;a href="https://www.codeproject.com/Articles/19165/Vista-UAC-The-Definitive-Guide">Vista UAC: The Definitive Guide&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://blogs.msdn.microsoft.com/winsdk/2013/03/22/how-to-launch-a-process-as-a-full-administrator-when-uac-is-enabled/">How to launch a process as a Full Administrator when UAC is enabled?&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://blogs.msdn.microsoft.com/winsdk/2010/05/31/dealing-with-administrator-and-standard-users-context/">Dealing with Administrator and standard user’s context&lt;/a>&lt;/li>
&lt;/ol>
- https://forcemz.net/posts/2019/2019-08-07-implement-sudo-in-windows/ - Copyright (c) 2009-2024 J23</description></item><item><title>服务端 Git 钩子的妙用</title><link>https://forcemz.net/posts/2019/2019-07-30-gnk-server-side/</link><pubDate>Tue, 30 Jul 2019 20:00:00 +0800</pubDate><guid>https://forcemz.net/posts/2019/2019-07-30-gnk-server-side/</guid><description>江二十三的思考 https://forcemz.net/posts/2019/2019-07-30-gnk-server-side/ -&lt;h1 id="背景">背景&lt;/h1>
&lt;p>在 &lt;a href="https://git-scm.com/book/en/v2/Customizing-Git-Git-Hooks">《Pro Git》&lt;/a> 的 &lt;strong>Server-Side Hooks&lt;/strong> 介绍了三种钩子，分别是 &lt;code>pre-receive&lt;/code> 已经 &lt;code>update&lt;/code> 还有 &lt;code>post-receive&lt;/code>。GITEE 最初是基于 Gitlab 发展而来，最开始在服务端使用的是 &lt;code>update&lt;/code> 钩子。我们使用 &lt;code>update&lt;/code> 钩子完成一些保护分支/只读分支的功能。随着 Gitee 的不断发展，也有人提出了一些新的服务需求，为了解决大仓库大文件，我们开发了 Git Native Hook (GNK)。新的钩子利用了 git 的一些新的特性，在不同的阶段实现不同的功能，这里就介绍一下这些钩子的妙用。&lt;/p>
&lt;p>在阅读本文之前，你可以阅读 &lt;a href="https://git-scm.com/book/en/v2/Customizing-Git-Git-Hooks">《Pro Git》&lt;/a> 关于服务端钩子的技术细节，你还可以阅读 &lt;a href="https://forcemz.net/git/2017/11/22/GitNativeHookDepthOptimization/">《Git 原生钩子的深度优化》&lt;/a>以及&lt;a href="https://forcemz.net/git/2019/04/01/ImplementGitDirPermissionControl/">《实现 Git 目录权限控制》&lt;/a>。&lt;/p>
&lt;h2 id="分支权限管理">分支权限管理&lt;/h2>
&lt;p>人们对于权限管理的要求往往会有一个变迁过程，从最开始的一刀切，到后来的精细化控制，事实告诉我们，如果不提供细粒度的权限控制，那么总会有用户提出需求的。&lt;/p>
&lt;p>在实现 GNK 之前，我们使用 gitlab-shell 的某个脚本软链到 hooks 目录作为 update 钩子，每更新一个引用，update 钩子将被调用一次，格式为:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#1d2432;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#58a1dd">$GIT_DIR&lt;/span>/hooks/update refname oldrev newrev
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>只要以 &lt;code>refs/heads/&lt;/code> 开头的引用被修改了，并且此引用对应的分支名已经被存储在数据库中作为只读分支或者保护分支，我们可以让钩子返回非零值，让推送失败，这样就可以实现分支权限细粒度管理的功能。然而不利的因素是，当一次性推送多个分支时，update 钩子将被启动多次，update 钩子需要鉴权，鉴权请求也会发送多次，这实际上是不利于系统优化的。&lt;/p>
&lt;p>在 GNK 中，我们使用 GNK pre-receive 钩子实现鉴权，pre-receive 在标准输入读取所有被更新的引用，循环的使用 &lt;code>getline&lt;/code> 即可获得所有修改的分支，这样一来多个分支的验证就可以合并成一个，这可以极大的减少鉴权请求次数。&lt;/p>
&lt;p>pre-receive 标准输入格式：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#1d2432;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-txt" data-lang="txt">&lt;span style="display:flex;">&lt;span>refname SP oldrev SP newrev LF
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>refnameN SP oldrev SP newrev LF
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>除了保护分支，只读分支，我们还可以在 GNK 中实现禁止用户推送创建新的分支功能，我们知道当 &lt;strong>oldrev&lt;/strong> 为 &lt;strong>0000000000000000000000000000000000000000&lt;/strong> 时，表示用户创建了新的引用（newrev 与 oldrev 是不能同时为 &lt;code>zerooid&lt;/code> 的，这是没有意义的）。如果存在 oldrev 为全零且 &lt;code>refname&lt;/code> 以 &lt;code>refs/heads/&lt;/code> 开头，我们便可以知道用户创建了新的分支，使用一个 &lt;code>bool&lt;/code> 类型的 &lt;code>nbe&lt;/code> 告知 API ，API 授权失败 pre-receive 返回非零值即可禁止用户推送创建分支。&lt;/p>
&lt;h2 id="存储配额和大文件">存储配额和大文件&lt;/h2>
&lt;p>在 update 钩子中，检测存储库配额往往不切实际，多次调用 update 钩子可能需要执行多次统计存储库体积，这是不划算的，但不做存储库体积检测，存储库配额限制很容易失效，出现限制逃逸。在 GNK 中，我们使用 pre-receive 进行配额计算，当用户配额超出限制时，允许三次重试机会，如果强制推送后运行强制 gc 后，存储库体积恢复到限制之下，用户即可正常使用存储库。同时如果用户的限制次数还存在，但存储库体积小于配额限制，依然是可以推送的，这通常与 git 自动 gc 有关。&lt;/p>
&lt;p>绝大多数版本控制系统都是针对文本优化的，或者是基于文本补丁的，git 是基于文件快照的，这些版本控制系统在管理文本文件，程序源码有着天然的优势。而大文件往往会带来麻烦。&lt;/p>
&lt;p>git 使用 &lt;a href="https://linux.die.net/man/2/mmap">mmap(2)&lt;/a> 读写文件，使用 &lt;a href="https://github.com/madler/zlib">zlib&lt;/a> 将原始的文件，tree 结构，commit 文件压缩成 blob, tree, commit。所以一些限制确实存在，第一，32 位程序的内存最大是 4GB，因此，你应该始终使用 64 位系统和 64 位 git，无论是 Windows Linux 还是 macOS。zlib 的压缩算法 &lt;code>deflate&lt;/code> 历史悠久，压缩解压数度并不快，并且压缩比也不高，大文件带来的后果很明显，推送的过程打包解包的时间急剧增加，用户从远程服务器上拉取数据的时间同样如此，如果文件不是 ANSI/UTF-8/UTF-16 这样的文本文件也就是通常意义上的二进制文件，那么 CPU 的占用将更高，耗时也更长。&lt;/p>
&lt;p>在 gitlab-shell 中，由于当时的开发者对钩子认识的局限性，使用 &lt;code>commit between&lt;/code> 机制在 &lt;code>update&lt;/code> 钩子中遍历比较文件修改，查看文件原始大小，这样带来的后果是大文件限制容易被突破，不同的引用之间可能出现文件重复检查，API 多次调用，悬空对象不断产生。在 GNK 中，我们使用 pre-receive 钩子分析松散对象和 &lt;code>packet index&lt;/code> 文件，判断压缩后的文件大小来判断文件是否超出限制。这里更多的细节可以阅读 &lt;a href="https://forcemz.net/git/2017/11/22/GitNativeHookDepthOptimization/">《Git 原生钩子的深度优化》&lt;/a>。这种机制的好处是使用环境隔离避免了产生悬空对象从而避免用户存储库配额的误消耗。而分析 &lt;code>.idx&lt;/code> 文件比解析 commit 然后解析 blob 要高效的多，以 Linux 内核打包体积 &lt;code>1345.25 MB&lt;/code> 对象 &lt;code>6361509&lt;/code>，耗时长 &lt;code>553ms&lt;/code>。而我们很少直接推送超过 1GB 的存储库，就算存储库 1GB，对象也很少超过 600W。同样 GNK pre-receive 也只需要在授权阶段返回配额信息即可，不需要多次请求。&lt;/p>
&lt;h2 id="存储库数据搜集">存储库数据搜集&lt;/h2>
&lt;p>在使用 gitlab-shell update 钩子时，存储库体积的更新并不及时，有时候还需要手动点击更新。&lt;/p>
&lt;p>在 GNK 中，我们在 pre-receive 计算了存储库体积，这个数据除了与配额做比较之外，还可以被收集起来，这里我们将一些信息序列化插入到队列中，由 blaze 获取处理，更新用户的存储库大小。&lt;/p>
&lt;p>存储库大小在数据库中以 MB 为单位，我们的更新采用了模糊策略，体积转换相等后不更新，存储库体积大于 80MB 时，体积变更在 2MB 及以上则更新，其余是 1MB, 存储库体积近似不变不更新。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#1d2432;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff636f">const&lt;/span> (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">KB&lt;/span> &lt;span style="color:#ff636f">int64&lt;/span> = &lt;span style="color:#a6be9d">1024&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">MB&lt;/span> &lt;span style="color:#ff636f">int64&lt;/span> = &lt;span style="color:#a6be9d">1024&lt;/span> &lt;span style="color:#ff636f">*&lt;/span> &lt;span style="color:#a6be9d">1024&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">GB&lt;/span> &lt;span style="color:#ff636f">int64&lt;/span> = &lt;span style="color:#a6be9d">1024&lt;/span> &lt;span style="color:#ff636f">*&lt;/span> &lt;span style="color:#a6be9d">1024&lt;/span> &lt;span style="color:#ff636f">*&lt;/span> &lt;span style="color:#a6be9d">1024&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">// FastAbs todo
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span>&lt;span style="color:#ff636f">func&lt;/span> &lt;span style="color:#58a1dd">FastAbs&lt;/span>(&lt;span style="color:#58a1dd">n&lt;/span> &lt;span style="color:#ff636f">int64&lt;/span>) &lt;span style="color:#ff636f">int64&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">y&lt;/span> &lt;span style="color:#ff636f">:=&lt;/span> &lt;span style="color:#58a1dd">n&lt;/span> &lt;span style="color:#ff636f">&amp;gt;&amp;gt;&lt;/span> &lt;span style="color:#a6be9d">63&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">return&lt;/span> (&lt;span style="color:#58a1dd">n&lt;/span> ^ &lt;span style="color:#58a1dd">y&lt;/span>) &lt;span style="color:#ff636f">-&lt;/span> &lt;span style="color:#58a1dd">y&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">// RecordSize todo
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span>&lt;span style="color:#ff636f">func&lt;/span> &lt;span style="color:#58a1dd">RecordSize&lt;/span>(&lt;span style="color:#58a1dd">size&lt;/span>, &lt;span style="color:#58a1dd">oldsize&lt;/span> &lt;span style="color:#ff636f">int64&lt;/span>) &lt;span style="color:#ff636f">int64&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">newsize&lt;/span> &lt;span style="color:#ff636f">:=&lt;/span> &lt;span style="color:#58a1dd">size&lt;/span> &lt;span style="color:#ff636f">/&lt;/span> &lt;span style="color:#58a1dd">MB&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#828b96;font-style:italic">// When repo size%MB &amp;gt;720KB ~ size/MB+1
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span> &lt;span style="color:#ff636f">if&lt;/span> &lt;span style="color:#58a1dd">size&lt;/span>&lt;span style="color:#ff636f">%&lt;/span>&lt;span style="color:#58a1dd">MB&lt;/span> &amp;gt; &lt;span style="color:#a6be9d">720&lt;/span>&lt;span style="color:#ff636f">*&lt;/span>&lt;span style="color:#58a1dd">KB&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">newsize&lt;/span>&lt;span style="color:#ff636f">++&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">if&lt;/span> &lt;span style="color:#58a1dd">newsize&lt;/span> &lt;span style="color:#ff636f">==&lt;/span> &lt;span style="color:#58a1dd">oldsize&lt;/span> &lt;span style="color:#ff636f">||&lt;/span> (&lt;span style="color:#58a1dd">oldsize&lt;/span> &amp;gt; &lt;span style="color:#a6be9d">80&lt;/span> &lt;span style="color:#ff636f">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#58a1dd">FastAbs&lt;/span>(&lt;span style="color:#58a1dd">newsize&lt;/span>&lt;span style="color:#ff636f">-&lt;/span>&lt;span style="color:#58a1dd">oldsize&lt;/span>) &amp;lt; &lt;span style="color:#a6be9d">2&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">return&lt;/span> &lt;span style="color:#58a1dd">oldsize&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">return&lt;/span> &lt;span style="color:#58a1dd">newsize&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>在 GNK pre-receive 进行存储库大小分析时，我们还可以对存储库松散对象进行计算，当松散对象数目超过一定限制，则可以产生一个任务给 blaze，让其启动一个普通的 &lt;code>git gc&lt;/code> 进程，将松散对象打包到 pack 文件从而提高存储库的响应速度。&lt;/p>
&lt;h2 id="只读目录和禁止推送暴露邮箱">只读目录和禁止推送暴露邮箱&lt;/h2>
&lt;p>在 &lt;a href="https://forcemz.net/git/2019/04/01/ImplementGitDirPermissionControl/">《实现 Git 目录权限控制》&lt;/a> 一文中，我提到过如何实现 git 目录权限控制，通常来说，增加自定义功能应当避免修复 git 源码，而应该在钩子中自定义实现，所以最后的选择是在 update 钩子中实现只读，具体的实现可以阅读 《实现 Git 目录权限控制》。&lt;/p>
&lt;p>与只读目录类似，libgit2 在 pre-receive 阶段并不能很好的处理环境隔离机制，因此，我们在 GNK 中选择在 update 阶段在 每一次 update 钩子执行时进行 &lt;code>revwalk&lt;/code> 检查用户的邮箱是否在提交的 commit 中。为了避免多次请求 API 服务，通过 &lt;code>basalt--git-srv&lt;/code> &lt;code>brzox--git-srv&lt;/code> 的推送进行了优化。&lt;/p>
&lt;h2 id="推送动态">推送动态&lt;/h2>
&lt;p>用户推送代码后，Gitee 应该出现推送动态。在 gitlab-shell 中，此功能有 update 钩子实现，多分支时往往需要请求多次，而在 GNK post-receive 中，我们使用 &lt;code>redis pipeline&lt;/code> 以及分组合并策略，优化了大量分支推送时，多次访问 redis 。&lt;/p>
&lt;h2 id="备份">备份&lt;/h2>
&lt;p>post-receive 往往不会影响存储库是否推送成功，主要的目的就是为了告知用户推送成功，此时我们便可以使用 post-receive 实现存储库同步，在 GNK 中，开启 post-receive 同步后，post-receive 发送任务给 blaze，blaze 或者存储库的备份机器，实现备份，目前 gitee 的企业存储库所在的服务器已经使用此方案稳定运行。&lt;/p>
&lt;h2 id="最后">最后&lt;/h2>
&lt;p>实现一个好的功能需要对背景有充足的了解，改善 git 服务的体验也要从 git 的特性出发。&lt;/p>
- https://forcemz.net/posts/2019/2019-07-30-gnk-server-side/ - Copyright (c) 2009-2024 J23</description></item><item><title>Windows 命令行转义杂谈</title><link>https://forcemz.net/posts/2019/2019-07-20-cmdline-escape/</link><pubDate>Sat, 20 Jul 2019 20:00:00 +0800</pubDate><guid>https://forcemz.net/posts/2019/2019-07-20-cmdline-escape/</guid><description>江二十三的思考 https://forcemz.net/posts/2019/2019-07-20-cmdline-escape/ -&lt;h2 id="背景">背景&lt;/h2>
&lt;p>2019 年五月的 Microsoft Build 大会，微软宣布了 Windows Terminal，并在 Github 上开源：&lt;a href="https://github.com/microsoft/terminal">https://github.com/microsoft/terminal&lt;/a>。我作为技术爱好者，肯定要尝鲜一番。&lt;/p>
&lt;p>使用截图：&lt;/p>
&lt;p>&lt;img src="https://user-images.githubusercontent.com/6904176/58634006-b05e6080-82d9-11e9-9e3f-2715647edf1b.png" alt="">&lt;/p>
&lt;p>在使用的过程中，多标签，亚克力的窗口背景和 &lt;code>Colour Emojis&lt;/code> 都让我非常满意，而且使用 Direct2D 绘制的 emoji，看起来要比 Mintty 使用 GDI+PNG 的 emoji 方案好的多（PNG 的 emoji 无论是放大和缩小都更容易失真，Mintty 并没有 Segoe UI 字体的 emoji 风格，其他风格我并不太喜欢）。不过我在使用的过程中发现了一个 BUG，即 &lt;a href="https://github.com/microsoft/terminal/issues/1090">Bug Report: The conhost command line is not properly escaped #1090 &lt;/a>，后来我又提交了一个 PR 修复了此问题，在研究其他软件源码时，我发现这个问题并不是个例，因此有必要对此问题进行一次讨论，便有了此文。&lt;/p>
&lt;h2 id="windows-terminal-的命令行转义错误">Windows Terminal 的命令行转义错误&lt;/h2>
&lt;p>在 Windows Termianl 开源之处，我便安装了 Windows Termianl，并且每个周末都可能会拉取最新代码构建 Windows Termianl。但在自定义 &lt;code>profile.json&lt;/code> 时，我发现 Windows Termianl 启动某个 &lt;code>profiles&lt;/code> 会与预期不一致，相关的配置如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#1d2432;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-json" data-lang="json">&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">&amp;#34;acrylicOpacity&amp;#34;&lt;/span>: &lt;span style="color:#a6be9d">0.75&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">&amp;#34;closeOnExit&amp;#34;&lt;/span>: &lt;span style="color:#ff636f">false&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">&amp;#34;colorScheme&amp;#34;&lt;/span>: &lt;span style="color:#a6be9d">&amp;#34;Campbell&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">&amp;#34;commandline&amp;#34;&lt;/span>: &lt;span style="color:#a6be9d">&amp;#34;\&amp;#34;C:\\Program Files\\PowerShell\\7-preview\\pwsh.exe\&amp;#34; -NoExit -Command \&amp;#34;$Host.UI.RawUI.WindowTitle=\\\&amp;#34;Windows Pwsh 💙 (7 Preview)\\\&amp;#34;\&amp;#34;&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">&amp;#34;cursorColor&amp;#34;&lt;/span>: &lt;span style="color:#a6be9d">&amp;#34;#FFFFFF&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">&amp;#34;cursorShape&amp;#34;&lt;/span>: &lt;span style="color:#a6be9d">&amp;#34;bar&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">&amp;#34;fontFace&amp;#34;&lt;/span>: &lt;span style="color:#a6be9d">&amp;#34;Consolas&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">&amp;#34;fontSize&amp;#34;&lt;/span>: &lt;span style="color:#a6be9d">12&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">&amp;#34;guid&amp;#34;&lt;/span>: &lt;span style="color:#a6be9d">&amp;#34;{08a0be98-ff68-4e3a-a054-0fbd3969d3bb}&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">&amp;#34;historySize&amp;#34;&lt;/span>: &lt;span style="color:#a6be9d">9001&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">&amp;#34;icon&amp;#34;&lt;/span>: &lt;span style="color:#a6be9d">&amp;#34;ms-appdata:///roaming/pwsh-32.png&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">&amp;#34;name&amp;#34;&lt;/span>: &lt;span style="color:#a6be9d">&amp;#34;Windows Pwsh \ud83d\udc99 (7 Preview)&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">&amp;#34;padding&amp;#34;&lt;/span>: &lt;span style="color:#a6be9d">&amp;#34;0, 0, 0, 0&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">&amp;#34;snapOnInput&amp;#34;&lt;/span>: &lt;span style="color:#ff636f">true&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">&amp;#34;startingDirectory&amp;#34;&lt;/span>: &lt;span style="color:#a6be9d">&amp;#34;C:\\Users\\CharlieInc&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">&amp;#34;useAcrylic&amp;#34;&lt;/span>: &lt;span style="color:#ff636f">true&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>其中的 &lt;code>commandline&lt;/code> 是启动 Shell 的命令，这里的目的是启动 &lt;code>PowerShell 7 Preview&lt;/code> 并将其标题设置成 &lt;code>Emoji&lt;/code>, 这里 &lt;code>\ud83d\udc99&lt;/code> 实际上是 &lt;code>U+1F499&lt;/code> 即 &amp;lsquo;💙&amp;rsquo;，你可以使用 &lt;code>echo -e &amp;quot;\U0001F499&amp;quot;&lt;/code> 输出。但 Windows Terminal 中，报告了如下错误：&lt;/p>
&lt;p>&lt;img src="https://user-images.githubusercontent.com/6904176/58741634-e7558300-844d-11e9-9b7e-dcdff905ffa3.png" alt="">&lt;/p>
&lt;p>查看任务管理器命令行得到如下命令：&lt;/p>
&lt;p>&lt;img src="https://user-images.githubusercontent.com/6904176/58741666-38657700-844e-11e9-8711-e813c22bc137.png" alt="">&lt;/p>
&lt;p>我们可以看到 Pwsh 进程的命令行与 JSON 配置中的已经不一致了：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#1d2432;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-batch" data-lang="batch">&lt;span style="display:flex;">&lt;span>:&lt;span style="color:#828b96;font-style:italic">: want&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6be9d">&amp;#34;C:\Program Files\PowerShell\7-preview\pwsh.exe&amp;#34;&lt;/span> -NoExit -Command &lt;span style="color:#a6be9d">&amp;#34;$Host.UI.RawUI.WindowTitle=\&amp;#34;&lt;/span>Windows Pwsh 💙 (7 Preview)\&lt;span style="color:#a6be9d">&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>:&lt;span style="color:#828b96;font-style:italic">: got&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6be9d">&amp;#34;C:\Program Files\PowerShell\7-preview\pwsh.exe&amp;#34;&lt;/span> -NoExit -Command $Host.UI.RawUI.WindowTitle=&lt;span style="color:#a6be9d">&amp;#34;Windows Pwsh 💙 (7 Preview)&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>按照 Windows 命令行解析规范 &lt;a href="https://docs.microsoft.com/zh-cn/previous-versions/17w5ykft(v=vs.85)">Parsing C++ Command-Line Arguments &lt;/a>，pwsh 在解析命令行时， 获得到的命令行会编成如下数组：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#1d2432;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-txt" data-lang="txt">&lt;span style="display:flex;">&lt;span>ARGV0: C:\Program Files\PowerShell\7-preview\pwsh.exe
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>ARGV1: -NoExit
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>ARGV2: -Command
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>ARGV3: $Host.UI.RawUI.WindowTitle=Windows Pwsh 💙 (7 Preview)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>但实际上我们预期的命令行应该是：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#1d2432;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-txt" data-lang="txt">&lt;span style="display:flex;">&lt;span>ARGV0: C:\Program Files\PowerShell\7-preview\pwsh.exe
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>ARGV1: -NoExit
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>ARGV2: -Command
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>ARGV3: $Host.UI.RawUI.WindowTitle=&amp;#34;Windows Pwsh 💙 (7 Preview)&amp;#34;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>这样一来在 Pwsh 解析命令行后设置 &lt;code>$Host.UI.RawUI.WindowTitle&lt;/code> 肯定就会出错，那么问题是怎么产生的？&lt;/p>
&lt;p>我们查看进程树，发现 Pwsh 的父进程是 OpenConsole，也就是图中的 &lt;code>conhost.exe&lt;/code>, 即 Windows 控制台窗口主机的开源版本。&lt;/p>
&lt;p>通过分析 OpenConsole 的源码，我发现问题出现在合成子进程命令行出错了：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#1d2432;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c++" data-lang="c++">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#58a1dd">[[nodiscard]]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#58a1dd">HRESULT&lt;/span> &lt;span style="color:#58a1dd">ConsoleArguments&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">_GetClientCommandline&lt;/span>(&lt;span style="color:#58a1dd">_Inout_&lt;/span> &lt;span style="color:#58a1dd">std&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">vector&lt;/span>&lt;span style="color:#ff636f">&amp;lt;&lt;/span>&lt;span style="color:#58a1dd">std&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">wstring&lt;/span>&lt;span style="color:#ff636f">&amp;gt;&amp;amp;&lt;/span> &lt;span style="color:#58a1dd">args&lt;/span>, &lt;span style="color:#ff636f">const&lt;/span> &lt;span style="color:#58a1dd">size_t&lt;/span> &lt;span style="color:#58a1dd">index&lt;/span>, &lt;span style="color:#ff636f">const&lt;/span> &lt;span style="color:#ff636f">bool&lt;/span> &lt;span style="color:#58a1dd">skipFirst&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">auto&lt;/span> &lt;span style="color:#58a1dd">start&lt;/span> &lt;span style="color:#ff636f">=&lt;/span> &lt;span style="color:#58a1dd">args&lt;/span>.&lt;span style="color:#58a1dd">begin&lt;/span>()&lt;span style="color:#ff636f">+&lt;/span>&lt;span style="color:#58a1dd">index&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#828b96;font-style:italic">// Erase the first token.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span> &lt;span style="color:#828b96;font-style:italic">// Used to get rid of the explicit commandline token &amp;#34;--&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span> &lt;span style="color:#ff636f">if&lt;/span> (&lt;span style="color:#58a1dd">skipFirst&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#828b96;font-style:italic">// Make sure that the arg we&amp;#39;re deleting is &amp;#34;--&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span> &lt;span style="color:#58a1dd">FAIL_FAST_IF&lt;/span>(&lt;span style="color:#ff636f">!&lt;/span>(&lt;span style="color:#58a1dd">CLIENT_COMMANDLINE_ARG&lt;/span> &lt;span style="color:#ff636f">==&lt;/span> &lt;span style="color:#58a1dd">start&lt;/span>&lt;span style="color:#ff636f">-&amp;gt;&lt;/span>&lt;span style="color:#58a1dd">c_str&lt;/span>()));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">args&lt;/span>.&lt;span style="color:#58a1dd">erase&lt;/span>(&lt;span style="color:#58a1dd">start&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">_clientCommandline&lt;/span> &lt;span style="color:#ff636f">=&lt;/span> &lt;span style="color:#a6be9d">L&lt;/span>&lt;span style="color:#a6be9d">&amp;#34;&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">size_t&lt;/span> &lt;span style="color:#58a1dd">j&lt;/span> &lt;span style="color:#ff636f">=&lt;/span> &lt;span style="color:#a6be9d">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">for&lt;/span> (&lt;span style="color:#58a1dd">j&lt;/span> &lt;span style="color:#ff636f">=&lt;/span> &lt;span style="color:#58a1dd">index&lt;/span>; &lt;span style="color:#58a1dd">j&lt;/span> &lt;span style="color:#ff636f">&amp;lt;&lt;/span> &lt;span style="color:#58a1dd">args&lt;/span>.&lt;span style="color:#58a1dd">size&lt;/span>(); &lt;span style="color:#58a1dd">j&lt;/span>&lt;span style="color:#ff636f">++&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">_clientCommandline&lt;/span> &lt;span style="color:#ff636f">+=&lt;/span> &lt;span style="color:#58a1dd">args&lt;/span>[&lt;span style="color:#58a1dd">j&lt;/span>];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">if&lt;/span> (&lt;span style="color:#58a1dd">j&lt;/span>&lt;span style="color:#ff636f">+&lt;/span>&lt;span style="color:#a6be9d">1&lt;/span> &lt;span style="color:#ff636f">&amp;lt;&lt;/span> &lt;span style="color:#58a1dd">args&lt;/span>.&lt;span style="color:#58a1dd">size&lt;/span>())
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">_clientCommandline&lt;/span> &lt;span style="color:#ff636f">+=&lt;/span> &lt;span style="color:#a6be9d">L&lt;/span>&lt;span style="color:#a6be9d">&amp;#34; &amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">args&lt;/span>.&lt;span style="color:#58a1dd">erase&lt;/span>(&lt;span style="color:#58a1dd">args&lt;/span>.&lt;span style="color:#58a1dd">begin&lt;/span>()&lt;span style="color:#ff636f">+&lt;/span>&lt;span style="color:#58a1dd">index&lt;/span>, &lt;span style="color:#58a1dd">args&lt;/span>.&lt;span style="color:#58a1dd">begin&lt;/span>()&lt;span style="color:#ff636f">+&lt;/span>&lt;span style="color:#58a1dd">j&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">return&lt;/span> &lt;span style="color:#58a1dd">S_OK&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>在这段代码中，&lt;code>_clientCommandline&lt;/code> 仅仅只是简单相加，没有做任何的转义，一旦某一个参数中需要转义却未转义，则会导致子进程命令行与预期不相符，于是我便打开了 Issue: &lt;a href="https://github.com/microsoft/terminal/issues/1090">Bug Report: The conhost command line is not properly escaped #1090 &lt;/a>，由于我在实现 &lt;a href="https://github.com/M2Team/Privexec">Privexec/wsudo&lt;/a>，已经有过此类经验，还在此 Issue 中添加了一段代码告知如何转义，但最初 Windows Terminal 的意见是直接使用 &lt;code>ConPTY&lt;/code> 替换 &lt;code>Conhost&lt;/code>，也就是省去了使用 Conhost 作为 ConPTY，好吧，这有点绕，目前 Windows Terminal 依然使用 Conhost 创建 ConPTY, 然后，WindowsTerminal.exe 通过三条管道连接 Conhost.exe 分别是输入输出和信号管道。创建 &lt;a href="https://github.com/microsoft/terminal/blob/master/src/inc/conpty.h">Conhost-ConPTY&lt;/a> 的代码如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#1d2432;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c++" data-lang="c++">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">// https://github.com/rprichard/win32-console-docs
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">// https://github.com/microsoft/terminal/blob/master/src/server/Entrypoints.cpp
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">// https://github.com/microsoft/terminal/blob/master/src/cascadia/TerminalConnection/ConptyConnection.cpp
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">// https://github.com/microsoft/terminal/blob/master/src/server/DeviceComm.cpp
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">// https://github.com/microsoft/terminal/blob/master/src/cascadia/TerminalConnection/ConhostConnection.cpp
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">// https://github.com/microsoft/terminal/blob/master/src/inc/conpty.h
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff636f">__declspec&lt;/span>(&lt;span style="color:#58a1dd">noinline&lt;/span>) &lt;span style="color:#ff636f">inline&lt;/span> &lt;span style="color:#58a1dd">HRESULT&lt;/span> &lt;span style="color:#58a1dd">CreateConPty&lt;/span>(&lt;span style="color:#ff636f">const&lt;/span> &lt;span style="color:#58a1dd">std&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">wstring&lt;/span>&lt;span style="color:#ff636f">&amp;amp;&lt;/span> &lt;span style="color:#58a1dd">cmdline&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">const&lt;/span> &lt;span style="color:#ff636f">unsigned&lt;/span> &lt;span style="color:#ff636f">short&lt;/span> &lt;span style="color:#58a1dd">w&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">const&lt;/span> &lt;span style="color:#ff636f">unsigned&lt;/span> &lt;span style="color:#ff636f">short&lt;/span> &lt;span style="color:#58a1dd">h&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">HANDLE&lt;/span>&lt;span style="color:#ff636f">*&lt;/span> &lt;span style="color:#ff636f">const&lt;/span> &lt;span style="color:#58a1dd">hInput&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">HANDLE&lt;/span>&lt;span style="color:#ff636f">*&lt;/span> &lt;span style="color:#ff636f">const&lt;/span> &lt;span style="color:#58a1dd">hOutput&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">HANDLE&lt;/span>&lt;span style="color:#ff636f">*&lt;/span> &lt;span style="color:#ff636f">const&lt;/span> &lt;span style="color:#58a1dd">hSignal&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">PROCESS_INFORMATION&lt;/span>&lt;span style="color:#ff636f">*&lt;/span> &lt;span style="color:#ff636f">const&lt;/span> &lt;span style="color:#58a1dd">piPty&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#828b96;font-style:italic">// Create some anon pipes so we can pass handles down and into the console.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span> &lt;span style="color:#828b96;font-style:italic">// IMPORTANT NOTE:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span> &lt;span style="color:#828b96;font-style:italic">// We&amp;#39;re creating the pipe here with un-inheritable handles, then marking
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span> &lt;span style="color:#828b96;font-style:italic">// the conhost sides of the pipes as inheritable. We do this because if
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span> &lt;span style="color:#828b96;font-style:italic">// the entire pipe is marked as inheritable, when we pass the handles
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span> &lt;span style="color:#828b96;font-style:italic">// to CreateProcess, at some point the entire pipe object is copied to
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span> &lt;span style="color:#828b96;font-style:italic">// the conhost process, which includes the terminal side of the pipes
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span> &lt;span style="color:#828b96;font-style:italic">// (_inPipe and _outPipe). This means that if we die, there&amp;#39;s still
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span> &lt;span style="color:#828b96;font-style:italic">// outstanding handles to our side of the pipes, and those handles are
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span> &lt;span style="color:#828b96;font-style:italic">// in conhost, despite conhost being unable to reference those handles
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span> &lt;span style="color:#828b96;font-style:italic">// and close them.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span> &lt;span style="color:#828b96;font-style:italic">// CRITICAL: Close our side of the handles. Otherwise you&amp;#39;ll get the same
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span> &lt;span style="color:#828b96;font-style:italic">// problem if you close conhost, but not us (the terminal).
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span> &lt;span style="color:#58a1dd">HANDLE&lt;/span> &lt;span style="color:#58a1dd">outPipeConhostSide&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">HANDLE&lt;/span> &lt;span style="color:#58a1dd">inPipeConhostSide&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">HANDLE&lt;/span> &lt;span style="color:#58a1dd">signalPipeConhostSide&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">SECURITY_ATTRIBUTES&lt;/span> &lt;span style="color:#58a1dd">sa&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">sa&lt;/span> &lt;span style="color:#ff636f">=&lt;/span> { &lt;span style="color:#a6be9d">0&lt;/span> };
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">sa&lt;/span>.&lt;span style="color:#58a1dd">nLength&lt;/span> &lt;span style="color:#ff636f">=&lt;/span> &lt;span style="color:#ff636f">sizeof&lt;/span>(&lt;span style="color:#58a1dd">sa&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">sa&lt;/span>.&lt;span style="color:#58a1dd">bInheritHandle&lt;/span> &lt;span style="color:#ff636f">=&lt;/span> &lt;span style="color:#58a1dd">FALSE&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">sa&lt;/span>.&lt;span style="color:#58a1dd">lpSecurityDescriptor&lt;/span> &lt;span style="color:#ff636f">=&lt;/span> &lt;span style="color:#ff636f">nullptr&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">CreatePipe&lt;/span>(&lt;span style="color:#ff636f">&amp;amp;&lt;/span>&lt;span style="color:#58a1dd">inPipeConhostSide&lt;/span>, &lt;span style="color:#58a1dd">hInput&lt;/span>, &lt;span style="color:#ff636f">&amp;amp;&lt;/span>&lt;span style="color:#58a1dd">sa&lt;/span>, &lt;span style="color:#a6be9d">0&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">CreatePipe&lt;/span>(&lt;span style="color:#58a1dd">hOutput&lt;/span>, &lt;span style="color:#ff636f">&amp;amp;&lt;/span>&lt;span style="color:#58a1dd">outPipeConhostSide&lt;/span>, &lt;span style="color:#ff636f">&amp;amp;&lt;/span>&lt;span style="color:#58a1dd">sa&lt;/span>, &lt;span style="color:#a6be9d">0&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#828b96;font-style:italic">// Mark inheritable for signal handle when creating. It&amp;#39;ll have the same value on the other side.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span> &lt;span style="color:#58a1dd">sa&lt;/span>.&lt;span style="color:#58a1dd">bInheritHandle&lt;/span> &lt;span style="color:#ff636f">=&lt;/span> &lt;span style="color:#58a1dd">TRUE&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">CreatePipe&lt;/span>(&lt;span style="color:#ff636f">&amp;amp;&lt;/span>&lt;span style="color:#58a1dd">signalPipeConhostSide&lt;/span>, &lt;span style="color:#58a1dd">hSignal&lt;/span>, &lt;span style="color:#ff636f">&amp;amp;&lt;/span>&lt;span style="color:#58a1dd">sa&lt;/span>, &lt;span style="color:#a6be9d">0&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">SetHandleInformation&lt;/span>(&lt;span style="color:#58a1dd">inPipeConhostSide&lt;/span>, &lt;span style="color:#58a1dd">HANDLE_FLAG_INHERIT&lt;/span>, &lt;span style="color:#a6be9d">1&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">SetHandleInformation&lt;/span>(&lt;span style="color:#58a1dd">outPipeConhostSide&lt;/span>, &lt;span style="color:#58a1dd">HANDLE_FLAG_INHERIT&lt;/span>, &lt;span style="color:#a6be9d">1&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">std&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">wstring&lt;/span> &lt;span style="color:#58a1dd">conhostCmdline&lt;/span> &lt;span style="color:#ff636f">=&lt;/span> &lt;span style="color:#a6be9d">L&lt;/span>&lt;span style="color:#a6be9d">&amp;#34;conhost.exe&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">conhostCmdline&lt;/span> &lt;span style="color:#ff636f">+=&lt;/span> &lt;span style="color:#a6be9d">L&lt;/span>&lt;span style="color:#a6be9d">&amp;#34; --headless&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">std&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">wstringstream&lt;/span> &lt;span style="color:#58a1dd">ss&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">if&lt;/span> (&lt;span style="color:#58a1dd">w&lt;/span> &lt;span style="color:#ff636f">!=&lt;/span> &lt;span style="color:#a6be9d">0&lt;/span> &lt;span style="color:#ff636f">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#58a1dd">h&lt;/span> &lt;span style="color:#ff636f">!=&lt;/span> &lt;span style="color:#a6be9d">0&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">ss&lt;/span> &lt;span style="color:#ff636f">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#a6be9d">L&lt;/span>&lt;span style="color:#a6be9d">&amp;#34; --width &amp;#34;&lt;/span> &lt;span style="color:#ff636f">&amp;lt;&amp;lt;&lt;/span> (&lt;span style="color:#ff636f">unsigned&lt;/span> &lt;span style="color:#ff636f">long&lt;/span>)&lt;span style="color:#58a1dd">w&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">ss&lt;/span> &lt;span style="color:#ff636f">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#a6be9d">L&lt;/span>&lt;span style="color:#a6be9d">&amp;#34; --height &amp;#34;&lt;/span> &lt;span style="color:#ff636f">&amp;lt;&amp;lt;&lt;/span> (&lt;span style="color:#ff636f">unsigned&lt;/span> &lt;span style="color:#ff636f">long&lt;/span>)&lt;span style="color:#58a1dd">h&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">ss&lt;/span> &lt;span style="color:#ff636f">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#a6be9d">L&lt;/span>&lt;span style="color:#a6be9d">&amp;#34; --signal 0x&amp;#34;&lt;/span> &lt;span style="color:#ff636f">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#58a1dd">std&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">hex&lt;/span> &lt;span style="color:#ff636f">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#58a1dd">HandleToUlong&lt;/span>(&lt;span style="color:#58a1dd">signalPipeConhostSide&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">conhostCmdline&lt;/span> &lt;span style="color:#ff636f">+=&lt;/span> &lt;span style="color:#58a1dd">ss&lt;/span>.&lt;span style="color:#58a1dd">str&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">conhostCmdline&lt;/span> &lt;span style="color:#ff636f">+=&lt;/span> &lt;span style="color:#a6be9d">L&lt;/span>&lt;span style="color:#a6be9d">&amp;#34; -- &amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">conhostCmdline&lt;/span> &lt;span style="color:#ff636f">+=&lt;/span> &lt;span style="color:#58a1dd">cmdline&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">STARTUPINFO&lt;/span> &lt;span style="color:#58a1dd">si&lt;/span> &lt;span style="color:#ff636f">=&lt;/span> { &lt;span style="color:#a6be9d">0&lt;/span> };
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">si&lt;/span>.&lt;span style="color:#58a1dd">cb&lt;/span> &lt;span style="color:#ff636f">=&lt;/span> &lt;span style="color:#ff636f">sizeof&lt;/span>(&lt;span style="color:#58a1dd">STARTUPINFOW&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">si&lt;/span>.&lt;span style="color:#58a1dd">hStdInput&lt;/span> &lt;span style="color:#ff636f">=&lt;/span> &lt;span style="color:#58a1dd">inPipeConhostSide&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">si&lt;/span>.&lt;span style="color:#58a1dd">hStdOutput&lt;/span> &lt;span style="color:#ff636f">=&lt;/span> &lt;span style="color:#58a1dd">outPipeConhostSide&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">si&lt;/span>.&lt;span style="color:#58a1dd">hStdError&lt;/span> &lt;span style="color:#ff636f">=&lt;/span> &lt;span style="color:#58a1dd">outPipeConhostSide&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">si&lt;/span>.&lt;span style="color:#58a1dd">dwFlags&lt;/span> &lt;span style="color:#ff636f">|=&lt;/span> &lt;span style="color:#58a1dd">STARTF_USESTDHANDLES&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">std&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">unique_ptr&lt;/span>&lt;span style="color:#ff636f">&amp;lt;&lt;/span>&lt;span style="color:#ff636f">wchar_t&lt;/span>[]&lt;span style="color:#ff636f">&amp;gt;&lt;/span> &lt;span style="color:#58a1dd">mutableCommandline&lt;/span> &lt;span style="color:#ff636f">=&lt;/span> &lt;span style="color:#58a1dd">std&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">make_unique&lt;/span>&lt;span style="color:#ff636f">&amp;lt;&lt;/span>&lt;span style="color:#ff636f">wchar_t&lt;/span>[]&lt;span style="color:#ff636f">&amp;gt;&lt;/span>(&lt;span style="color:#58a1dd">conhostCmdline&lt;/span>.&lt;span style="color:#58a1dd">length&lt;/span>() &lt;span style="color:#ff636f">+&lt;/span> &lt;span style="color:#a6be9d">1&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">if&lt;/span> (&lt;span style="color:#58a1dd">mutableCommandline&lt;/span> &lt;span style="color:#ff636f">==&lt;/span> &lt;span style="color:#ff636f">nullptr&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">return&lt;/span> &lt;span style="color:#58a1dd">E_OUTOFMEMORY&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">HRESULT&lt;/span> &lt;span style="color:#58a1dd">hr&lt;/span> &lt;span style="color:#ff636f">=&lt;/span> &lt;span style="color:#58a1dd">StringCchCopy&lt;/span>(&lt;span style="color:#58a1dd">mutableCommandline&lt;/span>.&lt;span style="color:#58a1dd">get&lt;/span>(), &lt;span style="color:#58a1dd">conhostCmdline&lt;/span>.&lt;span style="color:#58a1dd">length&lt;/span>() &lt;span style="color:#ff636f">+&lt;/span> &lt;span style="color:#a6be9d">1&lt;/span>, &lt;span style="color:#58a1dd">conhostCmdline&lt;/span>.&lt;span style="color:#58a1dd">c_str&lt;/span>());
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">if&lt;/span> (&lt;span style="color:#ff636f">!&lt;/span>&lt;span style="color:#58a1dd">SUCCEEDED&lt;/span>(&lt;span style="color:#58a1dd">hr&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">return&lt;/span> &lt;span style="color:#58a1dd">hr&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">bool&lt;/span> &lt;span style="color:#58a1dd">fSuccess&lt;/span> &lt;span style="color:#ff636f">=&lt;/span> &lt;span style="color:#ff636f">!!&lt;/span>&lt;span style="color:#58a1dd">CreateProcessW&lt;/span>(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">nullptr&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">mutableCommandline&lt;/span>.&lt;span style="color:#58a1dd">get&lt;/span>(),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">nullptr&lt;/span>, &lt;span style="color:#828b96;font-style:italic">// lpProcessAttributes
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span> &lt;span style="color:#ff636f">nullptr&lt;/span>, &lt;span style="color:#828b96;font-style:italic">// lpThreadAttributes
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span> &lt;span style="color:#58a1dd">true&lt;/span>, &lt;span style="color:#828b96;font-style:italic">// bInheritHandles
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span> &lt;span style="color:#a6be9d">0&lt;/span>, &lt;span style="color:#828b96;font-style:italic">// dwCreationFlags
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span> &lt;span style="color:#ff636f">nullptr&lt;/span>, &lt;span style="color:#828b96;font-style:italic">// lpEnvironment
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span> &lt;span style="color:#ff636f">nullptr&lt;/span>, &lt;span style="color:#828b96;font-style:italic">// lpCurrentDirectory
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span> &lt;span style="color:#ff636f">&amp;amp;&lt;/span>&lt;span style="color:#58a1dd">si&lt;/span>, &lt;span style="color:#828b96;font-style:italic">// lpStartupInfo
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span> &lt;span style="color:#58a1dd">piPty&lt;/span> &lt;span style="color:#828b96;font-style:italic">// lpProcessInformation
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span> );
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">CloseHandle&lt;/span>(&lt;span style="color:#58a1dd">inPipeConhostSide&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">CloseHandle&lt;/span>(&lt;span style="color:#58a1dd">outPipeConhostSide&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">CloseHandle&lt;/span>(&lt;span style="color:#58a1dd">signalPipeConhostSide&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">return&lt;/span> &lt;span style="color:#58a1dd">fSuccess&lt;/span> &lt;span style="color:#ff636f">?&lt;/span> &lt;span style="color:#58a1dd">S_OK&lt;/span> : &lt;span style="color:#58a1dd">HRESULT_FROM_WIN32&lt;/span>(&lt;span style="color:#58a1dd">GetLastError&lt;/span>());
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>但由于 &lt;a href="https://github.com/microsoft/terminal/issues/1131">Switch from ConhostConnection to the official ConPTY API #1131&lt;/a> 依赖 &lt;a href="https://github.com/microsoft/terminal/issues/1130">&lt;code>winconpty.c&lt;/code>&lt;/a>，但 &lt;code>winconpty.c&lt;/code> 迟迟没有开源，因此，此问题一直没有得到解决，后来随着 Windows Terminal 的公开预览，此问题也不断由用户报告。于是我提交了一个 &lt;a href="https://github.com/microsoft/terminal/pull/1815">Fix The conhost command line is not properly escaped&lt;/a>, 试图修复这个问题，经过一个星期的等待，PR 终于被合并，目前使用最新源码构建的 Windows Terminal 已经能够按照预期工作，我的 Windows Terminal 配置文件也已经更新：&lt;a href="https://gist.github.com/fcharlie/7530d36175bc5249f1ae92be536238cd">https://gist.github.com/fcharlie/7530d36175bc5249f1ae92be536238cd&lt;/a>&lt;/p>
&lt;p>这个问题在 conhost 中都能出现，可能并不是个例，那么应该很多软件都会出现命令行正确转义。&lt;/p>
&lt;h2 id="windows-ucrt-的进程启动函数">Windows UCRT 的进程启动函数&lt;/h2>
&lt;p>在 Windows 中，通常编写 C 程序启动进程除了使用 &lt;code>CreateProcess&lt;/code> API 之外，还可以使用 &lt;code>_spawn*&lt;/code> &lt;code>_exec*&lt;/code> 之类的函数，但在 Windows 1903（10.0.18362.0）UCRT 的源码中，都是调用 &lt;code>common_spawnvp&lt;/code> 实现，而命令行合成的代码是通过如下函数实现：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#1d2432;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c++" data-lang="c++">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">// &amp;#34;C:\Program Files (x86)\Windows Kits\10\Source\10.0.18362.0\ucrt\exec\cenvarg.cpp&amp;#34; +24
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">// Converts a main()-style argv arguments vector into a command line. On success,
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">// returns a pointer to the newly constructed arguments block; the caller is
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">// responsible for freeing the string. On failure, returns null and sets errno.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span>&lt;span style="color:#ff636f">template&lt;/span> &lt;span style="color:#ff636f">&amp;lt;&lt;/span>&lt;span style="color:#ff636f">typename&lt;/span> &lt;span style="color:#58a1dd">Character&lt;/span>&lt;span style="color:#ff636f">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff636f">static&lt;/span> &lt;span style="color:#58a1dd">errno_t&lt;/span> &lt;span style="color:#ff636f">__cdecl&lt;/span> &lt;span style="color:#58a1dd">construct_command_line&lt;/span>(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">Character&lt;/span> &lt;span style="color:#ff636f">const&lt;/span>&lt;span style="color:#ff636f">*&lt;/span> &lt;span style="color:#ff636f">const&lt;/span>&lt;span style="color:#ff636f">*&lt;/span> &lt;span style="color:#ff636f">const&lt;/span> &lt;span style="color:#58a1dd">argv&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">Character&lt;/span>&lt;span style="color:#ff636f">**&lt;/span> &lt;span style="color:#ff636f">const&lt;/span> &lt;span style="color:#58a1dd">command_line_result&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ) &lt;span style="color:#ff636f">throw&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">typedef&lt;/span> &lt;span style="color:#58a1dd">__crt_char_traits&lt;/span>&lt;span style="color:#ff636f">&amp;lt;&lt;/span>&lt;span style="color:#58a1dd">Character&lt;/span>&lt;span style="color:#ff636f">&amp;gt;&lt;/span> &lt;span style="color:#58a1dd">traits&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">*&lt;/span>&lt;span style="color:#58a1dd">command_line_result&lt;/span> &lt;span style="color:#ff636f">=&lt;/span> &lt;span style="color:#ff636f">nullptr&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#828b96;font-style:italic">// Compute the number of bytes required to store the arguments in argv in a
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span> &lt;span style="color:#828b96;font-style:italic">// command line string (including spaces between arguments and a terminator):
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span> &lt;span style="color:#58a1dd">size_t&lt;/span> &lt;span style="color:#ff636f">const&lt;/span> &lt;span style="color:#58a1dd">command_line_count&lt;/span> &lt;span style="color:#ff636f">=&lt;/span> [&lt;span style="color:#ff636f">&amp;amp;&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">size_t&lt;/span> &lt;span style="color:#58a1dd">n&lt;/span> &lt;span style="color:#ff636f">=&lt;/span> &lt;span style="color:#a6be9d">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">for&lt;/span> (&lt;span style="color:#58a1dd">Character&lt;/span> &lt;span style="color:#ff636f">const&lt;/span>&lt;span style="color:#ff636f">*&lt;/span> &lt;span style="color:#ff636f">const&lt;/span>&lt;span style="color:#ff636f">*&lt;/span> &lt;span style="color:#58a1dd">it&lt;/span> &lt;span style="color:#ff636f">=&lt;/span> &lt;span style="color:#58a1dd">argv&lt;/span>; &lt;span style="color:#ff636f">*&lt;/span>&lt;span style="color:#58a1dd">it&lt;/span>; &lt;span style="color:#58a1dd">n&lt;/span> &lt;span style="color:#ff636f">+=&lt;/span> &lt;span style="color:#58a1dd">traits&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">tcslen&lt;/span>(&lt;span style="color:#ff636f">*&lt;/span>&lt;span style="color:#58a1dd">it&lt;/span>&lt;span style="color:#ff636f">++&lt;/span>) &lt;span style="color:#ff636f">+&lt;/span> &lt;span style="color:#a6be9d">1&lt;/span>) { }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#828b96;font-style:italic">// If there were no arguments, return 1 so that we can return an empty
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span> &lt;span style="color:#828b96;font-style:italic">// string:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span> &lt;span style="color:#ff636f">return&lt;/span> &lt;span style="color:#58a1dd">__max&lt;/span>(&lt;span style="color:#58a1dd">n&lt;/span>, &lt;span style="color:#a6be9d">1&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">__crt_unique_heap_ptr&lt;/span>&lt;span style="color:#ff636f">&amp;lt;&lt;/span>&lt;span style="color:#58a1dd">Character&lt;/span>&lt;span style="color:#ff636f">&amp;gt;&lt;/span> &lt;span style="color:#58a1dd">command_line&lt;/span>(&lt;span style="color:#58a1dd">_calloc_crt_t&lt;/span>(&lt;span style="color:#58a1dd">Character&lt;/span>, &lt;span style="color:#58a1dd">command_line_count&lt;/span>));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">if&lt;/span> (&lt;span style="color:#ff636f">!&lt;/span>&lt;span style="color:#58a1dd">command_line&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">__acrt_errno_map_os_error&lt;/span>(&lt;span style="color:#58a1dd">ERROR_NOT_ENOUGH_MEMORY&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">return&lt;/span> &lt;span style="color:#58a1dd">errno&lt;/span> &lt;span style="color:#ff636f">=&lt;/span> &lt;span style="color:#58a1dd">ENOMEM&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">Character&lt;/span> &lt;span style="color:#ff636f">const&lt;/span>&lt;span style="color:#ff636f">*&lt;/span> &lt;span style="color:#ff636f">const&lt;/span>&lt;span style="color:#ff636f">*&lt;/span> &lt;span style="color:#58a1dd">source_it&lt;/span> &lt;span style="color:#ff636f">=&lt;/span> &lt;span style="color:#58a1dd">argv&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">Character&lt;/span>&lt;span style="color:#ff636f">*&lt;/span> &lt;span style="color:#58a1dd">result_it&lt;/span> &lt;span style="color:#ff636f">=&lt;/span> &lt;span style="color:#58a1dd">command_line&lt;/span>.&lt;span style="color:#58a1dd">get&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#828b96;font-style:italic">// If there are no arguments, just return the empty string:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span> &lt;span style="color:#ff636f">if&lt;/span> (&lt;span style="color:#ff636f">*&lt;/span>&lt;span style="color:#58a1dd">source_it&lt;/span> &lt;span style="color:#ff636f">==&lt;/span> &lt;span style="color:#a6be9d">&amp;#39;\0&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">*&lt;/span>&lt;span style="color:#58a1dd">command_line_result&lt;/span> &lt;span style="color:#ff636f">=&lt;/span> &lt;span style="color:#58a1dd">command_line&lt;/span>.&lt;span style="color:#58a1dd">detach&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">return&lt;/span> &lt;span style="color:#a6be9d">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#828b96;font-style:italic">// Copy the arguments, separated by spaces:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span> &lt;span style="color:#ff636f">while&lt;/span> (&lt;span style="color:#ff636f">*&lt;/span>&lt;span style="color:#58a1dd">source_it&lt;/span> &lt;span style="color:#ff636f">!=&lt;/span> &lt;span style="color:#a6be9d">&amp;#39;\0&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">_ERRCHECK&lt;/span>(&lt;span style="color:#58a1dd">traits&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">tcscpy_s&lt;/span>(&lt;span style="color:#58a1dd">result_it&lt;/span>, &lt;span style="color:#58a1dd">command_line_count&lt;/span> &lt;span style="color:#ff636f">-&lt;/span> (&lt;span style="color:#58a1dd">result_it&lt;/span> &lt;span style="color:#ff636f">-&lt;/span> &lt;span style="color:#58a1dd">command_line&lt;/span>.&lt;span style="color:#58a1dd">get&lt;/span>()), &lt;span style="color:#ff636f">*&lt;/span>&lt;span style="color:#58a1dd">source_it&lt;/span>));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">result_it&lt;/span> &lt;span style="color:#ff636f">+=&lt;/span> &lt;span style="color:#58a1dd">traits&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">tcslen&lt;/span>(&lt;span style="color:#ff636f">*&lt;/span>&lt;span style="color:#58a1dd">source_it&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">*&lt;/span>&lt;span style="color:#58a1dd">result_it&lt;/span>&lt;span style="color:#ff636f">++&lt;/span> &lt;span style="color:#ff636f">=&lt;/span> &lt;span style="color:#a6be9d">&amp;#39; &amp;#39;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">++&lt;/span>&lt;span style="color:#58a1dd">source_it&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#828b96;font-style:italic">// Replace the last space with a terminator:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span> &lt;span style="color:#58a1dd">result_it&lt;/span>[&lt;span style="color:#ff636f">-&lt;/span>&lt;span style="color:#a6be9d">1&lt;/span>] &lt;span style="color:#ff636f">=&lt;/span> &lt;span style="color:#a6be9d">&amp;#39;\0&amp;#39;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">*&lt;/span>&lt;span style="color:#58a1dd">command_line_result&lt;/span> &lt;span style="color:#ff636f">=&lt;/span> &lt;span style="color:#58a1dd">command_line&lt;/span>.&lt;span style="color:#58a1dd">detach&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">return&lt;/span> &lt;span style="color:#a6be9d">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>实际上这个 UCRT 出现此问题，修复的可能性要小于 Windows Terminal，毕竟没啥渠道。这和 SSH 的命令行转义一样难修。还有一些其他软件也存在这个问题，比如 &lt;a href="https://github.com/DaanDeMeyer/reproc/issues/18">reproc&lt;/a>。&lt;/p>
&lt;h2 id="说不完的转义">说不完的转义&lt;/h2>
&lt;p>转义问题不仅仅是命令行需要注意的，在查询数据库，解析网络请求，方方面面都需要注意到转义问题，一些安全漏洞也是有缺乏转义导致的。写代码虽易，写好代码难。&lt;/p>
&lt;p>这个问题在 Windows 中发生频率较高的原因之一是在 Windows 进程 PEB 中，命令行与 POSIX 的命令行保存格式差异，Windows 命令行参数是 &lt;code>CommandLine&lt;/code> 形式，而 POSIX 以 Linux 为例是 &lt;code>Argv&lt;/code>。内存中如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#1d2432;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c++" data-lang="c++">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff636f">const&lt;/span> &lt;span style="color:#ff636f">wchar_t&lt;/span> &lt;span style="color:#ff636f">*&lt;/span>&lt;span style="color:#58a1dd">WinCommandLine&lt;/span>&lt;span style="color:#ff636f">=&lt;/span>&lt;span style="color:#a6be9d">L&lt;/span>&lt;span style="color:#a6be9d">&amp;#34;&lt;/span>&lt;span style="color:#a6be9d">\&amp;#34;&lt;/span>&lt;span style="color:#a6be9d">C:&lt;/span>&lt;span style="color:#a6be9d">\\&lt;/span>&lt;span style="color:#a6be9d">Program Files&lt;/span>&lt;span style="color:#a6be9d">\\&lt;/span>&lt;span style="color:#a6be9d">PowerShell&lt;/span>&lt;span style="color:#a6be9d">\\&lt;/span>&lt;span style="color:#a6be9d">7-preview&lt;/span>&lt;span style="color:#a6be9d">\\&lt;/span>&lt;span style="color:#a6be9d">pwsh.exe&lt;/span>&lt;span style="color:#a6be9d">\&amp;#34;&lt;/span>&lt;span style="color:#a6be9d"> -NoExit -Command &lt;/span>&lt;span style="color:#a6be9d">\&amp;#34;&lt;/span>&lt;span style="color:#a6be9d">$Host.UI.RawUI.WindowTitle=&lt;/span>&lt;span style="color:#a6be9d">\\\&amp;#34;&lt;/span>&lt;span style="color:#a6be9d">Windows Pwsh 💙 (7 Preview)&lt;/span>&lt;span style="color:#a6be9d">\\\&amp;#34;\&amp;#34;\0&lt;/span>&lt;span style="color:#a6be9d">&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff636f">const&lt;/span> &lt;span style="color:#ff636f">char&lt;/span> &lt;span style="color:#ff636f">*&lt;/span>&lt;span style="color:#58a1dd">argvblock&lt;/span>&lt;span style="color:#ff636f">=&lt;/span>&lt;span style="color:#a6be9d">&amp;#34;pwsh&lt;/span>&lt;span style="color:#a6be9d">\0&lt;/span>&lt;span style="color:#a6be9d">-NoExit&lt;/span>&lt;span style="color:#a6be9d">\0&lt;/span>&lt;span style="color:#a6be9d">-Command&lt;/span>&lt;span style="color:#a6be9d">\0\&amp;#34;&lt;/span>&lt;span style="color:#a6be9d">$Host.UI.RawUI.WindowTitle=&lt;/span>&lt;span style="color:#a6be9d">\&amp;#34;&lt;/span>&lt;span style="color:#a6be9d">Windows Pwsh 💙 (7 Preview)&lt;/span>&lt;span style="color:#a6be9d">\&amp;#34;\0&lt;/span>&lt;span style="color:#a6be9d">&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">//char *const argv[]={0x0100,...};
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>因此，以 Argv 的这种命令行形式在使用系统调用真正启动进程时，Windows 仍需要一次转换，这就容易带来问题，这也是命令行转义问题在 Windows 平台太比较多的原因。&lt;/p>
&lt;h2 id="最后">最后&lt;/h2>
&lt;p>Windows Terminal 开源还是非常不错的，参与到其中改进在 Windows 系统的开发体验感觉很不错，而其中的 OpenConsole 源码也让我更加深入了解了 Windows Console 的一些原理。&lt;/p>
&lt;p>OpenConsole 目前可以开启 注册表选项 &lt;code>HKCU\Console\UseDx&lt;/code>=&lt;code>DWORD(1)&lt;/code> 切换到使用 DirectWrite 渲染字体，但我目前（2019-07-20）测试虽然使用 DirectWrite 渲染，但 Emoji 无法显示，这个问题我将进一步跟踪。&lt;/p>
&lt;p>控制台团队还在 Windows Terminal 源码中添加了一个 Console 控件，这样一来，第三方程序中集成控制台窗口将更加容易。Visual Studio &lt;a href="https://github.com/microsoft/WhackWhackTerminal">WhackWhackTerminal&lt;/a> 的作者 Daniel Griffen 还增加了一些 PR, 实现 WPF 控制台控件，这可以预见，可能将新的控制台集成到 Visual Studio。&lt;/p>
&lt;p>下面是一些控制台的文档和关键代码：&lt;/p>
&lt;ul>
&lt;li>WinPTY 作者的控制台文档： &lt;a href="https://github.com/rprichard/win32-console-docs">Console Handles and Standard Handles&lt;/a>&lt;/li>
&lt;li>Conhost 启动进程并创建 ConDrv 设备：&lt;a href="https://github.com/microsoft/terminal/blob/master/src/server/Entrypoints.cpp">https://github.com/microsoft/terminal/blob/master/src/server/Entrypoints.cpp&lt;/a>&lt;/li>
&lt;li>Conhost 读写内核对象(读写控制台程序的输入输出): &lt;a href="https://github.com/microsoft/terminal/blob/master/src/server/DeviceComm.cpp">https://github.com/microsoft/terminal/blob/master/src/server/DeviceComm.cpp&lt;/a>&lt;/li>
&lt;li>Windows Terminal 连接器 &lt;a href="https://github.com/microsoft/terminal/blob/master/src/cascadia/TerminalConnection/ConptyConnection.cpp">ConptyConnection&lt;/a> 及 &lt;a href="https://github.com/microsoft/terminal/blob/master/src/cascadia/TerminalConnection/ConhostConnection.cpp">ConhostConnection&lt;/a>&lt;/li>
&lt;/ul>
- https://forcemz.net/posts/2019/2019-07-20-cmdline-escape/ - Copyright (c) 2009-2024 J23</description></item><item><title>七月的技术分享</title><link>https://forcemz.net/posts/2019/2019-07-09-july-tech-sharing/</link><pubDate>Tue, 09 Jul 2019 10:00:00 +0800</pubDate><guid>https://forcemz.net/posts/2019/2019-07-09-july-tech-sharing/</guid><description>江二十三的思考 https://forcemz.net/posts/2019/2019-07-09-july-tech-sharing/ -&lt;h2 id="前言">前言&lt;/h2>
&lt;p>写代码是一个不断积累的过程，将一些好的想法转变为解决实际问题的程序通常让程序员感到愉悦。而最近我也有两个还算好的想法，在本文中分享给大家。&lt;/p>
&lt;h2 id="支持环境变量展开的配置解析">支持环境变量展开的配置解析&lt;/h2>
&lt;p>在 Gitee 的基础服务组件中，像 Basalt (git ssh 服务器)，git-diamond (Gitee 内部的 git 协议服务器)，git-srv (Gitee 分布式 git 传输后端) 都支持这样形式的配置： &lt;code>${APPDIR}/run/git-srv.pid&lt;/code> 。在运行过程中，&lt;code>APPDIR&lt;/code> 被解释成相应组件的安装根目录，在配置文件中，解析到 &lt;code>${APPDIR}/run/git-srv.pid&lt;/code> 后，使用推导函数，将其展开为 &lt;code>/home/git/oscstudio/run/git-srv.pid&lt;/code>。这样一来，默认配置情况下，Gitee 的这些组件都支持安装到任意位置，而无需在编译时设置 &lt;code>--prefix&lt;/code>。而像 nginx 这样的软件，在构建时，使用 &lt;code>--prefix&lt;/code> 指定了安装目录后，如果不使用 &lt;code>-p&lt;/code> 指定 &lt;code>prefix&lt;/code>，是无法安装到任意位置的。&lt;/p>
&lt;p>除此之外，环境变量展开还可以做很多事情，但环境变量展开是如何实现的？&lt;/p>
&lt;p>在 Golang 的源码中，有一个 &lt;a href="https://github.com/golang/go/blob/06ef108cec98b3dfc0fba3f49e733a18eb9badd5/src/os/env.go#L50">&lt;code>os.ExpandEnv&lt;/code>&lt;/a> 函数可以使用环境变量替换输入的字符串中所有以格式 &lt;code>${var}&lt;/code> 和 &lt;code>$var&lt;/code> 的字符串 ，而这个函数实际上是 &lt;code>os.Expand&lt;/code> 使用 &lt;code>os.GetEnv&lt;/code> 的特例，因此，你完全可以封装自己的 &lt;code>GetEnv&lt;/code>。在 &lt;a href="https://gitee.com/oscstudio/gitenv/blob/master/envctx.go">&lt;code>oscstudio/gitenv&lt;/code>&lt;/a> 中，我们就有一个 &lt;code>Envcontext&lt;/code> 用于实现上述 &lt;code>APPDIR&lt;/code> 这样的环境变量解析。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#1d2432;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff636f">package&lt;/span> &lt;span style="color:#58a1dd">gitenv&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff636f">import&lt;/span> (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6be9d">&amp;#34;errors&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6be9d">&amp;#34;fmt&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6be9d">&amp;#34;os&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6be9d">&amp;#34;path/filepath&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">// Envcontext is
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span>&lt;span style="color:#ff636f">type&lt;/span> &lt;span style="color:#58a1dd">Envcontext&lt;/span> &lt;span style="color:#ff636f">struct&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">Env&lt;/span> &lt;span style="color:#ff636f">map&lt;/span>[&lt;span style="color:#ff636f">string&lt;/span>]&lt;span style="color:#ff636f">string&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">// NewEnvcontext todo
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span>&lt;span style="color:#ff636f">func&lt;/span> &lt;span style="color:#58a1dd">NewEnvcontext&lt;/span>() (&lt;span style="color:#ff636f">*&lt;/span>&lt;span style="color:#58a1dd">Envcontext&lt;/span>, &lt;span style="color:#ff636f">error&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">exe&lt;/span>, &lt;span style="color:#58a1dd">err&lt;/span> &lt;span style="color:#ff636f">:=&lt;/span> &lt;span style="color:#58a1dd">os&lt;/span>.&lt;span style="color:#58a1dd">Executable&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">if&lt;/span> &lt;span style="color:#58a1dd">err&lt;/span> &lt;span style="color:#ff636f">!=&lt;/span> &lt;span style="color:#ff636f">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">return&lt;/span> &lt;span style="color:#ff636f">nil&lt;/span>, &lt;span style="color:#58a1dd">err&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">ec&lt;/span> &lt;span style="color:#ff636f">:=&lt;/span> &lt;span style="color:#ff636f">&amp;amp;&lt;/span>&lt;span style="color:#58a1dd">Envcontext&lt;/span>{&lt;span style="color:#58a1dd">Env&lt;/span>: &lt;span style="color:#58a1dd">make&lt;/span>(&lt;span style="color:#ff636f">map&lt;/span>[&lt;span style="color:#ff636f">string&lt;/span>]&lt;span style="color:#ff636f">string&lt;/span>)}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">exedir&lt;/span> &lt;span style="color:#ff636f">:=&lt;/span> &lt;span style="color:#58a1dd">filepath&lt;/span>.&lt;span style="color:#58a1dd">Dir&lt;/span>(&lt;span style="color:#58a1dd">exe&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">if&lt;/span> &lt;span style="color:#58a1dd">filepath&lt;/span>.&lt;span style="color:#58a1dd">Base&lt;/span>(&lt;span style="color:#58a1dd">exedir&lt;/span>) &lt;span style="color:#ff636f">==&lt;/span> &lt;span style="color:#a6be9d">&amp;#34;bin&amp;#34;&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">ec&lt;/span>.&lt;span style="color:#58a1dd">Env&lt;/span>[&lt;span style="color:#a6be9d">&amp;#34;APPDIR&amp;#34;&lt;/span>] = &lt;span style="color:#58a1dd">filepath&lt;/span>.&lt;span style="color:#58a1dd">Dir&lt;/span>(&lt;span style="color:#58a1dd">exedir&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } &lt;span style="color:#ff636f">else&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">ec&lt;/span>.&lt;span style="color:#58a1dd">Env&lt;/span>[&lt;span style="color:#a6be9d">&amp;#34;APPDIR&amp;#34;&lt;/span>] = &lt;span style="color:#58a1dd">exedir&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">return&lt;/span> &lt;span style="color:#58a1dd">ec&lt;/span>, &lt;span style="color:#ff636f">nil&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">// Append env
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span>&lt;span style="color:#ff636f">func&lt;/span> (&lt;span style="color:#58a1dd">ec&lt;/span> &lt;span style="color:#ff636f">*&lt;/span>&lt;span style="color:#58a1dd">Envcontext&lt;/span>) &lt;span style="color:#58a1dd">Append&lt;/span>(&lt;span style="color:#58a1dd">key&lt;/span>, &lt;span style="color:#58a1dd">value&lt;/span> &lt;span style="color:#ff636f">string&lt;/span>) &lt;span style="color:#ff636f">error&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">if&lt;/span> &lt;span style="color:#58a1dd">len&lt;/span>(&lt;span style="color:#58a1dd">key&lt;/span>) &lt;span style="color:#ff636f">==&lt;/span> &lt;span style="color:#a6be9d">0&lt;/span> &lt;span style="color:#ff636f">||&lt;/span> &lt;span style="color:#58a1dd">len&lt;/span>(&lt;span style="color:#58a1dd">value&lt;/span>) &lt;span style="color:#ff636f">==&lt;/span> &lt;span style="color:#a6be9d">0&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">return&lt;/span> &lt;span style="color:#58a1dd">errors&lt;/span>.&lt;span style="color:#58a1dd">New&lt;/span>(&lt;span style="color:#a6be9d">&amp;#34;Empty key value&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">ec&lt;/span>.&lt;span style="color:#58a1dd">Env&lt;/span>[&lt;span style="color:#58a1dd">key&lt;/span>] = &lt;span style="color:#58a1dd">value&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">return&lt;/span> &lt;span style="color:#ff636f">nil&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">// Delete Env
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span>&lt;span style="color:#ff636f">func&lt;/span> (&lt;span style="color:#58a1dd">ec&lt;/span> &lt;span style="color:#ff636f">*&lt;/span>&lt;span style="color:#58a1dd">Envcontext&lt;/span>) &lt;span style="color:#58a1dd">Delete&lt;/span>(&lt;span style="color:#58a1dd">key&lt;/span> &lt;span style="color:#ff636f">string&lt;/span>) &lt;span style="color:#ff636f">error&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">if&lt;/span> &lt;span style="color:#58a1dd">_&lt;/span>, &lt;span style="color:#58a1dd">ok&lt;/span> &lt;span style="color:#ff636f">:=&lt;/span> &lt;span style="color:#58a1dd">ec&lt;/span>.&lt;span style="color:#58a1dd">Env&lt;/span>[&lt;span style="color:#58a1dd">key&lt;/span>]; &lt;span style="color:#58a1dd">ok&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">delete&lt;/span>(&lt;span style="color:#58a1dd">ec&lt;/span>.&lt;span style="color:#58a1dd">Env&lt;/span>, &lt;span style="color:#58a1dd">key&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">return&lt;/span> &lt;span style="color:#ff636f">nil&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">return&lt;/span> &lt;span style="color:#58a1dd">fmt&lt;/span>.&lt;span style="color:#58a1dd">Errorf&lt;/span>(&lt;span style="color:#a6be9d">&amp;#34;&amp;#39;%s&amp;#39; not exists&amp;#34;&lt;/span>, &lt;span style="color:#58a1dd">key&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">// Expand callback
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span>&lt;span style="color:#ff636f">func&lt;/span> (&lt;span style="color:#58a1dd">ec&lt;/span> &lt;span style="color:#ff636f">*&lt;/span>&lt;span style="color:#58a1dd">Envcontext&lt;/span>) &lt;span style="color:#58a1dd">Expand&lt;/span>(&lt;span style="color:#58a1dd">s&lt;/span> &lt;span style="color:#ff636f">string&lt;/span>) &lt;span style="color:#ff636f">string&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">if&lt;/span> &lt;span style="color:#58a1dd">_&lt;/span>, &lt;span style="color:#58a1dd">ok&lt;/span> &lt;span style="color:#ff636f">:=&lt;/span> &lt;span style="color:#58a1dd">ec&lt;/span>.&lt;span style="color:#58a1dd">Env&lt;/span>[&lt;span style="color:#58a1dd">s&lt;/span>]; &lt;span style="color:#58a1dd">ok&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">return&lt;/span> &lt;span style="color:#58a1dd">ec&lt;/span>.&lt;span style="color:#58a1dd">Env&lt;/span>[&lt;span style="color:#58a1dd">s&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">return&lt;/span> &lt;span style="color:#58a1dd">os&lt;/span>.&lt;span style="color:#58a1dd">Getenv&lt;/span>(&lt;span style="color:#58a1dd">s&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">// Expandenv is
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span>&lt;span style="color:#ff636f">func&lt;/span> (&lt;span style="color:#58a1dd">ec&lt;/span> &lt;span style="color:#ff636f">*&lt;/span>&lt;span style="color:#58a1dd">Envcontext&lt;/span>) &lt;span style="color:#58a1dd">Expandenv&lt;/span>(&lt;span style="color:#58a1dd">s&lt;/span> &lt;span style="color:#ff636f">string&lt;/span>) &lt;span style="color:#ff636f">string&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">return&lt;/span> &lt;span style="color:#58a1dd">os&lt;/span>.&lt;span style="color:#58a1dd">Expand&lt;/span>(&lt;span style="color:#58a1dd">s&lt;/span>, &lt;span style="color:#58a1dd">ec&lt;/span>.&lt;span style="color:#58a1dd">Expand&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>上述 &lt;code>Envcontext&lt;/code> 是基于 Golang 的，但 Gitee 很多服务是基于 C++ 编写，因此，我们需要一个 C++ 版本，为了支持异构查找，我们使用 &lt;code>absl::flat_hash_map&lt;/code> 存储自定义的环境变量，这样也就避免了修改进程的环境变量，这里有一个 &lt;strong>header-only&lt;/strong> 版本（借鉴了 Golang 的思路）：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#1d2432;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c++" data-lang="c++">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">////////
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span>&lt;span style="color:#828b96;font-style:italic">#ifndef EXPAND_ENV_HPP
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">#define EXPAND_ENV_HPP
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">#include&lt;/span> &lt;span style="color:#828b96;font-style:italic">&amp;lt;string&amp;gt;&lt;/span>&lt;span style="color:#828b96;font-style:italic">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">#include&lt;/span> &lt;span style="color:#828b96;font-style:italic">&amp;lt;string_view&amp;gt;&lt;/span>&lt;span style="color:#828b96;font-style:italic">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">#include&lt;/span> &lt;span style="color:#828b96;font-style:italic">&amp;lt;absl/strings/str_format.h&amp;gt;&lt;/span>&lt;span style="color:#828b96;font-style:italic">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">#include&lt;/span> &lt;span style="color:#828b96;font-style:italic">&amp;lt;absl/container/flat_hash_map.h&amp;gt;&lt;/span>&lt;span style="color:#828b96;font-style:italic">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff636f">namespace&lt;/span> &lt;span style="color:#58a1dd">env&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff636f">class&lt;/span> &lt;span style="color:#58a1dd">Derivative&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff636f">public&lt;/span>&lt;span style="color:#ff636f">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">Derivative&lt;/span>() &lt;span style="color:#ff636f">=&lt;/span> &lt;span style="color:#ff636f">default&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">Derivative&lt;/span>(&lt;span style="color:#ff636f">const&lt;/span> &lt;span style="color:#58a1dd">Derivative&lt;/span> &lt;span style="color:#ff636f">&amp;amp;&lt;/span>) &lt;span style="color:#ff636f">=&lt;/span> &lt;span style="color:#ff636f">delete&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">Derivative&lt;/span> &lt;span style="color:#ff636f">&amp;amp;&lt;/span>&lt;span style="color:#ff636f">operator&lt;/span>&lt;span style="color:#ff636f">=&lt;/span>(&lt;span style="color:#ff636f">const&lt;/span> &lt;span style="color:#58a1dd">Derivative&lt;/span> &lt;span style="color:#ff636f">&amp;amp;&lt;/span>) &lt;span style="color:#ff636f">=&lt;/span> &lt;span style="color:#ff636f">delete&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">bool&lt;/span> &lt;span style="color:#58a1dd">AddBashCompatible&lt;/span>(&lt;span style="color:#ff636f">int&lt;/span> &lt;span style="color:#58a1dd">argc&lt;/span>, &lt;span style="color:#ff636f">char&lt;/span> &lt;span style="color:#ff636f">*&lt;/span>&lt;span style="color:#ff636f">const&lt;/span> &lt;span style="color:#ff636f">*&lt;/span>&lt;span style="color:#58a1dd">argv&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">bool&lt;/span> &lt;span style="color:#58a1dd">EraseEnv&lt;/span>(&lt;span style="color:#58a1dd">std&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">string_view&lt;/span> &lt;span style="color:#58a1dd">key&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">bool&lt;/span> &lt;span style="color:#58a1dd">SetEnv&lt;/span>(&lt;span style="color:#58a1dd">std&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">string_view&lt;/span> &lt;span style="color:#58a1dd">key&lt;/span>, &lt;span style="color:#58a1dd">std&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">string_view&lt;/span> &lt;span style="color:#58a1dd">value&lt;/span>, &lt;span style="color:#ff636f">bool&lt;/span> &lt;span style="color:#58a1dd">force&lt;/span> &lt;span style="color:#ff636f">=&lt;/span> &lt;span style="color:#58a1dd">false&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">bool&lt;/span> &lt;span style="color:#58a1dd">PutEnv&lt;/span>(&lt;span style="color:#58a1dd">std&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">string_view&lt;/span> &lt;span style="color:#58a1dd">nv&lt;/span>, &lt;span style="color:#ff636f">bool&lt;/span> &lt;span style="color:#58a1dd">force&lt;/span> &lt;span style="color:#ff636f">=&lt;/span> &lt;span style="color:#58a1dd">false&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">[[nodiscard]]&lt;/span> &lt;span style="color:#58a1dd">std&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">string_view&lt;/span> &lt;span style="color:#58a1dd">GetEnv&lt;/span>(&lt;span style="color:#58a1dd">std&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">string_view&lt;/span> &lt;span style="color:#58a1dd">key&lt;/span>) &lt;span style="color:#ff636f">const&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">bool&lt;/span> &lt;span style="color:#58a1dd">ExpandEnv&lt;/span>(&lt;span style="color:#58a1dd">std&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">string_view&lt;/span> &lt;span style="color:#58a1dd">raw&lt;/span>, &lt;span style="color:#58a1dd">std&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">string&lt;/span> &lt;span style="color:#ff636f">&amp;amp;&lt;/span>&lt;span style="color:#58a1dd">w&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">bool&lt;/span> &lt;span style="color:#58a1dd">disableos&lt;/span> &lt;span style="color:#ff636f">=&lt;/span> &lt;span style="color:#58a1dd">false&lt;/span>) &lt;span style="color:#ff636f">const&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff636f">private&lt;/span>&lt;span style="color:#ff636f">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">bool&lt;/span> &lt;span style="color:#58a1dd">AppendEnv&lt;/span>(&lt;span style="color:#58a1dd">std&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">string_view&lt;/span> &lt;span style="color:#58a1dd">key&lt;/span>, &lt;span style="color:#58a1dd">std&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">string&lt;/span> &lt;span style="color:#ff636f">&amp;amp;&lt;/span>&lt;span style="color:#58a1dd">w&lt;/span>) &lt;span style="color:#ff636f">const&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">absl&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">flat_hash_map&lt;/span>&lt;span style="color:#ff636f">&amp;lt;&lt;/span>&lt;span style="color:#58a1dd">std&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">string&lt;/span>, &lt;span style="color:#58a1dd">std&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">string&lt;/span>&lt;span style="color:#ff636f">&amp;gt;&lt;/span> &lt;span style="color:#58a1dd">envblock&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff636f">namespace&lt;/span> &lt;span style="color:#58a1dd">env_internal&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff636f">inline&lt;/span> &lt;span style="color:#ff636f">bool&lt;/span> &lt;span style="color:#58a1dd">is_shell_specia_var&lt;/span>(&lt;span style="color:#ff636f">char&lt;/span> &lt;span style="color:#58a1dd">ch&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">return&lt;/span> (&lt;span style="color:#58a1dd">ch&lt;/span> &lt;span style="color:#ff636f">==&lt;/span> &lt;span style="color:#a6be9d">&amp;#39;*&amp;#39;&lt;/span> &lt;span style="color:#ff636f">||&lt;/span> &lt;span style="color:#58a1dd">ch&lt;/span> &lt;span style="color:#ff636f">==&lt;/span> &lt;span style="color:#a6be9d">&amp;#39;#&amp;#39;&lt;/span> &lt;span style="color:#ff636f">||&lt;/span> &lt;span style="color:#58a1dd">ch&lt;/span> &lt;span style="color:#ff636f">==&lt;/span> &lt;span style="color:#a6be9d">&amp;#39;$&amp;#39;&lt;/span> &lt;span style="color:#ff636f">||&lt;/span> &lt;span style="color:#58a1dd">ch&lt;/span> &lt;span style="color:#ff636f">==&lt;/span> &lt;span style="color:#a6be9d">&amp;#39;@&amp;#39;&lt;/span> &lt;span style="color:#ff636f">||&lt;/span> &lt;span style="color:#58a1dd">ch&lt;/span> &lt;span style="color:#ff636f">==&lt;/span> &lt;span style="color:#a6be9d">&amp;#39;!&amp;#39;&lt;/span> &lt;span style="color:#ff636f">||&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">ch&lt;/span> &lt;span style="color:#ff636f">==&lt;/span> &lt;span style="color:#a6be9d">&amp;#39;?&amp;#39;&lt;/span> &lt;span style="color:#ff636f">||&lt;/span> &lt;span style="color:#58a1dd">ch&lt;/span> &lt;span style="color:#ff636f">==&lt;/span> &lt;span style="color:#a6be9d">&amp;#39;-&amp;#39;&lt;/span> &lt;span style="color:#ff636f">||&lt;/span> (&lt;span style="color:#58a1dd">ch&lt;/span> &lt;span style="color:#ff636f">&amp;gt;=&lt;/span> &lt;span style="color:#a6be9d">&amp;#39;0&amp;#39;&lt;/span> &lt;span style="color:#ff636f">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#58a1dd">ch&lt;/span> &lt;span style="color:#ff636f">&amp;lt;=&lt;/span> &lt;span style="color:#a6be9d">&amp;#39;9&amp;#39;&lt;/span>));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff636f">inline&lt;/span> &lt;span style="color:#ff636f">bool&lt;/span> &lt;span style="color:#58a1dd">is_alphanum&lt;/span>(&lt;span style="color:#ff636f">char&lt;/span> &lt;span style="color:#58a1dd">ch&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">return&lt;/span> (&lt;span style="color:#58a1dd">ch&lt;/span> &lt;span style="color:#ff636f">==&lt;/span> &lt;span style="color:#a6be9d">&amp;#39;_&amp;#39;&lt;/span> &lt;span style="color:#ff636f">||&lt;/span> (&lt;span style="color:#58a1dd">ch&lt;/span> &lt;span style="color:#ff636f">&amp;gt;=&lt;/span> &lt;span style="color:#a6be9d">&amp;#39;0&amp;#39;&lt;/span> &lt;span style="color:#ff636f">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#58a1dd">ch&lt;/span> &lt;span style="color:#ff636f">&amp;lt;=&lt;/span> &lt;span style="color:#a6be9d">&amp;#39;9&amp;#39;&lt;/span>) &lt;span style="color:#ff636f">||&lt;/span> (&lt;span style="color:#58a1dd">ch&lt;/span> &lt;span style="color:#ff636f">&amp;gt;=&lt;/span> &lt;span style="color:#a6be9d">&amp;#39;a&amp;#39;&lt;/span> &lt;span style="color:#ff636f">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#58a1dd">ch&lt;/span> &lt;span style="color:#ff636f">&amp;lt;=&lt;/span> &lt;span style="color:#a6be9d">&amp;#39;z&amp;#39;&lt;/span>) &lt;span style="color:#ff636f">||&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (&lt;span style="color:#58a1dd">ch&lt;/span> &lt;span style="color:#ff636f">&amp;gt;=&lt;/span> &lt;span style="color:#a6be9d">&amp;#39;A&amp;#39;&lt;/span> &lt;span style="color:#ff636f">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#58a1dd">ch&lt;/span> &lt;span style="color:#ff636f">&amp;lt;=&lt;/span> &lt;span style="color:#a6be9d">&amp;#39;Z&amp;#39;&lt;/span>));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff636f">inline&lt;/span> &lt;span style="color:#58a1dd">std&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">string_view&lt;/span> &lt;span style="color:#58a1dd">resovle_shell_name&lt;/span>(&lt;span style="color:#58a1dd">std&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">string_view&lt;/span> &lt;span style="color:#58a1dd">s&lt;/span>, &lt;span style="color:#58a1dd">size_t&lt;/span> &lt;span style="color:#ff636f">&amp;amp;&lt;/span>&lt;span style="color:#58a1dd">off&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">off&lt;/span> &lt;span style="color:#ff636f">=&lt;/span> &lt;span style="color:#a6be9d">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">if&lt;/span> (&lt;span style="color:#58a1dd">s&lt;/span>.&lt;span style="color:#58a1dd">front&lt;/span>() &lt;span style="color:#ff636f">==&lt;/span> &lt;span style="color:#a6be9d">&amp;#39;{&amp;#39;&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">if&lt;/span> (&lt;span style="color:#58a1dd">s&lt;/span>.&lt;span style="color:#58a1dd">size&lt;/span>() &lt;span style="color:#ff636f">&amp;gt;&lt;/span> &lt;span style="color:#a6be9d">2&lt;/span> &lt;span style="color:#ff636f">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#58a1dd">is_shell_specia_var&lt;/span>(&lt;span style="color:#58a1dd">s&lt;/span>[&lt;span style="color:#a6be9d">1&lt;/span>]) &lt;span style="color:#ff636f">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#58a1dd">s&lt;/span>[&lt;span style="color:#a6be9d">2&lt;/span>] &lt;span style="color:#ff636f">==&lt;/span> &lt;span style="color:#a6be9d">&amp;#39;}&amp;#39;&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">off&lt;/span> &lt;span style="color:#ff636f">=&lt;/span> &lt;span style="color:#a6be9d">3&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">return&lt;/span> &lt;span style="color:#58a1dd">s&lt;/span>.&lt;span style="color:#58a1dd">substr&lt;/span>(&lt;span style="color:#a6be9d">1&lt;/span>, &lt;span style="color:#a6be9d">2&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">for&lt;/span> (&lt;span style="color:#58a1dd">size_t&lt;/span> &lt;span style="color:#58a1dd">i&lt;/span> &lt;span style="color:#ff636f">=&lt;/span> &lt;span style="color:#a6be9d">1&lt;/span>; &lt;span style="color:#58a1dd">i&lt;/span> &lt;span style="color:#ff636f">&amp;lt;&lt;/span> &lt;span style="color:#58a1dd">s&lt;/span>.&lt;span style="color:#58a1dd">size&lt;/span>(); &lt;span style="color:#58a1dd">i&lt;/span>&lt;span style="color:#ff636f">++&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">if&lt;/span> (&lt;span style="color:#58a1dd">s&lt;/span>[&lt;span style="color:#58a1dd">i&lt;/span>] &lt;span style="color:#ff636f">==&lt;/span> &lt;span style="color:#a6be9d">&amp;#39;}&amp;#39;&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">if&lt;/span> (&lt;span style="color:#58a1dd">i&lt;/span> &lt;span style="color:#ff636f">==&lt;/span> &lt;span style="color:#a6be9d">1&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">off&lt;/span> &lt;span style="color:#ff636f">=&lt;/span> &lt;span style="color:#a6be9d">2&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">return&lt;/span> &lt;span style="color:#a6be9d">&amp;#34;&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">off&lt;/span> &lt;span style="color:#ff636f">=&lt;/span> &lt;span style="color:#58a1dd">i&lt;/span> &lt;span style="color:#ff636f">+&lt;/span> &lt;span style="color:#a6be9d">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">return&lt;/span> &lt;span style="color:#58a1dd">s&lt;/span>.&lt;span style="color:#58a1dd">substr&lt;/span>(&lt;span style="color:#a6be9d">1&lt;/span>, &lt;span style="color:#58a1dd">i&lt;/span> &lt;span style="color:#ff636f">-&lt;/span> &lt;span style="color:#a6be9d">1&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">off&lt;/span> &lt;span style="color:#ff636f">=&lt;/span> &lt;span style="color:#a6be9d">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">return&lt;/span> &lt;span style="color:#a6be9d">&amp;#34;&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">if&lt;/span> (&lt;span style="color:#58a1dd">is_shell_specia_var&lt;/span>(&lt;span style="color:#58a1dd">s&lt;/span>[&lt;span style="color:#a6be9d">0&lt;/span>])) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">off&lt;/span> &lt;span style="color:#ff636f">=&lt;/span> &lt;span style="color:#a6be9d">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">return&lt;/span> &lt;span style="color:#58a1dd">s&lt;/span>.&lt;span style="color:#58a1dd">substr&lt;/span>(&lt;span style="color:#a6be9d">0&lt;/span>, &lt;span style="color:#a6be9d">1&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">size_t&lt;/span> &lt;span style="color:#58a1dd">i&lt;/span> &lt;span style="color:#ff636f">=&lt;/span> &lt;span style="color:#a6be9d">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">for&lt;/span> (; &lt;span style="color:#58a1dd">i&lt;/span> &lt;span style="color:#ff636f">&amp;lt;&lt;/span> &lt;span style="color:#58a1dd">s&lt;/span>.&lt;span style="color:#58a1dd">size&lt;/span>() &lt;span style="color:#ff636f">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#58a1dd">is_alphanum&lt;/span>(&lt;span style="color:#58a1dd">s&lt;/span>[&lt;span style="color:#58a1dd">i&lt;/span>]); &lt;span style="color:#58a1dd">i&lt;/span>&lt;span style="color:#ff636f">++&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">off&lt;/span> &lt;span style="color:#ff636f">=&lt;/span> &lt;span style="color:#58a1dd">i&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">return&lt;/span> &lt;span style="color:#58a1dd">s&lt;/span>.&lt;span style="color:#58a1dd">substr&lt;/span>(&lt;span style="color:#a6be9d">0&lt;/span>, &lt;span style="color:#58a1dd">i&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff636f">inline&lt;/span> &lt;span style="color:#ff636f">bool&lt;/span> &lt;span style="color:#58a1dd">os_expand_env&lt;/span>(&lt;span style="color:#ff636f">const&lt;/span> &lt;span style="color:#58a1dd">std&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">string&lt;/span> &lt;span style="color:#ff636f">&amp;amp;&lt;/span>&lt;span style="color:#58a1dd">key&lt;/span>, &lt;span style="color:#58a1dd">std&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">string&lt;/span> &lt;span style="color:#ff636f">&amp;amp;&lt;/span>&lt;span style="color:#58a1dd">value&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">auto&lt;/span> &lt;span style="color:#58a1dd">v&lt;/span> &lt;span style="color:#ff636f">=&lt;/span> &lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">getenv&lt;/span>(&lt;span style="color:#58a1dd">key&lt;/span>.&lt;span style="color:#58a1dd">data&lt;/span>());
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">if&lt;/span> (&lt;span style="color:#58a1dd">v&lt;/span> &lt;span style="color:#ff636f">==&lt;/span> &lt;span style="color:#ff636f">nullptr&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">return&lt;/span> &lt;span style="color:#58a1dd">false&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">value&lt;/span>.&lt;span style="color:#58a1dd">append&lt;/span>(&lt;span style="color:#58a1dd">v&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">return&lt;/span> &lt;span style="color:#58a1dd">true&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>} &lt;span style="color:#828b96;font-style:italic">// namespace env_internal
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff636f">inline&lt;/span> &lt;span style="color:#ff636f">bool&lt;/span> &lt;span style="color:#58a1dd">Derivative&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">AddBashCompatible&lt;/span>(&lt;span style="color:#ff636f">int&lt;/span> &lt;span style="color:#58a1dd">argc&lt;/span>, &lt;span style="color:#ff636f">char&lt;/span> &lt;span style="color:#ff636f">*&lt;/span>&lt;span style="color:#ff636f">const&lt;/span> &lt;span style="color:#ff636f">*&lt;/span>&lt;span style="color:#58a1dd">argv&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#828b96;font-style:italic">// $0~$N
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span> &lt;span style="color:#ff636f">for&lt;/span> (&lt;span style="color:#ff636f">int&lt;/span> &lt;span style="color:#58a1dd">i&lt;/span> &lt;span style="color:#ff636f">=&lt;/span> &lt;span style="color:#a6be9d">0&lt;/span>; &lt;span style="color:#58a1dd">i&lt;/span> &lt;span style="color:#ff636f">&amp;lt;&lt;/span> &lt;span style="color:#58a1dd">argc&lt;/span>; &lt;span style="color:#58a1dd">i&lt;/span>&lt;span style="color:#ff636f">++&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">envblock&lt;/span>.&lt;span style="color:#58a1dd">emplace&lt;/span>(&lt;span style="color:#58a1dd">absl&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">AlphaNum&lt;/span>(&lt;span style="color:#58a1dd">i&lt;/span>).&lt;span style="color:#58a1dd">Piece&lt;/span>(), &lt;span style="color:#58a1dd">argv&lt;/span>[&lt;span style="color:#58a1dd">i&lt;/span>]);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">envblock&lt;/span>.&lt;span style="color:#58a1dd">emplace&lt;/span>(&lt;span style="color:#a6be9d">&amp;#34;$&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">absl&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">AlphaNum&lt;/span>(&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">getpid&lt;/span>()).&lt;span style="color:#58a1dd">Piece&lt;/span>()); &lt;span style="color:#828b96;font-style:italic">// current process PID
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span> &lt;span style="color:#ff636f">return&lt;/span> &lt;span style="color:#58a1dd">true&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff636f">inline&lt;/span> &lt;span style="color:#ff636f">bool&lt;/span> &lt;span style="color:#58a1dd">Derivative&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">EraseEnv&lt;/span>(&lt;span style="color:#58a1dd">std&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">string_view&lt;/span> &lt;span style="color:#58a1dd">key&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">return&lt;/span> &lt;span style="color:#58a1dd">envblock&lt;/span>.&lt;span style="color:#58a1dd">erase&lt;/span>(&lt;span style="color:#58a1dd">key&lt;/span>) &lt;span style="color:#ff636f">!=&lt;/span> &lt;span style="color:#a6be9d">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff636f">inline&lt;/span> &lt;span style="color:#ff636f">bool&lt;/span> &lt;span style="color:#58a1dd">Derivative&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">SetEnv&lt;/span>(&lt;span style="color:#58a1dd">std&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">string_view&lt;/span> &lt;span style="color:#58a1dd">key&lt;/span>, &lt;span style="color:#58a1dd">std&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">string_view&lt;/span> &lt;span style="color:#58a1dd">value&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">bool&lt;/span> &lt;span style="color:#58a1dd">force&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">if&lt;/span> (&lt;span style="color:#58a1dd">force&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#828b96;font-style:italic">// envblock[key] = value;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span> &lt;span style="color:#58a1dd">envblock&lt;/span>.&lt;span style="color:#58a1dd">insert_or_assign&lt;/span>(&lt;span style="color:#58a1dd">key&lt;/span>, &lt;span style="color:#58a1dd">value&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">return&lt;/span> &lt;span style="color:#58a1dd">true&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">return&lt;/span> &lt;span style="color:#58a1dd">envblock&lt;/span>.&lt;span style="color:#58a1dd">emplace&lt;/span>(&lt;span style="color:#58a1dd">key&lt;/span>, &lt;span style="color:#58a1dd">value&lt;/span>).&lt;span style="color:#58a1dd">second&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff636f">inline&lt;/span> &lt;span style="color:#ff636f">bool&lt;/span> &lt;span style="color:#58a1dd">Derivative&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">PutEnv&lt;/span>(&lt;span style="color:#58a1dd">std&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">string_view&lt;/span> &lt;span style="color:#58a1dd">nv&lt;/span>, &lt;span style="color:#ff636f">bool&lt;/span> &lt;span style="color:#58a1dd">force&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">auto&lt;/span> &lt;span style="color:#58a1dd">pos&lt;/span> &lt;span style="color:#ff636f">=&lt;/span> &lt;span style="color:#58a1dd">nv&lt;/span>.&lt;span style="color:#58a1dd">find&lt;/span>(&lt;span style="color:#a6be9d">&amp;#39;=&amp;#39;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">if&lt;/span> (&lt;span style="color:#58a1dd">pos&lt;/span> &lt;span style="color:#ff636f">==&lt;/span> &lt;span style="color:#58a1dd">std&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">wstring_view&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">npos&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">return&lt;/span> &lt;span style="color:#58a1dd">SetEnv&lt;/span>(&lt;span style="color:#58a1dd">nv&lt;/span>, &lt;span style="color:#a6be9d">&amp;#34;&amp;#34;&lt;/span>, &lt;span style="color:#58a1dd">force&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">return&lt;/span> &lt;span style="color:#58a1dd">SetEnv&lt;/span>(&lt;span style="color:#58a1dd">nv&lt;/span>.&lt;span style="color:#58a1dd">substr&lt;/span>(&lt;span style="color:#a6be9d">0&lt;/span>, &lt;span style="color:#58a1dd">pos&lt;/span>), &lt;span style="color:#58a1dd">nv&lt;/span>.&lt;span style="color:#58a1dd">substr&lt;/span>(&lt;span style="color:#58a1dd">pos&lt;/span> &lt;span style="color:#ff636f">+&lt;/span> &lt;span style="color:#a6be9d">1&lt;/span>), &lt;span style="color:#58a1dd">force&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#58a1dd">[[nodiscard]]&lt;/span> &lt;span style="color:#ff636f">inline&lt;/span> &lt;span style="color:#58a1dd">std&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">string_view&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#58a1dd">Derivative&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">GetEnv&lt;/span>(&lt;span style="color:#58a1dd">std&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">string_view&lt;/span> &lt;span style="color:#58a1dd">key&lt;/span>) &lt;span style="color:#ff636f">const&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">auto&lt;/span> &lt;span style="color:#58a1dd">it&lt;/span> &lt;span style="color:#ff636f">=&lt;/span> &lt;span style="color:#58a1dd">envblock&lt;/span>.&lt;span style="color:#58a1dd">find&lt;/span>(&lt;span style="color:#58a1dd">key&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">if&lt;/span> (&lt;span style="color:#58a1dd">it&lt;/span> &lt;span style="color:#ff636f">==&lt;/span> &lt;span style="color:#58a1dd">envblock&lt;/span>.&lt;span style="color:#58a1dd">end&lt;/span>()) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">return&lt;/span> &lt;span style="color:#a6be9d">&amp;#34;&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">return&lt;/span> &lt;span style="color:#58a1dd">it&lt;/span>&lt;span style="color:#ff636f">-&amp;gt;&lt;/span>&lt;span style="color:#58a1dd">second&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff636f">inline&lt;/span> &lt;span style="color:#ff636f">bool&lt;/span> &lt;span style="color:#58a1dd">Derivative&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">AppendEnv&lt;/span>(&lt;span style="color:#58a1dd">std&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">string_view&lt;/span> &lt;span style="color:#58a1dd">key&lt;/span>, &lt;span style="color:#58a1dd">std&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">string&lt;/span> &lt;span style="color:#ff636f">&amp;amp;&lt;/span>&lt;span style="color:#58a1dd">w&lt;/span>) &lt;span style="color:#ff636f">const&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">auto&lt;/span> &lt;span style="color:#58a1dd">it&lt;/span> &lt;span style="color:#ff636f">=&lt;/span> &lt;span style="color:#58a1dd">envblock&lt;/span>.&lt;span style="color:#58a1dd">find&lt;/span>(&lt;span style="color:#58a1dd">key&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">if&lt;/span> (&lt;span style="color:#58a1dd">it&lt;/span> &lt;span style="color:#ff636f">==&lt;/span> &lt;span style="color:#58a1dd">envblock&lt;/span>.&lt;span style="color:#58a1dd">end&lt;/span>()) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">return&lt;/span> &lt;span style="color:#58a1dd">false&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">w&lt;/span>.&lt;span style="color:#58a1dd">append&lt;/span>(&lt;span style="color:#58a1dd">it&lt;/span>&lt;span style="color:#ff636f">-&amp;gt;&lt;/span>&lt;span style="color:#58a1dd">second&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">return&lt;/span> &lt;span style="color:#58a1dd">true&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">// Expand Env string to normal string only support Unix style&amp;#39;${KEY}&amp;#39;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span>&lt;span style="color:#ff636f">inline&lt;/span> &lt;span style="color:#ff636f">bool&lt;/span> &lt;span style="color:#58a1dd">Derivative&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">ExpandEnv&lt;/span>(&lt;span style="color:#58a1dd">std&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">string_view&lt;/span> &lt;span style="color:#58a1dd">raw&lt;/span>, &lt;span style="color:#58a1dd">std&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">string&lt;/span> &lt;span style="color:#ff636f">&amp;amp;&lt;/span>&lt;span style="color:#58a1dd">w&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">bool&lt;/span> &lt;span style="color:#58a1dd">disableos&lt;/span>) &lt;span style="color:#ff636f">const&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">w&lt;/span>.&lt;span style="color:#58a1dd">reserve&lt;/span>(&lt;span style="color:#58a1dd">raw&lt;/span>.&lt;span style="color:#58a1dd">size&lt;/span>() &lt;span style="color:#ff636f">*&lt;/span> &lt;span style="color:#a6be9d">2&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">size_t&lt;/span> &lt;span style="color:#58a1dd">i&lt;/span> &lt;span style="color:#ff636f">=&lt;/span> &lt;span style="color:#a6be9d">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">for&lt;/span> (&lt;span style="color:#58a1dd">size_t&lt;/span> &lt;span style="color:#58a1dd">j&lt;/span> &lt;span style="color:#ff636f">=&lt;/span> &lt;span style="color:#a6be9d">0&lt;/span>; &lt;span style="color:#58a1dd">j&lt;/span> &lt;span style="color:#ff636f">&amp;lt;&lt;/span> &lt;span style="color:#58a1dd">raw&lt;/span>.&lt;span style="color:#58a1dd">size&lt;/span>(); &lt;span style="color:#58a1dd">j&lt;/span>&lt;span style="color:#ff636f">++&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">if&lt;/span> (&lt;span style="color:#58a1dd">raw&lt;/span>[&lt;span style="color:#58a1dd">j&lt;/span>] &lt;span style="color:#ff636f">==&lt;/span> &lt;span style="color:#a6be9d">&amp;#39;$&amp;#39;&lt;/span> &lt;span style="color:#ff636f">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#58a1dd">j&lt;/span> &lt;span style="color:#ff636f">+&lt;/span> &lt;span style="color:#a6be9d">1&lt;/span> &lt;span style="color:#ff636f">&amp;lt;&lt;/span> &lt;span style="color:#58a1dd">raw&lt;/span>.&lt;span style="color:#58a1dd">size&lt;/span>()) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">w&lt;/span>.&lt;span style="color:#58a1dd">append&lt;/span>(&lt;span style="color:#58a1dd">raw&lt;/span>.&lt;span style="color:#58a1dd">substr&lt;/span>(&lt;span style="color:#58a1dd">i&lt;/span>, &lt;span style="color:#58a1dd">j&lt;/span> &lt;span style="color:#ff636f">-&lt;/span> &lt;span style="color:#58a1dd">i&lt;/span>));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">size_t&lt;/span> &lt;span style="color:#58a1dd">off&lt;/span> &lt;span style="color:#ff636f">=&lt;/span> &lt;span style="color:#a6be9d">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">auto&lt;/span> &lt;span style="color:#58a1dd">name&lt;/span> &lt;span style="color:#ff636f">=&lt;/span> &lt;span style="color:#58a1dd">env_internal&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">resovle_shell_name&lt;/span>(&lt;span style="color:#58a1dd">raw&lt;/span>.&lt;span style="color:#58a1dd">substr&lt;/span>(&lt;span style="color:#58a1dd">j&lt;/span> &lt;span style="color:#ff636f">+&lt;/span> &lt;span style="color:#a6be9d">1&lt;/span>), &lt;span style="color:#58a1dd">off&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">if&lt;/span> (&lt;span style="color:#58a1dd">name&lt;/span>.&lt;span style="color:#58a1dd">empty&lt;/span>()) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">if&lt;/span> (&lt;span style="color:#58a1dd">off&lt;/span> &lt;span style="color:#ff636f">==&lt;/span> &lt;span style="color:#a6be9d">0&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">w&lt;/span>.&lt;span style="color:#58a1dd">push_back&lt;/span>(&lt;span style="color:#58a1dd">raw&lt;/span>[&lt;span style="color:#58a1dd">j&lt;/span>]);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } &lt;span style="color:#ff636f">else&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">if&lt;/span> (&lt;span style="color:#ff636f">!&lt;/span>&lt;span style="color:#58a1dd">AppendEnv&lt;/span>(&lt;span style="color:#58a1dd">name&lt;/span>, &lt;span style="color:#58a1dd">w&lt;/span>)) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">if&lt;/span> (&lt;span style="color:#ff636f">!&lt;/span>&lt;span style="color:#58a1dd">disableos&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">env_internal&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">os_expand_env&lt;/span>(&lt;span style="color:#58a1dd">std&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">string&lt;/span>(&lt;span style="color:#58a1dd">name&lt;/span>), &lt;span style="color:#58a1dd">w&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">j&lt;/span> &lt;span style="color:#ff636f">+=&lt;/span> &lt;span style="color:#58a1dd">off&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">i&lt;/span> &lt;span style="color:#ff636f">=&lt;/span> &lt;span style="color:#58a1dd">j&lt;/span> &lt;span style="color:#ff636f">+&lt;/span> &lt;span style="color:#a6be9d">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">w&lt;/span>.&lt;span style="color:#58a1dd">append&lt;/span>(&lt;span style="color:#58a1dd">raw&lt;/span>.&lt;span style="color:#58a1dd">substr&lt;/span>(&lt;span style="color:#58a1dd">i&lt;/span>));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">return&lt;/span> &lt;span style="color:#58a1dd">true&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>} &lt;span style="color:#828b96;font-style:italic">// namespace env
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">#endif
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>这个 &lt;code>Derivative&lt;/code> 类是我借鉴 &lt;code>Golang&lt;/code> 先在 bela 中实现的，在 bela 中，我们使用了 &lt;a href="https://github.com/greg7mdp/parallel-hashmap">parallel-hashmap&lt;/a> 作为环境变量容器，并且提供了支持 &lt;code>std::wstring&lt;/code> 异构查找的&lt;a href="https://github.com/fcharlie/bela/blob/master/include/bela/phmap/std_wstring.patch">补丁&lt;/a>。并且还使用 &lt;code>parallel_flat_hash_map&lt;/code> 实现了线程安全的 &lt;code>DerivativeMT&lt;/code>，测试无误后将其移植到到 Gitee 的项目中。&lt;/p>
&lt;p>&lt;strong>2019-07-10&lt;/strong> &lt;a href="https://github.com/greg7mdp">Gregory Popovitch&lt;/a> 接受了我的 &lt;a href="https://github.com/greg7mdp/parallel-hashmap/pull/15">PR&lt;/a>，目前已经使用官方的 &lt;code>parallel-hashmap&lt;/code> 作为 Bela 的环境变量容器。&lt;/p>
&lt;p>因此，如果你需要在 Windows 中使用 &lt;code>Derivative&lt;/code>，建议使用 &lt;a href="https://github.com/fcharlie/bela/blob/master/include/bela/env.hpp">&lt;code>bela&lt;/code>&lt;/a>，其他环境可以使用这个 &lt;code>header-only&lt;/code> 版本。&lt;/p>
&lt;h2 id="可回滚的-shell-自解压安装包">可回滚的 Shell 自解压安装包&lt;/h2>
&lt;p>我在 Gitee 开发一些基础组件，除了要为 Gitee 公有云提供技术支持，同时也需要为私有化提供技术支持，因此，这些基础组件如若能静态编译，解压后直接运行是最简单不过的，但是当处于维护模式，升级软件时，却不得不考虑配置是否覆盖，如何支持二进制回滚的问题。&lt;/p>
&lt;p>当我们使用 cmake 作为构建系统时，cmake 拥有打包工具 &lt;code>cpack&lt;/code>，在 Linux 中，&lt;code>cpack&lt;/code> 可以打包一个 &lt;code>STGZ&lt;/code> 文件，这个文件有些特别，文件前部是一个脚本，后面则是一个 &lt;code>tar.gz&lt;/code> 文件，当执行此文件前部的脚本时，脚本会读取文件中 &lt;code>.tar.gz&lt;/code> 文件的偏移，以管道的方式调用 &lt;code>tar&lt;/code> 解压。这样就实现了安装。&lt;code>cmake&lt;/code> 使用一个名为：&lt;a href="https://github.com/Kitware/CMake/blob/master/Modules/CPack.STGZ_Header.sh.in">CPack.STGZ_Header.sh.in&lt;/a> 的模板，如果要安装后执行特定的配置文件，我们则可以在项目文件中添加一个修改后的 &lt;code>CPack.STGZ_Header.sh.in&lt;/code> 覆盖 cmake 自身的模板即可。&lt;/p>
&lt;p>在 cmake 中，配置文件的安装支持 &lt;code>RENAME&lt;/code>，但 &lt;code>target&lt;/code> 暂不支持 &lt;code>RENAME&lt;/code>，因此，我们可以将 target 修改为原来的 &lt;code>$TARGET_NAME.new&lt;/code>，在解压到安装目录后，自定义配置文件检测相应的 target 是否已经存在，存在则重命名，然后将 &lt;code>$TARGET_NAME.new&lt;/code> 重命名为 &lt;code>$TARGET_NAME&lt;/code>，这样便能够支持二进制回滚。配置文件配置也是类似，我们还可以运行 diff 去检测配置文件哪里发生了修改，提示用户更新。&lt;/p>
&lt;p>在 Gitee 中，有一些项目基于 Golang 编写，而 cmake 目前并不支持 golang，虽然使用 cmake 可以打包，但是还是有一些麻烦，实际上编写 stgz 构建脚本非常简单，相应脚本如下：&lt;/p>
&lt;p>主构建脚本（bali：我使用 &lt;a href="https://github.com/fcharlie/bali">https://github.com/fcharlie/bali&lt;/a> 作为 Golang 项目的构建软件）：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#1d2432;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-powershell" data-lang="powershell">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">#!/usr/bin/env pwsh&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff636f">param&lt;/span>(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> [&lt;span style="color:#58a1dd">ValidateSet&lt;/span>(&lt;span style="color:#a6be9d">&amp;#34;linux&amp;#34;&lt;/span>, &lt;span style="color:#a6be9d">&amp;#34;drawin&amp;#34;&lt;/span>, &lt;span style="color:#a6be9d">&amp;#34;windows&amp;#34;&lt;/span>)]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> [&lt;span style="color:#58a1dd">Alias&lt;/span>(&lt;span style="color:#a6be9d">&amp;#34;T&amp;#34;&lt;/span>)]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> [&lt;span style="color:#58a1dd">String&lt;/span>]&lt;span style="color:#58a1dd">$Target&lt;/span> = &lt;span style="color:#a6be9d">&amp;#34;linux&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> [&lt;span style="color:#58a1dd">String&lt;/span>]&lt;span style="color:#58a1dd">$Arch&lt;/span> = &lt;span style="color:#a6be9d">&amp;#34;amd64&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> [&lt;span style="color:#58a1dd">Alias&lt;/span>(&lt;span style="color:#a6be9d">&amp;#34;h&amp;#34;&lt;/span>)]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> [&lt;span style="color:#58a1dd">Switch&lt;/span>]&lt;span style="color:#58a1dd">$Help&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff636f">if&lt;/span> (&lt;span style="color:#58a1dd">$Help&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">Write-Host&lt;/span> &lt;span style="color:#a6be9d">&amp;#34;charlie&amp;#39;s mkstgz script tools
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6be9d"> -T|--target target name, Linux, macOS, Windows
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6be9d"> -h|--help print usage and exit.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6be9d"> &amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">exit&lt;/span> &lt;span style="color:#a6be9d">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#58a1dd">$BALIUTILS&lt;/span> = &lt;span style="color:#58a1dd">Get-Command&lt;/span> &lt;span style="color:#58a1dd">-CommandType&lt;/span> &lt;span style="color:#58a1dd">Application&lt;/span> &lt;span style="color:#58a1dd">bali&lt;/span> &lt;span style="color:#58a1dd">-ErrorAction&lt;/span> &lt;span style="color:#58a1dd">SilentlyContinue&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff636f">if&lt;/span> (&lt;span style="color:#58a1dd">$null&lt;/span> &lt;span style="color:#ff636f">-eq&lt;/span> &lt;span style="color:#58a1dd">$BALIUTILS&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">Write-Host&lt;/span> &lt;span style="color:#58a1dd">-ForegroundColor&lt;/span> &lt;span style="color:#58a1dd">Red&lt;/span> &lt;span style="color:#a6be9d">&amp;#34;Please install bali to allow mkstgz&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">exit&lt;/span> &lt;span style="color:#a6be9d">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#58a1dd">$AppDir&lt;/span> = &lt;span style="color:#58a1dd">Split-Path&lt;/span> &lt;span style="color:#58a1dd">-Parent&lt;/span> &lt;span style="color:#58a1dd">-Path&lt;/span> &lt;span style="color:#58a1dd">$PSScriptRoot&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#58a1dd">$result&lt;/span> = &lt;span style="color:#58a1dd">Start-Process&lt;/span> &lt;span style="color:#58a1dd">-FilePath&lt;/span> &lt;span style="color:#a6be9d">&amp;#34;bali&amp;#34;&lt;/span> &lt;span style="color:#58a1dd">-ArgumentList&lt;/span> &lt;span style="color:#a6be9d">&amp;#34;-t &lt;/span>&lt;span style="color:#58a1dd">$Target&lt;/span>&lt;span style="color:#a6be9d"> -Arch &lt;/span>&lt;span style="color:#58a1dd">$Arch&lt;/span>&lt;span style="color:#a6be9d">&amp;#34;&lt;/span> &lt;span style="color:#58a1dd">-WorkingDirectory&lt;/span> &lt;span style="color:#58a1dd">$AppDir&lt;/span> &lt;span style="color:#58a1dd">-NoNewWindow&lt;/span> &lt;span style="color:#58a1dd">-Wait&lt;/span> &lt;span style="color:#58a1dd">-PassThru&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff636f">if&lt;/span> (&lt;span style="color:#58a1dd">$result&lt;/span>.&lt;span style="color:#58a1dd">ExitCode&lt;/span> &lt;span style="color:#ff636f">-ne&lt;/span> &lt;span style="color:#a6be9d">0&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">Write-Host&lt;/span> &lt;span style="color:#58a1dd">-ForegroundColor&lt;/span> &lt;span style="color:#58a1dd">Red&lt;/span> &lt;span style="color:#a6be9d">&amp;#34;bali build MyPackage failed&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">exit&lt;/span> &lt;span style="color:#a6be9d">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#58a1dd">$Baliobj&lt;/span> = &lt;span style="color:#58a1dd">Get-Content&lt;/span> &lt;span style="color:#58a1dd">-Path&lt;/span> &lt;span style="color:#a6be9d">&amp;#34;&lt;/span>&lt;span style="color:#58a1dd">$AppDir&lt;/span>&lt;span style="color:#a6be9d">/bali.json&amp;#34;&lt;/span> | &lt;span style="color:#58a1dd">ConvertFrom-Json&lt;/span> &lt;span style="color:#58a1dd">-ErrorAction&lt;/span> &lt;span style="color:#58a1dd">SilentlyContinue&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff636f">if&lt;/span> (&lt;span style="color:#58a1dd">$null&lt;/span> &lt;span style="color:#ff636f">-eq&lt;/span> &lt;span style="color:#58a1dd">$Baliobj&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">Write-Host&lt;/span> &lt;span style="color:#58a1dd">-ForegroundColor&lt;/span> &lt;span style="color:#58a1dd">Red&lt;/span> &lt;span style="color:#a6be9d">&amp;#34;parse &lt;/span>&lt;span style="color:#58a1dd">$AppDir&lt;/span>&lt;span style="color:#a6be9d">/bali.json failed&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">exit&lt;/span> &lt;span style="color:#a6be9d">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff636f">if&lt;/span> (&lt;span style="color:#58a1dd">$null&lt;/span> &lt;span style="color:#ff636f">-eq&lt;/span> &lt;span style="color:#58a1dd">$Baliobj&lt;/span>.&lt;span style="color:#58a1dd">version&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">$version&lt;/span> = &lt;span style="color:#a6be9d">&amp;#34;0.0.1&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff636f">else&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">$version&lt;/span> = &lt;span style="color:#58a1dd">$Baliobj&lt;/span>.&lt;span style="color:#58a1dd">version&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#58a1dd">Write-Host&lt;/span> &lt;span style="color:#a6be9d">&amp;#34;The version of MyPackage detected is: &lt;/span>&lt;span style="color:#58a1dd">$version&lt;/span>&lt;span style="color:#a6be9d">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#58a1dd">Get-ChildItem&lt;/span> &lt;span style="color:#58a1dd">-Path&lt;/span> &lt;span style="color:#a6be9d">&amp;#34;&lt;/span>&lt;span style="color:#58a1dd">$AppDir&lt;/span>&lt;span style="color:#a6be9d">/build/bin&amp;#34;&lt;/span> | &lt;span style="color:#58a1dd">ForEach-Object&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">Rename-Item&lt;/span> &lt;span style="color:#58a1dd">-Path&lt;/span> &lt;span style="color:#58a1dd">$_&lt;/span>.&lt;span style="color:#58a1dd">FullName&lt;/span> &lt;span style="color:#58a1dd">-NewName&lt;/span> &lt;span style="color:#a6be9d">&amp;#34;&lt;/span>$(&lt;span style="color:#58a1dd">$_&lt;/span>.&lt;span style="color:#58a1dd">FullName&lt;/span>)&lt;span style="color:#a6be9d">.new&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#58a1dd">Get-ChildItem&lt;/span> &lt;span style="color:#58a1dd">-Path&lt;/span> &lt;span style="color:#a6be9d">&amp;#34;&lt;/span>&lt;span style="color:#58a1dd">$AppDir&lt;/span>&lt;span style="color:#a6be9d">/build/config&amp;#34;&lt;/span> | &lt;span style="color:#58a1dd">ForEach-Object&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">Rename-Item&lt;/span> &lt;span style="color:#58a1dd">-Path&lt;/span> &lt;span style="color:#58a1dd">$_&lt;/span>.&lt;span style="color:#58a1dd">FullName&lt;/span> &lt;span style="color:#58a1dd">-NewName&lt;/span> &lt;span style="color:#a6be9d">&amp;#34;&lt;/span>$(&lt;span style="color:#58a1dd">$_&lt;/span>.&lt;span style="color:#58a1dd">FullName&lt;/span>)&lt;span style="color:#a6be9d">.template&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#58a1dd">Copy-Item&lt;/span> &lt;span style="color:#58a1dd">-Path&lt;/span> &lt;span style="color:#a6be9d">&amp;#34;&lt;/span>&lt;span style="color:#58a1dd">$PSScriptRoot&lt;/span>&lt;span style="color:#a6be9d">/post_install.sh&amp;#34;&lt;/span> &lt;span style="color:#58a1dd">-Destination&lt;/span> &lt;span style="color:#a6be9d">&amp;#34;&lt;/span>&lt;span style="color:#58a1dd">$AppDir&lt;/span>&lt;span style="color:#a6be9d">/build/bin/post_install.sh&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#58a1dd">$TarDistPath&lt;/span> = &lt;span style="color:#a6be9d">&amp;#34;&lt;/span>&lt;span style="color:#58a1dd">$AppDir&lt;/span>&lt;span style="color:#a6be9d">/MyPackage-&lt;/span>&lt;span style="color:#58a1dd">$Target&lt;/span>&lt;span style="color:#a6be9d">-&lt;/span>&lt;span style="color:#58a1dd">$Arch&lt;/span>&lt;span style="color:#a6be9d">-&lt;/span>&lt;span style="color:#58a1dd">$version&lt;/span>&lt;span style="color:#a6be9d">.tar.gz&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#58a1dd">$StgzDistPath&lt;/span> = &lt;span style="color:#a6be9d">&amp;#34;&lt;/span>&lt;span style="color:#58a1dd">$AppDir&lt;/span>&lt;span style="color:#a6be9d">/MyPackage-&lt;/span>&lt;span style="color:#58a1dd">$Target&lt;/span>&lt;span style="color:#a6be9d">-&lt;/span>&lt;span style="color:#58a1dd">$Arch&lt;/span>&lt;span style="color:#a6be9d">-&lt;/span>&lt;span style="color:#58a1dd">$version&lt;/span>&lt;span style="color:#a6be9d">.sh&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#58a1dd">$StgzFileName&lt;/span> = &lt;span style="color:#a6be9d">&amp;#34;MyPackage-&lt;/span>&lt;span style="color:#58a1dd">$Target&lt;/span>&lt;span style="color:#a6be9d">-&lt;/span>&lt;span style="color:#58a1dd">$Arch&lt;/span>&lt;span style="color:#a6be9d">-&lt;/span>&lt;span style="color:#58a1dd">$version&lt;/span>&lt;span style="color:#a6be9d">.sh&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#58a1dd">Write-Host&lt;/span> &lt;span style="color:#a6be9d">&amp;#34;Compress MyPackage to &lt;/span>&lt;span style="color:#58a1dd">$TarDistPath&lt;/span>&lt;span style="color:#a6be9d">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#58a1dd">$TarArg&lt;/span> = &lt;span style="color:#a6be9d">&amp;#34;-czf &lt;/span>&lt;span style="color:#a6be9d">`&amp;#34;&lt;/span>&lt;span style="color:#58a1dd">$TarDistPath&lt;/span>&lt;span style="color:#a6be9d">`&amp;#34;&lt;/span>&lt;span style="color:#a6be9d"> .&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#58a1dd">$TarStatus&lt;/span> = &lt;span style="color:#58a1dd">Start-Process&lt;/span> &lt;span style="color:#58a1dd">-FilePath&lt;/span> &lt;span style="color:#a6be9d">&amp;#34;tar&amp;#34;&lt;/span> &lt;span style="color:#58a1dd">-ArgumentList&lt;/span> &lt;span style="color:#a6be9d">&amp;#34;&lt;/span>&lt;span style="color:#58a1dd">$TarArg&lt;/span>&lt;span style="color:#a6be9d">&amp;#34;&lt;/span> &lt;span style="color:#58a1dd">-WorkingDirectory&lt;/span> &lt;span style="color:#a6be9d">&amp;#34;&lt;/span>&lt;span style="color:#58a1dd">$AppDir&lt;/span>&lt;span style="color:#a6be9d">/build&amp;#34;&lt;/span> &lt;span style="color:#58a1dd">-Wait&lt;/span> &lt;span style="color:#58a1dd">-NoNewWindow&lt;/span> &lt;span style="color:#58a1dd">-PassThru&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff636f">if&lt;/span> (&lt;span style="color:#58a1dd">$TarStatus&lt;/span>.&lt;span style="color:#58a1dd">ExitCode&lt;/span> &lt;span style="color:#ff636f">-ne&lt;/span> &lt;span style="color:#a6be9d">0&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">exit&lt;/span> &lt;span style="color:#58a1dd">$TarStatus&lt;/span>.&lt;span style="color:#58a1dd">ExitCode&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#58a1dd">Copy-Item&lt;/span> &lt;span style="color:#58a1dd">-Path&lt;/span> &lt;span style="color:#a6be9d">&amp;#34;&lt;/span>&lt;span style="color:#58a1dd">$PSScriptRoot&lt;/span>&lt;span style="color:#a6be9d">/stgz.sh&amp;#34;&lt;/span> &lt;span style="color:#58a1dd">-Destination&lt;/span> &lt;span style="color:#a6be9d">&amp;#34;&lt;/span>&lt;span style="color:#58a1dd">$StgzDistPath&lt;/span>&lt;span style="color:#a6be9d">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#58a1dd">Write-Host&lt;/span> &lt;span style="color:#a6be9d">&amp;#34;Create a self-extracting file for MyPackage`: &lt;/span>&lt;span style="color:#58a1dd">$StgzDistPath&lt;/span>&lt;span style="color:#a6be9d">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff636f">try&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">$writer&lt;/span> = &lt;span style="color:#58a1dd">New-Object&lt;/span> &lt;span style="color:#58a1dd">System&lt;/span>.&lt;span style="color:#58a1dd">IO&lt;/span>.&lt;span style="color:#58a1dd">FileStream&lt;/span>(&lt;span style="color:#58a1dd">$StgzDistPath&lt;/span>, [&lt;span style="color:#58a1dd">System.IO.FileMode&lt;/span>]::&lt;span style="color:#58a1dd">Append&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff636f">catch&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">Write-Host&lt;/span> &lt;span style="color:#58a1dd">-ForegroundColor&lt;/span> &lt;span style="color:#58a1dd">Red&lt;/span> &lt;span style="color:#a6be9d">&amp;#34;unable open &lt;/span>&lt;span style="color:#58a1dd">$StgzDistPath&lt;/span>&lt;span style="color:#a6be9d">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">exit&lt;/span> &lt;span style="color:#a6be9d">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff636f">try&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">$reader&lt;/span> = &lt;span style="color:#58a1dd">New-Object&lt;/span> &lt;span style="color:#58a1dd">System&lt;/span>.&lt;span style="color:#58a1dd">IO&lt;/span>.&lt;span style="color:#58a1dd">FileStream&lt;/span>(&lt;span style="color:#58a1dd">$TarDistPath&lt;/span>, [&lt;span style="color:#58a1dd">System.IO.FileMode&lt;/span>]::&lt;span style="color:#58a1dd">Open&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff636f">catch&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">$writer&lt;/span>.&lt;span style="color:#58a1dd">Close&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">Write-Host&lt;/span> &lt;span style="color:#58a1dd">-ForegroundColor&lt;/span> &lt;span style="color:#58a1dd">Red&lt;/span> &lt;span style="color:#a6be9d">&amp;#34;unable open &lt;/span>&lt;span style="color:#58a1dd">$TarDistPath&lt;/span>&lt;span style="color:#a6be9d">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">exit&lt;/span> &lt;span style="color:#a6be9d">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff636f">try&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">$reader&lt;/span>.&lt;span style="color:#58a1dd">CopyTo&lt;/span>(&lt;span style="color:#58a1dd">$writer&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff636f">finally&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">$writer&lt;/span>.&lt;span style="color:#58a1dd">Close&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">$reader&lt;/span>.&lt;span style="color:#58a1dd">Close&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>[&lt;span style="color:#58a1dd">char&lt;/span>]&lt;span style="color:#58a1dd">$Esc&lt;/span> = &lt;span style="color:#58a1dd">0x1b&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#58a1dd">Write-Host&lt;/span> &lt;span style="color:#a6be9d">&amp;#34;&lt;/span>&lt;span style="color:#58a1dd">$Esc&lt;/span>&lt;span style="color:#a6be9d">[32mPackaged successfully&lt;/span>&lt;span style="color:#58a1dd">$Esc&lt;/span>&lt;span style="color:#a6be9d">[0m
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6be9d">Your can run &amp;#39;&lt;/span>&lt;span style="color:#58a1dd">$StgzFileName&lt;/span>&lt;span style="color:#a6be9d"> --prefix=/path/to/MyPackage&amp;#39; to install MyPackage&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>STGZ 文件头部（stgz.sh）：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#1d2432;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">#!/usr/bin/env bash
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic"># Display usage&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>stgz_usage&lt;span style="color:#ff636f">()&lt;/span> &lt;span style="color:#ff636f">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> cat &lt;span style="color:#a6be9d">&amp;lt;&amp;lt;EOF
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6be9d">Usage: $0 [options]
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6be9d">Options: [defaults in brackets after descriptions]
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6be9d"> --help print this message
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6be9d"> --version print cmake installer version
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6be9d"> --prefix=dir directory in which to install
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6be9d">EOF&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">exit&lt;/span> &lt;span style="color:#a6be9d">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff636f">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>stgz_fix_slashes&lt;span style="color:#ff636f">()&lt;/span> &lt;span style="color:#ff636f">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">echo&lt;/span> &lt;span style="color:#a6be9d">&amp;#34;&lt;/span>&lt;span style="color:#58a1dd">$1&lt;/span>&lt;span style="color:#a6be9d">&amp;#34;&lt;/span> | sed &lt;span style="color:#a6be9d">&amp;#39;s/\\/\//g&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff636f">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>stgz_echo_exit&lt;span style="color:#ff636f">()&lt;/span> &lt;span style="color:#ff636f">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">echo&lt;/span> &lt;span style="color:#a6be9d">&amp;#34;&lt;/span>&lt;span style="color:#58a1dd">$1&lt;/span>&lt;span style="color:#a6be9d">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">exit&lt;/span> &lt;span style="color:#a6be9d">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff636f">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff636f">for&lt;/span> a in &lt;span style="color:#a6be9d">&amp;#34;&lt;/span>&lt;span style="color:#58a1dd">$@&lt;/span>&lt;span style="color:#a6be9d">&amp;#34;&lt;/span>; &lt;span style="color:#ff636f">do&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">if&lt;/span> &lt;span style="color:#58a1dd">echo&lt;/span> &lt;span style="color:#a6be9d">&amp;#34;&lt;/span>&lt;span style="color:#58a1dd">$a&lt;/span>&lt;span style="color:#a6be9d">&amp;#34;&lt;/span> | grep &lt;span style="color:#a6be9d">&amp;#34;^--prefix=&amp;#34;&lt;/span> &amp;gt;/dev/null 2&amp;gt;/dev/null; &lt;span style="color:#ff636f">then&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">stgz_prefix_dir&lt;/span>&lt;span style="color:#ff636f">=&lt;/span>&lt;span style="color:#a6be9d">&amp;#34;&lt;/span>&lt;span style="color:#a6be9d">${&lt;/span>&lt;span style="color:#58a1dd">a&lt;/span>/--prefix=&lt;span style="color:#a6be9d">\/&lt;/span>//&lt;span style="color:#a6be9d">}&lt;/span>&lt;span style="color:#a6be9d">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">stgz_prefix_dir&lt;/span>&lt;span style="color:#ff636f">=&lt;/span>&lt;span style="color:#ff636f">$(&lt;/span>stgz_fix_slashes &lt;span style="color:#a6be9d">&amp;#34;&lt;/span>&lt;span style="color:#a6be9d">${&lt;/span>&lt;span style="color:#58a1dd">stgz_prefix_dir&lt;/span>&lt;span style="color:#a6be9d">}&lt;/span>&lt;span style="color:#a6be9d">&amp;#34;&lt;/span>&lt;span style="color:#ff636f">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">fi&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">if&lt;/span> &lt;span style="color:#58a1dd">echo&lt;/span> &lt;span style="color:#a6be9d">&amp;#34;&lt;/span>&lt;span style="color:#58a1dd">$a&lt;/span>&lt;span style="color:#a6be9d">&amp;#34;&lt;/span> | grep &lt;span style="color:#a6be9d">&amp;#34;^--help&amp;#34;&lt;/span> &amp;gt;/dev/null 2&amp;gt;/dev/null; &lt;span style="color:#ff636f">then&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> stgz_usage
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">fi&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff636f">done&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#58a1dd">echo&lt;/span> &lt;span style="color:#a6be9d">&amp;#34;This is a self-extracting archive.&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#58a1dd">toplevel&lt;/span>&lt;span style="color:#ff636f">=&lt;/span>&lt;span style="color:#ff636f">$(&lt;/span>&lt;span style="color:#58a1dd">pwd&lt;/span>&lt;span style="color:#ff636f">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff636f">if&lt;/span> &lt;span style="color:#ff636f">[[&lt;/span> &lt;span style="color:#a6be9d">&amp;#34;x&lt;/span>&lt;span style="color:#a6be9d">${&lt;/span>&lt;span style="color:#58a1dd">stgz_prefix_dir&lt;/span>&lt;span style="color:#a6be9d">}&lt;/span>&lt;span style="color:#a6be9d">&amp;#34;&lt;/span> !&lt;span style="color:#ff636f">=&lt;/span> &lt;span style="color:#a6be9d">&amp;#34;x&amp;#34;&lt;/span> &lt;span style="color:#ff636f">]]&lt;/span>; &lt;span style="color:#ff636f">then&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">toplevel&lt;/span>&lt;span style="color:#ff636f">=&lt;/span>&lt;span style="color:#a6be9d">&amp;#34;&lt;/span>&lt;span style="color:#a6be9d">${&lt;/span>&lt;span style="color:#58a1dd">stgz_prefix_dir&lt;/span>&lt;span style="color:#a6be9d">}&lt;/span>&lt;span style="color:#a6be9d">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff636f">fi&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#58a1dd">echo&lt;/span> &lt;span style="color:#a6be9d">&amp;#34;The archive will be extracted to: &lt;/span>&lt;span style="color:#a6be9d">${&lt;/span>&lt;span style="color:#58a1dd">toplevel&lt;/span>&lt;span style="color:#a6be9d">}&lt;/span>&lt;span style="color:#a6be9d">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff636f">if&lt;/span> &lt;span style="color:#ff636f">[&lt;/span> ! -d &lt;span style="color:#a6be9d">&amp;#34;&lt;/span>&lt;span style="color:#a6be9d">${&lt;/span>&lt;span style="color:#58a1dd">toplevel&lt;/span>&lt;span style="color:#a6be9d">}&lt;/span>&lt;span style="color:#a6be9d">&amp;#34;&lt;/span> &lt;span style="color:#ff636f">]&lt;/span>; &lt;span style="color:#ff636f">then&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> mkdir -p &lt;span style="color:#a6be9d">&amp;#34;&lt;/span>&lt;span style="color:#a6be9d">${&lt;/span>&lt;span style="color:#58a1dd">toplevel&lt;/span>&lt;span style="color:#a6be9d">}&lt;/span>&lt;span style="color:#a6be9d">&amp;#34;&lt;/span> &lt;span style="color:#ff636f">||&lt;/span> &lt;span style="color:#58a1dd">exit&lt;/span> &lt;span style="color:#a6be9d">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff636f">fi&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#58a1dd">echo&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#58a1dd">echo&lt;/span> &lt;span style="color:#a6be9d">&amp;#34;Using traget directory: &lt;/span>&lt;span style="color:#a6be9d">${&lt;/span>&lt;span style="color:#58a1dd">toplevel&lt;/span>&lt;span style="color:#a6be9d">}&lt;/span>&lt;span style="color:#a6be9d">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#58a1dd">echo&lt;/span> &lt;span style="color:#a6be9d">&amp;#34;Extracting, please wait...&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#58a1dd">echo&lt;/span> &lt;span style="color:#a6be9d">&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#58a1dd">ARCHIVE&lt;/span>&lt;span style="color:#ff636f">=&lt;/span>&lt;span style="color:#ff636f">$(&lt;/span>awk &lt;span style="color:#a6be9d">&amp;#39;/^__ARCHIVE_BELOW__/ {print NR + 1; exit 0; }&amp;#39;&lt;/span> &lt;span style="color:#a6be9d">&amp;#34;&lt;/span>&lt;span style="color:#58a1dd">$0&lt;/span>&lt;span style="color:#a6be9d">&amp;#34;&lt;/span>&lt;span style="color:#ff636f">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>tail &lt;span style="color:#a6be9d">&amp;#34;-n+&lt;/span>&lt;span style="color:#58a1dd">$ARCHIVE&lt;/span>&lt;span style="color:#a6be9d">&amp;#34;&lt;/span> &lt;span style="color:#a6be9d">&amp;#34;&lt;/span>&lt;span style="color:#58a1dd">$0&lt;/span>&lt;span style="color:#a6be9d">&amp;#34;&lt;/span> | tar xzvm -C &lt;span style="color:#a6be9d">&amp;#34;&lt;/span>&lt;span style="color:#58a1dd">$toplevel&lt;/span>&lt;span style="color:#a6be9d">&amp;#34;&lt;/span> &amp;gt;/dev/null 2&amp;gt;&amp;amp;&lt;span style="color:#a6be9d">1&lt;/span> 3&amp;gt;&amp;amp;&lt;span style="color:#a6be9d">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff636f">if&lt;/span> &lt;span style="color:#ff636f">[[&lt;/span> -f &lt;span style="color:#a6be9d">&amp;#34;&lt;/span>&lt;span style="color:#a6be9d">${&lt;/span>&lt;span style="color:#58a1dd">toplevel&lt;/span>&lt;span style="color:#a6be9d">}&lt;/span>&lt;span style="color:#a6be9d">/bin/post_install.sh&amp;#34;&lt;/span> &lt;span style="color:#ff636f">]]&lt;/span>; &lt;span style="color:#ff636f">then&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> chmod +x &lt;span style="color:#a6be9d">&amp;#34;&lt;/span>&lt;span style="color:#a6be9d">${&lt;/span>&lt;span style="color:#58a1dd">toplevel&lt;/span>&lt;span style="color:#a6be9d">}&lt;/span>&lt;span style="color:#a6be9d">/bin/post_install.sh&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> bash &lt;span style="color:#a6be9d">&amp;#34;&lt;/span>&lt;span style="color:#a6be9d">${&lt;/span>&lt;span style="color:#58a1dd">toplevel&lt;/span>&lt;span style="color:#a6be9d">}&lt;/span>&lt;span style="color:#a6be9d">/bin/post_install.sh&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff636f">fi&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#58a1dd">exit&lt;/span> &lt;span style="color:#a6be9d">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">#This line must be the last line of the file&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>__ARCHIVE_BELOW__
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>安装后执行的 &lt;code>post-install.sh&lt;/code>：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#1d2432;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">#!/usr/bin/env bash
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#58a1dd">BINPATH&lt;/span>&lt;span style="color:#ff636f">=&lt;/span>&lt;span style="color:#ff636f">$(&lt;/span>dirname &lt;span style="color:#a6be9d">&amp;#34;&lt;/span>&lt;span style="color:#58a1dd">$0&lt;/span>&lt;span style="color:#a6be9d">&amp;#34;&lt;/span>&lt;span style="color:#ff636f">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#58a1dd">BINPATH&lt;/span>&lt;span style="color:#ff636f">=&lt;/span>&lt;span style="color:#ff636f">$(&lt;/span>realpath &lt;span style="color:#a6be9d">&amp;#34;&lt;/span>&lt;span style="color:#58a1dd">$BINPATH&lt;/span>&lt;span style="color:#a6be9d">&amp;#34;&lt;/span>&lt;span style="color:#ff636f">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#58a1dd">CONFIGPATH&lt;/span>&lt;span style="color:#ff636f">=&lt;/span>&lt;span style="color:#ff636f">$(&lt;/span>realpath &lt;span style="color:#a6be9d">&amp;#34;&lt;/span>&lt;span style="color:#58a1dd">$BINPATH&lt;/span>&lt;span style="color:#a6be9d">/../config&amp;#34;&lt;/span>&lt;span style="color:#ff636f">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#58a1dd">toplevel&lt;/span>&lt;span style="color:#ff636f">=&lt;/span>&lt;span style="color:#ff636f">$(&lt;/span>realpath &lt;span style="color:#a6be9d">&amp;#34;&lt;/span>&lt;span style="color:#58a1dd">$BINPATH&lt;/span>&lt;span style="color:#a6be9d">/../&amp;#34;&lt;/span>&lt;span style="color:#ff636f">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>stgz_apply_target&lt;span style="color:#ff636f">()&lt;/span> &lt;span style="color:#ff636f">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">echo&lt;/span> &lt;span style="color:#a6be9d">&amp;#34;apply target &lt;/span>&lt;span style="color:#58a1dd">$1&lt;/span>&lt;span style="color:#a6be9d"> &lt;/span>&lt;span style="color:#58a1dd">$2&lt;/span>&lt;span style="color:#a6be9d">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">NEWNAME&lt;/span>&lt;span style="color:#ff636f">=&lt;/span>&lt;span style="color:#ff636f">$(&lt;/span>basename &lt;span style="color:#a6be9d">&amp;#34;&lt;/span>&lt;span style="color:#58a1dd">$1&lt;/span>&lt;span style="color:#a6be9d">&amp;#34;&lt;/span>&lt;span style="color:#ff636f">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">NAME&lt;/span>&lt;span style="color:#ff636f">=&lt;/span>&lt;span style="color:#a6be9d">&amp;#34;&lt;/span>&lt;span style="color:#a6be9d">${&lt;/span>&lt;span style="color:#58a1dd">NEWNAME&lt;/span>:&lt;span style="color:#58a1dd">0&lt;/span>:&lt;span style="color:#58a1dd">0&lt;/span>-4&lt;span style="color:#a6be9d">}&lt;/span>&lt;span style="color:#a6be9d">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">NBDIR&lt;/span>&lt;span style="color:#ff636f">=&lt;/span>&lt;span style="color:#a6be9d">&amp;#34;&lt;/span>&lt;span style="color:#58a1dd">$2&lt;/span>&lt;span style="color:#a6be9d">/bin&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">TARGETFILE&lt;/span>&lt;span style="color:#ff636f">=&lt;/span>&lt;span style="color:#a6be9d">&amp;#34;&lt;/span>&lt;span style="color:#58a1dd">$NBDIR&lt;/span>&lt;span style="color:#a6be9d">/&lt;/span>&lt;span style="color:#58a1dd">$NAME&lt;/span>&lt;span style="color:#a6be9d">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">if&lt;/span> &lt;span style="color:#ff636f">[[&lt;/span> ! -d &lt;span style="color:#a6be9d">&amp;#34;&lt;/span>&lt;span style="color:#58a1dd">$NBDIR&lt;/span>&lt;span style="color:#a6be9d">/old&amp;#34;&lt;/span> &lt;span style="color:#ff636f">]]&lt;/span>; &lt;span style="color:#ff636f">then&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> mkdir -p &lt;span style="color:#a6be9d">&amp;#34;&lt;/span>&lt;span style="color:#58a1dd">$NBDIR&lt;/span>&lt;span style="color:#a6be9d">/old&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">fi&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">if&lt;/span> &lt;span style="color:#ff636f">[[&lt;/span> -f &lt;span style="color:#a6be9d">&amp;#34;&lt;/span>&lt;span style="color:#58a1dd">$NBDIR&lt;/span>&lt;span style="color:#a6be9d">/old/&lt;/span>&lt;span style="color:#58a1dd">$NAME&lt;/span>&lt;span style="color:#a6be9d">.3&amp;#34;&lt;/span> &lt;span style="color:#ff636f">]]&lt;/span>; &lt;span style="color:#ff636f">then&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> rm &lt;span style="color:#a6be9d">&amp;#34;&lt;/span>&lt;span style="color:#58a1dd">$NBDIR&lt;/span>&lt;span style="color:#a6be9d">/old/&lt;/span>&lt;span style="color:#58a1dd">$NAME&lt;/span>&lt;span style="color:#a6be9d">.3&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">fi&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">if&lt;/span> &lt;span style="color:#ff636f">[[&lt;/span> -f &lt;span style="color:#a6be9d">&amp;#34;&lt;/span>&lt;span style="color:#58a1dd">$NBDIR&lt;/span>&lt;span style="color:#a6be9d">/old/&lt;/span>&lt;span style="color:#58a1dd">$NAME&lt;/span>&lt;span style="color:#a6be9d">.2&amp;#34;&lt;/span> &lt;span style="color:#ff636f">]]&lt;/span>; &lt;span style="color:#ff636f">then&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> mv &lt;span style="color:#a6be9d">&amp;#34;&lt;/span>&lt;span style="color:#58a1dd">$NBDIR&lt;/span>&lt;span style="color:#a6be9d">/old/&lt;/span>&lt;span style="color:#58a1dd">$NAME&lt;/span>&lt;span style="color:#a6be9d">.2&amp;#34;&lt;/span> &lt;span style="color:#a6be9d">&amp;#34;&lt;/span>&lt;span style="color:#58a1dd">$NBDIR&lt;/span>&lt;span style="color:#a6be9d">/old/&lt;/span>&lt;span style="color:#58a1dd">$NAME&lt;/span>&lt;span style="color:#a6be9d">.3&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">fi&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">if&lt;/span> &lt;span style="color:#ff636f">[[&lt;/span> -f &lt;span style="color:#a6be9d">&amp;#34;&lt;/span>&lt;span style="color:#58a1dd">$NBDIR&lt;/span>&lt;span style="color:#a6be9d">/old/&lt;/span>&lt;span style="color:#58a1dd">$NAME&lt;/span>&lt;span style="color:#a6be9d">.1&amp;#34;&lt;/span> &lt;span style="color:#ff636f">]]&lt;/span>; &lt;span style="color:#ff636f">then&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> mv &lt;span style="color:#a6be9d">&amp;#34;&lt;/span>&lt;span style="color:#58a1dd">$NBDIR&lt;/span>&lt;span style="color:#a6be9d">/old/&lt;/span>&lt;span style="color:#58a1dd">$NAME&lt;/span>&lt;span style="color:#a6be9d">.1&amp;#34;&lt;/span> &lt;span style="color:#a6be9d">&amp;#34;&lt;/span>&lt;span style="color:#58a1dd">$NBDIR&lt;/span>&lt;span style="color:#a6be9d">/old/&lt;/span>&lt;span style="color:#58a1dd">$NAME&lt;/span>&lt;span style="color:#a6be9d">.2&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">fi&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">if&lt;/span> &lt;span style="color:#ff636f">[[&lt;/span> -f &lt;span style="color:#a6be9d">&amp;#34;&lt;/span>&lt;span style="color:#58a1dd">$NBDIR&lt;/span>&lt;span style="color:#a6be9d">/&lt;/span>&lt;span style="color:#58a1dd">$NAME&lt;/span>&lt;span style="color:#a6be9d">.old&amp;#34;&lt;/span> &lt;span style="color:#ff636f">]]&lt;/span>; &lt;span style="color:#ff636f">then&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> mv &lt;span style="color:#a6be9d">&amp;#34;&lt;/span>&lt;span style="color:#58a1dd">$NBDIR&lt;/span>&lt;span style="color:#a6be9d">/&lt;/span>&lt;span style="color:#58a1dd">$NAME&lt;/span>&lt;span style="color:#a6be9d">.old&amp;#34;&lt;/span> &lt;span style="color:#a6be9d">&amp;#34;&lt;/span>&lt;span style="color:#58a1dd">$NBDIR&lt;/span>&lt;span style="color:#a6be9d">/old/&lt;/span>&lt;span style="color:#58a1dd">$NAME&lt;/span>&lt;span style="color:#a6be9d">.1&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">fi&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#828b96;font-style:italic">###&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">if&lt;/span> &lt;span style="color:#ff636f">[[&lt;/span> -f &lt;span style="color:#a6be9d">&amp;#34;&lt;/span>&lt;span style="color:#58a1dd">$TARGETFILE&lt;/span>&lt;span style="color:#a6be9d">&amp;#34;&lt;/span> &lt;span style="color:#ff636f">]]&lt;/span>; &lt;span style="color:#ff636f">then&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> mv &lt;span style="color:#a6be9d">&amp;#34;&lt;/span>&lt;span style="color:#58a1dd">$TARGETFILE&lt;/span>&lt;span style="color:#a6be9d">&amp;#34;&lt;/span> &lt;span style="color:#a6be9d">&amp;#34;&lt;/span>&lt;span style="color:#58a1dd">$TARGETFILE&lt;/span>&lt;span style="color:#a6be9d">.old&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">fi&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> mv &lt;span style="color:#a6be9d">&amp;#34;&lt;/span>&lt;span style="color:#58a1dd">$TARGETFILE&lt;/span>&lt;span style="color:#a6be9d">.new&amp;#34;&lt;/span> &lt;span style="color:#a6be9d">&amp;#34;&lt;/span>&lt;span style="color:#58a1dd">$TARGETFILE&lt;/span>&lt;span style="color:#a6be9d">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff636f">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>stgz_apply_config&lt;span style="color:#ff636f">()&lt;/span> &lt;span style="color:#ff636f">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">echo&lt;/span> &lt;span style="color:#a6be9d">&amp;#34;Install config &lt;/span>&lt;span style="color:#58a1dd">$1&lt;/span>&lt;span style="color:#a6be9d"> to &lt;/span>&lt;span style="color:#58a1dd">$2&lt;/span>&lt;span style="color:#a6be9d">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">NEWNAME&lt;/span>&lt;span style="color:#ff636f">=&lt;/span>&lt;span style="color:#ff636f">$(&lt;/span>basename &lt;span style="color:#a6be9d">&amp;#34;&lt;/span>&lt;span style="color:#58a1dd">$1&lt;/span>&lt;span style="color:#a6be9d">&amp;#34;&lt;/span>&lt;span style="color:#ff636f">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">NAME&lt;/span>&lt;span style="color:#ff636f">=&lt;/span>&lt;span style="color:#a6be9d">&amp;#34;&lt;/span>&lt;span style="color:#a6be9d">${&lt;/span>&lt;span style="color:#58a1dd">NEWNAME&lt;/span>:&lt;span style="color:#58a1dd">0&lt;/span>:&lt;span style="color:#58a1dd">0&lt;/span>-9&lt;span style="color:#a6be9d">}&lt;/span>&lt;span style="color:#a6be9d">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">NCDIR&lt;/span>&lt;span style="color:#ff636f">=&lt;/span>&lt;span style="color:#a6be9d">&amp;#34;&lt;/span>&lt;span style="color:#58a1dd">$2&lt;/span>&lt;span style="color:#a6be9d">/config&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">if&lt;/span> &lt;span style="color:#ff636f">[[&lt;/span> ! -d &lt;span style="color:#a6be9d">&amp;#34;&lt;/span>&lt;span style="color:#58a1dd">$NCDIR&lt;/span>&lt;span style="color:#a6be9d">&amp;#34;&lt;/span> &lt;span style="color:#ff636f">]]&lt;/span>; &lt;span style="color:#ff636f">then&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> mkdir -p &lt;span style="color:#a6be9d">&amp;#34;&lt;/span>&lt;span style="color:#58a1dd">$NCDIR&lt;/span>&lt;span style="color:#a6be9d">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">fi&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">if&lt;/span> &lt;span style="color:#ff636f">[[&lt;/span> -f &lt;span style="color:#a6be9d">&amp;#34;&lt;/span>&lt;span style="color:#58a1dd">$NCDIR&lt;/span>&lt;span style="color:#a6be9d">/&lt;/span>&lt;span style="color:#58a1dd">$NAME&lt;/span>&lt;span style="color:#a6be9d">&amp;#34;&lt;/span> &lt;span style="color:#ff636f">]]&lt;/span>; &lt;span style="color:#ff636f">then&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">echo&lt;/span> &lt;span style="color:#a6be9d">&amp;#34;File &lt;/span>&lt;span style="color:#58a1dd">$NAME&lt;/span>&lt;span style="color:#a6be9d"> exists in &lt;/span>&lt;span style="color:#58a1dd">$NCDIR&lt;/span>&lt;span style="color:#a6be9d">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> git --no-pager diff --no-index &lt;span style="color:#a6be9d">&amp;#34;&lt;/span>&lt;span style="color:#58a1dd">$1&lt;/span>&lt;span style="color:#a6be9d">&amp;#34;&lt;/span> &lt;span style="color:#a6be9d">&amp;#34;&lt;/span>&lt;span style="color:#58a1dd">$NCDIR&lt;/span>&lt;span style="color:#a6be9d">/&lt;/span>&lt;span style="color:#58a1dd">$NAME&lt;/span>&lt;span style="color:#a6be9d">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">else&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">echo&lt;/span> &lt;span style="color:#a6be9d">&amp;#34;rename &lt;/span>&lt;span style="color:#58a1dd">$1&lt;/span>&lt;span style="color:#a6be9d"> to &lt;/span>&lt;span style="color:#58a1dd">$NCDIR&lt;/span>&lt;span style="color:#a6be9d">/&lt;/span>&lt;span style="color:#58a1dd">$NAME&lt;/span>&lt;span style="color:#a6be9d">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> mv &lt;span style="color:#a6be9d">&amp;#34;&lt;/span>&lt;span style="color:#58a1dd">$1&lt;/span>&lt;span style="color:#a6be9d">&amp;#34;&lt;/span> &lt;span style="color:#a6be9d">&amp;#34;&lt;/span>&lt;span style="color:#58a1dd">$NCDIR&lt;/span>&lt;span style="color:#a6be9d">/&lt;/span>&lt;span style="color:#58a1dd">$NAME&lt;/span>&lt;span style="color:#a6be9d">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">fi&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff636f">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff636f">for&lt;/span> file in &lt;span style="color:#a6be9d">&amp;#34;&lt;/span>&lt;span style="color:#58a1dd">$BINPATH&lt;/span>&lt;span style="color:#a6be9d">&amp;#34;&lt;/span>/*.new; &lt;span style="color:#ff636f">do&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">echo&lt;/span> &lt;span style="color:#a6be9d">&amp;#34;apply &lt;/span>&lt;span style="color:#a6be9d">${&lt;/span>&lt;span style="color:#58a1dd">file&lt;/span>&lt;span style="color:#a6be9d">}&lt;/span>&lt;span style="color:#a6be9d">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> stgz_apply_target &lt;span style="color:#a6be9d">&amp;#34;&lt;/span>&lt;span style="color:#a6be9d">${&lt;/span>&lt;span style="color:#58a1dd">file&lt;/span>&lt;span style="color:#a6be9d">}&lt;/span>&lt;span style="color:#a6be9d">&amp;#34;&lt;/span> &lt;span style="color:#a6be9d">&amp;#34;&lt;/span>&lt;span style="color:#58a1dd">$toplevel&lt;/span>&lt;span style="color:#a6be9d">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff636f">done&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff636f">for&lt;/span> file in &lt;span style="color:#a6be9d">&amp;#34;&lt;/span>&lt;span style="color:#58a1dd">$CONFIGPATH&lt;/span>&lt;span style="color:#a6be9d">&amp;#34;&lt;/span>/*.template; &lt;span style="color:#ff636f">do&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">echo&lt;/span> &lt;span style="color:#a6be9d">&amp;#34;apply &lt;/span>&lt;span style="color:#58a1dd">$file&lt;/span>&lt;span style="color:#a6be9d">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> stgz_apply_config &lt;span style="color:#a6be9d">&amp;#34;&lt;/span>&lt;span style="color:#58a1dd">$file&lt;/span>&lt;span style="color:#a6be9d">&amp;#34;&lt;/span> &lt;span style="color:#a6be9d">&amp;#34;&lt;/span>&lt;span style="color:#58a1dd">$toplevel&lt;/span>&lt;span style="color:#a6be9d">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff636f">done&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>rm &lt;span style="color:#a6be9d">&amp;#34;&lt;/span>&lt;span style="color:#58a1dd">$BINPATH&lt;/span>&lt;span style="color:#a6be9d">/post_install.sh&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>以上三个脚本就可以像 bali 构建的项目打包成 &lt;code>STGZ&lt;/code> 文件，运行 &lt;code>MyPackage-$Target-$Arch-$version.sh --prefix=/path/to/MyPackage&lt;/code> 后就可以了，不会覆盖配置还支持二进制回滚，这对于需要平滑重启的业务来说还是有一些帮助的。&lt;/p>
&lt;h2 id="最后">最后&lt;/h2>
&lt;p>没什么可说的了。&lt;/p>
- https://forcemz.net/posts/2019/2019-07-09-july-tech-sharing/ - Copyright (c) 2009-2024 J23</description></item><item><title>坐和放宽 - 您的计算机需要更新</title><link>https://forcemz.net/posts/2019/2019-06-25-talk-computer-update/</link><pubDate>Tue, 25 Jun 2019 10:00:00 +0800</pubDate><guid>https://forcemz.net/posts/2019/2019-06-25-talk-computer-update/</guid><description>江二十三的思考 https://forcemz.net/posts/2019/2019-06-25-talk-computer-update/ -&lt;h1 id="前言">前言&lt;/h1>
&lt;p>今天在微博上看到了新浪科技的一篇微博，其主要内容如下：&lt;/p>
&lt;blockquote>
&lt;p>#创事记#【用不胜其烦的update，将Windows用户捆绑上未来战车】网友苦Windows久矣。众所周知，Windows Update是很烦人的更新，其中以win10的用户最为水深火热。目前看来，用户还需要在一次次漫长而琐碎的更新升级中等待，而时代的洪流终会蜿蜒地书写出微软的对与错。@脑极体Unity Windows不胜其烦的update&lt;/p>
&lt;/blockquote>
&lt;p>链接为：&lt;a href="https://m.weibo.cn/status/4385983862343989">https://m.weibo.cn/status/4385983862343989&lt;/a>。&lt;/p>
&lt;p>在这片微博中，新浪科技竟然能说出 “网友苦Windows久矣” 这种话，我只听说过“天下苦秦久矣”和“消费者苦联想久矣”，这个真的是过分的指责。国内的科技媒体在技术素养上怎能有如此的认识！科技媒体尚且如此，那么大众的对于软件更新可能就基本没啥积极的看法了。2017-2018 年&lt;strong>永恒之蓝&lt;/strong>勒索病毒肆虐的经历还历历在目，而被感染的机器基本上都是未安装补丁（包括已经停止技术支持的 XP 系统）的操作系统。对软件更新没有一个清醒的认识，这信息化急速发展的时代时非常危险的，我们也看到近几年网络犯罪的层出不穷，特别是针对计算机漏洞发起的网络犯罪。所以，及时的查漏补缺非常有必要，而本文也就要来讨论软件的更新问题。&lt;/p>
&lt;h1 id="软件的更新">软件的更新&lt;/h1>
&lt;p>软件的更新主要分为两个方面，一个是&lt;strong>安全更新&lt;/strong>，另一个是&lt;strong>功能更新&lt;/strong>（增加或废除功能）。通常来说，安全更新是必不可少的，安全更新能够修复计算机漏洞，提高软件的稳定性。而功能更新在一定程度上没有那么必不可缺，但功能更新在提高软件服务质量，简化用户操作等方面举足轻重。&lt;/p>
&lt;h2 id="安全更新">安全更新&lt;/h2>
&lt;p>无论是何种计算机，操作系统，系统核心组件，基础软件的安全更新是最为重要的。在实际情况中，硬件，软件的安全状况并不容乐观。下面是一些漏洞的回顾。&lt;/p>
&lt;p>2014年4月，国外黑客曝光了 OpenSSL Heartbleed 漏洞（在国内称为心血漏洞）：&lt;a href="https://www.us-cert.gov/ncas/alerts/TA14-098A">OpenSSL &amp;lsquo;Heartbleed&amp;rsquo; vulnerability (CVE-2014-0160)&lt;/a>，此漏洞危害之大，影响之大，堪称网络安全里程碑时间。此漏洞是利用 OpenSSL TLS 心跳包没有做边界检查进行攻击，黑客可以拿到用户加密后的数据，此漏洞使得受影响的用户使用 HTTPS 访问网银，在线支付等行为都变得不安全。 全球有大量网站使用 OpenSSL 实现 HTTPS 接入，这些网站都受到了影响。这件事还深远影响了 OpenSSL 的开发流程，改变了 SSL/TLS 库的格局，导致了 OpenSSL 的分裂，比如 OpenBSD fork OpenSSL 创建了 LibreSSL。Google fork OpenSSL 创建 boringssl 项目，甚至一些厂商开始使用自己的 SSL/TLS 实现，如 Amazon 的 &lt;a href="https://github.com/awslabs/s2n">s2n&lt;/a> 以及 Facebook 的 &lt;a href="https://github.com/facebookincubator/fizz">Fizz(TLS 1.3)&lt;/a>。而一些其他加密/TLS 库也受到了更多关注，如 ARM 的 &lt;a href="https://github.com/ARMmbed/mbedtls">mbedtls&lt;/a>。&lt;/p>
&lt;p>2017年3月补丁星期二，微软发布了 SMB 服务漏洞，而在短短的一个月之后，黑客团队就将此漏洞利用，并发布了相应的网络攻击工具，随后，勒索病毒爆发，中国，英国，俄罗斯，整个欧洲都受到影响，特别是高校校内网，大型企业内网政府机构专网。而在整个时间中，这些被勒索病毒攻击的电脑几乎都是未及时安装更新或者生命周期已经终结的计算机。而高校内网，大型企业内网，政府机构专网的计算机通常在软件更新上比较消极，因此损失特别严重。相关漏洞分析：&lt;a href="https://www.fireeye.com/blog/threat-research/2017/05/smb-exploited-wannacry-use-of-eternalblue.html">SMB Exploited: WannaCry Use of &amp;ldquo;EternalBlue&amp;rdquo;&lt;/a>&lt;/p>
&lt;p>2018年，Intel 不断的爆出 CPU 漏洞，“熔断”（Meltdown）和“幽灵”（Spectre）及其变种，这些漏洞让云服务厂商惊出一身冷汗，Azure 亚马逊都停机维护。这种漏洞的危害非常严重，对于使用虚拟机或者容器隔离的云服务厂商，CPU 漏洞可以轻易突破宿主机隔离，更可获得关键数据。还有黑客演示使用 JavaScript 利用漏洞攻击，普通用户也难以免受其害。Clang GCC 均增加了防御 CPU 漏洞的代码。MSVC 发布了抵御 Spectre 漏洞的编译器版本。&lt;/p>
&lt;p>2019-06-24 CURL 作者 又撰文披露了 &lt;a href="https://daniel.haxx.se/blog/2019/06/24/openssl-engine-code-injection-in-curl/">OPENSSL ENGINE CODE INJECTION IN CURL&lt;/a> &lt;a href="https://curl.haxx.se/docs/CVE-2019-5443.html">CVE-2019-5443: Windows OpenSSL engine code injection&lt;/a>，此缺陷可以导致非特权用户将恶意配置放置在 OpenSSL 搜索目录，当特权用于运行 cURL 时，实现攻击。漏洞真是防不胜防。&lt;/p>
&lt;p>&lt;a href="https://www.zerodayinitiative.com/">Zero Day Initiative: ZDI&lt;/a> 是趋势科技建立的一个零日漏洞计划，在 2019-06 月的零日漏洞分享目前就有 3个，相关博客地址：&lt;a href="https://www.zerodayinitiative.com/blog">https://www.zerodayinitiative.com/blog&lt;/a>，6 月份的零日漏洞如下：&lt;/p>
&lt;ul>
&lt;li>通过 Ruby On Rails 进行远程代码执行主动存储不安全的反序列化。影响版本 6.0.0.X 和 5.2.X。&lt;/li>
&lt;li>通过 CVE-2019-1069 利用 Windows 任务计划程序，此操作可以提升到 SYTSEM 权限。&lt;/li>
&lt;li>MINDSHARE：使用 BELKIN SURF N300 路由器进行硬件逆转。&lt;/li>
&lt;/ul>
&lt;p>上述零日漏洞以 CVE-2019-1069 影响最为广泛，如果每个月披露的漏洞数比较接近，那么当计算即一年未更新时，所面临的漏洞风险将非常高，用户的数据安全将无法得到保证。及时的安全更新应该也必须是计算机用户的常规操作。&lt;/p>
&lt;h2 id="功能更新">功能更新&lt;/h2>
&lt;p>与安全更新不同的是，功能更新更多的是改进用户体验，而没有安全更新那么急迫。但一些功能更新也非常重要。&lt;/p>
&lt;p>2015 年 IETF 批准了 HTTP/2 协议，主要 &lt;a href="https://httpwg.org/specs/rfc7540.html">RFC7450: Hypertext Transfer Protocol Version 2 (HTTP/2)&lt;/a> 和 &lt;a href="https://httpwg.org/specs/rfc7541.html">RFC7451: HPACK: Header Compression for HTTP/2&lt;/a>。HTTP/2 有以下新特性：&lt;/p>
&lt;ul>
&lt;li>多路复用，利用二进制分帧，将多个 HTTP 请求通过同一条信道传输，这节省了网络连接数目，提高了信道的使用率。&lt;/li>
&lt;li>头部压缩，在 HTTP/1.1 中，基于文本的头部非常冗长，占据了很多空间，在 HTTP/2 中使用头部压缩将节省一部分流量。&lt;/li>
&lt;li>服务端推送 比如你请求一个 HTML 页面，有可能需要请求相应的 CSS/JS 文件，服务端推送则可让客户端减少请求。&lt;/li>
&lt;li>流量控制&lt;/li>
&lt;li>&amp;hellip;&lt;/li>
&lt;/ul>
&lt;p>HTTP/2 看起来很不错，但你如果不升级浏览器，则无法享受到这些新特新，对于 Windows 而言，WinHTTP/WinINet 均只有 Windows 10 才支持 HTTP/2，如果没有升级到 Windows 10，则依赖这两个系统库的软件无法支持 HTTP/2。而目前的浏览器均已支持 HTTP/2，主流网站很多都已经支持 HTTP/2。使用最新发布的 curl 运行 &lt;code>curl -V&lt;/code> 如果有 &lt;code>HTTP2&lt;/code> 字段，则可以用 &lt;code>curl&lt;/code> 去检测服务器是否支持 HTTP/2: &lt;code>curl -I --verbose https://bing.com&lt;/code>。&lt;/p>
&lt;p>2018年 TLS 1.3 &lt;a href="https://tools.ietf.org/html/rfc8446">RFC8446: The Transport Layer Security (TLS) Protocol Version 1.3&lt;/a> 发布，TLS 1.3 新增了 0-RTT 提高了 Handshake 性能，删除了一些不安全的加密机制，增强了安全性。要使用 TLS 1.3 你应该使用较新的浏览器，开发软件时应该选择 OpenSSL 1.1.1c 或者更新版本，TLS 1.3 实现列表可以参考：&lt;a href="https://github.com/tlswg/tls13-spec/wiki/Implementations">Implementations&lt;/a>。&lt;/p>
&lt;p>几乎每年 Unicode 组织都会发布新的 Unicode 版本，在新的 Unicode 版本中会增加一些新的字符包括 emoji，在今年日本徳仁皇太子即位，年号&lt;code>令和&lt;/code>，Unicode 发布了 &lt;code>unicode-12.1-reiwa&lt;/code> 在 BMP 平面增加了 &lt;code>令和&lt;/code> 的合体字 &lt;code>U+32FF&lt;/code>。Windows 发布了一些列更新，如果没有更新，日本都可能发生混乱。而新的 emoji 则给用户带来了更多的乐趣。在 Windows 10 中，新增了彩色字体，以前的 emoji 都是黑色的，新的更新让 emoji 回归了本色。&lt;/p>
&lt;p>2018 年 Git Wire Protocol 发布，此协议的优势的改进了 git clone 的流程，特别是引用发现，浅表克隆，增加了扩展机制，为以后的新增功能增加了更多的可能。笔者第一时间实现了 Gitee 对 Wire Protocol 的支持，如果开发者没有及时升级到 git 新版本，也就无法享受这些特性了。&lt;/p>
&lt;h2 id="windows-更新的讨论">Windows 更新的讨论&lt;/h2>
&lt;p>Windows 更新的被批评最多的是早期的强制更新（强制重启），不过在 Windows 10 1903, 这种情况已经没有发生了，在撰写本文此章节时，Windows Update 提醒我重启（没有弹窗，仅任务栏 Windows Update 图标发生了变化。注：笔者未设置暂停更新。），但并未干扰我工作。实际上目前的 Ubuntu 系统也会提醒用户更新系统，并且更新完有可能提醒用户重启计算机，1903 与其是相似的。虽然 Windows 更新已经得到了很大的改进，但话说回来，微软依然应该不断的提高软件质量，提高稳定性。特别要接纳用户的反馈意见。&lt;/p>
&lt;h2 id="总结">总结&lt;/h2>
&lt;p>&lt;strong>历史是不断发展的，软硬件是不断更新的&lt;/strong>，磁盘在使用几年之后便容易出现坏道，磁盘读写速度下降，这时硬件就需要更新了，而软件则需要经常更新，无论安全更新还是功能更新，基本上都是为了让用户更好的更安全的使用计算机。
另外，随着硬件的更新，软件更需要及时更新，大多数时候，硬件更新后，软件及时更新能够更好的发挥出新硬件的优势，比如当硬件增加 SSE AVX 这种指令时，软件更新适配了就可能带来大量的新能提升。
人有生老病死，软件有更新迭代。都是历史的齿轮滚滚向前。&lt;/p>
- https://forcemz.net/posts/2019/2019-06-25-talk-computer-update/ - Copyright (c) 2009-2024 J23</description></item></channel></rss>