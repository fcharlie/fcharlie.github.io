<?xml-stylesheet href="/rss.xsl" type="text/xsl"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Charlie's Rethinking</title><link>https://forcemz.net/</link><description>Recent content on Charlie's Rethinking</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><copyright>Copyright (c) 2009-2024 J23</copyright><lastBuildDate>Mon, 01 Apr 2024 20:00:00 +0800</lastBuildDate><atom:link href="https://forcemz.net/index.xml" rel="self" type="application/rss+xml"/><item><title>介绍 Bela</title><link>https://forcemz.net/posts/2019/2019-05-25-introduction-bela/</link><pubDate>Sat, 25 May 2019 10:00:00 +0800</pubDate><guid>https://forcemz.net/posts/2019/2019-05-25-introduction-bela/</guid><description>Charlie's Rethinking https://forcemz.net/posts/2019/2019-05-25-introduction-bela/ -&lt;h1 id="前言">前言&lt;/h1>
&lt;p>在前面，我曾经写过一篇文章 &lt;a href="https://forcemz.net/cxx/2019/04/29/StringFormattingTalk/">《字符串格式化漫谈》&lt;/a> 文章最后提到了 &lt;a href="https://github.com/fcharlie/bela">&lt;code>Bela&lt;/code>&lt;/a> 里面实现了一个类型安全的 &lt;code>bela::StrFormat&lt;/code>，实际上 &lt;code>bela&lt;/code> 还有很多有趣的功能，本文也就是说一说 Bela 有哪些有趣功能和故事。&lt;/p>
&lt;h1 id="一-bela-的缘由">一. Bela 的缘由&lt;/h1>
&lt;p>之前，我开发了几个开源软件，如 Windows 系统以指定权限启动进程的 &lt;a href="https://github.com/M2Team/Privexec">Privexec&lt;/a>，Clang Windows 操作系统上自动化构建依赖管理工具 &lt;a href="https://github.com/fstudio/clangbuilder">Clangbuilder&lt;/a>，还有 PE 分析工具 &lt;a href="https://github.com/fcharlie/PEAnalyzer">PEAnalyzer&lt;/a>，文件分析工具 &lt;a href="https://github.com/fcharlie/Planck">Planck&lt;/a> 等等。在编写这些工具时要重复编写一些代码，毕竟大家都知道 C++ STL 有时候并不能称心如意。在 &lt;a href="https://github.com/abseil/abseil-cpp">Google Abseil&lt;/a> 开源后，我借鉴了这个项目的一些代码重新造了一些 &lt;code>wchar_t&lt;/code> 版本的轮子，后来把这些代码单独抽离出来，进一步改进，也就成了现在的 &lt;code>Bela&lt;/code>。不直接用 &lt;code>Absl&lt;/code> 的原因很简单，它不支持 &lt;code>wchar_t&lt;/code>。格式化字符串不使用 &lt;code>fmtlib&lt;/code> 的原因也很简单，不喜欢异常，它的代码库也比较大。叫 &lt;code>bela ['bələ]&lt;/code> 的原因依然很简单，简短易读易拼写。&lt;/p>
&lt;p>Bela 的字符串函数基本基于 &lt;code>Abseil&lt;/code>，&lt;code>Unicode&lt;/code> 转换基于 LLVM 的 &lt;code>ConvertUTF.cpp&lt;/code>，最初 &lt;code>ConvertUTF&lt;/code> 的版权属于 &lt;strong>Unicode.org&lt;/strong> , &lt;code>charconv&lt;/code> 基于 &lt;code>Visual C++ STL&lt;/code>，&lt;code>EscapeArgv&lt;/code> 借鉴了 Golang 源码，&lt;code>endian.hpp&lt;/code>，&lt;code>tokenziecmdline.hpp&lt;/code> 借鉴了 &lt;code>LLVM Support Library&lt;/code> 等等。&lt;/p>
&lt;h1 id="二-bela-字符串功能库">二. Bela 字符串功能库&lt;/h1>
&lt;h2 id="belaerror_code">bela::error_code&lt;/h2>
&lt;p>&lt;code>bela::error_code&lt;/code> 位于 &lt;code>&amp;lt;bela/base.hpp&amp;gt;&lt;/code> 类似 &lt;code>std::error_code&lt;/code>，其主要目的是简化 Windows API 错误信息的格式化，当人们使用 &lt;code>make_system_error_code&lt;/code> 就可以将 Windows 错误信息保存到 &lt;code>bela::error_code&lt;/code> 对象，利用 C++ RAII 机制，完全可以不用担心内存释放，同样你还可以使用 &lt;code>bela::make_error_code&lt;/code> 构造自己的错误信息，&lt;code>bela::make_error_code&lt;/code> 依赖 &lt;code>bela::strings_internal::CatPieces&lt;/code>，因此，你可以像使用 &lt;code>bela::StringCat&lt;/code> 使用 &lt;code>bela::make_error_code&lt;/code>&lt;/p>
&lt;h2 id="stringcat">StringCat&lt;/h2>
&lt;p>&lt;code>StringCat&lt;/code> 学习了 &lt;code>absl::StrCat&lt;/code>，唯一的不同在于使用 &lt;code>wchar_t&lt;/code> 作为字符基本类型，在 Windows 系统中，&lt;code>StrCat&lt;/code> 实际上被 &lt;code>shlwapi&lt;/code> 作为宏定义使用了，为了避免在使用 Windows API 时造成困惑，我将其命名为 &lt;code>StringCat&lt;/code>。这种函数的好处是连接字符串时只需要一次内存分配，可以将基本类型转变为字符串类型，然后连接到一起，十分有用，并且，&lt;code>bela::StringCat&lt;/code> 比 &lt;code>absl::StrCat&lt;/code> 有趣的一点是支持 &lt;code>char32_t&lt;/code> Unicode 码点，因此，你可以使用 &lt;code>bela::StringCat&lt;/code> 连接 Unicode 码点来拼接 Emoji 或者其他字符，然后输出到 &lt;code>Windows Terminal&lt;/code> 或者显示到文本或者使用 Dwrite 绘制到图形界面上。&lt;/p>
&lt;p>&lt;code>StringCat&lt;/code> 定义在 &lt;code>&amp;lt;bela/strcat.hpp&amp;gt;&lt;/code> 文件中。&lt;/p>
&lt;h2 id="ascii">Ascii&lt;/h2>
&lt;p>bela 学习了 &lt;code>absl/strings/ascii.h&lt;/code> ，并将其移植到 &lt;code>wchar_t&lt;/code>。在移植的时候要考虑在 Windows 系统上 &lt;code>wchar_t&lt;/code> 的范围是 &lt;code>0~65535&lt;/code>，因此一些函数需要判断大于 &lt;code>0xFF&lt;/code> 时的策略。在 &lt;code>&amp;lt;bela/ascii.hpp&amp;gt;&lt;/code> 文件中 &lt;code>AsciiStrToUpper&lt;/code> ，&lt;code>AsciiStrToLower&lt;/code>， &lt;code>StripLeadingAsciiWhitespace&lt;/code>，&lt;code>StripTrailingAsciiWhitespace&lt;/code>， &lt;code>StripAsciiWhitespace&lt;/code> 这些函数十分有帮助。&lt;/p>
&lt;h2 id="其他字符串函数">其他字符串函数&lt;/h2>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>函数&lt;/th>
&lt;th>功能&lt;/th>
&lt;th>文件&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>StrSplit&lt;/td>
&lt;td>字符串切割，Delimiter 支持按字符，按字符串或者按长度，支持跳过空或者空白，比 Golang 的 strings.Split 要好用一些&lt;/td>
&lt;td>&lt;code>&amp;lt;bela/str_split.hpp&amp;gt;&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>StrReplaceAll&lt;/td>
&lt;td>替换字符串&lt;/td>
&lt;td>&lt;code>&amp;lt;bela/str_replace.hpp&amp;gt;&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>ConsumePrefix，ConsumeSuffix，StripPrefix，StripSuffix&lt;/td>
&lt;td>删除特定前缀或者后缀&lt;/td>
&lt;td>&lt;code>&amp;lt;bela/strip.hpp&amp;gt;&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>StartsWith，EndsWith，EqualsIgnoreCase，StartsWithIgnoreCase，EndsWithIgnoreCase&lt;/td>
&lt;td>特定的比较函数，前两者 C++20 被引入（std::string::starts_with，std::string::ends_with），Visual 2019 16.1 C++ /std:c++latest 开启&lt;/td>
&lt;td>&lt;code>&amp;lt;bela/match.hpp&amp;gt;&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Substitute，SubstituteAndAppend&lt;/td>
&lt;td>在前文 &lt;a href="https://forcemz.net/cxx/2019/04/29/StringFormattingTalk/">《字符串格式化漫谈》&lt;/a> 有提及，字符串填充。&lt;/td>
&lt;td>&lt;code>&amp;lt;bela/subsitute.hpp&amp;gt;&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>SimpleAtob，SimpleAtoi&lt;/td>
&lt;td>字符串转整型或者 Boolean，要转换浮点类型，请使用 &lt;code>&amp;lt;bela/charconv.hpp&amp;gt;&lt;/code>&lt;/td>
&lt;td>&lt;code>&amp;lt;bela/numbers.hpp&amp;gt;&lt;/code>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="编码转换">编码转换&lt;/h2>
&lt;p>在 Bela 中，我基于 LLVM 的 ConvertUTF 实现了 UTF-16/UTF-8 UTF-32 的一些函数，声明文件均在 &lt;code>&amp;lt;bela/codecvt.hpp&amp;gt;&lt;/code>&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>函数&lt;/th>
&lt;th>功能&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>char32tochar16&lt;/td>
&lt;td>Unicode 码点转 UTF-16，缓冲区长度应当至少为 2&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>char32tochar8&lt;/td>
&lt;td>Unicode 码点转 UTF-8，缓冲区长度至少为 4&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>c16tomb&lt;/td>
&lt;td>UTF16 编码转 UTF-8，低级 API&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>mbrtowc&lt;/td>
&lt;td>UTF-8 编码转 UTF-16 (wchar_t)，低级 API&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>mbrtoc16&lt;/td>
&lt;td>UTF-8 编码转 UTF-16 (char16_t)，低级 API&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>ToNarrow&lt;/td>
&lt;td>UTF-16 转 UTF-8&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>ToWide&lt;/td>
&lt;td>UTF-8 转 UTF-16&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>涉及到编码转换时，应当使用高级 API &lt;code>bela::ToNarrow&lt;/code> 和 &lt;code>bela::ToWide&lt;/code>&lt;/p>
&lt;h2 id="strformat">StrFormat&lt;/h2>
&lt;p>Bela 目前提供了一个类型安全简单的 &lt;code>StrFormat&lt;/code>, &lt;code>StrFormat&lt;/code> 基于 C++ 变参模板，使用 &lt;code>union&lt;/code> 记录参数类型，在解析时按照输入的占位符将其他类型转换为字符串连接在一起，从而实现格式化功能。&lt;code>bela::StrFormat&lt;/code> 借鉴了 &lt;code>Chromium SafeNPrintf&lt;/code> 函数，但支持的类型要比 &lt;code>SafeNPrintf&lt;/code> 多很多。&lt;/p>
&lt;p>支持的类型和响应的占位符如下表所示：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>类型&lt;/th>
&lt;th>占位符&lt;/th>
&lt;th>备注&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>char&lt;/td>
&lt;td>&lt;code>%c&lt;/code>&lt;/td>
&lt;td>ASCII 字符，会被提升为 wchar_t&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>unsigned char&lt;/td>
&lt;td>&lt;code>%c&lt;/code>&lt;/td>
&lt;td>ASCII 字符，会被提升为 wchar_t&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>wchar_t&lt;/td>
&lt;td>&lt;code>%c&lt;/code>&lt;/td>
&lt;td>UTF-16 字符&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>char16_t&lt;/td>
&lt;td>&lt;code>%c&lt;/code>&lt;/td>
&lt;td>UTF-16 字符&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>char32_t&lt;/td>
&lt;td>&lt;code>%c&lt;/code>&lt;/td>
&lt;td>UTF-32 Unicode 字符，会被转为 UTF-16 字符，这意味着可以使用 Unicode 码点以 %c 的方式输出 emoji。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>short&lt;/td>
&lt;td>&lt;code>%d&lt;/code>&lt;/td>
&lt;td>16位整型&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>unsigned short&lt;/td>
&lt;td>&lt;code>%d&lt;/code>&lt;/td>
&lt;td>16位无符号整型&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>int&lt;/td>
&lt;td>&lt;code>%d&lt;/code>&lt;/td>
&lt;td>32位整型&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>unsigned int&lt;/td>
&lt;td>&lt;code>%d&lt;/code>&lt;/td>
&lt;td>32位无符号整型&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>long&lt;/td>
&lt;td>&lt;code>%d&lt;/code>&lt;/td>
&lt;td>32位整型&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>unsigned long&lt;/td>
&lt;td>&lt;code>%d&lt;/code>&lt;/td>
&lt;td>32位无符号整型&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>long long&lt;/td>
&lt;td>&lt;code>%d&lt;/code>&lt;/td>
&lt;td>64位整型&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>unsigned long long&lt;/td>
&lt;td>&lt;code>%d&lt;/code>&lt;/td>
&lt;td>64位无符号整型&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>float&lt;/td>
&lt;td>&lt;code>%f&lt;/code>&lt;/td>
&lt;td>会被提升为 &lt;code>double&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>double&lt;/td>
&lt;td>&lt;code>%f&lt;/code>&lt;/td>
&lt;td>64位浮点&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>const char *&lt;/td>
&lt;td>&lt;code>%s&lt;/code>&lt;/td>
&lt;td>UTF-8 字符串，会被转换成 UTF-16 字符串&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>char *&lt;/td>
&lt;td>&lt;code>%s&lt;/code>&lt;/td>
&lt;td>UTF-8 字符串，会被转换成 UTF-16 字符串&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>std::string&lt;/td>
&lt;td>&lt;code>%s&lt;/code>&lt;/td>
&lt;td>UTF-8 字符串，会被转换成 UTF-16 字符串&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>std::string_view&lt;/td>
&lt;td>&lt;code>%s&lt;/code>&lt;/td>
&lt;td>UTF-8 字符串，会被转换成 UTF-16 字符串&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>const wchar_t *&lt;/td>
&lt;td>&lt;code>%s&lt;/code>&lt;/td>
&lt;td>UTF-16 字符串&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>wchar_t *&lt;/td>
&lt;td>&lt;code>%s&lt;/code>&lt;/td>
&lt;td>UTF-16 字符串&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>std::wstring&lt;/td>
&lt;td>&lt;code>%s&lt;/code>&lt;/td>
&lt;td>UTF-16 字符串&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>std::wstring_view&lt;/td>
&lt;td>&lt;code>%s&lt;/code>&lt;/td>
&lt;td>UTF-16 字符串&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>const char16_t *&lt;/td>
&lt;td>&lt;code>%s&lt;/code>&lt;/td>
&lt;td>UTF-16 字符串&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>char16_t *&lt;/td>
&lt;td>&lt;code>%s&lt;/code>&lt;/td>
&lt;td>UTF-16 字符串&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>std::u16string&lt;/td>
&lt;td>&lt;code>%s&lt;/code>&lt;/td>
&lt;td>UTF-16 字符串&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>std::u16string_view&lt;/td>
&lt;td>&lt;code>%s&lt;/code>&lt;/td>
&lt;td>UTF-16 字符串&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>void *&lt;/td>
&lt;td>&lt;code>%p&lt;/code>&lt;/td>
&lt;td>指针类型，会格式化成 &lt;code>0xffff00000&lt;/code> 这样的字符串&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>如果不格式化 UTF-8 字符串，且拥有固定大小内存缓冲区，可以使用 &lt;code>StrFormat&lt;/code> 的如下重载，此重载可以轻松的移植到 POSIX 系统并支持异步信号安全:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#1d2432;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c++" data-lang="c++">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff636f">template&lt;/span> &lt;span style="color:#ff636f">&amp;lt;&lt;/span>&lt;span style="color:#ff636f">typename&lt;/span>... &lt;span style="color:#58a1dd">Args&lt;/span>&lt;span style="color:#ff636f">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#58a1dd">ssize_t&lt;/span> &lt;span style="color:#58a1dd">StrFormat&lt;/span>(&lt;span style="color:#ff636f">wchar_t&lt;/span> &lt;span style="color:#ff636f">*&lt;/span>&lt;span style="color:#58a1dd">buf&lt;/span>, &lt;span style="color:#58a1dd">size_t&lt;/span> &lt;span style="color:#58a1dd">N&lt;/span>, &lt;span style="color:#ff636f">const&lt;/span> &lt;span style="color:#ff636f">wchar_t&lt;/span> &lt;span style="color:#ff636f">*&lt;/span>&lt;span style="color:#58a1dd">fmt&lt;/span>, &lt;span style="color:#58a1dd">Args&lt;/span>... &lt;span style="color:#58a1dd">args&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>我们基于 &lt;code>StrFormat&lt;/code> 实现了类型安全的 &lt;code>bela::FPrintF&lt;/code>，这个函数能够根据输出设备的类型自动转换编码，如果是 &lt;code>Conhost&lt;/code> 则会输出 &lt;code>UTF-16&lt;/code>，否则则输出 &lt;code>UTF-8&lt;/code>。如果 &lt;code>Conhost&lt;/code> 不支持 &lt;code>VT&lt;/code> 模式，bela 则会将输出字符串中的 ASCII 颜色转义去除，但 bela 并没有做 Windows 旧版本的适配，我们应该始终使用 Windows 最新发行版。&lt;/p>
&lt;p>下面是一个示例：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#1d2432;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">/// C++17
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span>&lt;span style="color:#828b96;font-style:italic">#include&lt;/span> &lt;span style="color:#828b96;font-style:italic">&amp;lt;bela/strcat.hpp&amp;gt;&lt;/span>&lt;span style="color:#828b96;font-style:italic">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">#include&lt;/span> &lt;span style="color:#828b96;font-style:italic">&amp;lt;bela/stdwriter.hpp&amp;gt;&lt;/span>&lt;span style="color:#828b96;font-style:italic">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff636f">constexpr&lt;/span> &lt;span style="color:#ff636f">auto&lt;/span> &lt;span style="color:#58a1dd">cv&lt;/span>&lt;span style="color:#ff636f">=&lt;/span>&lt;span style="color:#58a1dd">__cplusplus&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff636f">int&lt;/span> &lt;span style="color:#58a1dd">wmain&lt;/span>(&lt;span style="color:#ff636f">int&lt;/span> &lt;span style="color:#58a1dd">argc&lt;/span>, &lt;span style="color:#ff636f">wchar_t&lt;/span> &lt;span style="color:#ff636f">**&lt;/span>&lt;span style="color:#58a1dd">argv&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">auto&lt;/span> &lt;span style="color:#58a1dd">ux&lt;/span> &lt;span style="color:#ff636f">=&lt;/span> &lt;span style="color:#a6be9d">&amp;#34;&lt;/span>&lt;span style="color:#a6be9d">\xf0\x9f\x98\x81&lt;/span>&lt;span style="color:#a6be9d"> UTF-8 text &lt;/span>&lt;span style="color:#a6be9d">\xE3\x8D\xA4&lt;/span>&lt;span style="color:#a6be9d">&amp;#34;&lt;/span>; &lt;span style="color:#828b96;font-style:italic">// force encode UTF-8
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span> &lt;span style="color:#ff636f">wchar_t&lt;/span> &lt;span style="color:#58a1dd">wx&lt;/span>[] &lt;span style="color:#ff636f">=&lt;/span> &lt;span style="color:#a6be9d">L&lt;/span>&lt;span style="color:#a6be9d">&amp;#34;Engine &lt;/span>&lt;span style="color:#a6be9d">\xD83D\xDEE0&lt;/span>&lt;span style="color:#a6be9d"> 中国&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">bela&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">FPrintF&lt;/span>(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">stderr&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6be9d">L&lt;/span>&lt;span style="color:#a6be9d">&amp;#34;Argc: %d Arg0: &lt;/span>&lt;span style="color:#a6be9d">\x1b&lt;/span>&lt;span style="color:#a6be9d">[32m%s&lt;/span>&lt;span style="color:#a6be9d">\x1b&lt;/span>&lt;span style="color:#a6be9d">[0m W: %s UTF-8: %s C++ version: %d&lt;/span>&lt;span style="color:#a6be9d">\n&lt;/span>&lt;span style="color:#a6be9d">&amp;#34;&lt;/span>, &lt;span style="color:#58a1dd">argc&lt;/span>, &lt;span style="color:#58a1dd">argv&lt;/span>[&lt;span style="color:#a6be9d">0&lt;/span>], &lt;span style="color:#58a1dd">wx&lt;/span>, &lt;span style="color:#58a1dd">ux&lt;/span>, &lt;span style="color:#58a1dd">cv&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">char32_t&lt;/span> &lt;span style="color:#58a1dd">em&lt;/span> &lt;span style="color:#ff636f">=&lt;/span> &lt;span style="color:#a6be9d">0x1F603&lt;/span>;&lt;span style="color:#828b96;font-style:italic">//😃
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span> &lt;span style="color:#ff636f">auto&lt;/span> &lt;span style="color:#58a1dd">s&lt;/span> &lt;span style="color:#ff636f">=&lt;/span> &lt;span style="color:#58a1dd">bela&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">StringCat&lt;/span>(&lt;span style="color:#a6be9d">L&lt;/span>&lt;span style="color:#a6be9d">&amp;#34;Look emoji --&amp;gt;&amp;#34;&lt;/span>, &lt;span style="color:#58a1dd">em&lt;/span>, &lt;span style="color:#a6be9d">L&lt;/span>&lt;span style="color:#a6be9d">&amp;#34; U: &amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">static_cast&lt;/span>&lt;span style="color:#ff636f">&amp;lt;&lt;/span>&lt;span style="color:#ff636f">uint32_t&lt;/span>&lt;span style="color:#ff636f">&amp;gt;&lt;/span>(&lt;span style="color:#58a1dd">em&lt;/span>));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">bela&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">FPrintF&lt;/span>(&lt;span style="color:#58a1dd">stderr&lt;/span>, &lt;span style="color:#a6be9d">L&lt;/span>&lt;span style="color:#a6be9d">&amp;#34;emoji test %c %s&lt;/span>&lt;span style="color:#a6be9d">\n&lt;/span>&lt;span style="color:#a6be9d">&amp;#34;&lt;/span>, &lt;span style="color:#58a1dd">em&lt;/span>, &lt;span style="color:#58a1dd">s&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">bela&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">FPrintF&lt;/span>(&lt;span style="color:#58a1dd">stderr&lt;/span>, &lt;span style="color:#a6be9d">L&lt;/span>&lt;span style="color:#a6be9d">&amp;#34;hStderr Mode: %s hStdin Mode: %s&lt;/span>&lt;span style="color:#a6be9d">\n&lt;/span>&lt;span style="color:#a6be9d">&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">bela&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">FileTypeName&lt;/span>(&lt;span style="color:#58a1dd">stderr&lt;/span>), &lt;span style="color:#58a1dd">bela&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">FileTypeName&lt;/span>(&lt;span style="color:#58a1dd">stdin&lt;/span>));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">return&lt;/span> &lt;span style="color:#a6be9d">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>请注意，如果上述 emoji 要正常显示，应当使用 &lt;code>Windows Terminal&lt;/code> 或者是 &lt;code>Mintty&lt;/code>。&lt;/p>
&lt;h1 id="三-bela-windows-系统功能库">三. Bela Windows 系统功能库&lt;/h1>
&lt;h2 id="belafinaly">bela::finaly&lt;/h2>
&lt;p>在使用 Golang 时，&lt;code>defer&lt;/code> 可以在函数退出时执行一些代码，在 C++ 中 &lt;a href="https://github.com/microsoft/gsl">Microsoft/GSL&lt;/a> 里面有一个 &lt;code>finaly&lt;/code> 实现，异曲同工。在这里 我们可以使用 &lt;code>finaly&lt;/code> 避免资源泄露。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#1d2432;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">#include&lt;/span> &lt;span style="color:#828b96;font-style:italic">&amp;lt;bela/finaly.hpp&amp;gt;&lt;/span>&lt;span style="color:#828b96;font-style:italic">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">#include&lt;/span> &lt;span style="color:#828b96;font-style:italic">&amp;lt;cstdio&amp;gt;&lt;/span>&lt;span style="color:#828b96;font-style:italic">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff636f">int&lt;/span> &lt;span style="color:#58a1dd">wmain&lt;/span>(){
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">auto&lt;/span> &lt;span style="color:#58a1dd">file&lt;/span>&lt;span style="color:#ff636f">=&lt;/span>&lt;span style="color:#58a1dd">fopen&lt;/span>(&lt;span style="color:#a6be9d">&amp;#34;somelog&amp;#34;&lt;/span>,&lt;span style="color:#a6be9d">&amp;#34;w+&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">auto&lt;/span> &lt;span style="color:#58a1dd">closer&lt;/span>&lt;span style="color:#ff636f">=&lt;/span>&lt;span style="color:#58a1dd">bela&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">finaly&lt;/span>([&lt;span style="color:#ff636f">&amp;amp;&lt;/span>]{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">if&lt;/span>(&lt;span style="color:#58a1dd">file&lt;/span>&lt;span style="color:#ff636f">!=&lt;/span>&lt;span style="color:#ff636f">nullptr&lt;/span>){
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">fclose&lt;/span>(&lt;span style="color:#58a1dd">file&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> });
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#828b96;font-style:italic">/// do some codes
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span> &lt;span style="color:#ff636f">return&lt;/span> &lt;span style="color:#a6be9d">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="pathcat-路径规范化连接函数">PathCat 路径规范化连接函数&lt;/h2>
&lt;p>&lt;code>PathCat&lt;/code> 函数借鉴了 &lt;code>StringCat&lt;/code> 函数，将路径组件连接起来。例子如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#1d2432;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c++" data-lang="c++">&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">auto&lt;/span> &lt;span style="color:#58a1dd">p&lt;/span> &lt;span style="color:#ff636f">=&lt;/span> &lt;span style="color:#58a1dd">bela&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">PathCat&lt;/span>(&lt;span style="color:#a6be9d">L&lt;/span>&lt;span style="color:#a6be9d">&amp;#34;&lt;/span>&lt;span style="color:#a6be9d">\\\\&lt;/span>&lt;span style="color:#a6be9d">?&lt;/span>&lt;span style="color:#a6be9d">\\&lt;/span>&lt;span style="color:#a6be9d">C:&lt;/span>&lt;span style="color:#a6be9d">\\&lt;/span>&lt;span style="color:#a6be9d">Windows/System32&amp;#34;&lt;/span>, &lt;span style="color:#a6be9d">L&lt;/span>&lt;span style="color:#a6be9d">&amp;#34;drivers/etc&amp;#34;&lt;/span>, &lt;span style="color:#a6be9d">L&lt;/span>&lt;span style="color:#a6be9d">&amp;#34;hosts&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">bela&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">FPrintF&lt;/span>(&lt;span style="color:#58a1dd">stderr&lt;/span>, &lt;span style="color:#a6be9d">L&lt;/span>&lt;span style="color:#a6be9d">&amp;#34;PathCat: %s&lt;/span>&lt;span style="color:#a6be9d">\n&lt;/span>&lt;span style="color:#a6be9d">&amp;#34;&lt;/span>, &lt;span style="color:#58a1dd">p&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">auto&lt;/span> &lt;span style="color:#58a1dd">p2&lt;/span> &lt;span style="color:#ff636f">=&lt;/span> &lt;span style="color:#58a1dd">bela&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">PathCat&lt;/span>(&lt;span style="color:#a6be9d">L&lt;/span>&lt;span style="color:#a6be9d">&amp;#34;C:&lt;/span>&lt;span style="color:#a6be9d">\\&lt;/span>&lt;span style="color:#a6be9d">Windows/System32&amp;#34;&lt;/span>, &lt;span style="color:#a6be9d">L&lt;/span>&lt;span style="color:#a6be9d">&amp;#34;drivers/../..&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">bela&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">FPrintF&lt;/span>(&lt;span style="color:#58a1dd">stderr&lt;/span>, &lt;span style="color:#a6be9d">L&lt;/span>&lt;span style="color:#a6be9d">&amp;#34;PathCat: %s&lt;/span>&lt;span style="color:#a6be9d">\n&lt;/span>&lt;span style="color:#a6be9d">&amp;#34;&lt;/span>, &lt;span style="color:#58a1dd">p2&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">auto&lt;/span> &lt;span style="color:#58a1dd">p3&lt;/span> &lt;span style="color:#ff636f">=&lt;/span> &lt;span style="color:#58a1dd">bela&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">PathCat&lt;/span>(&lt;span style="color:#a6be9d">L&lt;/span>&lt;span style="color:#a6be9d">&amp;#34;Windows/System32&amp;#34;&lt;/span>, &lt;span style="color:#a6be9d">L&lt;/span>&lt;span style="color:#a6be9d">&amp;#34;drivers/./././.&lt;/span>&lt;span style="color:#a6be9d">\\&lt;/span>&lt;span style="color:#a6be9d">.&lt;/span>&lt;span style="color:#a6be9d">\\&lt;/span>&lt;span style="color:#a6be9d">etc&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">bela&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">FPrintF&lt;/span>(&lt;span style="color:#58a1dd">stderr&lt;/span>, &lt;span style="color:#a6be9d">L&lt;/span>&lt;span style="color:#a6be9d">&amp;#34;PathCat: %s&lt;/span>&lt;span style="color:#a6be9d">\n&lt;/span>&lt;span style="color:#a6be9d">&amp;#34;&lt;/span>, &lt;span style="color:#58a1dd">p3&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">auto&lt;/span> &lt;span style="color:#58a1dd">p4&lt;/span> &lt;span style="color:#ff636f">=&lt;/span> &lt;span style="color:#58a1dd">bela&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">PathCat&lt;/span>(&lt;span style="color:#a6be9d">L&lt;/span>&lt;span style="color:#a6be9d">&amp;#34;.&amp;#34;&lt;/span>, &lt;span style="color:#a6be9d">L&lt;/span>&lt;span style="color:#a6be9d">&amp;#34;test/pathcat/./pathcat_test.exe&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">bela&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">FPrintF&lt;/span>(&lt;span style="color:#58a1dd">stderr&lt;/span>, &lt;span style="color:#a6be9d">L&lt;/span>&lt;span style="color:#a6be9d">&amp;#34;PathCat: %s&lt;/span>&lt;span style="color:#a6be9d">\n&lt;/span>&lt;span style="color:#a6be9d">&amp;#34;&lt;/span>, &lt;span style="color:#58a1dd">p4&lt;/span>);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>PathCat&lt;/code> 的思路是先将 &lt;code>UNC&lt;/code> 前缀和盘符记录并去除，然后将所有的参数使用 &lt;code>PathSpilt&lt;/code> 函数以 Windows 路径分隔符和 Linux 路径分隔符拆分成 &lt;code>std::wstring_view&lt;/code> 数组，当当前路径元素为 &lt;code>..&lt;/code> 时，弹出字符串数组一个元素，如果为 &lt;code>.&lt;/code> 则保持不变，否则将路径元素压入数组。拆分完毕后，遍历数组计算所需缓冲区大小，调整 &lt;code>std::wstring&lt;/code> 容量，然后进行路径重组。&lt;/p>
&lt;p>当第一个参数值为 &lt;code>.&lt;/code> 时，&lt;code>PathCat&lt;/code> 将解析第一个路径为当前目录，然后参与解析。如果 &lt;code>PathCat&lt;/code> 第一个参数是相对路径，&lt;code>PathCat&lt;/code> 并不会主动将路径转变为绝对路径，因此，你应当主动的将第一个参数设置为 &lt;code>.&lt;/code> 以期解析为绝对路径。&lt;/p>
&lt;p>&lt;code>PathCat&lt;/code> 并不会判断路径是否存在，因此需要注意。&lt;/p>
&lt;p>路径解析错误是很多软件的漏洞根源，合理的规范化路径非常有必要，而 &lt;code>PathCat&lt;/code> 在规范化路径时，使用 C++17/C++20(Span) 的特性，减少内存分配，简化了规范化流程。&lt;/p>
&lt;p>&lt;code>PathCat&lt;/code> 使用了 &lt;code>bela::Span&lt;/code> （&lt;code>&amp;lt;bela/span.hpp&amp;gt;&lt;/code>），&lt;code>Span&lt;/code> 被 C++20 采纳，&lt;code>bela::Span&lt;/code> 基于 &lt;code>absl::Span&lt;/code>。&lt;/p>
&lt;h2 id="pathexists-函数">PathExists 函数&lt;/h2>
&lt;p>&lt;code>PathExists&lt;/code> 函数判断路径是否存在，当使用默认参数时，只会判断路径是否存在，如果需要判断路径的其他属性，可以使用如下方式：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#1d2432;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c++" data-lang="c++">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff636f">if&lt;/span>(&lt;span style="color:#ff636f">!&lt;/span>&lt;span style="color:#58a1dd">bela&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">PathExists&lt;/span>(&lt;span style="color:#a6be9d">L&lt;/span>&lt;span style="color:#a6be9d">&amp;#34;C:&lt;/span>&lt;span style="color:#a6be9d">\\&lt;/span>&lt;span style="color:#a6be9d">Windows&amp;#34;&lt;/span>,&lt;span style="color:#58a1dd">FileAttribute&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">Dir&lt;/span>)){
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">bela&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">FPrintF&lt;/span>(&lt;span style="color:#58a1dd">stderr&lt;/span>,&lt;span style="color:#a6be9d">L&lt;/span>&lt;span style="color:#a6be9d">&amp;#34;C:&lt;/span>&lt;span style="color:#a6be9d">\\&lt;/span>&lt;span style="color:#a6be9d">Windows not dir or not exists&lt;/span>&lt;span style="color:#a6be9d">\n&lt;/span>&lt;span style="color:#a6be9d">&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="lookuprealpath-函数">LookupRealPath 函数&lt;/h2>
&lt;p>&lt;code>LookupRealPath&lt;/code> 用于解析 Windows 符号链接和卷挂载点。&lt;/p>
&lt;h2 id="lookupappexeclinktarget-函数">LookupAppExecLinkTarget 函数&lt;/h2>
&lt;p>&lt;code>LookupAppExecLinkTarget&lt;/code> 用于解析 Windows AppExecLink 目标，在 Windows 10 系统中，&lt;code>AppExecLink&lt;/code> 是一种 Store App 的命令行入口，通常位于 &lt;code>C:\Users\$Username\AppData\Local\Microsoft\WindowsApps&lt;/code>，这种文件本质上是一种重解析点，因此解析时需要按照重解析点的方法去解析。&lt;/p>
&lt;h2 id="executableexistsinpath-查找可执行文件">ExecutableExistsInPath 查找可执行文件&lt;/h2>
&lt;p>在 Windows cmd 中，有一个命令叫做 &lt;code>where&lt;/code>，用于查找命令或者可执行文件的路径，而 &lt;code>ExecutableExistsInPath&lt;/code> 则提供了相同的功能，我们可以按照输入的命令或者路径查找对应的可执行文件，这里有一个 &lt;code>where&lt;/code> 实现：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#1d2432;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">////
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span>&lt;span style="color:#828b96;font-style:italic">#include&lt;/span> &lt;span style="color:#828b96;font-style:italic">&amp;lt;bela/strcat.hpp&amp;gt;&lt;/span>&lt;span style="color:#828b96;font-style:italic">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">#include&lt;/span> &lt;span style="color:#828b96;font-style:italic">&amp;lt;bela/stdwriter.hpp&amp;gt;&lt;/span>&lt;span style="color:#828b96;font-style:italic">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">#include&lt;/span> &lt;span style="color:#828b96;font-style:italic">&amp;lt;bela/path.hpp&amp;gt;&lt;/span>&lt;span style="color:#828b96;font-style:italic">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff636f">int&lt;/span> &lt;span style="color:#58a1dd">wmain&lt;/span>(&lt;span style="color:#ff636f">int&lt;/span> &lt;span style="color:#58a1dd">argc&lt;/span>, &lt;span style="color:#ff636f">wchar_t&lt;/span> &lt;span style="color:#ff636f">**&lt;/span>&lt;span style="color:#58a1dd">argv&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">if&lt;/span> (&lt;span style="color:#58a1dd">argc&lt;/span> &lt;span style="color:#ff636f">&amp;lt;&lt;/span> &lt;span style="color:#a6be9d">2&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">bela&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">FPrintF&lt;/span>(&lt;span style="color:#58a1dd">stderr&lt;/span>, &lt;span style="color:#a6be9d">L&lt;/span>&lt;span style="color:#a6be9d">&amp;#34;usage: %s command&lt;/span>&lt;span style="color:#a6be9d">\n&lt;/span>&lt;span style="color:#a6be9d">&amp;#34;&lt;/span>, &lt;span style="color:#58a1dd">argv&lt;/span>[&lt;span style="color:#a6be9d">0&lt;/span>]);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">return&lt;/span> &lt;span style="color:#a6be9d">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">std&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">wstring&lt;/span> &lt;span style="color:#58a1dd">exe&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">if&lt;/span> (&lt;span style="color:#ff636f">!&lt;/span>&lt;span style="color:#58a1dd">bela&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">ExecutableExistsInPath&lt;/span>(&lt;span style="color:#58a1dd">argv&lt;/span>[&lt;span style="color:#a6be9d">1&lt;/span>], &lt;span style="color:#58a1dd">exe&lt;/span>)) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">bela&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">FPrintF&lt;/span>(&lt;span style="color:#58a1dd">stderr&lt;/span>, &lt;span style="color:#a6be9d">L&lt;/span>&lt;span style="color:#a6be9d">&amp;#34;command not found: %s&lt;/span>&lt;span style="color:#a6be9d">\n&lt;/span>&lt;span style="color:#a6be9d">&amp;#34;&lt;/span>, &lt;span style="color:#58a1dd">argv&lt;/span>[&lt;span style="color:#a6be9d">1&lt;/span>]);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">return&lt;/span> &lt;span style="color:#a6be9d">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">bela&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">FPrintF&lt;/span>(&lt;span style="color:#58a1dd">stdout&lt;/span>, &lt;span style="color:#a6be9d">L&lt;/span>&lt;span style="color:#a6be9d">&amp;#34;%s&lt;/span>&lt;span style="color:#a6be9d">\n&lt;/span>&lt;span style="color:#a6be9d">&amp;#34;&lt;/span>, &lt;span style="color:#58a1dd">exe&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">return&lt;/span> &lt;span style="color:#a6be9d">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="命令行合成拆分和解析">命令行合成，拆分和解析&lt;/h2>
&lt;p>在 bela 中，我们提供了命令行合成，拆分和解析类，具体如下：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>类名&lt;/th>
&lt;th>功能&lt;/th>
&lt;th>文件&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>ParseArgv&lt;/td>
&lt;td>解析命令行参数，类似 GNU &lt;code>getopt_long&lt;/code>，支持 &lt;code>wchar_t&lt;/code>，不使用全局变量，错误信息详细&lt;/td>
&lt;td>&lt;code>&amp;lt;bela/parseargv.hpp&amp;gt;&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Tokenizer&lt;/td>
&lt;td>将命令行字符串 Windows commandline 形式转变为 &lt;code>wchar_t **Argv&lt;/code> 形式&lt;/td>
&lt;td>&lt;code>&amp;lt;bela/tokenizecmdline.hpp&amp;gt;&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>EscapeArgv&lt;/td>
&lt;td>将 &lt;code>Argv&lt;/code> 形式命令行参数转为 &lt;code>commdline&lt;/code> 形式，主要用于 &lt;code>CreateProcess&lt;/code>&lt;/td>
&lt;td>&lt;code>&amp;lt;bela/escapeargv.hpp&amp;gt;&lt;/code>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="mapview">MapView&lt;/h2>
&lt;p>在 bela 中，我还提供 &lt;code>MapView&lt;/code>，这是一个只读的文件内存映射，通常用于文件解析。文件 &lt;code>&amp;lt;bela/mapview.hpp&amp;gt;&lt;/code> 还有与 &lt;code>std::string_view&lt;/code> 类似的 &lt;code>MemView &lt;/code> 类。&lt;/p>
&lt;h2 id="pesimpledetailsaze-获得-pe-的简单信息">PESimpleDetailsAze 获得 PE 的简单信息&lt;/h2>
&lt;p>在 Bela 中，我添加了一个 &lt;code>PESimpleDetailsAze&lt;/code> 用于获得 PE 可执行文件的一些信息，其结构体如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#1d2432;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff636f">struct&lt;/span> &lt;span style="color:#58a1dd">PESimpleDetails&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">std&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">wstring&lt;/span> &lt;span style="color:#58a1dd">clrmsg&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">std&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">vector&lt;/span>&lt;span style="color:#ff636f">&amp;lt;&lt;/span>&lt;span style="color:#58a1dd">std&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">wstring&lt;/span>&lt;span style="color:#ff636f">&amp;gt;&lt;/span> &lt;span style="color:#58a1dd">depends&lt;/span>; &lt;span style="color:#828b96;font-style:italic">// depends dll
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span> &lt;span style="color:#58a1dd">std&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">vector&lt;/span>&lt;span style="color:#ff636f">&amp;lt;&lt;/span>&lt;span style="color:#58a1dd">std&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">wstring&lt;/span>&lt;span style="color:#ff636f">&amp;gt;&lt;/span> &lt;span style="color:#58a1dd">delays&lt;/span>; &lt;span style="color:#828b96;font-style:italic">// delay load library
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span> &lt;span style="color:#58a1dd">PEVersionPair&lt;/span> &lt;span style="color:#58a1dd">osver&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">PEVersionPair&lt;/span> &lt;span style="color:#58a1dd">linkver&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">PEVersionPair&lt;/span> &lt;span style="color:#58a1dd">imagever&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">Machine&lt;/span> &lt;span style="color:#58a1dd">machine&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">Subsytem&lt;/span> &lt;span style="color:#58a1dd">subsystem&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">uint16_t&lt;/span> &lt;span style="color:#58a1dd">characteristics&lt;/span>{&lt;span style="color:#a6be9d">0&lt;/span>};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">uint16_t&lt;/span> &lt;span style="color:#58a1dd">dllcharacteristics&lt;/span>{&lt;span style="color:#a6be9d">0&lt;/span>};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">bool&lt;/span> &lt;span style="color:#58a1dd">IsConsole&lt;/span>() &lt;span style="color:#ff636f">const&lt;/span> { &lt;span style="color:#ff636f">return&lt;/span> &lt;span style="color:#58a1dd">subsystem&lt;/span> &lt;span style="color:#ff636f">==&lt;/span> &lt;span style="color:#58a1dd">Subsytem&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">CUI&lt;/span>; }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">bool&lt;/span> &lt;span style="color:#58a1dd">IsDLL&lt;/span>() &lt;span style="color:#ff636f">const&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">constexpr&lt;/span> &lt;span style="color:#ff636f">uint16_t&lt;/span> &lt;span style="color:#58a1dd">imagefiledll&lt;/span> &lt;span style="color:#ff636f">=&lt;/span> &lt;span style="color:#a6be9d">0x2000&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">return&lt;/span> (&lt;span style="color:#58a1dd">characteristics&lt;/span> &lt;span style="color:#ff636f">&amp;amp;&lt;/span> &lt;span style="color:#58a1dd">imagefiledll&lt;/span>) &lt;span style="color:#ff636f">!=&lt;/span> &lt;span style="color:#a6be9d">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>};
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>函数的声明如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#1d2432;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#58a1dd">std&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">optional&lt;/span>&lt;span style="color:#ff636f">&amp;lt;&lt;/span>&lt;span style="color:#58a1dd">PESimpleDetails&lt;/span>&lt;span style="color:#ff636f">&amp;gt;&lt;/span> &lt;span style="color:#58a1dd">PESimpleDetailsAze&lt;/span>(&lt;span style="color:#58a1dd">std&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">wstring_view&lt;/span> &lt;span style="color:#58a1dd">file&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">bela&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">error_code&lt;/span> &lt;span style="color:#ff636f">&amp;amp;&lt;/span>&lt;span style="color:#58a1dd">ec&lt;/span>);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>通过此函数，你可以获得 PE 可执行文件的目标机器类型，子系统，连接器版本，系统版本，Image 版本，PE 的特征，PE 依赖的 dll 和延时加载的 dll。如果是 CLR PE 文件，则clrmsg 不为空描述的是 CLR 的信息。&lt;code>PESimpleDetailsAze&lt;/code> 并不依赖 &lt;code>DbgHelp.dll (ImageRvaToVa)&lt;/code>。&lt;/p>
&lt;h1 id="最后">最后&lt;/h1>
&lt;p>Bela 应该是不断发展的，如果我有新的 Idea 了，就会及时的移植进去的。&lt;/p>
- https://forcemz.net/posts/2019/2019-05-25-introduction-bela/ - Copyright (c) 2009-2024 J23</description></item><item><title>字符串格式化漫谈</title><link>https://forcemz.net/posts/2019/2019-04-29-string-formatting-talk/</link><pubDate>Mon, 29 Apr 2019 10:00:00 +0800</pubDate><guid>https://forcemz.net/posts/2019/2019-04-29-string-formatting-talk/</guid><description>Charlie's Rethinking https://forcemz.net/posts/2019/2019-04-29-string-formatting-talk/ -&lt;h1 id="前言">前言&lt;/h1>
&lt;p>春风化雨，万物复苏，编程始于 &lt;code>Hello world&lt;/code>，C 语言的 Hello world 可如下，同样 C++ 亦可如下:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#1d2432;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c" data-lang="c">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">#include&lt;/span> &lt;span style="color:#828b96;font-style:italic">&amp;lt;stdio.h&amp;gt;&lt;/span>&lt;span style="color:#828b96;font-style:italic">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span>&lt;span style="color:#ff636f">int&lt;/span> &lt;span style="color:#58a1dd">main&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">printf&lt;/span>(&lt;span style="color:#a6be9d">&amp;#34;Hello World!&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">return&lt;/span> &lt;span style="color:#a6be9d">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>printf 函数类型为：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#1d2432;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c" data-lang="c">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff636f">int&lt;/span> &lt;span style="color:#58a1dd">printf&lt;/span>(&lt;span style="color:#ff636f">const&lt;/span> &lt;span style="color:#ff636f">char&lt;/span> &lt;span style="color:#ff636f">*&lt;/span>&lt;span style="color:#58a1dd">fmt&lt;/span>,...);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>按照此声明我们可以格式化输出：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#1d2432;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c" data-lang="c">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">#include&lt;/span> &lt;span style="color:#828b96;font-style:italic">&amp;lt;stdio.h&amp;gt;&lt;/span>&lt;span style="color:#828b96;font-style:italic">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span>&lt;span style="color:#ff636f">int&lt;/span> &lt;span style="color:#58a1dd">main&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">const&lt;/span> &lt;span style="color:#ff636f">char&lt;/span> &lt;span style="color:#ff636f">*&lt;/span>&lt;span style="color:#58a1dd">name&lt;/span>&lt;span style="color:#ff636f">=&lt;/span>&lt;span style="color:#a6be9d">&amp;#34;Tony Stark&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">printf&lt;/span>(&lt;span style="color:#a6be9d">&amp;#34;Hello %s&lt;/span>&lt;span style="color:#a6be9d">\n&lt;/span>&lt;span style="color:#a6be9d">&amp;#34;&lt;/span>,&lt;span style="color:#58a1dd">name&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">return&lt;/span> &lt;span style="color:#a6be9d">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>使用 C 编译器 Clang/MSVC/GCC 将其编译运行，在终端或者命令行中会输出如下结果：&lt;/p>
&lt;blockquote>
&lt;p>$ Hello Tony Stark&lt;/p>
&lt;/blockquote>
&lt;p>printf 函数家族声明如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#1d2432;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c++" data-lang="c++">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">// https://en.cppreference.com/w/cpp/header/cstdio
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span>&lt;span style="color:#ff636f">int&lt;/span> &lt;span style="color:#58a1dd">printf&lt;/span>( &lt;span style="color:#ff636f">const&lt;/span> &lt;span style="color:#ff636f">char&lt;/span>&lt;span style="color:#ff636f">*&lt;/span> &lt;span style="color:#58a1dd">format&lt;/span>, ... );
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff636f">int&lt;/span> &lt;span style="color:#58a1dd">fprintf&lt;/span>(&lt;span style="color:#58a1dd">std&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">FILE&lt;/span>&lt;span style="color:#ff636f">*&lt;/span> &lt;span style="color:#58a1dd">stream&lt;/span>, &lt;span style="color:#ff636f">const&lt;/span> &lt;span style="color:#ff636f">char&lt;/span>&lt;span style="color:#ff636f">*&lt;/span> &lt;span style="color:#58a1dd">format&lt;/span>, ... );
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff636f">int&lt;/span> &lt;span style="color:#58a1dd">sprintf&lt;/span>( &lt;span style="color:#ff636f">char&lt;/span>&lt;span style="color:#ff636f">*&lt;/span> &lt;span style="color:#58a1dd">buffer&lt;/span>, &lt;span style="color:#ff636f">const&lt;/span> &lt;span style="color:#ff636f">char&lt;/span>&lt;span style="color:#ff636f">*&lt;/span> &lt;span style="color:#58a1dd">format&lt;/span>, ... );
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff636f">int&lt;/span> &lt;span style="color:#58a1dd">snprintf&lt;/span>( &lt;span style="color:#ff636f">char&lt;/span>&lt;span style="color:#ff636f">*&lt;/span> &lt;span style="color:#58a1dd">buffer&lt;/span>, &lt;span style="color:#58a1dd">std&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">size_t&lt;/span> &lt;span style="color:#58a1dd">buf_size&lt;/span>, &lt;span style="color:#ff636f">const&lt;/span> &lt;span style="color:#ff636f">char&lt;/span>&lt;span style="color:#ff636f">*&lt;/span> &lt;span style="color:#58a1dd">format&lt;/span>, ... );
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff636f">int&lt;/span> &lt;span style="color:#58a1dd">vprintf&lt;/span>( &lt;span style="color:#ff636f">const&lt;/span> &lt;span style="color:#ff636f">char&lt;/span>&lt;span style="color:#ff636f">*&lt;/span> &lt;span style="color:#58a1dd">format&lt;/span>, &lt;span style="color:#58a1dd">va_list&lt;/span> &lt;span style="color:#58a1dd">vlist&lt;/span> );
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff636f">int&lt;/span> &lt;span style="color:#58a1dd">vfprintf&lt;/span>( &lt;span style="color:#58a1dd">std&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">FILE&lt;/span>&lt;span style="color:#ff636f">*&lt;/span> &lt;span style="color:#58a1dd">stream&lt;/span>, &lt;span style="color:#ff636f">const&lt;/span> &lt;span style="color:#ff636f">char&lt;/span>&lt;span style="color:#ff636f">*&lt;/span> &lt;span style="color:#58a1dd">format&lt;/span>, &lt;span style="color:#58a1dd">va_list&lt;/span> &lt;span style="color:#58a1dd">vlist&lt;/span> );
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff636f">int&lt;/span> &lt;span style="color:#58a1dd">vsprintf&lt;/span>( &lt;span style="color:#ff636f">char&lt;/span>&lt;span style="color:#ff636f">*&lt;/span> &lt;span style="color:#58a1dd">buffer&lt;/span>, &lt;span style="color:#ff636f">const&lt;/span> &lt;span style="color:#ff636f">char&lt;/span>&lt;span style="color:#ff636f">*&lt;/span> &lt;span style="color:#58a1dd">format&lt;/span>, &lt;span style="color:#58a1dd">va_list&lt;/span> &lt;span style="color:#58a1dd">vlist&lt;/span> );
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff636f">int&lt;/span> &lt;span style="color:#58a1dd">vsnprintf&lt;/span>( &lt;span style="color:#ff636f">char&lt;/span>&lt;span style="color:#ff636f">*&lt;/span> &lt;span style="color:#58a1dd">buffer&lt;/span>, &lt;span style="color:#58a1dd">std&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">size_t&lt;/span> &lt;span style="color:#58a1dd">buf_size&lt;/span>, &lt;span style="color:#ff636f">const&lt;/span> &lt;span style="color:#ff636f">char&lt;/span>&lt;span style="color:#ff636f">*&lt;/span> &lt;span style="color:#58a1dd">format&lt;/span>, &lt;span style="color:#58a1dd">va_list&lt;/span> &lt;span style="color:#58a1dd">vlist&lt;/span> );
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>如果我们需要格式化字符串时，则可以使用 &lt;code>sprintf&lt;/code> 或者是 &lt;code>snprintf&lt;/code> ，那么问题来了，&lt;code>snprintf&lt;/code> 是如何格式化的？&lt;/p>
&lt;h2 id="格式化内幕">格式化内幕&lt;/h2>
&lt;p>要了解 snprintf 的细节，我们需要去找一个 libc 了解一番，这里建议是 &lt;a href="https://github.com/bminor/musl">musl&lt;/a>，musl 只支持 Linux，没有像 Glibc 那么多的遗留代码，代码比较整洁。而 Visual C++ 的 ucrt 源码基本使用 C++ 模板编写，比较复杂，不容易借此理清 snprintf 的细节。翻阅 musl snprintf.c 源码，我们发现 snprintf 将会调用 &lt;code>vsnprintf&lt;/code>，&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#1d2432;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c" data-lang="c">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">// https://github.com/bminor/musl/blob/master/src/stdio/snprintf.c
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span>&lt;span style="color:#828b96;font-style:italic">#include&lt;/span> &lt;span style="color:#828b96;font-style:italic">&amp;lt;stdio.h&amp;gt;&lt;/span>&lt;span style="color:#828b96;font-style:italic">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">#include&lt;/span> &lt;span style="color:#828b96;font-style:italic">&amp;lt;stdarg.h&amp;gt;&lt;/span>&lt;span style="color:#828b96;font-style:italic">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff636f">int&lt;/span> &lt;span style="color:#58a1dd">snprintf&lt;/span>(&lt;span style="color:#ff636f">char&lt;/span> &lt;span style="color:#ff636f">*&lt;/span>&lt;span style="color:#ff636f">restrict&lt;/span> &lt;span style="color:#58a1dd">s&lt;/span>, &lt;span style="color:#ff636f">size_t&lt;/span> &lt;span style="color:#58a1dd">n&lt;/span>, &lt;span style="color:#ff636f">const&lt;/span> &lt;span style="color:#ff636f">char&lt;/span> &lt;span style="color:#ff636f">*&lt;/span>&lt;span style="color:#ff636f">restrict&lt;/span> &lt;span style="color:#58a1dd">fmt&lt;/span>, ...)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">int&lt;/span> &lt;span style="color:#58a1dd">ret&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">va_list&lt;/span> &lt;span style="color:#58a1dd">ap&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">va_start&lt;/span>(&lt;span style="color:#58a1dd">ap&lt;/span>, &lt;span style="color:#58a1dd">fmt&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">ret&lt;/span> &lt;span style="color:#ff636f">=&lt;/span> &lt;span style="color:#58a1dd">vsnprintf&lt;/span>(&lt;span style="color:#58a1dd">s&lt;/span>, &lt;span style="color:#58a1dd">n&lt;/span>, &lt;span style="color:#58a1dd">fmt&lt;/span>, &lt;span style="color:#58a1dd">ap&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">va_end&lt;/span>(&lt;span style="color:#58a1dd">ap&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">return&lt;/span> &lt;span style="color:#58a1dd">ret&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">// https://github.com/bminor/musl/blob/master/src/stdio/vsnprintf.c
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span>&lt;span style="color:#ff636f">int&lt;/span> &lt;span style="color:#58a1dd">vsnprintf&lt;/span>(&lt;span style="color:#ff636f">char&lt;/span> &lt;span style="color:#ff636f">*&lt;/span>&lt;span style="color:#ff636f">restrict&lt;/span> &lt;span style="color:#58a1dd">s&lt;/span>, &lt;span style="color:#ff636f">size_t&lt;/span> &lt;span style="color:#58a1dd">n&lt;/span>, &lt;span style="color:#ff636f">const&lt;/span> &lt;span style="color:#ff636f">char&lt;/span> &lt;span style="color:#ff636f">*&lt;/span>&lt;span style="color:#ff636f">restrict&lt;/span> &lt;span style="color:#58a1dd">fmt&lt;/span>, &lt;span style="color:#58a1dd">va_list&lt;/span> &lt;span style="color:#58a1dd">ap&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">unsigned&lt;/span> &lt;span style="color:#ff636f">char&lt;/span> &lt;span style="color:#58a1dd">buf&lt;/span>[&lt;span style="color:#a6be9d">1&lt;/span>];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">char&lt;/span> &lt;span style="color:#58a1dd">dummy&lt;/span>[&lt;span style="color:#a6be9d">1&lt;/span>];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">struct&lt;/span> &lt;span style="color:#58a1dd">cookie&lt;/span> &lt;span style="color:#58a1dd">c&lt;/span> &lt;span style="color:#ff636f">=&lt;/span> { .&lt;span style="color:#58a1dd">s&lt;/span> &lt;span style="color:#ff636f">=&lt;/span> &lt;span style="color:#58a1dd">n&lt;/span> &lt;span style="color:#ff636f">?&lt;/span> &lt;span style="color:#58a1dd">s&lt;/span> : &lt;span style="color:#58a1dd">dummy&lt;/span>, .&lt;span style="color:#58a1dd">n&lt;/span> &lt;span style="color:#ff636f">=&lt;/span> &lt;span style="color:#58a1dd">n&lt;/span> &lt;span style="color:#ff636f">?&lt;/span> &lt;span style="color:#58a1dd">n&lt;/span>&lt;span style="color:#ff636f">-&lt;/span>&lt;span style="color:#a6be9d">1&lt;/span> &lt;span style="color:#ff636f">:&lt;/span> &lt;span style="color:#a6be9d">0&lt;/span> };
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">FILE&lt;/span> &lt;span style="color:#58a1dd">f&lt;/span> &lt;span style="color:#ff636f">=&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .&lt;span style="color:#58a1dd">lbf&lt;/span> &lt;span style="color:#ff636f">=&lt;/span> &lt;span style="color:#58a1dd">EOF&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .&lt;span style="color:#58a1dd">write&lt;/span> &lt;span style="color:#ff636f">=&lt;/span> &lt;span style="color:#58a1dd">sn_write&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .&lt;span style="color:#58a1dd">lock&lt;/span> &lt;span style="color:#ff636f">=&lt;/span> &lt;span style="color:#ff636f">-&lt;/span>&lt;span style="color:#a6be9d">1&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .&lt;span style="color:#58a1dd">buf&lt;/span> &lt;span style="color:#ff636f">=&lt;/span> &lt;span style="color:#58a1dd">buf&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .&lt;span style="color:#58a1dd">cookie&lt;/span> &lt;span style="color:#ff636f">=&lt;/span> &lt;span style="color:#ff636f">&amp;amp;&lt;/span>&lt;span style="color:#58a1dd">c&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> };
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">if&lt;/span> (&lt;span style="color:#58a1dd">n&lt;/span> &lt;span style="color:#ff636f">&amp;gt;&lt;/span> &lt;span style="color:#58a1dd">INT_MAX&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">errno&lt;/span> &lt;span style="color:#ff636f">=&lt;/span> &lt;span style="color:#58a1dd">EOVERFLOW&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">return&lt;/span> &lt;span style="color:#ff636f">-&lt;/span>&lt;span style="color:#a6be9d">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">*&lt;/span>&lt;span style="color:#58a1dd">c&lt;/span>.&lt;span style="color:#58a1dd">s&lt;/span> &lt;span style="color:#ff636f">=&lt;/span> &lt;span style="color:#a6be9d">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">return&lt;/span> &lt;span style="color:#58a1dd">vfprintf&lt;/span>(&lt;span style="color:#ff636f">&amp;amp;&lt;/span>&lt;span style="color:#58a1dd">f&lt;/span>, &lt;span style="color:#58a1dd">fmt&lt;/span>, &lt;span style="color:#58a1dd">ap&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>在 musl 之中，vsnprintf 创建一个 FILE 结构，然后最终使用 vfprintf 格式化字符串。这里使用了 &lt;code>va_list&lt;/code> &lt;code>va_start&lt;/code> &lt;code>va_end&lt;/code> 宏，这组宏将变参函数的参数从函数栈中取出来，从而实现了变参函数的功能，我们可以参考 Visual C++ 在 &lt;a href="https://gist.github.com/fcharlie/e2b6a2d578d7b484d0338886ce0db768">&lt;code>vadefs.h&lt;/code>&lt;/a> 中的定义。&lt;/p>
&lt;p>而 va_list 本质上是从函数参数栈中获得特定位置的值。&lt;/p>
&lt;p>&lt;code>vfprintf&lt;/code> 函数的源码在： &lt;a href="https://github.com/bminor/musl/blob/master/src/stdio/vfprintf.c">musl: src/stdio/vfprintf.c&lt;/a>。我们可以发现格式化输出实际上是解析 &lt;code>format&lt;/code> 字符串，在解析到占位符时，使用 &lt;code>va_arg&lt;/code> 提取 &lt;code>va_list&lt;/code> 中的变量（或者转变为特定格式字符串后）替换占位符，从而实现格式化输出的目的（文件或者缓冲区）。格式化占位符以 &lt;code>%&lt;/code> 开头，支持格式化的类型可以参考 &lt;a href="http://pubs.opengroup.org/onlinepubs/9699919799/functions/fprintf.html">http://pubs.opengroup.org/onlinepubs/9699919799/functions/fprintf.html&lt;/a>&lt;/p>
&lt;p>了解到格式化输出的原理之后，我们可以很容易的实现一个格式化字符串或者格式化输出函数，在 nginx 源码中，就有一个 类似实现： &lt;a href="https://github.com/nginx/nginx/blob/27b3d3dcca5fcc82350a823881f3d06161327b59/src/core/ngx_string.c#L163">&lt;code>ngx_vslprintf&lt;/code>&lt;/a> ，这个代码比较简单比较容易移植。&lt;/p>
&lt;h2 id="c-style-格式化的缺陷">C-Style 格式化的缺陷&lt;/h2>
&lt;p>上述格式化使用变参函数，使用 va_list 获得参数值，这种使用 va_list 的函数在 C++ 中是不被推荐的 &lt;a href="https://github.com/isocpp/CppCoreGuidelines/blob/master/CppCoreGuidelines.md#F-varargs">F.55: Don&amp;rsquo;t use va_arg arguments&lt;/a>。当用户编码时，可能是程序员疏忽或者故意，依赖 va_list 的代码很容易由于类型不匹配，参数个数不匹配而造成栈溢出。导致安全漏洞或者是程序崩溃。以下代码可能会导致程序崩溃，并且编译器也不会警告：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#1d2432;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c++" data-lang="c++">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">#include&lt;/span> &lt;span style="color:#828b96;font-style:italic">&amp;lt;string_view&amp;gt;&lt;/span>&lt;span style="color:#828b96;font-style:italic">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">#include&lt;/span> &lt;span style="color:#828b96;font-style:italic">&amp;lt;cstdio&amp;gt;&lt;/span>&lt;span style="color:#828b96;font-style:italic">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">#include&lt;/span> &lt;span style="color:#828b96;font-style:italic">&amp;lt;cstdarg&amp;gt;&lt;/span>&lt;span style="color:#828b96;font-style:italic">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff636f">int&lt;/span> &lt;span style="color:#58a1dd">dump&lt;/span>(&lt;span style="color:#ff636f">const&lt;/span> &lt;span style="color:#ff636f">char&lt;/span> &lt;span style="color:#ff636f">*&lt;/span>&lt;span style="color:#58a1dd">fmt&lt;/span>,...){
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">int&lt;/span> &lt;span style="color:#58a1dd">ret&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">va_list&lt;/span> &lt;span style="color:#58a1dd">ap&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">va_start&lt;/span>(&lt;span style="color:#58a1dd">ap&lt;/span>,&lt;span style="color:#58a1dd">fmt&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">vfprintf&lt;/span>(&lt;span style="color:#58a1dd">stderr&lt;/span>,&lt;span style="color:#58a1dd">fmt&lt;/span>,&lt;span style="color:#58a1dd">ap&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">va_end&lt;/span>(&lt;span style="color:#58a1dd">ap&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">return&lt;/span> &lt;span style="color:#58a1dd">ret&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff636f">int&lt;/span> &lt;span style="color:#58a1dd">main&lt;/span>(){
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">std&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">string_view&lt;/span> &lt;span style="color:#58a1dd">name&lt;/span>&lt;span style="color:#ff636f">=&lt;/span>&lt;span style="color:#a6be9d">&amp;#34;Tony Stark&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">dump&lt;/span>(&lt;span style="color:#a6be9d">&amp;#34;hello %s&lt;/span>&lt;span style="color:#a6be9d">\n&lt;/span>&lt;span style="color:#a6be9d">&amp;#34;&lt;/span>,&lt;span style="color:#58a1dd">name&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">return&lt;/span> &lt;span style="color:#a6be9d">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>编译器的构建信息如下:&lt;/p>
&lt;pre tabindex="0">&lt;code>使用内建 specs。
COLLECT_GCC=/opt/gcc/bin/g++
COLLECT_LTO_WRAPPER=/opt/gcc/libexec/gcc/x86_64-linux-gnu/9.0.1/lto-wrapper
目标：x86_64-linux-gnu
配置为：../configure --with-pkgversion=Baslat.Inc --prefix=/opt/gcc --enable-shared --enable-linker-build-id --without-included-gettext --enable-threads=posix --enable-checking=release --enable-languages=c,c++ --disable-multilib --enable-libstdcxx-debug --enable-libstdcxx-time=yes --with-default-libstdcxx-abi=new --enable-gnu-unique-object --disable-vtable-verify --enable-libmpx --enable-plugin --with-system-zlib --with-abi=m64 --build=x86_64-linux-gnu --host=x86_64-linux-gnu --target=x86_64-linux-gnu
线程模型：posix
gcc 版本 9.0.1 20190426 (prerelease) (Baslat.Inc)
&lt;/code>&lt;/pre>&lt;p>运行编译器命令：&lt;/p>
&lt;blockquote>
&lt;p>/opt/gcc/bin/g++ -fsanitize=address -fno-omit-frame-pointer fuck.cc -std=c++17&lt;/p>
&lt;/blockquote>
&lt;p>运行程序：&lt;/p>
&lt;blockquote>
&lt;p>./a.out&lt;/p>
&lt;/blockquote>
&lt;p>地址消毒剂报告如下：&lt;/p>
&lt;pre tabindex="0">&lt;code>AddressSanitizer:DEADLYSIGNAL
=================================================================
==16509==ERROR: AddressSanitizer: SEGV on unknown address 0x00000000000a (pc 0x7fc137bc3af2 bp 0x7ffffbf14ea0 sp 0x7ffffbf145c8 T0)
==16509==The signal is caused by a READ memory access.
==16509==Hint: address points to the zero page.
#0 0x7fc137bc3af1 (/usr/lib/x86_64-linux-gnu/libasan.so.5+0x109af1)
#1 0x7fc137b0e61c (/usr/lib/x86_64-linux-gnu/libasan.so.5+0x5461c)
#2 0x7fc137b0efb4 in __interceptor_vfprintf (/usr/lib/x86_64-linux-gnu/libasan.so.5+0x54fb4)
#3 0x400cf0 in dump(char const*, ...) (/tmp/a.out+0x400cf0)
#4 0x400e06 in main (/tmp/a.out+0x400e06)
#5 0x7fc136dabb96 in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x21b96)
#6 0x400b09 in _start (/tmp/a.out+0x400b09)
AddressSanitizer can not provide additional info.
SUMMARY: AddressSanitizer: SEGV (/usr/lib/x86_64-linux-gnu/libasan.so.5+0x109af1)
==16509==ABORTING
&lt;/code>&lt;/pre>&lt;p>出现问题其实很容易理解，由于 std::string_view 的结构大致如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#1d2432;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c++" data-lang="c++">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff636f">template&lt;/span>&lt;span style="color:#ff636f">&amp;lt;&lt;/span>&lt;span style="color:#ff636f">class&lt;/span> &lt;span style="color:#58a1dd">charT&lt;/span>, &lt;span style="color:#ff636f">class&lt;/span> &lt;span style="color:#58a1dd">traits&lt;/span> &lt;span style="color:#ff636f">=&lt;/span> &lt;span style="color:#58a1dd">char_traits&lt;/span>&lt;span style="color:#ff636f">&amp;lt;&lt;/span>&lt;span style="color:#58a1dd">charT&lt;/span>&lt;span style="color:#ff636f">&amp;gt;&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff636f">class&lt;/span> &lt;span style="color:#58a1dd">basic_string_view&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff636f">public&lt;/span>&lt;span style="color:#ff636f">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#828b96;font-style:italic">// types
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span> &lt;span style="color:#ff636f">typedef&lt;/span> &lt;span style="color:#58a1dd">traits&lt;/span> &lt;span style="color:#58a1dd">traits_type&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">typedef&lt;/span> &lt;span style="color:#58a1dd">charT&lt;/span> &lt;span style="color:#58a1dd">value_type&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">typedef&lt;/span> &lt;span style="color:#58a1dd">charT&lt;/span>&lt;span style="color:#ff636f">*&lt;/span> &lt;span style="color:#58a1dd">pointer&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">typedef&lt;/span> &lt;span style="color:#ff636f">const&lt;/span> &lt;span style="color:#58a1dd">charT&lt;/span>&lt;span style="color:#ff636f">*&lt;/span> &lt;span style="color:#58a1dd">const_pointer&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">typedef&lt;/span> &lt;span style="color:#58a1dd">charT&lt;/span>&lt;span style="color:#ff636f">&amp;amp;&lt;/span> &lt;span style="color:#58a1dd">reference&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">typedef&lt;/span> &lt;span style="color:#ff636f">const&lt;/span> &lt;span style="color:#58a1dd">charT&lt;/span>&lt;span style="color:#ff636f">&amp;amp;&lt;/span> &lt;span style="color:#58a1dd">const_reference&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">typedef&lt;/span> &lt;span style="color:#58a1dd">implementation&lt;/span>&lt;span style="color:#ff636f">-&lt;/span>&lt;span style="color:#58a1dd">defined&lt;/span> &lt;span style="color:#58a1dd">const_iterator&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">typedef&lt;/span> &lt;span style="color:#58a1dd">const_iterator&lt;/span> &lt;span style="color:#58a1dd">iterator&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">typedef&lt;/span> &lt;span style="color:#58a1dd">reverse_iterator&lt;/span>&lt;span style="color:#ff636f">&amp;lt;&lt;/span>&lt;span style="color:#58a1dd">const_iterator&lt;/span>&lt;span style="color:#ff636f">&amp;gt;&lt;/span> &lt;span style="color:#58a1dd">const_reverse_iterator&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">typedef&lt;/span> &lt;span style="color:#58a1dd">const_reverse_iterator&lt;/span> &lt;span style="color:#58a1dd">reverse_iterator&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">typedef&lt;/span> &lt;span style="color:#58a1dd">size_t&lt;/span> &lt;span style="color:#58a1dd">size_type&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">typedef&lt;/span> &lt;span style="color:#58a1dd">ptrdiff_t&lt;/span> &lt;span style="color:#58a1dd">difference_type&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">static&lt;/span> &lt;span style="color:#ff636f">constexpr&lt;/span> &lt;span style="color:#58a1dd">size_type&lt;/span> &lt;span style="color:#58a1dd">npos&lt;/span> &lt;span style="color:#ff636f">=&lt;/span> &lt;span style="color:#58a1dd">size_type&lt;/span>(&lt;span style="color:#ff636f">-&lt;/span>&lt;span style="color:#a6be9d">1&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#828b96;font-style:italic">// 7.3, basic_string_view constructors and assignment operators
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span> &lt;span style="color:#ff636f">constexpr&lt;/span> &lt;span style="color:#58a1dd">basic_string_view&lt;/span>() &lt;span style="color:#ff636f">noexcept&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">constexpr&lt;/span> &lt;span style="color:#58a1dd">basic_string_view&lt;/span>(&lt;span style="color:#ff636f">const&lt;/span> &lt;span style="color:#58a1dd">basic_string_view&lt;/span>&lt;span style="color:#ff636f">&amp;amp;&lt;/span>) &lt;span style="color:#ff636f">noexcept&lt;/span> &lt;span style="color:#ff636f">=&lt;/span> &lt;span style="color:#ff636f">default&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">basic_string_view&lt;/span>&lt;span style="color:#ff636f">&amp;amp;&lt;/span> &lt;span style="color:#ff636f">operator&lt;/span>&lt;span style="color:#ff636f">=&lt;/span>(&lt;span style="color:#ff636f">const&lt;/span> &lt;span style="color:#58a1dd">basic_string_view&lt;/span>&lt;span style="color:#ff636f">&amp;amp;&lt;/span>) &lt;span style="color:#ff636f">noexcept&lt;/span> &lt;span style="color:#ff636f">=&lt;/span> &lt;span style="color:#ff636f">default&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">template&lt;/span>&lt;span style="color:#ff636f">&amp;lt;&lt;/span>&lt;span style="color:#ff636f">class&lt;/span> &lt;span style="color:#58a1dd">Allocator&lt;/span>&lt;span style="color:#ff636f">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">constexpr&lt;/span> &lt;span style="color:#58a1dd">basic_string_view&lt;/span>(&lt;span style="color:#ff636f">const&lt;/span> &lt;span style="color:#58a1dd">charT&lt;/span>&lt;span style="color:#ff636f">*&lt;/span> &lt;span style="color:#58a1dd">str&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">constexpr&lt;/span> &lt;span style="color:#58a1dd">basic_string_view&lt;/span>(&lt;span style="color:#ff636f">const&lt;/span> &lt;span style="color:#58a1dd">charT&lt;/span>&lt;span style="color:#ff636f">*&lt;/span> &lt;span style="color:#58a1dd">str&lt;/span>, &lt;span style="color:#58a1dd">size_type&lt;/span> &lt;span style="color:#58a1dd">len&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#828b96;font-style:italic">// 7.4, basic_string_view iterator support
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span> &lt;span style="color:#ff636f">constexpr&lt;/span> &lt;span style="color:#58a1dd">const_iterator&lt;/span> &lt;span style="color:#58a1dd">begin&lt;/span>() &lt;span style="color:#ff636f">const&lt;/span> &lt;span style="color:#ff636f">noexcept&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">constexpr&lt;/span> &lt;span style="color:#58a1dd">const_iterator&lt;/span> &lt;span style="color:#58a1dd">end&lt;/span>() &lt;span style="color:#ff636f">const&lt;/span> &lt;span style="color:#ff636f">noexcept&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">constexpr&lt;/span> &lt;span style="color:#58a1dd">const_iterator&lt;/span> &lt;span style="color:#58a1dd">cbegin&lt;/span>() &lt;span style="color:#ff636f">const&lt;/span> &lt;span style="color:#ff636f">noexcept&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">constexpr&lt;/span> &lt;span style="color:#58a1dd">const_iterator&lt;/span> &lt;span style="color:#58a1dd">cend&lt;/span>() &lt;span style="color:#ff636f">const&lt;/span> &lt;span style="color:#ff636f">noexcept&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">const_reverse_iterator&lt;/span> &lt;span style="color:#58a1dd">rbegin&lt;/span>() &lt;span style="color:#ff636f">const&lt;/span> &lt;span style="color:#ff636f">noexcept&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">const_reverse_iterator&lt;/span> &lt;span style="color:#58a1dd">rend&lt;/span>() &lt;span style="color:#ff636f">const&lt;/span> &lt;span style="color:#ff636f">noexcept&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">const_reverse_iterator&lt;/span> &lt;span style="color:#58a1dd">crbegin&lt;/span>() &lt;span style="color:#ff636f">const&lt;/span> &lt;span style="color:#ff636f">noexcept&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">const_reverse_iterator&lt;/span> &lt;span style="color:#58a1dd">crend&lt;/span>() &lt;span style="color:#ff636f">const&lt;/span> &lt;span style="color:#ff636f">noexcept&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#828b96;font-style:italic">// 7.5, basic_string_view capacity
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span> &lt;span style="color:#ff636f">constexpr&lt;/span> &lt;span style="color:#58a1dd">size_type&lt;/span> &lt;span style="color:#58a1dd">size&lt;/span>() &lt;span style="color:#ff636f">const&lt;/span> &lt;span style="color:#ff636f">noexcept&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">constexpr&lt;/span> &lt;span style="color:#58a1dd">size_type&lt;/span> &lt;span style="color:#58a1dd">length&lt;/span>() &lt;span style="color:#ff636f">const&lt;/span> &lt;span style="color:#ff636f">noexcept&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">constexpr&lt;/span> &lt;span style="color:#58a1dd">size_type&lt;/span> &lt;span style="color:#58a1dd">max_size&lt;/span>() &lt;span style="color:#ff636f">const&lt;/span> &lt;span style="color:#ff636f">noexcept&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">constexpr&lt;/span> &lt;span style="color:#ff636f">bool&lt;/span> &lt;span style="color:#58a1dd">empty&lt;/span>() &lt;span style="color:#ff636f">const&lt;/span> &lt;span style="color:#ff636f">noexcept&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#828b96;font-style:italic">// 7.6, basic_string_view element access
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span> &lt;span style="color:#ff636f">constexpr&lt;/span> &lt;span style="color:#58a1dd">const_reference&lt;/span> &lt;span style="color:#ff636f">operator&lt;/span>[](&lt;span style="color:#58a1dd">size_type&lt;/span> &lt;span style="color:#58a1dd">pos&lt;/span>) &lt;span style="color:#ff636f">const&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">constexpr&lt;/span> &lt;span style="color:#58a1dd">const_reference&lt;/span> &lt;span style="color:#58a1dd">at&lt;/span>(&lt;span style="color:#58a1dd">size_type&lt;/span> &lt;span style="color:#58a1dd">pos&lt;/span>) &lt;span style="color:#ff636f">const&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">constexpr&lt;/span> &lt;span style="color:#58a1dd">const_reference&lt;/span> &lt;span style="color:#58a1dd">front&lt;/span>() &lt;span style="color:#ff636f">const&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">constexpr&lt;/span> &lt;span style="color:#58a1dd">const_reference&lt;/span> &lt;span style="color:#58a1dd">back&lt;/span>() &lt;span style="color:#ff636f">const&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">constexpr&lt;/span> &lt;span style="color:#58a1dd">const_pointer&lt;/span> &lt;span style="color:#58a1dd">data&lt;/span>() &lt;span style="color:#ff636f">const&lt;/span> &lt;span style="color:#ff636f">noexcept&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#828b96;font-style:italic">// 7.7, basic_string_view modifiers
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span> &lt;span style="color:#ff636f">constexpr&lt;/span> &lt;span style="color:#ff636f">void&lt;/span> &lt;span style="color:#58a1dd">remove_prefix&lt;/span>(&lt;span style="color:#58a1dd">size_type&lt;/span> &lt;span style="color:#58a1dd">n&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">constexpr&lt;/span> &lt;span style="color:#ff636f">void&lt;/span> &lt;span style="color:#58a1dd">remove_suffix&lt;/span>(&lt;span style="color:#58a1dd">size_type&lt;/span> &lt;span style="color:#58a1dd">n&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">constexpr&lt;/span> &lt;span style="color:#ff636f">void&lt;/span> &lt;span style="color:#58a1dd">swap&lt;/span>(&lt;span style="color:#58a1dd">basic_string_view&lt;/span>&lt;span style="color:#ff636f">&amp;amp;&lt;/span> &lt;span style="color:#58a1dd">s&lt;/span>) &lt;span style="color:#ff636f">noexcept&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">size_type&lt;/span> &lt;span style="color:#58a1dd">copy&lt;/span>(&lt;span style="color:#58a1dd">charT&lt;/span>&lt;span style="color:#ff636f">*&lt;/span> &lt;span style="color:#58a1dd">s&lt;/span>, &lt;span style="color:#58a1dd">size_type&lt;/span> &lt;span style="color:#58a1dd">n&lt;/span>, &lt;span style="color:#58a1dd">size_type&lt;/span> &lt;span style="color:#58a1dd">pos&lt;/span> &lt;span style="color:#ff636f">=&lt;/span> &lt;span style="color:#a6be9d">0&lt;/span>) &lt;span style="color:#ff636f">const&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">constexpr&lt;/span> &lt;span style="color:#58a1dd">basic_string_view&lt;/span> &lt;span style="color:#58a1dd">substr&lt;/span>(&lt;span style="color:#58a1dd">size_type&lt;/span> &lt;span style="color:#58a1dd">pos&lt;/span> &lt;span style="color:#ff636f">=&lt;/span> &lt;span style="color:#a6be9d">0&lt;/span>, &lt;span style="color:#58a1dd">size_type&lt;/span> &lt;span style="color:#58a1dd">n&lt;/span> &lt;span style="color:#ff636f">=&lt;/span> &lt;span style="color:#58a1dd">npos&lt;/span>) &lt;span style="color:#ff636f">const&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">constexpr&lt;/span> &lt;span style="color:#ff636f">int&lt;/span> &lt;span style="color:#58a1dd">compare&lt;/span>(&lt;span style="color:#58a1dd">basic_string_view&lt;/span> &lt;span style="color:#58a1dd">s&lt;/span>) &lt;span style="color:#ff636f">const&lt;/span> &lt;span style="color:#ff636f">noexcept&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">constexpr&lt;/span> &lt;span style="color:#ff636f">int&lt;/span> &lt;span style="color:#58a1dd">compare&lt;/span>(&lt;span style="color:#58a1dd">size_type&lt;/span> &lt;span style="color:#58a1dd">pos1&lt;/span>, &lt;span style="color:#58a1dd">size_type&lt;/span> &lt;span style="color:#58a1dd">n1&lt;/span>, &lt;span style="color:#58a1dd">basic_string_view&lt;/span> &lt;span style="color:#58a1dd">s&lt;/span>) &lt;span style="color:#ff636f">const&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">constexpr&lt;/span> &lt;span style="color:#ff636f">int&lt;/span> &lt;span style="color:#58a1dd">compare&lt;/span>(&lt;span style="color:#58a1dd">size_type&lt;/span> &lt;span style="color:#58a1dd">pos1&lt;/span>, &lt;span style="color:#58a1dd">size_type&lt;/span> &lt;span style="color:#58a1dd">n1&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">basic_string_view&lt;/span> &lt;span style="color:#58a1dd">s&lt;/span>, &lt;span style="color:#58a1dd">size_type&lt;/span> &lt;span style="color:#58a1dd">pos2&lt;/span>, &lt;span style="color:#58a1dd">size_type&lt;/span> &lt;span style="color:#58a1dd">n2&lt;/span>) &lt;span style="color:#ff636f">const&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">constexpr&lt;/span> &lt;span style="color:#ff636f">int&lt;/span> &lt;span style="color:#58a1dd">compare&lt;/span>(&lt;span style="color:#ff636f">const&lt;/span> &lt;span style="color:#58a1dd">charT&lt;/span>&lt;span style="color:#ff636f">*&lt;/span> &lt;span style="color:#58a1dd">s&lt;/span>) &lt;span style="color:#ff636f">const&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">constexpr&lt;/span> &lt;span style="color:#ff636f">int&lt;/span> &lt;span style="color:#58a1dd">compare&lt;/span>(&lt;span style="color:#58a1dd">size_type&lt;/span> &lt;span style="color:#58a1dd">pos1&lt;/span>, &lt;span style="color:#58a1dd">size_type&lt;/span> &lt;span style="color:#58a1dd">n1&lt;/span>, &lt;span style="color:#ff636f">const&lt;/span> &lt;span style="color:#58a1dd">charT&lt;/span>&lt;span style="color:#ff636f">*&lt;/span> &lt;span style="color:#58a1dd">s&lt;/span>) &lt;span style="color:#ff636f">const&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">constexpr&lt;/span> &lt;span style="color:#ff636f">int&lt;/span> &lt;span style="color:#58a1dd">compare&lt;/span>(&lt;span style="color:#58a1dd">size_type&lt;/span> &lt;span style="color:#58a1dd">pos1&lt;/span>, &lt;span style="color:#58a1dd">size_type&lt;/span> &lt;span style="color:#58a1dd">n1&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">const&lt;/span> &lt;span style="color:#58a1dd">charT&lt;/span>&lt;span style="color:#ff636f">*&lt;/span> &lt;span style="color:#58a1dd">s&lt;/span>, &lt;span style="color:#58a1dd">size_type&lt;/span> &lt;span style="color:#58a1dd">n2&lt;/span>) &lt;span style="color:#ff636f">const&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">constexpr&lt;/span> &lt;span style="color:#58a1dd">size_type&lt;/span> &lt;span style="color:#58a1dd">find&lt;/span>(&lt;span style="color:#58a1dd">basic_string_view&lt;/span> &lt;span style="color:#58a1dd">s&lt;/span>, &lt;span style="color:#58a1dd">size_type&lt;/span> &lt;span style="color:#58a1dd">pos&lt;/span> &lt;span style="color:#ff636f">=&lt;/span> &lt;span style="color:#a6be9d">0&lt;/span>) &lt;span style="color:#ff636f">const&lt;/span> &lt;span style="color:#ff636f">noexcept&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">constexpr&lt;/span> &lt;span style="color:#58a1dd">size_type&lt;/span> &lt;span style="color:#58a1dd">find&lt;/span>(&lt;span style="color:#58a1dd">charT&lt;/span> &lt;span style="color:#58a1dd">c&lt;/span>, &lt;span style="color:#58a1dd">size_type&lt;/span> &lt;span style="color:#58a1dd">pos&lt;/span> &lt;span style="color:#ff636f">=&lt;/span> &lt;span style="color:#a6be9d">0&lt;/span>) &lt;span style="color:#ff636f">const&lt;/span> &lt;span style="color:#ff636f">noexcept&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">constexpr&lt;/span> &lt;span style="color:#58a1dd">size_type&lt;/span> &lt;span style="color:#58a1dd">find&lt;/span>(&lt;span style="color:#ff636f">const&lt;/span> &lt;span style="color:#58a1dd">charT&lt;/span>&lt;span style="color:#ff636f">*&lt;/span> &lt;span style="color:#58a1dd">s&lt;/span>, &lt;span style="color:#58a1dd">size_type&lt;/span> &lt;span style="color:#58a1dd">pos&lt;/span>, &lt;span style="color:#58a1dd">size_type&lt;/span> &lt;span style="color:#58a1dd">n&lt;/span>) &lt;span style="color:#ff636f">const&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">constexpr&lt;/span> &lt;span style="color:#58a1dd">size_type&lt;/span> &lt;span style="color:#58a1dd">find&lt;/span>(&lt;span style="color:#ff636f">const&lt;/span> &lt;span style="color:#58a1dd">charT&lt;/span>&lt;span style="color:#ff636f">*&lt;/span> &lt;span style="color:#58a1dd">s&lt;/span>, &lt;span style="color:#58a1dd">size_type&lt;/span> &lt;span style="color:#58a1dd">pos&lt;/span> &lt;span style="color:#ff636f">=&lt;/span> &lt;span style="color:#a6be9d">0&lt;/span>) &lt;span style="color:#ff636f">const&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">constexpr&lt;/span> &lt;span style="color:#58a1dd">size_type&lt;/span> &lt;span style="color:#58a1dd">rfind&lt;/span>(&lt;span style="color:#58a1dd">basic_string_view&lt;/span> &lt;span style="color:#58a1dd">s&lt;/span>, &lt;span style="color:#58a1dd">size_type&lt;/span> &lt;span style="color:#58a1dd">pos&lt;/span> &lt;span style="color:#ff636f">=&lt;/span> &lt;span style="color:#58a1dd">npos&lt;/span>) &lt;span style="color:#ff636f">const&lt;/span> &lt;span style="color:#ff636f">noexcept&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">constexpr&lt;/span> &lt;span style="color:#58a1dd">size_type&lt;/span> &lt;span style="color:#58a1dd">rfind&lt;/span>(&lt;span style="color:#58a1dd">charT&lt;/span> &lt;span style="color:#58a1dd">c&lt;/span>, &lt;span style="color:#58a1dd">size_type&lt;/span> &lt;span style="color:#58a1dd">pos&lt;/span> &lt;span style="color:#ff636f">=&lt;/span> &lt;span style="color:#58a1dd">npos&lt;/span>) &lt;span style="color:#ff636f">const&lt;/span> &lt;span style="color:#ff636f">noexcept&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">constexpr&lt;/span> &lt;span style="color:#58a1dd">size_type&lt;/span> &lt;span style="color:#58a1dd">rfind&lt;/span>(&lt;span style="color:#ff636f">const&lt;/span> &lt;span style="color:#58a1dd">charT&lt;/span>&lt;span style="color:#ff636f">*&lt;/span> &lt;span style="color:#58a1dd">s&lt;/span>, &lt;span style="color:#58a1dd">size_type&lt;/span> &lt;span style="color:#58a1dd">pos&lt;/span>, &lt;span style="color:#58a1dd">size_type&lt;/span> &lt;span style="color:#58a1dd">n&lt;/span>) &lt;span style="color:#ff636f">const&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">constexpr&lt;/span> &lt;span style="color:#58a1dd">size_type&lt;/span> &lt;span style="color:#58a1dd">rfind&lt;/span>(&lt;span style="color:#ff636f">const&lt;/span> &lt;span style="color:#58a1dd">charT&lt;/span>&lt;span style="color:#ff636f">*&lt;/span> &lt;span style="color:#58a1dd">s&lt;/span>, &lt;span style="color:#58a1dd">size_type&lt;/span> &lt;span style="color:#58a1dd">pos&lt;/span> &lt;span style="color:#ff636f">=&lt;/span> &lt;span style="color:#58a1dd">npos&lt;/span>) &lt;span style="color:#ff636f">const&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">constexpr&lt;/span> &lt;span style="color:#58a1dd">size_type&lt;/span> &lt;span style="color:#58a1dd">find_first_of&lt;/span>(&lt;span style="color:#58a1dd">basic_string_view&lt;/span> &lt;span style="color:#58a1dd">s&lt;/span>, &lt;span style="color:#58a1dd">size_type&lt;/span> &lt;span style="color:#58a1dd">pos&lt;/span> &lt;span style="color:#ff636f">=&lt;/span> &lt;span style="color:#a6be9d">0&lt;/span>) &lt;span style="color:#ff636f">const&lt;/span> &lt;span style="color:#ff636f">noexcept&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">constexpr&lt;/span> &lt;span style="color:#58a1dd">size_type&lt;/span> &lt;span style="color:#58a1dd">find_first_of&lt;/span>(&lt;span style="color:#58a1dd">charT&lt;/span> &lt;span style="color:#58a1dd">c&lt;/span>, &lt;span style="color:#58a1dd">size_type&lt;/span> &lt;span style="color:#58a1dd">pos&lt;/span> &lt;span style="color:#ff636f">=&lt;/span> &lt;span style="color:#a6be9d">0&lt;/span>) &lt;span style="color:#ff636f">const&lt;/span> &lt;span style="color:#ff636f">noexcept&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">constexpr&lt;/span> &lt;span style="color:#58a1dd">size_type&lt;/span> &lt;span style="color:#58a1dd">find_first_of&lt;/span>(&lt;span style="color:#ff636f">const&lt;/span> &lt;span style="color:#58a1dd">charT&lt;/span>&lt;span style="color:#ff636f">*&lt;/span> &lt;span style="color:#58a1dd">s&lt;/span>, &lt;span style="color:#58a1dd">size_type&lt;/span> &lt;span style="color:#58a1dd">pos&lt;/span>, &lt;span style="color:#58a1dd">size_type&lt;/span> &lt;span style="color:#58a1dd">n&lt;/span>) &lt;span style="color:#ff636f">const&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">constexpr&lt;/span> &lt;span style="color:#58a1dd">size_type&lt;/span> &lt;span style="color:#58a1dd">find_first_of&lt;/span>(&lt;span style="color:#ff636f">const&lt;/span> &lt;span style="color:#58a1dd">charT&lt;/span>&lt;span style="color:#ff636f">*&lt;/span> &lt;span style="color:#58a1dd">s&lt;/span>, &lt;span style="color:#58a1dd">size_type&lt;/span> &lt;span style="color:#58a1dd">pos&lt;/span> &lt;span style="color:#ff636f">=&lt;/span> &lt;span style="color:#a6be9d">0&lt;/span>) &lt;span style="color:#ff636f">const&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">constexpr&lt;/span> &lt;span style="color:#58a1dd">size_type&lt;/span> &lt;span style="color:#58a1dd">find_last_of&lt;/span>(&lt;span style="color:#58a1dd">basic_string_view&lt;/span> &lt;span style="color:#58a1dd">s&lt;/span>, &lt;span style="color:#58a1dd">size_type&lt;/span> &lt;span style="color:#58a1dd">pos&lt;/span> &lt;span style="color:#ff636f">=&lt;/span> &lt;span style="color:#58a1dd">npos&lt;/span>) &lt;span style="color:#ff636f">const&lt;/span> &lt;span style="color:#ff636f">noexcept&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">constexpr&lt;/span> &lt;span style="color:#58a1dd">size_type&lt;/span> &lt;span style="color:#58a1dd">find_last_of&lt;/span>(&lt;span style="color:#58a1dd">charT&lt;/span> &lt;span style="color:#58a1dd">c&lt;/span>, &lt;span style="color:#58a1dd">size_type&lt;/span> &lt;span style="color:#58a1dd">pos&lt;/span> &lt;span style="color:#ff636f">=&lt;/span> &lt;span style="color:#58a1dd">npos&lt;/span>) &lt;span style="color:#ff636f">const&lt;/span> &lt;span style="color:#ff636f">noexcept&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">constexpr&lt;/span> &lt;span style="color:#58a1dd">size_type&lt;/span> &lt;span style="color:#58a1dd">find_last_of&lt;/span>(&lt;span style="color:#ff636f">const&lt;/span> &lt;span style="color:#58a1dd">charT&lt;/span>&lt;span style="color:#ff636f">*&lt;/span> &lt;span style="color:#58a1dd">s&lt;/span>, &lt;span style="color:#58a1dd">size_type&lt;/span> &lt;span style="color:#58a1dd">pos&lt;/span>, &lt;span style="color:#58a1dd">size_type&lt;/span> &lt;span style="color:#58a1dd">n&lt;/span>) &lt;span style="color:#ff636f">const&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">constexpr&lt;/span> &lt;span style="color:#58a1dd">size_type&lt;/span> &lt;span style="color:#58a1dd">find_last_of&lt;/span>(&lt;span style="color:#ff636f">const&lt;/span> &lt;span style="color:#58a1dd">charT&lt;/span>&lt;span style="color:#ff636f">*&lt;/span> &lt;span style="color:#58a1dd">s&lt;/span>, &lt;span style="color:#58a1dd">size_type&lt;/span> &lt;span style="color:#58a1dd">pos&lt;/span> &lt;span style="color:#ff636f">=&lt;/span> &lt;span style="color:#58a1dd">npos&lt;/span>) &lt;span style="color:#ff636f">const&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">constexpr&lt;/span> &lt;span style="color:#58a1dd">size_type&lt;/span> &lt;span style="color:#58a1dd">find_first_not_of&lt;/span>(&lt;span style="color:#58a1dd">basic_string_view&lt;/span> &lt;span style="color:#58a1dd">s&lt;/span>, &lt;span style="color:#58a1dd">size_type&lt;/span> &lt;span style="color:#58a1dd">pos&lt;/span> &lt;span style="color:#ff636f">=&lt;/span> &lt;span style="color:#a6be9d">0&lt;/span>) &lt;span style="color:#ff636f">const&lt;/span> &lt;span style="color:#ff636f">noexcept&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">constexpr&lt;/span> &lt;span style="color:#58a1dd">size_type&lt;/span> &lt;span style="color:#58a1dd">find_first_not_of&lt;/span>(&lt;span style="color:#58a1dd">charT&lt;/span> &lt;span style="color:#58a1dd">c&lt;/span>, &lt;span style="color:#58a1dd">size_type&lt;/span> &lt;span style="color:#58a1dd">pos&lt;/span> &lt;span style="color:#ff636f">=&lt;/span> &lt;span style="color:#a6be9d">0&lt;/span>) &lt;span style="color:#ff636f">const&lt;/span> &lt;span style="color:#ff636f">noexcept&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">constexpr&lt;/span> &lt;span style="color:#58a1dd">size_type&lt;/span> &lt;span style="color:#58a1dd">find_first_not_of&lt;/span>(&lt;span style="color:#ff636f">const&lt;/span> &lt;span style="color:#58a1dd">charT&lt;/span>&lt;span style="color:#ff636f">*&lt;/span> &lt;span style="color:#58a1dd">s&lt;/span>, &lt;span style="color:#58a1dd">size_type&lt;/span> &lt;span style="color:#58a1dd">pos&lt;/span>, &lt;span style="color:#58a1dd">size_type&lt;/span> &lt;span style="color:#58a1dd">n&lt;/span>) &lt;span style="color:#ff636f">const&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">constexpr&lt;/span> &lt;span style="color:#58a1dd">size_type&lt;/span> &lt;span style="color:#58a1dd">find_first_not_of&lt;/span>(&lt;span style="color:#ff636f">const&lt;/span> &lt;span style="color:#58a1dd">charT&lt;/span>&lt;span style="color:#ff636f">*&lt;/span> &lt;span style="color:#58a1dd">s&lt;/span>, &lt;span style="color:#58a1dd">size_type&lt;/span> &lt;span style="color:#58a1dd">pos&lt;/span> &lt;span style="color:#ff636f">=&lt;/span> &lt;span style="color:#a6be9d">0&lt;/span>) &lt;span style="color:#ff636f">const&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">constexpr&lt;/span> &lt;span style="color:#58a1dd">size_type&lt;/span> &lt;span style="color:#58a1dd">find_last_not_of&lt;/span>(&lt;span style="color:#58a1dd">basic_string_view&lt;/span> &lt;span style="color:#58a1dd">s&lt;/span>, &lt;span style="color:#58a1dd">size_type&lt;/span> &lt;span style="color:#58a1dd">pos&lt;/span> &lt;span style="color:#ff636f">=&lt;/span> &lt;span style="color:#58a1dd">npos&lt;/span>) &lt;span style="color:#ff636f">const&lt;/span> &lt;span style="color:#ff636f">noexcept&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">constexpr&lt;/span> &lt;span style="color:#58a1dd">size_type&lt;/span> &lt;span style="color:#58a1dd">find_last_not_of&lt;/span>(&lt;span style="color:#58a1dd">charT&lt;/span> &lt;span style="color:#58a1dd">c&lt;/span>, &lt;span style="color:#58a1dd">size_type&lt;/span> &lt;span style="color:#58a1dd">pos&lt;/span> &lt;span style="color:#ff636f">=&lt;/span> &lt;span style="color:#58a1dd">npos&lt;/span>) &lt;span style="color:#ff636f">const&lt;/span> &lt;span style="color:#ff636f">noexcept&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">constexpr&lt;/span> &lt;span style="color:#58a1dd">size_type&lt;/span> &lt;span style="color:#58a1dd">find_last_not_of&lt;/span>(&lt;span style="color:#ff636f">const&lt;/span> &lt;span style="color:#58a1dd">charT&lt;/span>&lt;span style="color:#ff636f">*&lt;/span> &lt;span style="color:#58a1dd">s&lt;/span>, &lt;span style="color:#58a1dd">size_type&lt;/span> &lt;span style="color:#58a1dd">pos&lt;/span>, &lt;span style="color:#58a1dd">size_type&lt;/span> &lt;span style="color:#58a1dd">n&lt;/span>) &lt;span style="color:#ff636f">const&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">constexpr&lt;/span> &lt;span style="color:#58a1dd">size_type&lt;/span> &lt;span style="color:#58a1dd">find_last_not_of&lt;/span>(&lt;span style="color:#ff636f">const&lt;/span> &lt;span style="color:#58a1dd">charT&lt;/span>&lt;span style="color:#ff636f">*&lt;/span> &lt;span style="color:#58a1dd">s&lt;/span>, &lt;span style="color:#58a1dd">size_type&lt;/span> &lt;span style="color:#58a1dd">pos&lt;/span> &lt;span style="color:#ff636f">=&lt;/span> &lt;span style="color:#58a1dd">npos&lt;/span>) &lt;span style="color:#ff636f">const&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">constexpr&lt;/span> &lt;span style="color:#ff636f">bool&lt;/span> &lt;span style="color:#58a1dd">starts_with&lt;/span>(&lt;span style="color:#58a1dd">basic_string_view&lt;/span> &lt;span style="color:#58a1dd">s&lt;/span>) &lt;span style="color:#ff636f">const&lt;/span> &lt;span style="color:#ff636f">noexcept&lt;/span>; &lt;span style="color:#828b96;font-style:italic">// C++2a
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span> &lt;span style="color:#ff636f">constexpr&lt;/span> &lt;span style="color:#ff636f">bool&lt;/span> &lt;span style="color:#58a1dd">starts_with&lt;/span>(&lt;span style="color:#58a1dd">charT&lt;/span> &lt;span style="color:#58a1dd">c&lt;/span>) &lt;span style="color:#ff636f">const&lt;/span> &lt;span style="color:#ff636f">noexcept&lt;/span>; &lt;span style="color:#828b96;font-style:italic">// C++2a
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span> &lt;span style="color:#ff636f">constexpr&lt;/span> &lt;span style="color:#ff636f">bool&lt;/span> &lt;span style="color:#58a1dd">starts_with&lt;/span>(&lt;span style="color:#ff636f">const&lt;/span> &lt;span style="color:#58a1dd">charT&lt;/span>&lt;span style="color:#ff636f">*&lt;/span> &lt;span style="color:#58a1dd">s&lt;/span>) &lt;span style="color:#ff636f">const&lt;/span>; &lt;span style="color:#828b96;font-style:italic">// C++2a
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span> &lt;span style="color:#ff636f">constexpr&lt;/span> &lt;span style="color:#ff636f">bool&lt;/span> &lt;span style="color:#58a1dd">ends_with&lt;/span>(&lt;span style="color:#58a1dd">basic_string_view&lt;/span> &lt;span style="color:#58a1dd">s&lt;/span>) &lt;span style="color:#ff636f">const&lt;/span> &lt;span style="color:#ff636f">noexcept&lt;/span>; &lt;span style="color:#828b96;font-style:italic">// C++2a
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span> &lt;span style="color:#ff636f">constexpr&lt;/span> &lt;span style="color:#ff636f">bool&lt;/span> &lt;span style="color:#58a1dd">ends_with&lt;/span>(&lt;span style="color:#58a1dd">charT&lt;/span> &lt;span style="color:#58a1dd">c&lt;/span>) &lt;span style="color:#ff636f">const&lt;/span> &lt;span style="color:#ff636f">noexcept&lt;/span>; &lt;span style="color:#828b96;font-style:italic">// C++2a
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span> &lt;span style="color:#ff636f">constexpr&lt;/span> &lt;span style="color:#ff636f">bool&lt;/span> &lt;span style="color:#58a1dd">ends_with&lt;/span>(&lt;span style="color:#ff636f">const&lt;/span> &lt;span style="color:#58a1dd">charT&lt;/span>&lt;span style="color:#ff636f">*&lt;/span> &lt;span style="color:#58a1dd">s&lt;/span>) &lt;span style="color:#ff636f">const&lt;/span>; &lt;span style="color:#828b96;font-style:italic">// C++2a
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span>&lt;span style="color:#ff636f">private&lt;/span>&lt;span style="color:#ff636f">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">const_pointer&lt;/span> &lt;span style="color:#58a1dd">data_&lt;/span>; &lt;span style="color:#828b96;font-style:italic">// exposition only
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span> &lt;span style="color:#58a1dd">size_type&lt;/span> &lt;span style="color:#58a1dd">size_&lt;/span>; &lt;span style="color:#828b96;font-style:italic">// exposition only
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span> };
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>由于 string_view 值被错误的转变为 &lt;code>char *&lt;/code>，而 C-Style 的字符串是 &lt;code>null-terminated string&lt;/code>，在处理 &lt;code>%s&lt;/code> 的时候无法正常解析到终止字符，出现溢出然后导致程序崩溃，同样，如果类型宽度不一致，比如 format 中需要 &lt;code>%lld&lt;/code>，而输入为 &lt;code>int&lt;/code> 同样容易出现问题，但这种问题可能更多的预期结果不一致。。&lt;/p>
&lt;p>在这个例子中，如果将 &lt;code>std::string_view&lt;/code> 改成 &lt;code>std::string&lt;/code>, clang 8.0.1 则会报告 std::string 不是 POD 类型的错误：&lt;/p>
&lt;pre tabindex="0">&lt;code>fuck2.cc:16:21: error: cannot pass object of non-trivial type &amp;#39;std::string&amp;#39; (aka &amp;#39;basic_string&amp;lt;char&amp;gt;&amp;#39;) through variadic
function; call will abort at runtime [-Wnon-pod-varargs]
dump(&amp;#34;hello %s\n&amp;#34;,name);
^
1 error generated.
&lt;/code>&lt;/pre>&lt;h2 id="安全格式化解决方案">安全格式化解决方案&lt;/h2>
&lt;h3 id="编译器的参数匹配检查">编译器的参数匹配检查&lt;/h3>
&lt;p>为了减少上面错误的发生，开发者增加了很多解决方案，比如，对于 C 或者 C++ 而言，可以使用特定的 &lt;code>Attributes&lt;/code> 限制函数的属性，当格式不匹配时，编译器会发出警告。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#1d2432;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c" data-lang="c">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">#ifdef __GNUC__
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span>&lt;span style="color:#ff636f">void&lt;/span> &lt;span style="color:#58a1dd">log_unlocked&lt;/span>(&lt;span style="color:#ff636f">int&lt;/span> &lt;span style="color:#58a1dd">level&lt;/span>, &lt;span style="color:#ff636f">const&lt;/span> &lt;span style="color:#ff636f">char&lt;/span> &lt;span style="color:#ff636f">*&lt;/span>&lt;span style="color:#58a1dd">fmt&lt;/span>, ...)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">__attribute__&lt;/span>((&lt;span style="color:#58a1dd">__format__&lt;/span>(&lt;span style="color:#58a1dd">__printf__&lt;/span>, &lt;span style="color:#a6be9d">2&lt;/span>, &lt;span style="color:#a6be9d">3&lt;/span>)));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">#else
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span>&lt;span style="color:#ff636f">void&lt;/span> &lt;span style="color:#58a1dd">log_unlocked&lt;/span>(&lt;span style="color:#ff636f">int&lt;/span> &lt;span style="color:#58a1dd">level&lt;/span>, &lt;span style="color:#ff636f">const&lt;/span> &lt;span style="color:#ff636f">char&lt;/span> &lt;span style="color:#ff636f">*&lt;/span>&lt;span style="color:#58a1dd">fmt&lt;/span>, ...);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">#endif
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>但这种方案受限于编译器，不是一个普遍方案。&lt;a href="https://clang.llvm.org/docs/AttributeReference.html#format">Clang&lt;/a> 保持了对 GCC 的兼容，可以使用上述 &lt;code>__attribute__&lt;/code>。而 MSVC 则可以使用 &lt;a href="https://docs.microsoft.com/en-us/previous-versions/visualstudio/visual-studio-2010/ms235402(v=vs.100)">SAL: &lt;code>_Printf_format_string_&lt;/code>&lt;/a>。&lt;/p>
&lt;h3 id="变参函数模板的辅助">变参函数模板的辅助&lt;/h3>
&lt;p>如果要在 C++ 当中使用类似的格式化函数方案，可以变参函数模板包装，cppwinrt 的作者 Kenny Kerr 就有一篇文章告诉人们改怎么做： &lt;a href="https://msdn.microsoft.com/en-us/magazine/dn913181.aspx">Windows with C++ - Using Printf with Modern C++&lt;/a>。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#1d2432;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c++" data-lang="c++">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff636f">template&lt;/span> &lt;span style="color:#ff636f">&amp;lt;&lt;/span>&lt;span style="color:#ff636f">typename&lt;/span> &lt;span style="color:#58a1dd">T&lt;/span>&lt;span style="color:#ff636f">&amp;gt;&lt;/span> &lt;span style="color:#58a1dd">T&lt;/span> &lt;span style="color:#58a1dd">Argument&lt;/span>(&lt;span style="color:#58a1dd">T&lt;/span> &lt;span style="color:#58a1dd">value&lt;/span>) &lt;span style="color:#ff636f">noexcept&lt;/span> { &lt;span style="color:#ff636f">return&lt;/span> &lt;span style="color:#58a1dd">value&lt;/span>; }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff636f">template&lt;/span> &lt;span style="color:#ff636f">&amp;lt;&lt;/span>&lt;span style="color:#ff636f">typename&lt;/span> &lt;span style="color:#58a1dd">T&lt;/span>&lt;span style="color:#ff636f">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#58a1dd">T&lt;/span> &lt;span style="color:#ff636f">const&lt;/span> &lt;span style="color:#ff636f">*&lt;/span>&lt;span style="color:#58a1dd">Argument&lt;/span>(&lt;span style="color:#58a1dd">std&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">basic_string&lt;/span>&lt;span style="color:#ff636f">&amp;lt;&lt;/span>&lt;span style="color:#58a1dd">T&lt;/span>&lt;span style="color:#ff636f">&amp;gt;&lt;/span> &lt;span style="color:#ff636f">const&lt;/span> &lt;span style="color:#ff636f">&amp;amp;&lt;/span>&lt;span style="color:#58a1dd">value&lt;/span>) &lt;span style="color:#ff636f">noexcept&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">return&lt;/span> &lt;span style="color:#58a1dd">value&lt;/span>.&lt;span style="color:#58a1dd">c_str&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff636f">template&lt;/span> &lt;span style="color:#ff636f">&amp;lt;&lt;/span>&lt;span style="color:#ff636f">typename&lt;/span>... &lt;span style="color:#58a1dd">Args&lt;/span>&lt;span style="color:#ff636f">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff636f">int&lt;/span> &lt;span style="color:#58a1dd">StringPrint&lt;/span>(&lt;span style="color:#ff636f">char&lt;/span> &lt;span style="color:#ff636f">*&lt;/span>&lt;span style="color:#ff636f">const&lt;/span> &lt;span style="color:#58a1dd">buffer&lt;/span>, &lt;span style="color:#58a1dd">size_t&lt;/span> &lt;span style="color:#ff636f">const&lt;/span> &lt;span style="color:#58a1dd">bufferCount&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">char&lt;/span> &lt;span style="color:#ff636f">const&lt;/span> &lt;span style="color:#ff636f">*&lt;/span>&lt;span style="color:#ff636f">const&lt;/span> &lt;span style="color:#58a1dd">format&lt;/span>, &lt;span style="color:#58a1dd">Args&lt;/span> &lt;span style="color:#ff636f">const&lt;/span> &lt;span style="color:#ff636f">&amp;amp;&lt;/span>... &lt;span style="color:#58a1dd">args&lt;/span>) &lt;span style="color:#ff636f">noexcept&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">int&lt;/span> &lt;span style="color:#ff636f">const&lt;/span> &lt;span style="color:#58a1dd">result&lt;/span> &lt;span style="color:#ff636f">=&lt;/span> &lt;span style="color:#58a1dd">snprintf&lt;/span>(&lt;span style="color:#58a1dd">buffer&lt;/span>, &lt;span style="color:#58a1dd">bufferCount&lt;/span>, &lt;span style="color:#58a1dd">format&lt;/span>, &lt;span style="color:#58a1dd">Argument&lt;/span>(&lt;span style="color:#58a1dd">args&lt;/span>)...);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">return&lt;/span> &lt;span style="color:#58a1dd">result&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff636f">template&lt;/span> &lt;span style="color:#ff636f">&amp;lt;&lt;/span>&lt;span style="color:#ff636f">typename&lt;/span>... &lt;span style="color:#58a1dd">Args&lt;/span>&lt;span style="color:#ff636f">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#58a1dd">std&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">string&lt;/span> &lt;span style="color:#58a1dd">StrFormat&lt;/span>(&lt;span style="color:#ff636f">const&lt;/span> &lt;span style="color:#ff636f">char&lt;/span> &lt;span style="color:#ff636f">*&lt;/span>&lt;span style="color:#58a1dd">format&lt;/span>, &lt;span style="color:#58a1dd">Args&lt;/span>... &lt;span style="color:#58a1dd">args&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">std&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">string&lt;/span> &lt;span style="color:#58a1dd">buffer&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">size_t&lt;/span> &lt;span style="color:#ff636f">const&lt;/span> &lt;span style="color:#58a1dd">size&lt;/span> &lt;span style="color:#ff636f">=&lt;/span> &lt;span style="color:#58a1dd">StringPrint&lt;/span>(&lt;span style="color:#ff636f">nullptr&lt;/span>, &lt;span style="color:#a6be9d">0&lt;/span>, &lt;span style="color:#58a1dd">format&lt;/span>, &lt;span style="color:#58a1dd">args&lt;/span>...);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">buffer&lt;/span>.&lt;span style="color:#58a1dd">resize&lt;/span>(&lt;span style="color:#58a1dd">size&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">StringPrint&lt;/span>(&lt;span style="color:#ff636f">&amp;amp;&lt;/span>&lt;span style="color:#58a1dd">buffer&lt;/span>[&lt;span style="color:#a6be9d">0&lt;/span>], &lt;span style="color:#58a1dd">buffer&lt;/span>.&lt;span style="color:#58a1dd">size&lt;/span>() &lt;span style="color:#ff636f">+&lt;/span> &lt;span style="color:#a6be9d">1&lt;/span>, &lt;span style="color:#58a1dd">format&lt;/span>, &lt;span style="color:#58a1dd">args&lt;/span>...);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">return&lt;/span> &lt;span style="color:#58a1dd">buffer&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>在格式化时将 &lt;code>std::string&lt;/code> 转变为了 &lt;code>const char *&lt;/code>，这种方案的缺陷有两处，第一 &lt;code>std::string&lt;/code> 是可以存在 &lt;code>\0&lt;/code> 这样的字符的，但是在这里却被截断，第二，&lt;code>std::string&lt;/code> 需要再次计算长度。&lt;/p>
&lt;h2 id="现代-c-格式化库">现代 C++ 格式化库&lt;/h2>
&lt;p>既然 C-Style 的格式化方案缺陷那么多，那么 C++ 开发者们也会不遗余力的去造轮子，实现自己的目标的，早期比如我刚学 C++ 那会，都是 &lt;code>iostream&lt;/code> 家族，字符串格式化可以使用 &lt;code>stringstream&lt;/code>，&lt;code>iostream&lt;/code> 这类方案一直被视为糟糕的设计，一来继承复杂，二来效率低。特别在 C++11 变参模板等特性出来后，饱受鄙视，因此也不是建议的格式化方案。现在 C++20 都快发布了，也涌现了一些更好的方案，好的格式化库有积极入标准的 &lt;a href="https://github.com/fmtlib/fmt">fmtlib&lt;/a>。还有 Facebook 的 C++ 标准库补充 &lt;a href="https://github.com/facebook/folly">folly&lt;/a> 也有一个 &lt;code>format&lt;/code> 实现。在 Google 里面，很多项目使用了 C++，他们也积累了一些 C++ 组件，后来开源了 &lt;a href="https://github.com/abseil/abseil-cpp">Abseil&lt;/a>，Abseil 中也有字符串格式化函数 &lt;code>absl::StrFormat&lt;/code>，&lt;code>absl::StrAppendFormat&lt;/code> ，当然还有一些实现比较慢，代码不太干净的，这里也就不多说了。&lt;/p>
&lt;h3 id="积极入标准的-fmtlib">积极入标准的 fmtlib&lt;/h3>
&lt;p>fmtlib 目前是冲着进入 C++ 标准去的，它支持两种风格，一个是类似 python 的风格：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#1d2432;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c++" data-lang="c++">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#58a1dd">fmt&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">format&lt;/span>(&lt;span style="color:#a6be9d">&amp;#34;The answer is {}.&amp;#34;&lt;/span>, &lt;span style="color:#a6be9d">42&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#58a1dd">fmt&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">print&lt;/span>(&lt;span style="color:#a6be9d">&amp;#34;I&amp;#39;d rather be {1} than {0}.&amp;#34;&lt;/span>, &lt;span style="color:#a6be9d">&amp;#34;right&amp;#34;&lt;/span>, &lt;span style="color:#a6be9d">&amp;#34;happy&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>这种风格还可以通过重载 &lt;code>format_to&lt;/code> 函数， 输出特定的对象。&lt;/p>
&lt;p>fmtlib 还支持 printf 的格式化风格，使用变参模板展开，是格式化安全的。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#1d2432;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c++" data-lang="c++">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#58a1dd">std&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">string&lt;/span> &lt;span style="color:#58a1dd">message&lt;/span> &lt;span style="color:#ff636f">=&lt;/span> &lt;span style="color:#58a1dd">fmt&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">sprintf&lt;/span>(&lt;span style="color:#a6be9d">&amp;#34;The answer is %d&amp;#34;&lt;/span>, &lt;span style="color:#a6be9d">42&lt;/span>);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>当类型不匹配时 fmtlib 会抛出异常，这是一种运行时行为。另外 fmtlib 还支持 &lt;code>wchar_t&lt;/code>，这在 &lt;code>Windows&lt;/code> 系统中比较重要。在格式化浮点类型时，可能会回退到 &lt;code>snprintf&lt;/code>。&lt;/p>
&lt;h3 id="facebook-folly-format">Facebook folly format&lt;/h3>
&lt;p>&lt;a href="https://github.com/facebook/folly/blob/master/folly/docs/Format.md">Folly format&lt;/a> 的风格类似于 python 的格式化风格，与 fmtlib 的第一种一致。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#1d2432;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c++" data-lang="c++">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff636f">using&lt;/span> &lt;span style="color:#58a1dd">folly&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">format&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff636f">using&lt;/span> &lt;span style="color:#58a1dd">folly&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">sformat&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff636f">using&lt;/span> &lt;span style="color:#58a1dd">folly&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">vformat&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff636f">using&lt;/span> &lt;span style="color:#58a1dd">folly&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">svformat&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">// Objects produced by format() can be streamed without creating
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">// an intermediary string; {} yields the next argument using default
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">// formatting.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span>&lt;span style="color:#58a1dd">std&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">cout&lt;/span> &lt;span style="color:#ff636f">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#58a1dd">format&lt;/span>(&lt;span style="color:#a6be9d">&amp;#34;The answers are {} and {}&amp;#34;&lt;/span>, &lt;span style="color:#a6be9d">23&lt;/span>, &lt;span style="color:#a6be9d">42&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">// =&amp;gt; &amp;#34;The answers are 23 and 42&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">// If you just want the string, though, you&amp;#39;re covered.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span>&lt;span style="color:#58a1dd">std&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">string&lt;/span> &lt;span style="color:#58a1dd">result&lt;/span> &lt;span style="color:#ff636f">=&lt;/span> &lt;span style="color:#58a1dd">sformat&lt;/span>(&lt;span style="color:#a6be9d">&amp;#34;The answers are {} and {}&amp;#34;&lt;/span>, &lt;span style="color:#a6be9d">23&lt;/span>, &lt;span style="color:#a6be9d">42&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">// =&amp;gt; &amp;#34;The answers are 23 and 42&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">// Arguments can be referenced out of order, even multiple times
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span>&lt;span style="color:#58a1dd">std&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">cout&lt;/span> &lt;span style="color:#ff636f">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#58a1dd">format&lt;/span>(&lt;span style="color:#a6be9d">&amp;#34;The answers are {1}, {0}, and {1} again&amp;#34;&lt;/span>, &lt;span style="color:#a6be9d">23&lt;/span>, &lt;span style="color:#a6be9d">42&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">// =&amp;gt; &amp;#34;The answers are 42, 23, and 42 again&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">// It&amp;#39;s perfectly fine to not reference all arguments
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span>&lt;span style="color:#58a1dd">std&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">cout&lt;/span> &lt;span style="color:#ff636f">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#58a1dd">format&lt;/span>(&lt;span style="color:#a6be9d">&amp;#34;The only answer is {1}&amp;#34;&lt;/span>, &lt;span style="color:#a6be9d">23&lt;/span>, &lt;span style="color:#a6be9d">42&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">// =&amp;gt; &amp;#34;The only answer is 42&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">// Values can be extracted from indexable containers
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">// (random-access sequences and integral-keyed maps), and also from
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">// string-keyed maps
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span>&lt;span style="color:#58a1dd">std&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">vector&lt;/span>&lt;span style="color:#ff636f">&amp;lt;&lt;/span>&lt;span style="color:#ff636f">int&lt;/span>&lt;span style="color:#ff636f">&amp;gt;&lt;/span> &lt;span style="color:#58a1dd">v&lt;/span> {&lt;span style="color:#a6be9d">23&lt;/span>, &lt;span style="color:#a6be9d">42&lt;/span>};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#58a1dd">std&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">map&lt;/span>&lt;span style="color:#ff636f">&amp;lt;&lt;/span>&lt;span style="color:#58a1dd">std&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">string&lt;/span>, &lt;span style="color:#58a1dd">std&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">string&lt;/span>&lt;span style="color:#ff636f">&amp;gt;&lt;/span> &lt;span style="color:#58a1dd">m&lt;/span> { {&lt;span style="color:#a6be9d">&amp;#34;what&amp;#34;&lt;/span>, &lt;span style="color:#a6be9d">&amp;#34;answer&amp;#34;&lt;/span>} };
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#58a1dd">std&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">cout&lt;/span> &lt;span style="color:#ff636f">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#58a1dd">format&lt;/span>(&lt;span style="color:#a6be9d">&amp;#34;The only {1[what]} is {0[1]}&amp;#34;&lt;/span>, &lt;span style="color:#58a1dd">v&lt;/span>, &lt;span style="color:#58a1dd">m&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">// =&amp;gt; &amp;#34;The only answer is 42&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">// If you only have one container argument, vformat makes the syntax simpler
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span>&lt;span style="color:#58a1dd">std&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">map&lt;/span>&lt;span style="color:#ff636f">&amp;lt;&lt;/span>&lt;span style="color:#58a1dd">std&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">string&lt;/span>, &lt;span style="color:#58a1dd">std&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">string&lt;/span>&lt;span style="color:#ff636f">&amp;gt;&lt;/span> &lt;span style="color:#58a1dd">m&lt;/span> { {&lt;span style="color:#a6be9d">&amp;#34;what&amp;#34;&lt;/span>, &lt;span style="color:#a6be9d">&amp;#34;answer&amp;#34;&lt;/span>}, {&lt;span style="color:#a6be9d">&amp;#34;value&amp;#34;&lt;/span>, &lt;span style="color:#a6be9d">&amp;#34;42&amp;#34;&lt;/span>} };
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#58a1dd">std&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">cout&lt;/span> &lt;span style="color:#ff636f">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#58a1dd">vformat&lt;/span>(&lt;span style="color:#a6be9d">&amp;#34;The only {what} is {value}&amp;#34;&lt;/span>, &lt;span style="color:#58a1dd">m&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">// =&amp;gt; &amp;#34;The only answer is 42&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">// same as
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span>&lt;span style="color:#58a1dd">std&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">cout&lt;/span> &lt;span style="color:#ff636f">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#58a1dd">format&lt;/span>(&lt;span style="color:#a6be9d">&amp;#34;The only {0[what]} is {0[value]}&amp;#34;&lt;/span>, &lt;span style="color:#58a1dd">m&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">// =&amp;gt; &amp;#34;The only answer is 42&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">// And if you just want the string,
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span>&lt;span style="color:#58a1dd">std&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">string&lt;/span> &lt;span style="color:#58a1dd">result&lt;/span> &lt;span style="color:#ff636f">=&lt;/span> &lt;span style="color:#58a1dd">svformat&lt;/span>(&lt;span style="color:#a6be9d">&amp;#34;The only {what} is {value}&amp;#34;&lt;/span>, &lt;span style="color:#58a1dd">m&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">// =&amp;gt; &amp;#34;The only answer is 42&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span>&lt;span style="color:#58a1dd">std&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">string&lt;/span> &lt;span style="color:#58a1dd">result&lt;/span> &lt;span style="color:#ff636f">=&lt;/span> &lt;span style="color:#58a1dd">sformat&lt;/span>(&lt;span style="color:#a6be9d">&amp;#34;The only {0[what]} is {0[value]}&amp;#34;&lt;/span>, &lt;span style="color:#58a1dd">m&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">// =&amp;gt; &amp;#34;The only answer is 42&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">// {} works for vformat too
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span>&lt;span style="color:#58a1dd">std&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">vector&lt;/span>&lt;span style="color:#ff636f">&amp;lt;&lt;/span>&lt;span style="color:#ff636f">int&lt;/span>&lt;span style="color:#ff636f">&amp;gt;&lt;/span> &lt;span style="color:#58a1dd">v&lt;/span> {&lt;span style="color:#a6be9d">42&lt;/span>, &lt;span style="color:#a6be9d">23&lt;/span>};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#58a1dd">std&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">cout&lt;/span> &lt;span style="color:#ff636f">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#58a1dd">vformat&lt;/span>(&lt;span style="color:#a6be9d">&amp;#34;{} {}&amp;#34;&lt;/span>, &lt;span style="color:#58a1dd">v&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">// =&amp;gt; &amp;#34;42 23&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">// format and vformat work with pairs and tuples
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span>&lt;span style="color:#58a1dd">std&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">tuple&lt;/span>&lt;span style="color:#ff636f">&amp;lt;&lt;/span>&lt;span style="color:#ff636f">int&lt;/span>, &lt;span style="color:#58a1dd">std&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">string&lt;/span>, &lt;span style="color:#ff636f">int&lt;/span>&lt;span style="color:#ff636f">&amp;gt;&lt;/span> &lt;span style="color:#58a1dd">t&lt;/span> {&lt;span style="color:#a6be9d">42&lt;/span>, &lt;span style="color:#a6be9d">&amp;#34;hello&amp;#34;&lt;/span>, &lt;span style="color:#a6be9d">23&lt;/span>};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#58a1dd">std&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">cout&lt;/span> &lt;span style="color:#ff636f">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#58a1dd">vformat&lt;/span>(&lt;span style="color:#a6be9d">&amp;#34;{0} {2} {1}&amp;#34;&lt;/span>, &lt;span style="color:#58a1dd">t&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">// =&amp;gt; &amp;#34;42 23 hello&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">// Format supports width, alignment, arbitrary fill, and various
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">// format specifiers, with meanings similar to printf
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">// &amp;#34;X&amp;lt;10&amp;#34;: fill with &amp;#39;X&amp;#39;, left-align (&amp;#39;&amp;lt;&amp;#39;), width 10
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span>&lt;span style="color:#58a1dd">std&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">cout&lt;/span> &lt;span style="color:#ff636f">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#58a1dd">format&lt;/span>(&lt;span style="color:#a6be9d">&amp;#34;{:X&amp;lt;10} {}&amp;#34;&lt;/span>, &lt;span style="color:#a6be9d">&amp;#34;hello&amp;#34;&lt;/span>, &lt;span style="color:#a6be9d">&amp;#34;world&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">// =&amp;gt; &amp;#34;helloXXXXX world&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">// Field width may be a runtime value rather than part of the format string
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span>&lt;span style="color:#ff636f">int&lt;/span> &lt;span style="color:#58a1dd">x&lt;/span> &lt;span style="color:#ff636f">=&lt;/span> &lt;span style="color:#a6be9d">6&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#58a1dd">std&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">cout&lt;/span> &lt;span style="color:#ff636f">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#58a1dd">format&lt;/span>(&lt;span style="color:#a6be9d">&amp;#34;{:-^*}&amp;#34;&lt;/span>, &lt;span style="color:#58a1dd">x&lt;/span>, &lt;span style="color:#a6be9d">&amp;#34;hi&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">// =&amp;gt; &amp;#34;--hi--&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">// Explicit arguments work with dynamic field width, as long as indexes are
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">// given for both the value and the field width.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span>&lt;span style="color:#58a1dd">std&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">cout&lt;/span> &lt;span style="color:#ff636f">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#58a1dd">format&lt;/span>(&lt;span style="color:#a6be9d">&amp;#34;{2:+^*0}&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6be9d">9&lt;/span>, &lt;span style="color:#a6be9d">&amp;#34;unused&amp;#34;&lt;/span>, &lt;span style="color:#a6be9d">456&lt;/span>); &lt;span style="color:#828b96;font-style:italic">// =&amp;gt; &amp;#34;+++456+++&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">// Format supports printf-style format specifiers
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span>&lt;span style="color:#58a1dd">std&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">cout&lt;/span> &lt;span style="color:#ff636f">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#58a1dd">format&lt;/span>(&lt;span style="color:#a6be9d">&amp;#34;{0:05d} decimal = {0:04x} hex&amp;#34;&lt;/span>, &lt;span style="color:#a6be9d">42&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">// =&amp;gt; &amp;#34;00042 decimal = 002a hex&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">// Formatter objects may be written to a string using folly::to or
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">// folly::toAppend (see folly/Conv.h), or by calling their appendTo(),
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">// str(), and fbstr() methods
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span>&lt;span style="color:#58a1dd">std&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">string&lt;/span> &lt;span style="color:#58a1dd">s&lt;/span> &lt;span style="color:#ff636f">=&lt;/span> &lt;span style="color:#58a1dd">format&lt;/span>(&lt;span style="color:#a6be9d">&amp;#34;The only answer is {}&amp;#34;&lt;/span>, &lt;span style="color:#a6be9d">42&lt;/span>).&lt;span style="color:#58a1dd">str&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#58a1dd">std&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">cout&lt;/span> &lt;span style="color:#ff636f">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#58a1dd">s&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">// =&amp;gt; &amp;#34;The only answer is 42&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">// Decimal precision usage
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span>&lt;span style="color:#58a1dd">std&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">cout&lt;/span> &lt;span style="color:#ff636f">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#58a1dd">format&lt;/span>(&lt;span style="color:#a6be9d">&amp;#34;Only 2 decimals is {:.2f}&amp;#34;&lt;/span>, &lt;span style="color:#a6be9d">23.34134534535&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">// =&amp;gt; &amp;#34;Only 2 decimals is 23.34&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>但 Folly 的构建是个重量级的活动，所以像我这样的开发者一般是不会采用 folly 的。虽然 folly 侧重与 Linux ，但目前可以构建为 Windows x64 目标，使用 vcpkg 亦可安装。&lt;/p>
&lt;h3 id="google-abseil-strformat">Google Abseil StrFormat&lt;/h3>
&lt;p>在 GNK 项目中，我曾使用 fmtlib，但 clang-tidy 老是警告没有捕获异常，添加异常捕获，代码繁琐不整洁，我在考察 Abseil 之后，发现使用体验要优于 fmtlib，就将其切换到 Abseil 了。&lt;br>
Abseil StrFormat 只支持 C-Style 的格式化风格，格式化支持的类型可以查看如下注释：&lt;/p>
&lt;pre tabindex="0">&lt;code>// In specific, the `FormatSpec` supports the following type specifiers:
// * `c` for characters
// * `s` for strings
// * `d` or `i` for integers
// * `o` for unsigned integer conversions into octal
// * `x` or `X` for unsigned integer conversions into hex
// * `u` for unsigned integers
// * `f` or `F` for floating point values into decimal notation
// * `e` or `E` for floating point values into exponential notation
// * `a` or `A` for floating point values into hex exponential notation
// * `g` or `G` for floating point values into decimal or exponential
// notation based on their precision
// * `p` for pointer address values
// * `n` for the special case of writing out the number of characters
// written to this point. The resulting value must be captured within an
// `absl::FormatCountCapture` type.
//
// NOTE: `o`, `x\X` and `u` will convert signed values to their unsigned
// counterpart before formatting.
//
// Examples:
// &amp;#34;%c&amp;#34;, &amp;#39;a&amp;#39; -&amp;gt; &amp;#34;a&amp;#34;
// &amp;#34;%c&amp;#34;, 32 -&amp;gt; &amp;#34; &amp;#34;
// &amp;#34;%s&amp;#34;, &amp;#34;C&amp;#34; -&amp;gt; &amp;#34;C&amp;#34;
// &amp;#34;%s&amp;#34;, std::string(&amp;#34;C++&amp;#34;) -&amp;gt; &amp;#34;C++&amp;#34;
// &amp;#34;%d&amp;#34;, -10 -&amp;gt; &amp;#34;-10&amp;#34;
// &amp;#34;%o&amp;#34;, 10 -&amp;gt; &amp;#34;12&amp;#34;
// &amp;#34;%x&amp;#34;, 16 -&amp;gt; &amp;#34;10&amp;#34;
// &amp;#34;%f&amp;#34;, 123456789 -&amp;gt; &amp;#34;123456789.000000&amp;#34;
// &amp;#34;%e&amp;#34;, .01 -&amp;gt; &amp;#34;1.00000e-2&amp;#34;
// &amp;#34;%a&amp;#34;, -3.0 -&amp;gt; &amp;#34;-0x1.8p+1&amp;#34;
// &amp;#34;%g&amp;#34;, .01 -&amp;gt; &amp;#34;1e-2&amp;#34;
// &amp;#34;%p&amp;#34;, *int -&amp;gt; &amp;#34;0x7ffdeb6ad2a4&amp;#34;
//
// int n = 0;
// std::string s = absl::StrFormat(
// &amp;#34;%s%d%n&amp;#34;, &amp;#34;hello&amp;#34;, 123, absl::FormatCountCapture(&amp;amp;n));
// EXPECT_EQ(8, n);
//
// The `FormatSpec` intrinsically supports all of these fundamental C++ types:
//
// * Characters: `char`, `signed char`, `unsigned char`
// * Integers: `int`, `short`, `unsigned short`, `unsigned`, `long`,
// `unsigned long`, `long long`, `unsigned long long`
// * Floating-point: `float`, `double`, `long double`
//
// However, in the `str_format` library, a format conversion specifies a broader
// C++ conceptual category instead of an exact type. For example, `%s` binds to
// any string-like argument, so `std::string`, `absl::string_view`, and
// `const char*` are all accepted. Likewise, `%d` accepts any integer-like
// argument, etc.
&lt;/code>&lt;/pre>&lt;p>Abseil 支持如下函数：&lt;/p>
&lt;ul>
&lt;li>StrFormat&lt;/li>
&lt;li>StrAppendFormat&lt;/li>
&lt;li>StreamFormat&lt;/li>
&lt;li>PrintF&lt;/li>
&lt;li>FPrintF&lt;/li>
&lt;li>SNPrintF&lt;/li>
&lt;/ul>
&lt;p>我们在实现日志库时，可以使用 &lt;code>StrFormat&lt;/code> 格式化日志级别，时间等信息，然后使用 &lt;code>StrAppendFormat&lt;/code> 格式化日志内容，这比 fmtlib 要方便的多。Abseil StrFormat 使用编译期检查取代运行时异常，这是让我选择的主要原因。配合 &lt;code>absl::string_view&lt;/code> 在 GNK 一个 C++14 项目中，C++17 的使用体验非常好，字符串内存分配也减少了很多。&lt;br>
如果在 Windows 环境 &lt;code>wchar_t&lt;/code> 编码环境使用 Abseil 可能效果还不如 fmtlib。由于实现了编译期类型检查，代码还是比较复杂，如果要将 Abseil StrFormat 剥离出来还比较麻烦。&lt;/p>
&lt;h2 id="字符串去格式化">字符串去格式化&lt;/h2>
&lt;p>如果我们使用字符串连接取代字符串格式化，字符串格式化问题则会少很多。在 Abseil 之中，有 StrCat 和 Subsitute 方案，可以连接或者组装字符串。&lt;/p>
&lt;h3 id="substitute">Substitute&lt;/h3>
&lt;p>实际上 &lt;a href="https://github.com/abseil/abseil-cpp/blob/master/absl/strings/substitute.h">Subsitute&lt;/a> 类似 python 格式化风格，但参数只支持 0～9 个：&lt;/p>
&lt;pre tabindex="0">&lt;code>auto s=Substitute(&amp;#34;$1 purchased $0 $2. Thanks $1!&amp;#34;, 5, &amp;#34;Bob&amp;#34;, &amp;#34;Apples&amp;#34;);
&lt;/code>&lt;/pre>&lt;p>实现 Subsitute 的关键是遍历格式化参数，解析到 &lt;code>$&lt;/code> 后获得参数位置，然后将特定的参数转变为 &lt;code>Arg&lt;/code>，Arg 类型重载支持不同的基本类型，以及字符串类型，将其转变为 &lt;code>absl::string_view&lt;/code> 数组，然后由 &lt;code>SubstituteAndAppendArray&lt;/code> 拼接在一起。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#1d2432;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c++" data-lang="c++">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff636f">class&lt;/span> &lt;span style="color:#58a1dd">Arg&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">public&lt;/span>&lt;span style="color:#ff636f">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#828b96;font-style:italic">// Overloads for std::string-y things
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span> &lt;span style="color:#828b96;font-style:italic">//
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span> &lt;span style="color:#828b96;font-style:italic">// Explicitly overload `const char*` so the compiler doesn&amp;#39;t cast to `bool`.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span> &lt;span style="color:#58a1dd">Arg&lt;/span>(&lt;span style="color:#ff636f">const&lt;/span> &lt;span style="color:#ff636f">char&lt;/span>&lt;span style="color:#ff636f">*&lt;/span> &lt;span style="color:#58a1dd">value&lt;/span>) &lt;span style="color:#828b96;font-style:italic">// NOLINT(runtime/explicit)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span> &lt;span style="color:#ff636f">:&lt;/span> &lt;span style="color:#58a1dd">piece_&lt;/span>(&lt;span style="color:#58a1dd">absl&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">NullSafeStringView&lt;/span>(&lt;span style="color:#58a1dd">value&lt;/span>)) {}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">template&lt;/span> &lt;span style="color:#ff636f">&amp;lt;&lt;/span>&lt;span style="color:#ff636f">typename&lt;/span> &lt;span style="color:#58a1dd">Allocator&lt;/span>&lt;span style="color:#ff636f">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">Arg&lt;/span>( &lt;span style="color:#828b96;font-style:italic">// NOLINT
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span> &lt;span style="color:#ff636f">const&lt;/span> &lt;span style="color:#58a1dd">std&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">basic_string&lt;/span>&lt;span style="color:#ff636f">&amp;lt;&lt;/span>&lt;span style="color:#ff636f">char&lt;/span>, &lt;span style="color:#58a1dd">std&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">char_traits&lt;/span>&lt;span style="color:#ff636f">&amp;lt;&lt;/span>&lt;span style="color:#ff636f">char&lt;/span>&lt;span style="color:#ff636f">&amp;gt;&lt;/span>, &lt;span style="color:#58a1dd">Allocator&lt;/span>&lt;span style="color:#ff636f">&amp;gt;&amp;amp;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">value&lt;/span>) &lt;span style="color:#ff636f">noexcept&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">:&lt;/span> &lt;span style="color:#58a1dd">piece_&lt;/span>(&lt;span style="color:#58a1dd">value&lt;/span>) {}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">Arg&lt;/span>(&lt;span style="color:#58a1dd">absl&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">string_view&lt;/span> &lt;span style="color:#58a1dd">value&lt;/span>) &lt;span style="color:#828b96;font-style:italic">// NOLINT(runtime/explicit)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span> &lt;span style="color:#ff636f">:&lt;/span> &lt;span style="color:#58a1dd">piece_&lt;/span>(&lt;span style="color:#58a1dd">value&lt;/span>) {}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#828b96;font-style:italic">// Overloads for primitives
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span> &lt;span style="color:#828b96;font-style:italic">//
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span> &lt;span style="color:#828b96;font-style:italic">// No overloads are available for signed and unsigned char because if people
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span> &lt;span style="color:#828b96;font-style:italic">// are explicitly declaring their chars as signed or unsigned then they are
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span> &lt;span style="color:#828b96;font-style:italic">// probably using them as 8-bit integers and would probably prefer an integer
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span> &lt;span style="color:#828b96;font-style:italic">// representation. However, we can&amp;#39;t really know, so we make the caller decide
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span> &lt;span style="color:#828b96;font-style:italic">// what to do.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span> &lt;span style="color:#58a1dd">Arg&lt;/span>(&lt;span style="color:#ff636f">char&lt;/span> &lt;span style="color:#58a1dd">value&lt;/span>) &lt;span style="color:#828b96;font-style:italic">// NOLINT(runtime/explicit)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span> &lt;span style="color:#ff636f">:&lt;/span> &lt;span style="color:#58a1dd">piece_&lt;/span>(&lt;span style="color:#58a1dd">scratch_&lt;/span>, &lt;span style="color:#a6be9d">1&lt;/span>) { &lt;span style="color:#58a1dd">scratch_&lt;/span>[&lt;span style="color:#a6be9d">0&lt;/span>] &lt;span style="color:#ff636f">=&lt;/span> &lt;span style="color:#58a1dd">value&lt;/span>; }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">Arg&lt;/span>(&lt;span style="color:#ff636f">short&lt;/span> &lt;span style="color:#58a1dd">value&lt;/span>) &lt;span style="color:#828b96;font-style:italic">// NOLINT(*)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span> &lt;span style="color:#ff636f">:&lt;/span> &lt;span style="color:#58a1dd">piece_&lt;/span>(&lt;span style="color:#58a1dd">scratch_&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">numbers_internal&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">FastIntToBuffer&lt;/span>(&lt;span style="color:#58a1dd">value&lt;/span>, &lt;span style="color:#58a1dd">scratch_&lt;/span>) &lt;span style="color:#ff636f">-&lt;/span> &lt;span style="color:#58a1dd">scratch_&lt;/span>) {}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">Arg&lt;/span>(&lt;span style="color:#ff636f">unsigned&lt;/span> &lt;span style="color:#ff636f">short&lt;/span> &lt;span style="color:#58a1dd">value&lt;/span>) &lt;span style="color:#828b96;font-style:italic">// NOLINT(*)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span> &lt;span style="color:#ff636f">:&lt;/span> &lt;span style="color:#58a1dd">piece_&lt;/span>(&lt;span style="color:#58a1dd">scratch_&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">numbers_internal&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">FastIntToBuffer&lt;/span>(&lt;span style="color:#58a1dd">value&lt;/span>, &lt;span style="color:#58a1dd">scratch_&lt;/span>) &lt;span style="color:#ff636f">-&lt;/span> &lt;span style="color:#58a1dd">scratch_&lt;/span>) {}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">Arg&lt;/span>(&lt;span style="color:#ff636f">int&lt;/span> &lt;span style="color:#58a1dd">value&lt;/span>) &lt;span style="color:#828b96;font-style:italic">// NOLINT(runtime/explicit)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span> &lt;span style="color:#ff636f">:&lt;/span> &lt;span style="color:#58a1dd">piece_&lt;/span>(&lt;span style="color:#58a1dd">scratch_&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">numbers_internal&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">FastIntToBuffer&lt;/span>(&lt;span style="color:#58a1dd">value&lt;/span>, &lt;span style="color:#58a1dd">scratch_&lt;/span>) &lt;span style="color:#ff636f">-&lt;/span> &lt;span style="color:#58a1dd">scratch_&lt;/span>) {}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">Arg&lt;/span>(&lt;span style="color:#ff636f">unsigned&lt;/span> &lt;span style="color:#ff636f">int&lt;/span> &lt;span style="color:#58a1dd">value&lt;/span>) &lt;span style="color:#828b96;font-style:italic">// NOLINT(runtime/explicit)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span> &lt;span style="color:#ff636f">:&lt;/span> &lt;span style="color:#58a1dd">piece_&lt;/span>(&lt;span style="color:#58a1dd">scratch_&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">numbers_internal&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">FastIntToBuffer&lt;/span>(&lt;span style="color:#58a1dd">value&lt;/span>, &lt;span style="color:#58a1dd">scratch_&lt;/span>) &lt;span style="color:#ff636f">-&lt;/span> &lt;span style="color:#58a1dd">scratch_&lt;/span>) {}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">Arg&lt;/span>(&lt;span style="color:#ff636f">long&lt;/span> &lt;span style="color:#58a1dd">value&lt;/span>) &lt;span style="color:#828b96;font-style:italic">// NOLINT(*)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span> &lt;span style="color:#ff636f">:&lt;/span> &lt;span style="color:#58a1dd">piece_&lt;/span>(&lt;span style="color:#58a1dd">scratch_&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">numbers_internal&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">FastIntToBuffer&lt;/span>(&lt;span style="color:#58a1dd">value&lt;/span>, &lt;span style="color:#58a1dd">scratch_&lt;/span>) &lt;span style="color:#ff636f">-&lt;/span> &lt;span style="color:#58a1dd">scratch_&lt;/span>) {}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">Arg&lt;/span>(&lt;span style="color:#ff636f">unsigned&lt;/span> &lt;span style="color:#ff636f">long&lt;/span> &lt;span style="color:#58a1dd">value&lt;/span>) &lt;span style="color:#828b96;font-style:italic">// NOLINT(*)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span> &lt;span style="color:#ff636f">:&lt;/span> &lt;span style="color:#58a1dd">piece_&lt;/span>(&lt;span style="color:#58a1dd">scratch_&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">numbers_internal&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">FastIntToBuffer&lt;/span>(&lt;span style="color:#58a1dd">value&lt;/span>, &lt;span style="color:#58a1dd">scratch_&lt;/span>) &lt;span style="color:#ff636f">-&lt;/span> &lt;span style="color:#58a1dd">scratch_&lt;/span>) {}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">Arg&lt;/span>(&lt;span style="color:#ff636f">long&lt;/span> &lt;span style="color:#ff636f">long&lt;/span> &lt;span style="color:#58a1dd">value&lt;/span>) &lt;span style="color:#828b96;font-style:italic">// NOLINT(*)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span> &lt;span style="color:#ff636f">:&lt;/span> &lt;span style="color:#58a1dd">piece_&lt;/span>(&lt;span style="color:#58a1dd">scratch_&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">numbers_internal&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">FastIntToBuffer&lt;/span>(&lt;span style="color:#58a1dd">value&lt;/span>, &lt;span style="color:#58a1dd">scratch_&lt;/span>) &lt;span style="color:#ff636f">-&lt;/span> &lt;span style="color:#58a1dd">scratch_&lt;/span>) {}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">Arg&lt;/span>(&lt;span style="color:#ff636f">unsigned&lt;/span> &lt;span style="color:#ff636f">long&lt;/span> &lt;span style="color:#ff636f">long&lt;/span> &lt;span style="color:#58a1dd">value&lt;/span>) &lt;span style="color:#828b96;font-style:italic">// NOLINT(*)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span> &lt;span style="color:#ff636f">:&lt;/span> &lt;span style="color:#58a1dd">piece_&lt;/span>(&lt;span style="color:#58a1dd">scratch_&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">numbers_internal&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">FastIntToBuffer&lt;/span>(&lt;span style="color:#58a1dd">value&lt;/span>, &lt;span style="color:#58a1dd">scratch_&lt;/span>) &lt;span style="color:#ff636f">-&lt;/span> &lt;span style="color:#58a1dd">scratch_&lt;/span>) {}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">Arg&lt;/span>(&lt;span style="color:#ff636f">float&lt;/span> &lt;span style="color:#58a1dd">value&lt;/span>) &lt;span style="color:#828b96;font-style:italic">// NOLINT(runtime/explicit)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span> &lt;span style="color:#ff636f">:&lt;/span> &lt;span style="color:#58a1dd">piece_&lt;/span>(&lt;span style="color:#58a1dd">scratch_&lt;/span>, &lt;span style="color:#58a1dd">numbers_internal&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">SixDigitsToBuffer&lt;/span>(&lt;span style="color:#58a1dd">value&lt;/span>, &lt;span style="color:#58a1dd">scratch_&lt;/span>)) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">Arg&lt;/span>(&lt;span style="color:#ff636f">double&lt;/span> &lt;span style="color:#58a1dd">value&lt;/span>) &lt;span style="color:#828b96;font-style:italic">// NOLINT(runtime/explicit)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span> &lt;span style="color:#ff636f">:&lt;/span> &lt;span style="color:#58a1dd">piece_&lt;/span>(&lt;span style="color:#58a1dd">scratch_&lt;/span>, &lt;span style="color:#58a1dd">numbers_internal&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">SixDigitsToBuffer&lt;/span>(&lt;span style="color:#58a1dd">value&lt;/span>, &lt;span style="color:#58a1dd">scratch_&lt;/span>)) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">Arg&lt;/span>(&lt;span style="color:#ff636f">bool&lt;/span> &lt;span style="color:#58a1dd">value&lt;/span>) &lt;span style="color:#828b96;font-style:italic">// NOLINT(runtime/explicit)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span> &lt;span style="color:#ff636f">:&lt;/span> &lt;span style="color:#58a1dd">piece_&lt;/span>(&lt;span style="color:#58a1dd">value&lt;/span> &lt;span style="color:#ff636f">?&lt;/span> &lt;span style="color:#a6be9d">&amp;#34;true&amp;#34;&lt;/span> &lt;span style="color:#ff636f">:&lt;/span> &lt;span style="color:#a6be9d">&amp;#34;false&amp;#34;&lt;/span>) {}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">Arg&lt;/span>(&lt;span style="color:#58a1dd">Hex&lt;/span> &lt;span style="color:#58a1dd">hex&lt;/span>); &lt;span style="color:#828b96;font-style:italic">// NOLINT(runtime/explicit)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span> &lt;span style="color:#58a1dd">Arg&lt;/span>(&lt;span style="color:#58a1dd">Dec&lt;/span> &lt;span style="color:#58a1dd">dec&lt;/span>); &lt;span style="color:#828b96;font-style:italic">// NOLINT(runtime/explicit)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#828b96;font-style:italic">// `void*` values, with the exception of `char*`, are printed as
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span> &lt;span style="color:#828b96;font-style:italic">// &amp;#34;0x&amp;lt;hex value&amp;gt;&amp;#34;. However, in the case of `nullptr`, &amp;#34;NULL&amp;#34; is printed.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span> &lt;span style="color:#58a1dd">Arg&lt;/span>(&lt;span style="color:#ff636f">const&lt;/span> &lt;span style="color:#ff636f">void&lt;/span>&lt;span style="color:#ff636f">*&lt;/span> &lt;span style="color:#58a1dd">value&lt;/span>); &lt;span style="color:#828b96;font-style:italic">// NOLINT(runtime/explicit)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">Arg&lt;/span>(&lt;span style="color:#ff636f">const&lt;/span> &lt;span style="color:#58a1dd">Arg&lt;/span>&lt;span style="color:#ff636f">&amp;amp;&lt;/span>) &lt;span style="color:#ff636f">=&lt;/span> &lt;span style="color:#ff636f">delete&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">Arg&lt;/span>&lt;span style="color:#ff636f">&amp;amp;&lt;/span> &lt;span style="color:#ff636f">operator&lt;/span>&lt;span style="color:#ff636f">=&lt;/span>(&lt;span style="color:#ff636f">const&lt;/span> &lt;span style="color:#58a1dd">Arg&lt;/span>&lt;span style="color:#ff636f">&amp;amp;&lt;/span>) &lt;span style="color:#ff636f">=&lt;/span> &lt;span style="color:#ff636f">delete&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">absl&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">string_view&lt;/span> &lt;span style="color:#58a1dd">piece&lt;/span>() &lt;span style="color:#ff636f">const&lt;/span> { &lt;span style="color:#ff636f">return&lt;/span> &lt;span style="color:#58a1dd">piece_&lt;/span>; }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">private&lt;/span>&lt;span style="color:#ff636f">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">absl&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">string_view&lt;/span> &lt;span style="color:#58a1dd">piece_&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">char&lt;/span> &lt;span style="color:#58a1dd">scratch_&lt;/span>[&lt;span style="color:#58a1dd">numbers_internal&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">kFastToBufferSize&lt;/span>];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>};
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>对于 &lt;code>double&lt;/code> 和 &lt;code>float&lt;/code> 则使用 &lt;code>SixDigitsToBuffer&lt;/code> 将浮点转变为 &lt;code>%g&lt;/code> 的格式。如果要实现固定长度输出，则可以使用 &lt;code>absl::Hex&lt;/code> &lt;code>absl::Dec&lt;/code> 。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#1d2432;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c++" data-lang="c++">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#58a1dd">absl&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">Substitute&lt;/span>(&lt;span style="color:#a6be9d">&amp;#34;$0$1$2$3$4 $5&amp;#34;&lt;/span>, &lt;span style="color:#828b96;font-style:italic">//
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span> &lt;span style="color:#58a1dd">absl&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">Dec&lt;/span>(&lt;span style="color:#a6be9d">0&lt;/span>), &lt;span style="color:#58a1dd">absl&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">Dec&lt;/span>(&lt;span style="color:#a6be9d">1&lt;/span>, &lt;span style="color:#58a1dd">absl&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">kSpacePad2&lt;/span>),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">absl&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">Dec&lt;/span>(&lt;span style="color:#a6be9d">0xf&lt;/span>, &lt;span style="color:#58a1dd">absl&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">kSpacePad2&lt;/span>),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">absl&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">Dec&lt;/span>(&lt;span style="color:#ff636f">int16_t&lt;/span>{&lt;span style="color:#ff636f">-&lt;/span>&lt;span style="color:#a6be9d">1&lt;/span>}, &lt;span style="color:#58a1dd">absl&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">kSpacePad5&lt;/span>),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">absl&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">Dec&lt;/span>(&lt;span style="color:#ff636f">int16_t&lt;/span>{&lt;span style="color:#ff636f">-&lt;/span>&lt;span style="color:#a6be9d">1&lt;/span>}, &lt;span style="color:#58a1dd">absl&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">kZeroPad5&lt;/span>),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">absl&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">Dec&lt;/span>(&lt;span style="color:#a6be9d">0x123456789abcdef&lt;/span>, &lt;span style="color:#58a1dd">absl&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">kZeroPad16&lt;/span>));
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>对于 bool 类型，则会输出 &lt;code>true&lt;/code> 或者 &lt;code>false&lt;/code>。&lt;br>
本质上来说 &lt;code>Substitute&lt;/code> 是一种简化的格式化输出方案，使用编译器重载解决了运行时检查类型的麻烦，因此，这种方案安全程度比较高，效率也非常不错。但 format 支持的参数个数比较有限。absl::Substitute 同样实现了编译器参数个数检查。&lt;/p>
&lt;h3 id="strcat">StrCat&lt;/h3>
&lt;p>在 Abseil 之中还有一个 &lt;a href="https://github.com/abseil/abseil-cpp/blob/master/absl/strings/str_cat.h">absl::StrCat&lt;/a> 用来取代字符串格式化。在 C 语言标准库中，&lt;code>strcat&lt;/code> 用于连接字符串，参数个数是固定的，并且只支持 C-Style 字符串，而 Abseil 团队利用 C++ 变参模板特性实现了现代的 StrCat.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#1d2432;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c++" data-lang="c++">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff636f">auto&lt;/span> &lt;span style="color:#58a1dd">result&lt;/span> &lt;span style="color:#ff636f">=&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">absl&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">StrCat&lt;/span>(&lt;span style="color:#a6be9d">1&lt;/span>, &lt;span style="color:#a6be9d">2&lt;/span>, &lt;span style="color:#a6be9d">3&lt;/span>, &lt;span style="color:#a6be9d">4&lt;/span>, &lt;span style="color:#a6be9d">5&lt;/span>, &lt;span style="color:#a6be9d">6&lt;/span>, &lt;span style="color:#a6be9d">7&lt;/span>, &lt;span style="color:#a6be9d">8&lt;/span>, &lt;span style="color:#a6be9d">9&lt;/span>, &lt;span style="color:#a6be9d">&amp;#34;a&amp;#34;&lt;/span>, &lt;span style="color:#a6be9d">&amp;#34;b&amp;#34;&lt;/span>, &lt;span style="color:#a6be9d">&amp;#34;c&amp;#34;&lt;/span>, &lt;span style="color:#a6be9d">&amp;#34;d&amp;#34;&lt;/span>, &lt;span style="color:#a6be9d">&amp;#34;e&amp;#34;&lt;/span>, &lt;span style="color:#a6be9d">&amp;#34;f&amp;#34;&lt;/span>, &lt;span style="color:#a6be9d">&amp;#34;g&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6be9d">&amp;#34;h&amp;#34;&lt;/span>, &lt;span style="color:#a6be9d">&amp;#34;i&amp;#34;&lt;/span>, &lt;span style="color:#a6be9d">&amp;#34;j&amp;#34;&lt;/span>, &lt;span style="color:#a6be9d">&amp;#34;k&amp;#34;&lt;/span>, &lt;span style="color:#a6be9d">&amp;#34;l&amp;#34;&lt;/span>, &lt;span style="color:#a6be9d">&amp;#34;m&amp;#34;&lt;/span>, &lt;span style="color:#a6be9d">&amp;#34;n&amp;#34;&lt;/span>, &lt;span style="color:#a6be9d">&amp;#34;o&amp;#34;&lt;/span>, &lt;span style="color:#a6be9d">&amp;#34;p&amp;#34;&lt;/span>, &lt;span style="color:#a6be9d">&amp;#34;q&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">// 123456789abcdefghijklmnopq
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>与 Subsititute 一样，StrCat 也是用了类似 &lt;code>Arg&lt;/code> 的 &lt;code>AlphaNum&lt;/code> 将字符串和基本类型按照原因（或者 Hex,Dec）拼接成特定的字符串，并且在拼接字符串时能够提前 resize 从而减少内存分配次数，达到优化的目的，在 GNK 的代码中，凡是需要连接字符串的操作，我们都使用 StrCat 来操作，避免使用 snprintf 或者 strcat 操作。
在 &lt;a href="https://github.com/M2Team/Privexec">Privexec&lt;/a>, &lt;a href="https://github.com/fstudio/clangbuilder">Clangbuilder&lt;/a> 和 &lt;a href="https://github.com/fcharlie/Planck">Planck&lt;/a> 当中，我借鉴 absl::StrCat 实现了一个宽字符版本的 &lt;a href="https://github.com/M2Team/Privexec/blob/master/include/strcat.hpp">&lt;code>base::StringCat&lt;/code>&lt;/a> 不支持 double/float，不支持 Hex，Dec ，仅支持其他基本类型和 &lt;code>char*&lt;/code> &lt;code>std::wstring_view&lt;/code> &lt;code>std::wstring&lt;/code>。&lt;/p>
&lt;h2 id="异步信号安全的字符串格式化">异步信号安全的字符串格式化&lt;/h2>
&lt;p>上述现代 C++ 格式化方案通常情况下令人满意，但是当我们需要实现一个异步信号安全的格式化输出方案时，则不得不重新打算，异步信号安全指的是在信号中断的回调函数中不得调用非异步安全的函数，由于信号随时可能发生，因此，在信号中断函数中必须不存在内存分配，不能拥有互斥锁等，在 Glibc 和 musl 之中，由于 snprintf 使用了文件对象和锁调用了 &lt;code>vfprintf&lt;/code> 则不是异步信号安全的，这很容易理解，由于 &lt;code>FILE&lt;/code> 使用了缓存，需要使用锁保证线程安全。在 OpenBSD 当中，snprintf 实现是异步信号安全的，在 Github 上有异步信号安全的 snprintf 实现，如 &lt;a href="https://github.com/weiss/c99-snprintf">c99-snprintf&lt;/a> 和 &lt;a href="https://github.com/idning/safe_snprintf">safe_snprintf&lt;/a>。前面所说的 &lt;code>ngx_snprintf&lt;/code> 也可以轻松的实现异步信号安全。&lt;/p>
&lt;p>在 absl::StrFormat 中，查看源码发现 &lt;code>absl::SNPrintF&lt;/code> 是没有内存分配的，但异步信号安全还有待考察。&lt;/p>
&lt;p>在 Chromium 项目中，也有一个基于现代 C++ 实现的异步信号安全的 &lt;a href="https://github.com/chromium/chromium/blob/master/base/strings/safe_sprintf.h">SafeSNPrintf&lt;/a>。在这个实现中，使用 union 包装变量，并增加类型信息，这种常见于 Json, Toml 等格式文件的解析。在格式化时，解析 format 字符串，期望的格式与输入的参数匹配类型，一旦类型匹配，则正常格式化，不匹配则退出，这种方案比 snprintf 要好的多，毕竟 snprintf 只预期输入格式正确。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#1d2432;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c++" data-lang="c++">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff636f">struct&lt;/span> &lt;span style="color:#58a1dd">Arg&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">enum&lt;/span> &lt;span style="color:#58a1dd">Type&lt;/span> { &lt;span style="color:#58a1dd">INT&lt;/span>, &lt;span style="color:#58a1dd">UINT&lt;/span>, &lt;span style="color:#58a1dd">STRING&lt;/span>, &lt;span style="color:#58a1dd">POINTER&lt;/span> };
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#828b96;font-style:italic">// Any integer-like value.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span> &lt;span style="color:#58a1dd">Arg&lt;/span>(&lt;span style="color:#ff636f">signed&lt;/span> &lt;span style="color:#ff636f">char&lt;/span> &lt;span style="color:#58a1dd">c&lt;/span>) &lt;span style="color:#ff636f">:&lt;/span> &lt;span style="color:#58a1dd">type&lt;/span>(&lt;span style="color:#58a1dd">INT&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">integer&lt;/span>.&lt;span style="color:#58a1dd">i&lt;/span> &lt;span style="color:#ff636f">=&lt;/span> &lt;span style="color:#58a1dd">c&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">integer&lt;/span>.&lt;span style="color:#58a1dd">width&lt;/span> &lt;span style="color:#ff636f">=&lt;/span> &lt;span style="color:#ff636f">sizeof&lt;/span>(&lt;span style="color:#ff636f">char&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">Arg&lt;/span>(&lt;span style="color:#ff636f">unsigned&lt;/span> &lt;span style="color:#ff636f">char&lt;/span> &lt;span style="color:#58a1dd">c&lt;/span>) &lt;span style="color:#ff636f">:&lt;/span> &lt;span style="color:#58a1dd">type&lt;/span>(&lt;span style="color:#58a1dd">UINT&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">integer&lt;/span>.&lt;span style="color:#58a1dd">i&lt;/span> &lt;span style="color:#ff636f">=&lt;/span> &lt;span style="color:#58a1dd">c&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">integer&lt;/span>.&lt;span style="color:#58a1dd">width&lt;/span> &lt;span style="color:#ff636f">=&lt;/span> &lt;span style="color:#ff636f">sizeof&lt;/span>(&lt;span style="color:#ff636f">char&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">Arg&lt;/span>(&lt;span style="color:#ff636f">signed&lt;/span> &lt;span style="color:#ff636f">short&lt;/span> &lt;span style="color:#58a1dd">j&lt;/span>) &lt;span style="color:#ff636f">:&lt;/span> &lt;span style="color:#58a1dd">type&lt;/span>(&lt;span style="color:#58a1dd">INT&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">integer&lt;/span>.&lt;span style="color:#58a1dd">i&lt;/span> &lt;span style="color:#ff636f">=&lt;/span> &lt;span style="color:#58a1dd">j&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">integer&lt;/span>.&lt;span style="color:#58a1dd">width&lt;/span> &lt;span style="color:#ff636f">=&lt;/span> &lt;span style="color:#ff636f">sizeof&lt;/span>(&lt;span style="color:#ff636f">short&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">Arg&lt;/span>(&lt;span style="color:#ff636f">unsigned&lt;/span> &lt;span style="color:#ff636f">short&lt;/span> &lt;span style="color:#58a1dd">j&lt;/span>) &lt;span style="color:#ff636f">:&lt;/span> &lt;span style="color:#58a1dd">type&lt;/span>(&lt;span style="color:#58a1dd">UINT&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">integer&lt;/span>.&lt;span style="color:#58a1dd">i&lt;/span> &lt;span style="color:#ff636f">=&lt;/span> &lt;span style="color:#58a1dd">j&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">integer&lt;/span>.&lt;span style="color:#58a1dd">width&lt;/span> &lt;span style="color:#ff636f">=&lt;/span> &lt;span style="color:#ff636f">sizeof&lt;/span>(&lt;span style="color:#ff636f">short&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">Arg&lt;/span>(&lt;span style="color:#ff636f">signed&lt;/span> &lt;span style="color:#ff636f">int&lt;/span> &lt;span style="color:#58a1dd">j&lt;/span>) &lt;span style="color:#ff636f">:&lt;/span> &lt;span style="color:#58a1dd">type&lt;/span>(&lt;span style="color:#58a1dd">INT&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">integer&lt;/span>.&lt;span style="color:#58a1dd">i&lt;/span> &lt;span style="color:#ff636f">=&lt;/span> &lt;span style="color:#58a1dd">j&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">integer&lt;/span>.&lt;span style="color:#58a1dd">width&lt;/span> &lt;span style="color:#ff636f">=&lt;/span> &lt;span style="color:#ff636f">sizeof&lt;/span>(&lt;span style="color:#ff636f">int&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">Arg&lt;/span>(&lt;span style="color:#ff636f">unsigned&lt;/span> &lt;span style="color:#ff636f">int&lt;/span> &lt;span style="color:#58a1dd">j&lt;/span>) &lt;span style="color:#ff636f">:&lt;/span> &lt;span style="color:#58a1dd">type&lt;/span>(&lt;span style="color:#58a1dd">UINT&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">integer&lt;/span>.&lt;span style="color:#58a1dd">i&lt;/span> &lt;span style="color:#ff636f">=&lt;/span> &lt;span style="color:#58a1dd">j&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">integer&lt;/span>.&lt;span style="color:#58a1dd">width&lt;/span> &lt;span style="color:#ff636f">=&lt;/span> &lt;span style="color:#ff636f">sizeof&lt;/span>(&lt;span style="color:#ff636f">int&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">Arg&lt;/span>(&lt;span style="color:#ff636f">signed&lt;/span> &lt;span style="color:#ff636f">long&lt;/span> &lt;span style="color:#58a1dd">j&lt;/span>) &lt;span style="color:#ff636f">:&lt;/span> &lt;span style="color:#58a1dd">type&lt;/span>(&lt;span style="color:#58a1dd">INT&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">integer&lt;/span>.&lt;span style="color:#58a1dd">i&lt;/span> &lt;span style="color:#ff636f">=&lt;/span> &lt;span style="color:#58a1dd">j&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">integer&lt;/span>.&lt;span style="color:#58a1dd">width&lt;/span> &lt;span style="color:#ff636f">=&lt;/span> &lt;span style="color:#ff636f">sizeof&lt;/span>(&lt;span style="color:#ff636f">long&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">Arg&lt;/span>(&lt;span style="color:#ff636f">unsigned&lt;/span> &lt;span style="color:#ff636f">long&lt;/span> &lt;span style="color:#58a1dd">j&lt;/span>) &lt;span style="color:#ff636f">:&lt;/span> &lt;span style="color:#58a1dd">type&lt;/span>(&lt;span style="color:#58a1dd">UINT&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">integer&lt;/span>.&lt;span style="color:#58a1dd">i&lt;/span> &lt;span style="color:#ff636f">=&lt;/span> &lt;span style="color:#58a1dd">j&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">integer&lt;/span>.&lt;span style="color:#58a1dd">width&lt;/span> &lt;span style="color:#ff636f">=&lt;/span> &lt;span style="color:#ff636f">sizeof&lt;/span>(&lt;span style="color:#ff636f">long&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">Arg&lt;/span>(&lt;span style="color:#ff636f">signed&lt;/span> &lt;span style="color:#ff636f">long&lt;/span> &lt;span style="color:#ff636f">long&lt;/span> &lt;span style="color:#58a1dd">j&lt;/span>) &lt;span style="color:#ff636f">:&lt;/span> &lt;span style="color:#58a1dd">type&lt;/span>(&lt;span style="color:#58a1dd">INT&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">integer&lt;/span>.&lt;span style="color:#58a1dd">i&lt;/span> &lt;span style="color:#ff636f">=&lt;/span> &lt;span style="color:#58a1dd">j&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">integer&lt;/span>.&lt;span style="color:#58a1dd">width&lt;/span> &lt;span style="color:#ff636f">=&lt;/span> &lt;span style="color:#ff636f">sizeof&lt;/span>(&lt;span style="color:#ff636f">long&lt;/span> &lt;span style="color:#ff636f">long&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">Arg&lt;/span>(&lt;span style="color:#ff636f">unsigned&lt;/span> &lt;span style="color:#ff636f">long&lt;/span> &lt;span style="color:#ff636f">long&lt;/span> &lt;span style="color:#58a1dd">j&lt;/span>) &lt;span style="color:#ff636f">:&lt;/span> &lt;span style="color:#58a1dd">type&lt;/span>(&lt;span style="color:#58a1dd">UINT&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">integer&lt;/span>.&lt;span style="color:#58a1dd">i&lt;/span> &lt;span style="color:#ff636f">=&lt;/span> &lt;span style="color:#58a1dd">j&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">integer&lt;/span>.&lt;span style="color:#58a1dd">width&lt;/span> &lt;span style="color:#ff636f">=&lt;/span> &lt;span style="color:#ff636f">sizeof&lt;/span>(&lt;span style="color:#ff636f">long&lt;/span> &lt;span style="color:#ff636f">long&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#828b96;font-style:italic">// A C-style text string.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span> &lt;span style="color:#58a1dd">Arg&lt;/span>(&lt;span style="color:#ff636f">const&lt;/span> &lt;span style="color:#ff636f">char&lt;/span>&lt;span style="color:#ff636f">*&lt;/span> &lt;span style="color:#58a1dd">s&lt;/span>) &lt;span style="color:#ff636f">:&lt;/span> &lt;span style="color:#58a1dd">str&lt;/span>(&lt;span style="color:#58a1dd">s&lt;/span>), &lt;span style="color:#58a1dd">type&lt;/span>(&lt;span style="color:#58a1dd">STRING&lt;/span>) { }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">Arg&lt;/span>(&lt;span style="color:#ff636f">char&lt;/span>&lt;span style="color:#ff636f">*&lt;/span> &lt;span style="color:#58a1dd">s&lt;/span>) &lt;span style="color:#ff636f">:&lt;/span> &lt;span style="color:#58a1dd">str&lt;/span>(&lt;span style="color:#58a1dd">s&lt;/span>), &lt;span style="color:#58a1dd">type&lt;/span>(&lt;span style="color:#58a1dd">STRING&lt;/span>) { }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#828b96;font-style:italic">// Any pointer value that can be cast to a &amp;#34;void*&amp;#34;.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span> &lt;span style="color:#ff636f">template&lt;/span>&lt;span style="color:#ff636f">&amp;lt;&lt;/span>&lt;span style="color:#ff636f">class&lt;/span> &lt;span style="color:#58a1dd">T&lt;/span>&lt;span style="color:#ff636f">&amp;gt;&lt;/span> &lt;span style="color:#58a1dd">Arg&lt;/span>(&lt;span style="color:#58a1dd">T&lt;/span>&lt;span style="color:#ff636f">*&lt;/span> &lt;span style="color:#58a1dd">p&lt;/span>) &lt;span style="color:#ff636f">:&lt;/span> &lt;span style="color:#58a1dd">ptr&lt;/span>((&lt;span style="color:#ff636f">void&lt;/span>&lt;span style="color:#ff636f">*&lt;/span>)&lt;span style="color:#58a1dd">p&lt;/span>), &lt;span style="color:#58a1dd">type&lt;/span>(&lt;span style="color:#58a1dd">POINTER&lt;/span>) { }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">union&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#828b96;font-style:italic">// An integer-like value.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span> &lt;span style="color:#ff636f">struct&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">int64_t&lt;/span> &lt;span style="color:#58a1dd">i&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">unsigned&lt;/span> &lt;span style="color:#ff636f">char&lt;/span> &lt;span style="color:#58a1dd">width&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } &lt;span style="color:#58a1dd">integer&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#828b96;font-style:italic">// A C-style text string.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span> &lt;span style="color:#ff636f">const&lt;/span> &lt;span style="color:#ff636f">char&lt;/span>&lt;span style="color:#ff636f">*&lt;/span> &lt;span style="color:#58a1dd">str&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#828b96;font-style:italic">// A pointer to an arbitrary object.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span> &lt;span style="color:#ff636f">const&lt;/span> &lt;span style="color:#ff636f">void&lt;/span>&lt;span style="color:#ff636f">*&lt;/span> &lt;span style="color:#58a1dd">ptr&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> };
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">const&lt;/span> &lt;span style="color:#ff636f">enum&lt;/span> &lt;span style="color:#58a1dd">Type&lt;/span> &lt;span style="color:#58a1dd">type&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>};
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>如果要实现 &lt;code>std::string&lt;/code> &lt;code>std::string_view&lt;/code> 的格式化，我们也可以在 union 中使用如下结构取代 &lt;code>const char* str&lt;/code>：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#1d2432;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c++" data-lang="c++">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff636f">struct&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">const&lt;/span> &lt;span style="color:#ff636f">char&lt;/span> &lt;span style="color:#ff636f">*&lt;/span>&lt;span style="color:#58a1dd">data&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">size_t&lt;/span> &lt;span style="color:#58a1dd">len&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}&lt;span style="color:#58a1dd">stringview&lt;/span>;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>这样的好处是 &lt;code>std::string/std::string_view&lt;/code> 不再需要计算长度。我们还可以使用 &lt;code>%v&lt;/code> 按照输入参数的类型自主格式化，这样就不存在类型不匹配了。&lt;/p>
&lt;h2 id="bela-strformat">Bela StrFormat&lt;/h2>
&lt;p>&lt;strong>2019-05-17 Update:&lt;/strong> 最近我编写了一个基于 C++17 的 Windows 系统上的工具库，叫 &lt;a href="https://github.com/fcharlie/bela">Bela&lt;/a>，Bela 学习了 &lt;code>Chromium SafeNPrintf&lt;/code>，实现了类型安全的字符串格式化，任意长度整型 &lt;code>%d&lt;/code>，字符串&lt;code>%s&lt;/code>, 浮点(float, double) &lt;code>%f&lt;/code>, 十六进制 &lt;code>%x&lt;/code> &lt;code>%X&lt;/code>，还有 &lt;code>%p&lt;/code> 输出指针。支持 Pading 输出。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#1d2432;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c++" data-lang="c++">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">// https://github.com/fcharlie/bela/blob/master/include/bela/fmt.hpp
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span>&lt;span style="color:#ff636f">template&lt;/span> &lt;span style="color:#ff636f">&amp;lt;&lt;/span>&lt;span style="color:#ff636f">typename&lt;/span>... &lt;span style="color:#58a1dd">Args&lt;/span>&lt;span style="color:#ff636f">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#58a1dd">ssize_t&lt;/span> &lt;span style="color:#58a1dd">StrFormat&lt;/span>(&lt;span style="color:#ff636f">wchar_t&lt;/span> &lt;span style="color:#ff636f">*&lt;/span>&lt;span style="color:#58a1dd">buf&lt;/span>, &lt;span style="color:#58a1dd">size_t&lt;/span> &lt;span style="color:#58a1dd">N&lt;/span>, &lt;span style="color:#ff636f">const&lt;/span> &lt;span style="color:#ff636f">wchar_t&lt;/span> &lt;span style="color:#ff636f">*&lt;/span>&lt;span style="color:#58a1dd">fmt&lt;/span>, &lt;span style="color:#58a1dd">Args&lt;/span>... &lt;span style="color:#58a1dd">args&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">const&lt;/span> &lt;span style="color:#58a1dd">format_internal&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">FormatArg&lt;/span> &lt;span style="color:#58a1dd">arg_array&lt;/span>[] &lt;span style="color:#ff636f">=&lt;/span> {&lt;span style="color:#58a1dd">args&lt;/span>...};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">return&lt;/span> &lt;span style="color:#58a1dd">format_internal&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">StrFormatInternal&lt;/span>(&lt;span style="color:#58a1dd">buf&lt;/span>, &lt;span style="color:#58a1dd">N&lt;/span>, &lt;span style="color:#58a1dd">fmt&lt;/span>, &lt;span style="color:#58a1dd">arg_array&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">sizeof&lt;/span>...(&lt;span style="color:#58a1dd">args&lt;/span>));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff636f">template&lt;/span> &lt;span style="color:#ff636f">&amp;lt;&lt;/span>&lt;span style="color:#58a1dd">size_t&lt;/span> &lt;span style="color:#58a1dd">N&lt;/span>, &lt;span style="color:#ff636f">typename&lt;/span>... &lt;span style="color:#58a1dd">Args&lt;/span>&lt;span style="color:#ff636f">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#58a1dd">ssize_t&lt;/span> &lt;span style="color:#58a1dd">StrFormat&lt;/span>(&lt;span style="color:#ff636f">wchar_t&lt;/span> (&lt;span style="color:#ff636f">&amp;amp;&lt;/span>&lt;span style="color:#58a1dd">buf&lt;/span>)[&lt;span style="color:#58a1dd">N&lt;/span>], &lt;span style="color:#ff636f">const&lt;/span> &lt;span style="color:#ff636f">wchar_t&lt;/span> &lt;span style="color:#ff636f">*&lt;/span>&lt;span style="color:#58a1dd">fmt&lt;/span>, &lt;span style="color:#58a1dd">Args&lt;/span>... &lt;span style="color:#58a1dd">args&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#828b96;font-style:italic">// Use Arg() object to record type information and then copy arguments to an
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span> &lt;span style="color:#828b96;font-style:italic">// array to make it easier to iterate over them.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span> &lt;span style="color:#ff636f">const&lt;/span> &lt;span style="color:#58a1dd">format_internal&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">FormatArg&lt;/span> &lt;span style="color:#58a1dd">arg_array&lt;/span>[] &lt;span style="color:#ff636f">=&lt;/span> {&lt;span style="color:#58a1dd">args&lt;/span>...};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">return&lt;/span> &lt;span style="color:#58a1dd">format_internal&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">StrFormatInternal&lt;/span>(&lt;span style="color:#58a1dd">buf&lt;/span>, &lt;span style="color:#58a1dd">N&lt;/span>, &lt;span style="color:#58a1dd">fmt&lt;/span>, &lt;span style="color:#58a1dd">arg_array&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">sizeof&lt;/span>...(&lt;span style="color:#58a1dd">args&lt;/span>));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff636f">template&lt;/span> &lt;span style="color:#ff636f">&amp;lt;&lt;/span>&lt;span style="color:#ff636f">typename&lt;/span>... &lt;span style="color:#58a1dd">Args&lt;/span>&lt;span style="color:#ff636f">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#58a1dd">std&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">wstring&lt;/span> &lt;span style="color:#58a1dd">StrFormat&lt;/span>(&lt;span style="color:#ff636f">const&lt;/span> &lt;span style="color:#ff636f">wchar_t&lt;/span> &lt;span style="color:#ff636f">*&lt;/span>&lt;span style="color:#58a1dd">fmt&lt;/span>, &lt;span style="color:#58a1dd">Args&lt;/span>... &lt;span style="color:#58a1dd">args&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">const&lt;/span> &lt;span style="color:#58a1dd">format_internal&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">FormatArg&lt;/span> &lt;span style="color:#58a1dd">arg_array&lt;/span>[] &lt;span style="color:#ff636f">=&lt;/span> {&lt;span style="color:#58a1dd">args&lt;/span>...};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">return&lt;/span> &lt;span style="color:#58a1dd">format_internal&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">StrFormatInternal&lt;/span>(&lt;span style="color:#58a1dd">fmt&lt;/span>, &lt;span style="color:#58a1dd">arg_array&lt;/span>, &lt;span style="color:#ff636f">sizeof&lt;/span>...(&lt;span style="color:#58a1dd">args&lt;/span>));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">// Fast-path when we don&amp;#39;t actually need to substitute any arguments.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span>&lt;span style="color:#58a1dd">ssize_t&lt;/span> &lt;span style="color:#58a1dd">StrFormat&lt;/span>(&lt;span style="color:#ff636f">wchar_t&lt;/span> &lt;span style="color:#ff636f">*&lt;/span>&lt;span style="color:#58a1dd">buf&lt;/span>, &lt;span style="color:#58a1dd">size_t&lt;/span> &lt;span style="color:#58a1dd">N&lt;/span>, &lt;span style="color:#ff636f">const&lt;/span> &lt;span style="color:#ff636f">wchar_t&lt;/span> &lt;span style="color:#ff636f">*&lt;/span>&lt;span style="color:#58a1dd">fmt&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#58a1dd">std&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">wstring&lt;/span> &lt;span style="color:#58a1dd">StrFormat&lt;/span>(&lt;span style="color:#ff636f">const&lt;/span> &lt;span style="color:#ff636f">wchar_t&lt;/span> &lt;span style="color:#ff636f">*&lt;/span>&lt;span style="color:#58a1dd">fmt&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff636f">template&lt;/span> &lt;span style="color:#ff636f">&amp;lt;&lt;/span>&lt;span style="color:#58a1dd">size_t&lt;/span> &lt;span style="color:#58a1dd">N&lt;/span>&lt;span style="color:#ff636f">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff636f">inline&lt;/span> &lt;span style="color:#58a1dd">ssize_t&lt;/span> &lt;span style="color:#58a1dd">StrFormat&lt;/span>(&lt;span style="color:#ff636f">wchar_t&lt;/span> (&lt;span style="color:#ff636f">&amp;amp;&lt;/span>&lt;span style="color:#58a1dd">buf&lt;/span>)[&lt;span style="color:#58a1dd">N&lt;/span>], &lt;span style="color:#ff636f">const&lt;/span> &lt;span style="color:#ff636f">wchar_t&lt;/span> &lt;span style="color:#ff636f">*&lt;/span>&lt;span style="color:#58a1dd">fmt&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">return&lt;/span> &lt;span style="color:#58a1dd">StrFormat&lt;/span>(&lt;span style="color:#58a1dd">buf&lt;/span>, &lt;span style="color:#58a1dd">N&lt;/span>, &lt;span style="color:#58a1dd">fmt&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>支持的字符串类型：&lt;/p>
&lt;ul>
&lt;li>&lt;code>std::wstring&lt;/code>&lt;/li>
&lt;li>&lt;code>std::wstring_view&lt;/code>&lt;/li>
&lt;li>&lt;code>const wchar_t *&lt;/code>&lt;/li>
&lt;li>&lt;code>wchar_t *&lt;/code>&lt;/li>
&lt;li>&lt;code>std::u16string&lt;/code>&lt;/li>
&lt;li>&lt;code>std::u16string_view&lt;/code>&lt;/li>
&lt;li>&lt;code>const char16_t *&lt;/code>&lt;/li>
&lt;li>&lt;code>char16_t *&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>以及以下会转换为 UTF-16 的 UTF-8 字符串类型：&lt;/p>
&lt;ul>
&lt;li>&lt;code>std::string&lt;/code>&lt;/li>
&lt;li>&lt;code>std::string_view&lt;/code>&lt;/li>
&lt;li>&lt;code>const char *&lt;/code>&lt;/li>
&lt;li>&lt;code>char *&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>基于 &lt;code>Bela Format&lt;/code> 我还编写了 &lt;code>bela::FPrintF&lt;/code> 将格式化的数据输出到控制台终端或者文件，当输出到 Conhost 时，则会以 UTF-16 编码输出，若输出到文件或者 Cygwin 终端时，则会转为 UTF-8 输出。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#1d2432;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c++" data-lang="c++">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">//https://github.com/fcharlie/bela/blob/master/include/bela/stdwriter.hpp
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span>&lt;span style="color:#58a1dd">ssize_t&lt;/span> &lt;span style="color:#58a1dd">StdWrite&lt;/span>(&lt;span style="color:#58a1dd">FILE&lt;/span> &lt;span style="color:#ff636f">*&lt;/span>&lt;span style="color:#58a1dd">out&lt;/span>, &lt;span style="color:#58a1dd">std&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">wstring_view&lt;/span> &lt;span style="color:#58a1dd">msg&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff636f">template&lt;/span> &lt;span style="color:#ff636f">&amp;lt;&lt;/span>&lt;span style="color:#ff636f">typename&lt;/span>... &lt;span style="color:#58a1dd">Args&lt;/span>&lt;span style="color:#ff636f">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#58a1dd">ssize_t&lt;/span> &lt;span style="color:#58a1dd">FPrintF&lt;/span>(&lt;span style="color:#58a1dd">FILE&lt;/span> &lt;span style="color:#ff636f">*&lt;/span>&lt;span style="color:#58a1dd">out&lt;/span>, &lt;span style="color:#ff636f">const&lt;/span> &lt;span style="color:#ff636f">wchar_t&lt;/span> &lt;span style="color:#ff636f">*&lt;/span>&lt;span style="color:#58a1dd">fmt&lt;/span>, &lt;span style="color:#58a1dd">Args&lt;/span>... &lt;span style="color:#58a1dd">args&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">const&lt;/span> &lt;span style="color:#58a1dd">format_internal&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">FormatArg&lt;/span> &lt;span style="color:#58a1dd">arg_array&lt;/span>[] &lt;span style="color:#ff636f">=&lt;/span> {&lt;span style="color:#58a1dd">args&lt;/span>...};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">auto&lt;/span> &lt;span style="color:#58a1dd">str&lt;/span> &lt;span style="color:#ff636f">=&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">format_internal&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">StrFormatInternal&lt;/span>(&lt;span style="color:#58a1dd">fmt&lt;/span>, &lt;span style="color:#58a1dd">arg_array&lt;/span>, &lt;span style="color:#ff636f">sizeof&lt;/span>...(&lt;span style="color:#58a1dd">args&lt;/span>));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">return&lt;/span> &lt;span style="color:#58a1dd">StdWrite&lt;/span>(&lt;span style="color:#58a1dd">out&lt;/span>, &lt;span style="color:#58a1dd">str&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff636f">inline&lt;/span> &lt;span style="color:#58a1dd">ssize_t&lt;/span> &lt;span style="color:#58a1dd">FPrintF&lt;/span>(&lt;span style="color:#58a1dd">FILE&lt;/span> &lt;span style="color:#ff636f">*&lt;/span>&lt;span style="color:#58a1dd">out&lt;/span>, &lt;span style="color:#ff636f">const&lt;/span> &lt;span style="color:#ff636f">wchar_t&lt;/span> &lt;span style="color:#ff636f">*&lt;/span>&lt;span style="color:#58a1dd">fmt&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">auto&lt;/span> &lt;span style="color:#58a1dd">str&lt;/span> &lt;span style="color:#ff636f">=&lt;/span> &lt;span style="color:#58a1dd">StrFormat&lt;/span>(&lt;span style="color:#58a1dd">fmt&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">return&lt;/span> &lt;span style="color:#58a1dd">StdWrite&lt;/span>(&lt;span style="color:#58a1dd">out&lt;/span>, &lt;span style="color:#58a1dd">str&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>一个简单的例子（此代码能够在 Windows Terminal 和 Mintty 等终端上正常显示 emoji）：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#1d2432;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c++" data-lang="c++">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">// https://github.com/fcharlie/bela/blob/master/test/fmt/main.cc
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span>&lt;span style="color:#828b96;font-style:italic">#include&lt;/span> &lt;span style="color:#828b96;font-style:italic">&amp;lt;bela/stdwriter.hpp&amp;gt;&lt;/span>&lt;span style="color:#828b96;font-style:italic">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff636f">int&lt;/span> &lt;span style="color:#58a1dd">wmain&lt;/span>(&lt;span style="color:#ff636f">int&lt;/span> &lt;span style="color:#58a1dd">argc&lt;/span>, &lt;span style="color:#ff636f">wchar_t&lt;/span> &lt;span style="color:#ff636f">**&lt;/span>&lt;span style="color:#58a1dd">argv&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">auto&lt;/span> &lt;span style="color:#58a1dd">ux&lt;/span> &lt;span style="color:#ff636f">=&lt;/span> &lt;span style="color:#a6be9d">&amp;#34;&lt;/span>&lt;span style="color:#a6be9d">\xf0\x9f\x98\x81&lt;/span>&lt;span style="color:#a6be9d"> UTF-8 text &lt;/span>&lt;span style="color:#a6be9d">\xE3\x8D\xA4&lt;/span>&lt;span style="color:#a6be9d">&amp;#34;&lt;/span>; &lt;span style="color:#828b96;font-style:italic">// force encode UTF-8
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span> &lt;span style="color:#ff636f">wchar_t&lt;/span> &lt;span style="color:#58a1dd">wx&lt;/span>[] &lt;span style="color:#ff636f">=&lt;/span> &lt;span style="color:#a6be9d">L&lt;/span>&lt;span style="color:#a6be9d">&amp;#34;Engine &lt;/span>&lt;span style="color:#a6be9d">\xD83D\xDEE0&lt;/span>&lt;span style="color:#a6be9d">&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">bela&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">FPrintF&lt;/span>(&lt;span style="color:#58a1dd">stderr&lt;/span>, &lt;span style="color:#a6be9d">L&lt;/span>&lt;span style="color:#a6be9d">&amp;#34;Argc: %d Arg0: %s W: %s UTF-8: %s __cplusplus: %d&lt;/span>&lt;span style="color:#a6be9d">\n&lt;/span>&lt;span style="color:#a6be9d">&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">argc&lt;/span>, &lt;span style="color:#58a1dd">argv&lt;/span>[&lt;span style="color:#a6be9d">0&lt;/span>], &lt;span style="color:#58a1dd">wx&lt;/span>, &lt;span style="color:#58a1dd">ux&lt;/span>, &lt;span style="color:#58a1dd">__cplusplus&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">return&lt;/span> &lt;span style="color:#a6be9d">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="结尾">结尾&lt;/h2>
&lt;p>在格式化函数的过程中，C++ 的不足在于没有反射，从而无法很好的获得对象的类型，这样传统的格式化方案就容易出现问题，而是用变参模板，在复杂的编码技巧加成后，使用编译器的检查能够很好的实现类型安全高效的格式化，但是也存在一个问题，那就是程序编译后提交较大，但都到了 9012，只要不超过 Clang 的体积都是能接受的。&lt;/p>
- https://forcemz.net/posts/2019/2019-04-29-string-formatting-talk/ - Copyright (c) 2009-2024 J23</description></item><item><title>实现 Git 目录权限控制</title><link>https://forcemz.net/posts/2019/2019-04-01-implement-git-dir-accesss-control/</link><pubDate>Mon, 01 Apr 2019 10:00:00 +0800</pubDate><guid>https://forcemz.net/posts/2019/2019-04-01-implement-git-dir-accesss-control/</guid><description>Charlie's Rethinking https://forcemz.net/posts/2019/2019-04-01-implement-git-dir-accesss-control/ -&lt;h1 id="前言">前言&lt;/h1>
&lt;p>Git 与 Subversion 有诸多不同，最核心的一点是前者属于分布式版本控制工具，后者属于集中式版本控制工具。前者的提交行为是离线的，本地的，后者的提交是在线的，需要与远程中央服务器通信，在线创建提交。基于这种现实，Git 和 Subversion 在原生提供的附加功能也存在很大的差别。比如目录权限控制。Git 原生并不支持目录权限控制，而 Subversion 支持。&lt;/p>
&lt;h2 id="subversion-的目录权限控制">Subversion 的目录权限控制&lt;/h2>
&lt;p>用户接入远程服务器上的 Subversion 存储库通常可以使用 HTTP 协议 SVN 协议以及 SVN+SSH 协议，HTTP 协议本质上是 HTTP 客户端与 Apache httpd 服务器通信，此时，请求由 &lt;code>mod_dav_svn.so&lt;/code> 模块处理，然后调用 subversion 的核心模块，包括文件系统和存储库模块。使用 HTTP 访问 Subversion 存储库时，可以如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#1d2432;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>svn co https://llvm.org/svn/llvm-project/llvm/trunk
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>还可以直接检出存储库的子目录：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#1d2432;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>svn co https://llvm.org/svn/llvm-project/llvm/trunk/include/
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>使用 SVN 协议与 SVN+SSH 协议本质上都是与远程服务器上的 &lt;code>svnserve&lt;/code> 通信，前者是 svnserve 监听 3690 TCP 端口，后者是在远程服务器上运行 &lt;code>svnserve -t&lt;/code>，但内部的细节都是一致的。检出代码如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#1d2432;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>svn co svn://llvm.org/svn/llvm-project/llvm/trunk
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>还可以直接检出存储库的子目录：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#1d2432;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>svn co svn://llvm.org/svn/llvm-project/llvm/trunk/include/
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Subversion 的提交是在线的，以 SVN 协议为例，当用户提交代码时，svn 客户端将发送 &lt;code>commit&lt;/code> 命令消息给 svnserve，然后在这个命令中将修改的文件发送到远程服务器，远程服务器上作出一些列操作，然后创建提交。在这个过程中，只要对文件相对存储库的路径与目录权限规则作出匹配，就可以知道用户是否由能力修改相应文件。&lt;/p>
&lt;p>Subversion 的原理也就使其很容易支持细粒度的权限控制，可以精确到文件。svnserve 可以修改 svnserve.conf 实现，而 HTTP 则与 apache mod_dav_svn 模块有关。&lt;/p>
&lt;p>如果要禁止用户读取，则在 checkout 的时候禁止检出即可，实现起来并不困难。&lt;/p>
&lt;h2 id="git-不支持目录权限控制">Git 不支持目录权限控制&lt;/h2>
&lt;p>像 Git 这样的分布式版本控制系统，获得远程存储库的行为叫做 &lt;code>clone&lt;/code>，常规情况下获得远程存储库的所有数据，但这种方式毕竟需要获得大量数据，因此 Git 还提供浅表克隆，还有 VFSForGit 这样的方式只获得目录结构，不获取文件内容，还有规划中的部分克隆。&lt;/p>
&lt;p>在服务器上，要控制存储库的数据按目录粒度提供给用户读取，通常无法通过 Git 客户端实现，这是由 Git 传输协议决定的，Git 在克隆远程存储库时需先 &amp;lsquo;发现引用列表&amp;rsquo;，然后按需求获得引用列表的提交 ID，服务器将这些 Commit 以及相关的 Tree Blob 等等回溯打包发送给客户端。Git 服务器最多能实现的是在在 &amp;lsquo;引用广播&amp;rsquo; 时隐藏特定的引用实现对用户的禁止读取，但要做到目录级别的禁止读取，目前由于 Git 协议限制暂时无法实现。&lt;/p>
&lt;p>分布式版本控制系统的提交行为发生在本地，当人们运行 &lt;code>git commit -m &amp;quot;message&amp;quot;&lt;/code> 时，就会在本地创建一个提交。无论是 Subversion 还是 Git，提交在存储库中具有唯一性，提交创建后，目录结构，文件内容，提交信息也就已经确定了，如果再次修改就不再是相同的提交。在 Subversion 中提交占据唯一的一个修订号(Revision)，在 Git 中则是唯一的 commitID (目前为 SHA1，未来计划转变为 SHA-256)。在本地提交后，Git 存储库目录结构已经确定，因此推送到服务器并不能改变其目录结构，这就意味着，在服务器上 Git 不支持目录级别粒度的写入控制。&lt;/p>
&lt;p>综合来看，在服务器方，Git 是完全不支持目录权限控制的。&lt;/p>
&lt;h2 id="git-实现目录权限控制的一种途径">Git 实现目录权限控制的一种途径&lt;/h2>
&lt;p>&lt;strong>Git 的目录级别粒度的禁止读取并不在本文的研究范围，本文所述的目录权限控制仅指 &amp;lsquo;目录的只读&amp;rsquo;。&lt;/strong>&lt;/p>
&lt;p>在设计此功能前，我们需要了解 Git 的一些原理，比如，目录权限控制发生在服务端，因此，处理的时机为 Git 推送代码代远程存储库时，一旦发现推送中修改了只读文件（目录），则拒绝推送。用户被拒绝推送后需要回退特定的提交，然后重新提交，提交完成后推送到远程服务器，实现协作共享，这样就达到了目录权限控制的目的。&lt;/p>
&lt;p>实现目录权限控制核心操作就是检测目录结构的修改，然后按照特定的规则进行拦截，在不修改 Git 源码的基础上要实现这些功能通常可以使用服务端钩子。服务器上的主要的钩子有三种，&lt;code>pre-receive&lt;/code>，&lt;code>update&lt;/code>,&lt;code>post-receive&lt;/code> ，相关钩子的原理在 &lt;a href="https://forcemz.net/git/2017/11/22/GitNativeHookDepthOptimization/">Git 原生钩子的深度优化&lt;/a> 一文中有介绍。要实现本节所述功能首先得排除 &lt;code>post-receive&lt;/code> 钩子，此钩子的成功与否不会影响引用的更新，所以并不合适，而 &lt;code>pre-receive&lt;/code> 钩子目前使用了 &lt;a href="https://git-scm.com/docs/git-receive-pack#_quarantine_environment">环境隔离： Quarantine Environment&lt;/a> 机制，目前 libgit2 并不支持此特性，所以要实现目录只读也不能直接使用 &lt;code>pre-receive&lt;/code> 钩子。&lt;/p>
&lt;p>最终，只有 &lt;code>update&lt;/code> 钩子可用。&lt;/p>
&lt;p>在实现目录权限检测时，我们应当先初始化规则，在 &lt;a href="https://gitee.com/oscstudio/git-analyze">git-analyze&lt;/a> 项目中，我添加了一个 &lt;code>update&lt;/code> 钩子作为目录权限检测的原型，规则文件如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#1d2432;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-json" data-lang="json">&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">&amp;#34;master&amp;#34;&lt;/span>:{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">&amp;#34;dirs&amp;#34;&lt;/span>:[
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6be9d">&amp;#34;lib/&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6be9d">&amp;#34;build/&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ],
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">&amp;#34;regex&amp;#34;&lt;/span>:[
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6be9d">&amp;#34;build$&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>规则按分支名划分，当相关的分支并没有设置只读目录时，则查找 &lt;code>.all&lt;/code> 配置，其中 &lt;code>.all&lt;/code> 表示所有分支，&lt;code>.all&lt;/code> 不能被用于 git 分支或者引用名称&lt;sup>1&lt;/sup>，因此代表所有的分支。规则有目录级别匹配和正则匹配，&lt;code>lib&lt;/code> 表示 &lt;code>lib&lt;/code> 文件或者目录不可被修改。而 &lt;code>regex&lt;/code> 则表示目录符合正则表达式的路径不可被修改。&lt;/p>
&lt;p>对于正则表达式，我们使用的是 &lt;a href="https://github.com/google/re2">RE2&lt;/a>，这是一个非常高效的正则表达式库，由 Google 开发。拥有多种语言绑定。&lt;/p>
&lt;p>无论是目录匹配还是正则表达式，我们都需要设置规则数量的上限，避免过多的规则导致计算量过大。目录匹配目前的限制为 256，正则限制为 64。&lt;/p>
&lt;p>在确定好规则后，我们需要获得目录树的修改细节，包括文件的修改，文件的删除，文件的添加，以及文件的重命名，其中文件的 UNIX 属性修改应当属于文件的修改。update 钩子的命令行为 &lt;code>refname oldrev newrev&lt;/code>，我们可以使用 &lt;code>git diff oldrev newrev&lt;/code> 这样的思路获得文件修改细节。在 libgit2 中，可以使用 &lt;code>git_diff_tree_to_tree&lt;/code> 去获得目录的差异。如果 oldrev 或者 newrev 二者中有一个是 &lt;code>zeroid&lt;/code>，此时只需要使用 treewalk 遍历目录即可，当然，二者不可能同时为零 ID。核心代码如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#1d2432;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">////////
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span>&lt;span style="color:#828b96;font-style:italic">#include&lt;/span> &lt;span style="color:#828b96;font-style:italic">&amp;#34;executor.hpp&amp;#34;&lt;/span>&lt;span style="color:#828b96;font-style:italic">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">#include&lt;/span> &lt;span style="color:#828b96;font-style:italic">&amp;lt;git2.h&amp;gt;&lt;/span>&lt;span style="color:#828b96;font-style:italic">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff636f">struct&lt;/span> &lt;span style="color:#58a1dd">commit_t&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">commit_t&lt;/span>() &lt;span style="color:#ff636f">=&lt;/span> &lt;span style="color:#ff636f">default&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">~&lt;/span>&lt;span style="color:#58a1dd">commit_t&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">if&lt;/span> (&lt;span style="color:#58a1dd">tree&lt;/span> &lt;span style="color:#ff636f">!=&lt;/span> &lt;span style="color:#ff636f">nullptr&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">git_tree_free&lt;/span>(&lt;span style="color:#58a1dd">tree&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">if&lt;/span> (&lt;span style="color:#58a1dd">commit&lt;/span> &lt;span style="color:#ff636f">!=&lt;/span> &lt;span style="color:#ff636f">nullptr&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">git_commit_free&lt;/span>(&lt;span style="color:#58a1dd">commit&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">git_commit&lt;/span> &lt;span style="color:#ff636f">*&lt;/span>&lt;span style="color:#58a1dd">commit&lt;/span>{&lt;span style="color:#ff636f">nullptr&lt;/span>};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">git_tree&lt;/span> &lt;span style="color:#ff636f">*&lt;/span>&lt;span style="color:#58a1dd">tree&lt;/span>{&lt;span style="color:#ff636f">nullptr&lt;/span>};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">bool&lt;/span> &lt;span style="color:#58a1dd">lookup&lt;/span>(&lt;span style="color:#58a1dd">git_repository&lt;/span> &lt;span style="color:#ff636f">*&lt;/span>&lt;span style="color:#58a1dd">repo&lt;/span>, &lt;span style="color:#ff636f">const&lt;/span> &lt;span style="color:#58a1dd">git_oid&lt;/span> &lt;span style="color:#ff636f">*&lt;/span>&lt;span style="color:#58a1dd">id&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">if&lt;/span> (&lt;span style="color:#58a1dd">git_commit_lookup&lt;/span>(&lt;span style="color:#ff636f">&amp;amp;&lt;/span>&lt;span style="color:#58a1dd">commit&lt;/span>, &lt;span style="color:#58a1dd">repo&lt;/span>, &lt;span style="color:#58a1dd">id&lt;/span>) &lt;span style="color:#ff636f">!=&lt;/span> &lt;span style="color:#a6be9d">0&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">return&lt;/span> &lt;span style="color:#58a1dd">false&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">return&lt;/span> &lt;span style="color:#58a1dd">git_commit_tree&lt;/span>(&lt;span style="color:#ff636f">&amp;amp;&lt;/span>&lt;span style="color:#58a1dd">tree&lt;/span>, &lt;span style="color:#58a1dd">commit&lt;/span>) &lt;span style="color:#ff636f">==&lt;/span> &lt;span style="color:#a6be9d">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff636f">class&lt;/span> &lt;span style="color:#58a1dd">executor_base&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff636f">public&lt;/span>&lt;span style="color:#ff636f">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">executor_base&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#828b96;font-style:italic">//
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span> &lt;span style="color:#58a1dd">git_libgit2_init&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">~&lt;/span>&lt;span style="color:#58a1dd">executor_base&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">if&lt;/span> (&lt;span style="color:#58a1dd">repo_&lt;/span> &lt;span style="color:#ff636f">!=&lt;/span> &lt;span style="color:#ff636f">nullptr&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">git_repository_free&lt;/span>(&lt;span style="color:#58a1dd">repo_&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">git_libgit2_shutdown&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">bool&lt;/span> &lt;span style="color:#58a1dd">open&lt;/span>(&lt;span style="color:#58a1dd">std&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">string_view&lt;/span> &lt;span style="color:#58a1dd">path&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">return&lt;/span> &lt;span style="color:#58a1dd">git_repository_open&lt;/span>(&lt;span style="color:#ff636f">&amp;amp;&lt;/span>&lt;span style="color:#58a1dd">repo_&lt;/span>, &lt;span style="color:#58a1dd">path&lt;/span>.&lt;span style="color:#58a1dd">data&lt;/span>()) &lt;span style="color:#ff636f">==&lt;/span> &lt;span style="color:#a6be9d">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">git_repository&lt;/span> &lt;span style="color:#ff636f">*&lt;/span>&lt;span style="color:#58a1dd">repo&lt;/span>() { &lt;span style="color:#ff636f">return&lt;/span> &lt;span style="color:#58a1dd">repo_&lt;/span>; }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff636f">private&lt;/span>&lt;span style="color:#ff636f">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">git_repository&lt;/span> &lt;span style="color:#ff636f">*&lt;/span>&lt;span style="color:#58a1dd">repo_&lt;/span>{&lt;span style="color:#ff636f">nullptr&lt;/span>};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#58a1dd">Executor&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">Executor&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#828b96;font-style:italic">// initialzie todo
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span> &lt;span style="color:#58a1dd">base&lt;/span> &lt;span style="color:#ff636f">=&lt;/span> &lt;span style="color:#ff636f">new&lt;/span> &lt;span style="color:#58a1dd">executor_base&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#58a1dd">Executor&lt;/span>&lt;span style="color:#ff636f">::~&lt;/span>&lt;span style="color:#58a1dd">Executor&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#828b96;font-style:italic">// delete
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span> &lt;span style="color:#ff636f">delete&lt;/span> &lt;span style="color:#58a1dd">base&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff636f">bool&lt;/span> &lt;span style="color:#58a1dd">Executor&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">InitializeRules&lt;/span>(&lt;span style="color:#58a1dd">std&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">string_view&lt;/span> &lt;span style="color:#58a1dd">sv&lt;/span>, &lt;span style="color:#58a1dd">std&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">string_view&lt;/span> &lt;span style="color:#58a1dd">ref&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">if&lt;/span> (&lt;span style="color:#58a1dd">ref&lt;/span>.&lt;span style="color:#58a1dd">compare&lt;/span>(&lt;span style="color:#a6be9d">0&lt;/span>, &lt;span style="color:#ff636f">sizeof&lt;/span>(&lt;span style="color:#a6be9d">&amp;#34;refs/heads/&amp;#34;&lt;/span>) &lt;span style="color:#ff636f">-&lt;/span> &lt;span style="color:#a6be9d">1&lt;/span>, &lt;span style="color:#a6be9d">&amp;#34;refs/heads/&amp;#34;&lt;/span>) &lt;span style="color:#ff636f">!=&lt;/span> &lt;span style="color:#a6be9d">0&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">return&lt;/span> &lt;span style="color:#58a1dd">true&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">auto&lt;/span> &lt;span style="color:#58a1dd">branch&lt;/span> &lt;span style="color:#ff636f">=&lt;/span> &lt;span style="color:#58a1dd">ref&lt;/span>.&lt;span style="color:#58a1dd">substr&lt;/span>(&lt;span style="color:#ff636f">sizeof&lt;/span>(&lt;span style="color:#a6be9d">&amp;#34;refs/heads/&amp;#34;&lt;/span>) &lt;span style="color:#ff636f">-&lt;/span> &lt;span style="color:#a6be9d">1&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">return&lt;/span> &lt;span style="color:#58a1dd">engine&lt;/span>.&lt;span style="color:#58a1dd">PreInitialize&lt;/span>(&lt;span style="color:#58a1dd">sv&lt;/span>, &lt;span style="color:#58a1dd">branch&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">////////////////////////////////////////////////
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span>&lt;span style="color:#ff636f">int&lt;/span> &lt;span style="color:#58a1dd">git_treewalk_impl&lt;/span>(&lt;span style="color:#ff636f">const&lt;/span> &lt;span style="color:#ff636f">char&lt;/span> &lt;span style="color:#ff636f">*&lt;/span>&lt;span style="color:#58a1dd">root&lt;/span>, &lt;span style="color:#ff636f">const&lt;/span> &lt;span style="color:#58a1dd">git_tree_entry&lt;/span> &lt;span style="color:#ff636f">*&lt;/span>&lt;span style="color:#58a1dd">entry&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">void&lt;/span> &lt;span style="color:#ff636f">*&lt;/span>&lt;span style="color:#58a1dd">payload&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">auto&lt;/span> &lt;span style="color:#58a1dd">e&lt;/span> &lt;span style="color:#ff636f">=&lt;/span> &lt;span style="color:#ff636f">reinterpret_cast&lt;/span>&lt;span style="color:#ff636f">&amp;lt;&lt;/span>&lt;span style="color:#58a1dd">Executor&lt;/span> &lt;span style="color:#ff636f">*&amp;gt;&lt;/span>(&lt;span style="color:#58a1dd">payload&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">std&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">string&lt;/span> &lt;span style="color:#58a1dd">name&lt;/span> &lt;span style="color:#ff636f">=&lt;/span> &lt;span style="color:#58a1dd">root&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">name&lt;/span>.&lt;span style="color:#58a1dd">append&lt;/span>(&lt;span style="color:#58a1dd">git_tree_entry_name&lt;/span>(&lt;span style="color:#58a1dd">entry&lt;/span>));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">if&lt;/span> (&lt;span style="color:#58a1dd">e&lt;/span>&lt;span style="color:#ff636f">-&amp;gt;&lt;/span>&lt;span style="color:#58a1dd">FullMatch&lt;/span>(&lt;span style="color:#58a1dd">name&lt;/span>)) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">fprintf&lt;/span>(&lt;span style="color:#58a1dd">stderr&lt;/span>, &lt;span style="color:#a6be9d">&amp;#34;Path %s is readonly&lt;/span>&lt;span style="color:#a6be9d">\n&lt;/span>&lt;span style="color:#a6be9d">&amp;#34;&lt;/span>, &lt;span style="color:#58a1dd">name&lt;/span>.&lt;span style="color:#58a1dd">c_str&lt;/span>());
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">return&lt;/span> &lt;span style="color:#ff636f">-&lt;/span>&lt;span style="color:#a6be9d">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">return&lt;/span> &lt;span style="color:#a6be9d">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff636f">bool&lt;/span> &lt;span style="color:#58a1dd">Executor&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">ExecuteTreeWalk&lt;/span>(&lt;span style="color:#58a1dd">std&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">string_view&lt;/span> &lt;span style="color:#58a1dd">rev&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">git_oid&lt;/span> &lt;span style="color:#58a1dd">oid&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">if&lt;/span> (&lt;span style="color:#58a1dd">git_oid_fromstrn&lt;/span>(&lt;span style="color:#ff636f">&amp;amp;&lt;/span>&lt;span style="color:#58a1dd">oid&lt;/span>, &lt;span style="color:#58a1dd">rev&lt;/span>.&lt;span style="color:#58a1dd">data&lt;/span>(), &lt;span style="color:#58a1dd">rev&lt;/span>.&lt;span style="color:#58a1dd">size&lt;/span>()) &lt;span style="color:#ff636f">!=&lt;/span> &lt;span style="color:#a6be9d">0&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">return&lt;/span> &lt;span style="color:#58a1dd">false&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">commit_t&lt;/span> &lt;span style="color:#58a1dd">commit&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">if&lt;/span> (&lt;span style="color:#ff636f">!&lt;/span>&lt;span style="color:#58a1dd">commit&lt;/span>.&lt;span style="color:#58a1dd">lookup&lt;/span>(&lt;span style="color:#58a1dd">base&lt;/span>&lt;span style="color:#ff636f">-&amp;gt;&lt;/span>&lt;span style="color:#58a1dd">repo&lt;/span>(), &lt;span style="color:#ff636f">&amp;amp;&lt;/span>&lt;span style="color:#58a1dd">oid&lt;/span>)) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">return&lt;/span> &lt;span style="color:#58a1dd">false&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">return&lt;/span> (&lt;span style="color:#58a1dd">git_tree_walk&lt;/span>(&lt;span style="color:#58a1dd">commit&lt;/span>.&lt;span style="color:#58a1dd">tree&lt;/span>, &lt;span style="color:#58a1dd">GIT_TREEWALK_PRE&lt;/span>, &lt;span style="color:#58a1dd">git_treewalk_impl&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">this&lt;/span>) &lt;span style="color:#ff636f">==&lt;/span> &lt;span style="color:#a6be9d">0&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff636f">int&lt;/span> &lt;span style="color:#58a1dd">git_diff_callback&lt;/span>(&lt;span style="color:#ff636f">const&lt;/span> &lt;span style="color:#58a1dd">git_diff_delta&lt;/span> &lt;span style="color:#ff636f">*&lt;/span>&lt;span style="color:#58a1dd">delta&lt;/span>, &lt;span style="color:#ff636f">float&lt;/span> &lt;span style="color:#58a1dd">progress&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">void&lt;/span> &lt;span style="color:#ff636f">*&lt;/span>&lt;span style="color:#58a1dd">payload&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (&lt;span style="color:#ff636f">void&lt;/span>)&lt;span style="color:#58a1dd">progress&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">auto&lt;/span> &lt;span style="color:#58a1dd">e&lt;/span> &lt;span style="color:#ff636f">=&lt;/span> &lt;span style="color:#ff636f">reinterpret_cast&lt;/span>&lt;span style="color:#ff636f">&amp;lt;&lt;/span>&lt;span style="color:#58a1dd">Executor&lt;/span> &lt;span style="color:#ff636f">*&amp;gt;&lt;/span>(&lt;span style="color:#58a1dd">payload&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">switch&lt;/span> (&lt;span style="color:#58a1dd">delta&lt;/span>&lt;span style="color:#ff636f">-&amp;gt;&lt;/span>&lt;span style="color:#58a1dd">status&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">case&lt;/span> &lt;span style="color:#58a1dd">GIT_DELTA_ADDED&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#828b96;font-style:italic">/*fallthrough*/&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">case&lt;/span> &lt;span style="color:#58a1dd">GIT_DELTA_MODIFIED&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#828b96;font-style:italic">/*fallthrough*/&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">case&lt;/span> &lt;span style="color:#58a1dd">GIT_DELTA_COPIED&lt;/span>: &lt;span style="color:#828b96;font-style:italic">// copy to new path
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span> &lt;span style="color:#ff636f">if&lt;/span> (&lt;span style="color:#58a1dd">e&lt;/span>&lt;span style="color:#ff636f">-&amp;gt;&lt;/span>&lt;span style="color:#58a1dd">FullMatch&lt;/span>(&lt;span style="color:#58a1dd">delta&lt;/span>&lt;span style="color:#ff636f">-&amp;gt;&lt;/span>&lt;span style="color:#58a1dd">new_file&lt;/span>.&lt;span style="color:#58a1dd">path&lt;/span>)) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">fprintf&lt;/span>(&lt;span style="color:#58a1dd">stderr&lt;/span>, &lt;span style="color:#a6be9d">&amp;#34;Path &amp;#39;%s&amp;#39; is readonly&lt;/span>&lt;span style="color:#a6be9d">\n&lt;/span>&lt;span style="color:#a6be9d">&amp;#34;&lt;/span>, &lt;span style="color:#58a1dd">delta&lt;/span>&lt;span style="color:#ff636f">-&amp;gt;&lt;/span>&lt;span style="color:#58a1dd">old_file&lt;/span>.&lt;span style="color:#58a1dd">path&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">return&lt;/span> &lt;span style="color:#a6be9d">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">break&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">case&lt;/span> &lt;span style="color:#58a1dd">GIT_DELTA_DELETED&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">if&lt;/span> (&lt;span style="color:#58a1dd">e&lt;/span>&lt;span style="color:#ff636f">-&amp;gt;&lt;/span>&lt;span style="color:#58a1dd">FullMatch&lt;/span>(&lt;span style="color:#58a1dd">delta&lt;/span>&lt;span style="color:#ff636f">-&amp;gt;&lt;/span>&lt;span style="color:#58a1dd">old_file&lt;/span>.&lt;span style="color:#58a1dd">path&lt;/span>)) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">fprintf&lt;/span>(&lt;span style="color:#58a1dd">stderr&lt;/span>, &lt;span style="color:#a6be9d">&amp;#34;Path &amp;#39;%s&amp;#39; is readonly&lt;/span>&lt;span style="color:#a6be9d">\n&lt;/span>&lt;span style="color:#a6be9d">&amp;#34;&lt;/span>, &lt;span style="color:#58a1dd">delta&lt;/span>&lt;span style="color:#ff636f">-&amp;gt;&lt;/span>&lt;span style="color:#58a1dd">old_file&lt;/span>.&lt;span style="color:#58a1dd">path&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">return&lt;/span> &lt;span style="color:#a6be9d">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">break&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">default&lt;/span>&lt;span style="color:#ff636f">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#828b96;font-style:italic">// ex. GIT_DELTA_RENAMED
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span> &lt;span style="color:#ff636f">if&lt;/span> (&lt;span style="color:#58a1dd">e&lt;/span>&lt;span style="color:#ff636f">-&amp;gt;&lt;/span>&lt;span style="color:#58a1dd">FullMatch&lt;/span>(&lt;span style="color:#58a1dd">delta&lt;/span>&lt;span style="color:#ff636f">-&amp;gt;&lt;/span>&lt;span style="color:#58a1dd">new_file&lt;/span>.&lt;span style="color:#58a1dd">path&lt;/span>)) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">fprintf&lt;/span>(&lt;span style="color:#58a1dd">stderr&lt;/span>, &lt;span style="color:#a6be9d">&amp;#34;Path &amp;#39;%s&amp;#39; is readonly&lt;/span>&lt;span style="color:#a6be9d">\n&lt;/span>&lt;span style="color:#a6be9d">&amp;#34;&lt;/span>, &lt;span style="color:#58a1dd">delta&lt;/span>&lt;span style="color:#ff636f">-&amp;gt;&lt;/span>&lt;span style="color:#58a1dd">old_file&lt;/span>.&lt;span style="color:#58a1dd">path&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">return&lt;/span> &lt;span style="color:#a6be9d">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">if&lt;/span> (&lt;span style="color:#58a1dd">e&lt;/span>&lt;span style="color:#ff636f">-&amp;gt;&lt;/span>&lt;span style="color:#58a1dd">FullMatch&lt;/span>(&lt;span style="color:#58a1dd">delta&lt;/span>&lt;span style="color:#ff636f">-&amp;gt;&lt;/span>&lt;span style="color:#58a1dd">old_file&lt;/span>.&lt;span style="color:#58a1dd">path&lt;/span>)) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">fprintf&lt;/span>(&lt;span style="color:#58a1dd">stderr&lt;/span>, &lt;span style="color:#a6be9d">&amp;#34;Path &amp;#39;%s&amp;#39; is readonly&lt;/span>&lt;span style="color:#a6be9d">\n&lt;/span>&lt;span style="color:#a6be9d">&amp;#34;&lt;/span>, &lt;span style="color:#58a1dd">delta&lt;/span>&lt;span style="color:#ff636f">-&amp;gt;&lt;/span>&lt;span style="color:#58a1dd">old_file&lt;/span>.&lt;span style="color:#58a1dd">path&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">return&lt;/span> &lt;span style="color:#a6be9d">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">break&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">return&lt;/span> &lt;span style="color:#a6be9d">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff636f">struct&lt;/span> &lt;span style="color:#58a1dd">diff_t&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">~&lt;/span>&lt;span style="color:#58a1dd">diff_t&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">if&lt;/span> (&lt;span style="color:#58a1dd">p&lt;/span> &lt;span style="color:#ff636f">!=&lt;/span> &lt;span style="color:#ff636f">nullptr&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">git_diff_free&lt;/span>(&lt;span style="color:#58a1dd">p&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">git_diff&lt;/span> &lt;span style="color:#ff636f">*&lt;/span>&lt;span style="color:#58a1dd">p&lt;/span>{&lt;span style="color:#ff636f">nullptr&lt;/span>};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff636f">bool&lt;/span> &lt;span style="color:#58a1dd">Executor&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">Execute&lt;/span>(&lt;span style="color:#58a1dd">std&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">string_view&lt;/span> &lt;span style="color:#58a1dd">path&lt;/span>, &lt;span style="color:#58a1dd">std&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">string_view&lt;/span> &lt;span style="color:#58a1dd">oldrev&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">std&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">string_view&lt;/span> &lt;span style="color:#58a1dd">newrev&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">if&lt;/span> (&lt;span style="color:#58a1dd">engine&lt;/span>.&lt;span style="color:#58a1dd">Empty&lt;/span>()) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#828b96;font-style:italic">// Engine rules empty so return
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span> &lt;span style="color:#ff636f">return&lt;/span> &lt;span style="color:#58a1dd">true&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">if&lt;/span> (&lt;span style="color:#ff636f">!&lt;/span>&lt;span style="color:#58a1dd">base&lt;/span>&lt;span style="color:#ff636f">-&amp;gt;&lt;/span>&lt;span style="color:#58a1dd">open&lt;/span>(&lt;span style="color:#58a1dd">path&lt;/span>)) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">return&lt;/span> &lt;span style="color:#58a1dd">false&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">constexpr&lt;/span> &lt;span style="color:#ff636f">const&lt;/span> &lt;span style="color:#ff636f">char&lt;/span> &lt;span style="color:#58a1dd">zerooid&lt;/span>[] &lt;span style="color:#ff636f">=&lt;/span> &lt;span style="color:#a6be9d">&amp;#34;0000000000000000000000000000000000000000&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">if&lt;/span> (&lt;span style="color:#58a1dd">oldrev&lt;/span> &lt;span style="color:#ff636f">==&lt;/span> &lt;span style="color:#58a1dd">zerooid&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">return&lt;/span> &lt;span style="color:#58a1dd">ExecuteTreeWalk&lt;/span>(&lt;span style="color:#58a1dd">newrev&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">if&lt;/span> (&lt;span style="color:#58a1dd">newrev&lt;/span> &lt;span style="color:#ff636f">==&lt;/span> &lt;span style="color:#58a1dd">zerooid&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">return&lt;/span> &lt;span style="color:#58a1dd">ExecuteTreeWalk&lt;/span>(&lt;span style="color:#58a1dd">oldrev&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">git_oid&lt;/span> &lt;span style="color:#58a1dd">ooid&lt;/span>, &lt;span style="color:#58a1dd">noid&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">if&lt;/span> (&lt;span style="color:#58a1dd">git_oid_fromstrn&lt;/span>(&lt;span style="color:#ff636f">&amp;amp;&lt;/span>&lt;span style="color:#58a1dd">ooid&lt;/span>, &lt;span style="color:#58a1dd">oldrev&lt;/span>.&lt;span style="color:#58a1dd">data&lt;/span>(), &lt;span style="color:#58a1dd">oldrev&lt;/span>.&lt;span style="color:#58a1dd">size&lt;/span>()) &lt;span style="color:#ff636f">!=&lt;/span> &lt;span style="color:#a6be9d">0&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">return&lt;/span> &lt;span style="color:#58a1dd">false&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">if&lt;/span> (&lt;span style="color:#58a1dd">git_oid_fromstrn&lt;/span>(&lt;span style="color:#ff636f">&amp;amp;&lt;/span>&lt;span style="color:#58a1dd">noid&lt;/span>, &lt;span style="color:#58a1dd">newrev&lt;/span>.&lt;span style="color:#58a1dd">data&lt;/span>(), &lt;span style="color:#58a1dd">newrev&lt;/span>.&lt;span style="color:#58a1dd">size&lt;/span>()) &lt;span style="color:#ff636f">!=&lt;/span> &lt;span style="color:#a6be9d">0&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">return&lt;/span> &lt;span style="color:#58a1dd">false&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">commit_t&lt;/span> &lt;span style="color:#58a1dd">oldcommit&lt;/span>, &lt;span style="color:#58a1dd">newcommit&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">if&lt;/span> (&lt;span style="color:#ff636f">!&lt;/span>&lt;span style="color:#58a1dd">oldcommit&lt;/span>.&lt;span style="color:#58a1dd">lookup&lt;/span>(&lt;span style="color:#58a1dd">base&lt;/span>&lt;span style="color:#ff636f">-&amp;gt;&lt;/span>&lt;span style="color:#58a1dd">repo&lt;/span>(), &lt;span style="color:#ff636f">&amp;amp;&lt;/span>&lt;span style="color:#58a1dd">ooid&lt;/span>)) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">return&lt;/span> &lt;span style="color:#58a1dd">false&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">if&lt;/span> (&lt;span style="color:#ff636f">!&lt;/span>&lt;span style="color:#58a1dd">newcommit&lt;/span>.&lt;span style="color:#58a1dd">lookup&lt;/span>(&lt;span style="color:#58a1dd">base&lt;/span>&lt;span style="color:#ff636f">-&amp;gt;&lt;/span>&lt;span style="color:#58a1dd">repo&lt;/span>(), &lt;span style="color:#ff636f">&amp;amp;&lt;/span>&lt;span style="color:#58a1dd">noid&lt;/span>)) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">return&lt;/span> &lt;span style="color:#58a1dd">false&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">diff_t&lt;/span> &lt;span style="color:#58a1dd">diff&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">git_diff_options&lt;/span> &lt;span style="color:#58a1dd">opts&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">git_diff_init_options&lt;/span>(&lt;span style="color:#ff636f">&amp;amp;&lt;/span>&lt;span style="color:#58a1dd">opts&lt;/span>, &lt;span style="color:#58a1dd">GIT_DIFF_OPTIONS_VERSION&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">if&lt;/span> (&lt;span style="color:#58a1dd">git_diff_tree_to_tree&lt;/span>(&lt;span style="color:#ff636f">&amp;amp;&lt;/span>&lt;span style="color:#58a1dd">diff&lt;/span>.&lt;span style="color:#58a1dd">p&lt;/span>, &lt;span style="color:#58a1dd">base&lt;/span>&lt;span style="color:#ff636f">-&amp;gt;&lt;/span>&lt;span style="color:#58a1dd">repo&lt;/span>(), &lt;span style="color:#58a1dd">oldcommit&lt;/span>.&lt;span style="color:#58a1dd">tree&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">newcommit&lt;/span>.&lt;span style="color:#58a1dd">tree&lt;/span>, &lt;span style="color:#ff636f">&amp;amp;&lt;/span>&lt;span style="color:#58a1dd">opts&lt;/span>) &lt;span style="color:#ff636f">!=&lt;/span> &lt;span style="color:#a6be9d">0&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">return&lt;/span> &lt;span style="color:#58a1dd">false&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">return&lt;/span> &lt;span style="color:#58a1dd">git_diff_foreach&lt;/span>(&lt;span style="color:#58a1dd">diff&lt;/span>.&lt;span style="color:#58a1dd">p&lt;/span>, &lt;span style="color:#58a1dd">git_diff_callback&lt;/span>, &lt;span style="color:#ff636f">nullptr&lt;/span>, &lt;span style="color:#ff636f">nullptr&lt;/span>, &lt;span style="color:#ff636f">nullptr&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">this&lt;/span>) &lt;span style="color:#ff636f">==&lt;/span> &lt;span style="color:#a6be9d">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>update 工具源码地址为：&lt;a href="https://gitee.com/oscstudio/git-analyze/tree/master/tools/update">https://gitee.com/oscstudio/git-analyze/tree/master/tools/update&lt;/a>。&lt;/p>
&lt;p>在本方案中，我们直接比较 oldrev-newrev 的差异，而不是回溯递归去判断 commit 与 parent-commit 的差异，这有以下考虑：&lt;/p>
&lt;ul>
&lt;li>我们需要限制的是最终的结果而无需考虑中间的过程，无论中间环节如何变化，只要最终的只读目录，文件未发生修改即可。未发生修改表示 blob 不变，tree 不变。&lt;/li>
&lt;li>我们只 diff oldrev-newrev 两者，避免校验中间环境能够降低只读文件功能造成代码推送的响应速率下降。&lt;/li>
&lt;/ul>
&lt;p>这实际上与使用 &lt;code>update&lt;/code> 钩子实现大文件检测的策略有很大的不同，大文件检测如果不回溯去检测，则可能会忽略中间 commit 引入的大文件，这些大文件会一直存在于存储库中，导致存储库体积较大，打包困难，传输时间长。这也是我使用 pre-receive 钩子基于环境隔离，使用 Pack-Index 文件检测大文件取代 update 钩子的原因之一。&lt;/p>
&lt;p>在 git diff 的文件修改中，文件路径为相对路径，如果是在 worktree 中，diff 的输出结果与当前目录有关，而在裸存储库中，diff 的文件路径与是相对于 存储库 worktree 根目录的路径。那么我们在生成路径校验规则时，则需对文件路径进行处理以符合相对路径。并且 git diff 的文件路径以 &lt;code>/&lt;/code> 分割，要判断一个路径是否为只读文件或者属于只读目录下的文件，只需要判断文件路径被包含在只读路径之中即可。&lt;/p>
&lt;p>我们先将路径规范化，也就是去除多余的 &lt;code>/&lt;/code>，然后比较文件路径以只读路径开头并且存在如下两种情况：&lt;/p>
&lt;ul>
&lt;li>文件路径长度与只读路径长度相符，文件路径为只读文件路径。&lt;/li>
&lt;li>只读路径长度为 l，文件路径为符号 P，其中 &lt;code>P[l]='/'&lt;/code>，此时路径为只读路径的子路径。&lt;/li>
&lt;/ul>
&lt;p>路径包含判断代码如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#1d2432;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c++" data-lang="c++">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">// when sub startswith parant
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">// 1. size equal --&amp;gt; path equal
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">// 2. path[p.size()]==&amp;#39;/&amp;#39; At this point, &amp;#39;path&amp;#39; is a subpath of p
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span>&lt;span style="color:#ff636f">inline&lt;/span> &lt;span style="color:#ff636f">bool&lt;/span> &lt;span style="color:#58a1dd">IsPathContains&lt;/span>(&lt;span style="color:#58a1dd">std&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">string_view&lt;/span> &lt;span style="color:#58a1dd">parent&lt;/span>, &lt;span style="color:#58a1dd">std&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">string_view&lt;/span> &lt;span style="color:#58a1dd">sub&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">return&lt;/span> (&lt;span style="color:#58a1dd">parent&lt;/span>.&lt;span style="color:#58a1dd">size&lt;/span>() &lt;span style="color:#ff636f">&amp;lt;=&lt;/span> &lt;span style="color:#58a1dd">sub&lt;/span>.&lt;span style="color:#58a1dd">size&lt;/span>() &lt;span style="color:#ff636f">&amp;amp;&amp;amp;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">memcmp&lt;/span>(&lt;span style="color:#58a1dd">parent&lt;/span>.&lt;span style="color:#58a1dd">data&lt;/span>(), &lt;span style="color:#58a1dd">sub&lt;/span>.&lt;span style="color:#58a1dd">data&lt;/span>(), &lt;span style="color:#58a1dd">parent&lt;/span>.&lt;span style="color:#58a1dd">size&lt;/span>()) &lt;span style="color:#ff636f">==&lt;/span> &lt;span style="color:#a6be9d">0&lt;/span> &lt;span style="color:#ff636f">&amp;amp;&amp;amp;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (&lt;span style="color:#58a1dd">sub&lt;/span>.&lt;span style="color:#58a1dd">size&lt;/span>() &lt;span style="color:#ff636f">==&lt;/span> &lt;span style="color:#58a1dd">parent&lt;/span>.&lt;span style="color:#58a1dd">size&lt;/span>() &lt;span style="color:#ff636f">||&lt;/span> &lt;span style="color:#58a1dd">sub&lt;/span>[&lt;span style="color:#58a1dd">parent&lt;/span>.&lt;span style="color:#58a1dd">size&lt;/span>()] &lt;span style="color:#ff636f">==&lt;/span> &lt;span style="color:#a6be9d">&amp;#39;/&amp;#39;&lt;/span>));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>如果使用 &lt;code>update&lt;/code> 钩子实现 commit 私有邮箱过滤，为了避免私有邮箱逃逸，则需要回溯。&lt;/p>
&lt;h2 id="反思">反思&lt;/h2>
&lt;p>虽然本文讲述了实现 Git 目录权限控制的实现的一种途径，但笔者比较反对过分使用 Git 服务端钩子实现过多额外的功能。一方面，这些功能并非不可替代，大多数都能可以通过规范的协作方式实现相同的目的。比如我们可以使用 fork-RP 模型参与协作开发，然后在主存储库中设置保护分支，严格限制修改，我们还可以实现只读存储库，即修改只能通过 PR 修改存储库，拒绝从客户端推送等。&lt;/p>
&lt;p>另一方面，如果在钩子中实现的功能过多，这势必会导致服务器上存储库响应时间变长，服务器并发降低，这时候加机器也效果有限，特别是硬件设施不足的影响更大。功能过多也会导致开发变得异常复杂，钩子除了做这个还要做那个，整个流程处理流程一环扣一环，这对开发者要求比较高。如果出于效率原因修改 git 源码实现这些功能则可能带来自行维护 git 分支的困境，特别是 git 也是在不断发展的，比如 git 计划实施的部分克隆，SHA1 到 SHA-256 的转换，v2 协议的进一步发展，以及 VFSforGit 移植到 Linux。如果没有充足的人力去维护这些修改，很容易就跟不上 git 的步伐，则很容易在代码托管平台的竞争中落后。&lt;/p>
&lt;h2 id="备注">备注&lt;/h2>
&lt;ol>
&lt;li>Git 引用名格式检查：&lt;a href="https://git-scm.com/docs/git-check-ref-format">https://git-scm.com/docs/git-check-ref-format&lt;/a>&lt;/li>
&lt;/ol>
- https://forcemz.net/posts/2019/2019-04-01-implement-git-dir-accesss-control/ - Copyright (c) 2009-2024 J23</description></item><item><title>记录 SSH 的一个 Bug</title><link>https://forcemz.net/posts/2019/2019-03-18-ssh-one-bug/</link><pubDate>Mon, 18 Mar 2019 18:00:00 +0800</pubDate><guid>https://forcemz.net/posts/2019/2019-03-18-ssh-one-bug/</guid><description>Charlie's Rethinking https://forcemz.net/posts/2019/2019-03-18-ssh-one-bug/ -&lt;h2 id="服务器上错误的命令行">服务器上错误的命令行&lt;/h2>
&lt;p>最近在改进 BSSHD，将不被允许的命令打印到日志，但是我遇到了一个不符合预期的输出，比如，在客户端运行 SSH，命令如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#1d2432;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>ssh git@localhost &lt;span style="color:#58a1dd">echo&lt;/span> &lt;span style="color:#a6be9d">&amp;#34;There are spaces in the statement&amp;#34;&lt;/span> &lt;span style="color:#ff636f">done&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>我将命令行使用如下处理后输出：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#1d2432;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">fmt&lt;/span>.&lt;span style="color:#58a1dd">Fprintf&lt;/span>(&lt;span style="color:#58a1dd">os&lt;/span>.&lt;span style="color:#58a1dd">Stderr&lt;/span>, &lt;span style="color:#a6be9d">&amp;#34;%s\n&amp;#34;&lt;/span>, &lt;span style="color:#58a1dd">strings&lt;/span>.&lt;span style="color:#58a1dd">Join&lt;/span>(&lt;span style="color:#58a1dd">s&lt;/span>.&lt;span style="color:#58a1dd">Command&lt;/span>(), &lt;span style="color:#a6be9d">&amp;#34;;&amp;#34;&lt;/span>))
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>我们在服务器上命令行的输出如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#1d2432;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>echo;There;are;spaces;in;the;statement;&lt;span style="color:#ff636f">done&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>上述输出与预期完全不一致，通常情况下，命令行的输出应该如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#1d2432;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>echo;There are spaces in the statement;&lt;span style="color:#ff636f">done&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>我们可以编译一个命令行程序验证一下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#1d2432;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">// echo.go
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">// go build echo.go
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span>&lt;span style="color:#ff636f">package&lt;/span> &lt;span style="color:#58a1dd">main&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff636f">import&lt;/span> (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6be9d">&amp;#34;fmt&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6be9d">&amp;#34;os&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6be9d">&amp;#34;strings&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff636f">func&lt;/span> &lt;span style="color:#58a1dd">main&lt;/span>(){
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">fmt&lt;/span>.&lt;span style="color:#58a1dd">Fprintf&lt;/span>(&lt;span style="color:#58a1dd">os&lt;/span>.&lt;span style="color:#58a1dd">Stderr&lt;/span>, &lt;span style="color:#a6be9d">&amp;#34;%s\n&amp;#34;&lt;/span>, &lt;span style="color:#58a1dd">strings&lt;/span>.&lt;span style="color:#58a1dd">Join&lt;/span>(&lt;span style="color:#58a1dd">os&lt;/span>.&lt;span style="color:#58a1dd">Args&lt;/span>, &lt;span style="color:#a6be9d">&amp;#34;;&amp;#34;&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>然后运行输出结果如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#1d2432;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>./echo &lt;span style="color:#a6be9d">&amp;#34;There are spaces in the statement&amp;#34;&lt;/span> &lt;span style="color:#ff636f">done&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>./echo;There are spaces in the statement;&lt;span style="color:#ff636f">done&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>这就说明，SSH 的解析出了问题。我们使用的是 &lt;a href="https://github.com/gliderlabs/ssh">github.com/gliderlabs/ssh&lt;/a>，这个问题是否是与 &lt;code>gliderlabs/ssh&lt;/code> 解析有关，我们不能过早的下结论，我们可以修改 &lt;code>gliderlabs/ssh&lt;/code> 的源码验证一番。&lt;/p>
&lt;p>&lt;code>gliderlabs/ssh&lt;/code> 的命令行解析代码在：&lt;a href="https://github.com/gliderlabs/ssh/blob/ef6d89046be36104109e42ac1fee6601f9be95d7/session.go#L217">https://github.com/gliderlabs/ssh/blob/ef6d89046be36104109e42ac1fee6601f9be95d7/session.go#L217&lt;/a>：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#1d2432;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">var&lt;/span> &lt;span style="color:#58a1dd">payload&lt;/span> = &lt;span style="color:#ff636f">struct&lt;/span>{ &lt;span style="color:#58a1dd">Value&lt;/span> &lt;span style="color:#ff636f">string&lt;/span> }{}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">gossh&lt;/span>.&lt;span style="color:#58a1dd">Unmarshal&lt;/span>(&lt;span style="color:#58a1dd">req&lt;/span>.&lt;span style="color:#58a1dd">Payload&lt;/span>, &lt;span style="color:#ff636f">&amp;amp;&lt;/span>&lt;span style="color:#58a1dd">payload&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">sess&lt;/span>.&lt;span style="color:#58a1dd">cmd&lt;/span>, &lt;span style="color:#58a1dd">_&lt;/span> = &lt;span style="color:#58a1dd">shlex&lt;/span>.&lt;span style="color:#58a1dd">Split&lt;/span>(&lt;span style="color:#58a1dd">payload&lt;/span>.&lt;span style="color:#58a1dd">Value&lt;/span>, &lt;span style="color:#ff636f">true&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#828b96;font-style:italic">// If there&amp;#39;s a session policy callback, we need to confirm before
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span> &lt;span style="color:#828b96;font-style:italic">// accepting the session.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span> &lt;span style="color:#ff636f">if&lt;/span> &lt;span style="color:#58a1dd">sess&lt;/span>.&lt;span style="color:#58a1dd">sessReqCb&lt;/span> &lt;span style="color:#ff636f">!=&lt;/span> &lt;span style="color:#ff636f">nil&lt;/span> &lt;span style="color:#ff636f">&amp;amp;&amp;amp;&lt;/span> !&lt;span style="color:#58a1dd">sess&lt;/span>.&lt;span style="color:#58a1dd">sessReqCb&lt;/span>(&lt;span style="color:#58a1dd">sess&lt;/span>, &lt;span style="color:#58a1dd">req&lt;/span>.&lt;span style="color:#58a1dd">Type&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">sess&lt;/span>.&lt;span style="color:#58a1dd">cmd&lt;/span> = &lt;span style="color:#ff636f">nil&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">req&lt;/span>.&lt;span style="color:#58a1dd">Reply&lt;/span>(&lt;span style="color:#ff636f">false&lt;/span>, &lt;span style="color:#ff636f">nil&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">continue&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>我们可以在 &lt;code>shlex.Split&lt;/code> 前面插入一段代码&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#1d2432;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">fmt&lt;/span>.&lt;span style="color:#58a1dd">Fprintf&lt;/span>(&lt;span style="color:#58a1dd">os&lt;/span>.&lt;span style="color:#58a1dd">Stderr&lt;/span>, &lt;span style="color:#a6be9d">&amp;#34;command: [%s]\n&amp;#34;&lt;/span>, &lt;span style="color:#58a1dd">payload&lt;/span>.&lt;span style="color:#58a1dd">Value&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>然后或得 BSSHD 命令行输出：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#1d2432;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-txt" data-lang="txt">&lt;span style="display:flex;">&lt;span>command: [echo There are spaces in the statement done]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>echo;There;are;spaces;in;the;statement;done
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>而 command 的内容直接从 SSH Exe 请求的加密数据解析出来的，这就意味着 SSH 传入了错误的命令。那么我们翻阅 OpenSSH 源码。&lt;/p>
&lt;h2 id="普遍的糟糕">普遍的糟糕&lt;/h2>
&lt;p>在 OpenSSH 的源码镜像中：&lt;a href="https://github.com/openssh/openssh-portable/blob/9edbd7821e6837e98e7e95546cede804dac96754/ssh.c#L1061">https://github.com/openssh/openssh-portable/blob/9edbd7821e6837e98e7e95546cede804dac96754/ssh.c#L1061&lt;/a> 有一段代码：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#1d2432;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c" data-lang="c">&lt;span style="display:flex;">&lt;span> &lt;span style="color:#828b96;font-style:italic">/* A command has been specified. Store it into the buffer. */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">for&lt;/span> (&lt;span style="color:#58a1dd">i&lt;/span> &lt;span style="color:#ff636f">=&lt;/span> &lt;span style="color:#a6be9d">0&lt;/span>; &lt;span style="color:#58a1dd">i&lt;/span> &lt;span style="color:#ff636f">&amp;lt;&lt;/span> &lt;span style="color:#58a1dd">ac&lt;/span>; &lt;span style="color:#58a1dd">i&lt;/span>&lt;span style="color:#ff636f">++&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">if&lt;/span> ((&lt;span style="color:#58a1dd">r&lt;/span> &lt;span style="color:#ff636f">=&lt;/span> &lt;span style="color:#58a1dd">sshbuf_putf&lt;/span>(&lt;span style="color:#58a1dd">command&lt;/span>, &lt;span style="color:#a6be9d">&amp;#34;%s%s&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">i&lt;/span> &lt;span style="color:#ff636f">?&lt;/span> &lt;span style="color:#a6be9d">&amp;#34; &amp;#34;&lt;/span> &lt;span style="color:#ff636f">:&lt;/span> &lt;span style="color:#a6be9d">&amp;#34;&amp;#34;&lt;/span>, &lt;span style="color:#58a1dd">av&lt;/span>[&lt;span style="color:#58a1dd">i&lt;/span>])) &lt;span style="color:#ff636f">!=&lt;/span> &lt;span style="color:#a6be9d">0&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">fatal&lt;/span>(&lt;span style="color:#a6be9d">&amp;#34;%s: buffer error: %s&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">__func__&lt;/span>, &lt;span style="color:#58a1dd">ssh_err&lt;/span>(&lt;span style="color:#58a1dd">r&lt;/span>));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>这段代码将字符串数组变成了字符串，但忘记了字符串数组中的每一个都有可能含有空格字符，那么在命令行解析之时就会出现与预期不一致的结果。这个问题在 Dropbear SSH 中也出现了：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#1d2432;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c" data-lang="c">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">//https://github.com/mkj/dropbear/blob/cb945f9f670e95305c7c5cc5ff344d1f2707b602/cli-runopts.c#L390
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span> &lt;span style="color:#ff636f">if&lt;/span> (&lt;span style="color:#58a1dd">i&lt;/span> &lt;span style="color:#ff636f">&amp;lt;&lt;/span> (&lt;span style="color:#ff636f">unsigned&lt;/span> &lt;span style="color:#ff636f">int&lt;/span>)&lt;span style="color:#58a1dd">argc&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#828b96;font-style:italic">/* Build the command to send */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">cmdlen&lt;/span> &lt;span style="color:#ff636f">=&lt;/span> &lt;span style="color:#a6be9d">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">for&lt;/span> (&lt;span style="color:#58a1dd">j&lt;/span> &lt;span style="color:#ff636f">=&lt;/span> &lt;span style="color:#58a1dd">i&lt;/span>; &lt;span style="color:#58a1dd">j&lt;/span> &lt;span style="color:#ff636f">&amp;lt;&lt;/span> (&lt;span style="color:#ff636f">unsigned&lt;/span> &lt;span style="color:#ff636f">int&lt;/span>)&lt;span style="color:#58a1dd">argc&lt;/span>; &lt;span style="color:#58a1dd">j&lt;/span>&lt;span style="color:#ff636f">++&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">cmdlen&lt;/span> &lt;span style="color:#ff636f">+=&lt;/span> &lt;span style="color:#58a1dd">strlen&lt;/span>(&lt;span style="color:#58a1dd">argv&lt;/span>[&lt;span style="color:#58a1dd">j&lt;/span>]) &lt;span style="color:#ff636f">+&lt;/span> &lt;span style="color:#a6be9d">1&lt;/span>; &lt;span style="color:#828b96;font-style:italic">/* +1 for spaces */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#828b96;font-style:italic">/* Allocate the space */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">cli_opts&lt;/span>.&lt;span style="color:#58a1dd">cmd&lt;/span> &lt;span style="color:#ff636f">=&lt;/span> (&lt;span style="color:#ff636f">char&lt;/span>&lt;span style="color:#ff636f">*&lt;/span>)&lt;span style="color:#58a1dd">m_malloc&lt;/span>(&lt;span style="color:#58a1dd">cmdlen&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">cli_opts&lt;/span>.&lt;span style="color:#58a1dd">cmd&lt;/span>[&lt;span style="color:#a6be9d">0&lt;/span>] &lt;span style="color:#ff636f">=&lt;/span> &lt;span style="color:#a6be9d">&amp;#39;\0&amp;#39;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#828b96;font-style:italic">/* Append all the bits */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">for&lt;/span> (&lt;span style="color:#58a1dd">j&lt;/span> &lt;span style="color:#ff636f">=&lt;/span> &lt;span style="color:#58a1dd">i&lt;/span>; &lt;span style="color:#58a1dd">j&lt;/span> &lt;span style="color:#ff636f">&amp;lt;&lt;/span> (&lt;span style="color:#ff636f">unsigned&lt;/span> &lt;span style="color:#ff636f">int&lt;/span>)&lt;span style="color:#58a1dd">argc&lt;/span>; &lt;span style="color:#58a1dd">j&lt;/span>&lt;span style="color:#ff636f">++&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">strlcat&lt;/span>(&lt;span style="color:#58a1dd">cli_opts&lt;/span>.&lt;span style="color:#58a1dd">cmd&lt;/span>, &lt;span style="color:#58a1dd">argv&lt;/span>[&lt;span style="color:#58a1dd">j&lt;/span>], &lt;span style="color:#58a1dd">cmdlen&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">strlcat&lt;/span>(&lt;span style="color:#58a1dd">cli_opts&lt;/span>.&lt;span style="color:#58a1dd">cmd&lt;/span>, &lt;span style="color:#a6be9d">&amp;#34; &amp;#34;&lt;/span>, &lt;span style="color:#58a1dd">cmdlen&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#828b96;font-style:italic">/* It&amp;#39;ll be null-terminated here */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">TRACE&lt;/span>((&lt;span style="color:#a6be9d">&amp;#34;cmd is: %s&amp;#34;&lt;/span>, &lt;span style="color:#58a1dd">cli_opts&lt;/span>.&lt;span style="color:#58a1dd">cmd&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>而像 libssh libssh2 以及 go &lt;code>crypto/ssh&lt;/code> 的惯用方法也未考虑到命令行存在空格的问题，因此，很多基于这些库实现的客户端也未考虑这个问题。&lt;/p>
&lt;p>另外，在 &lt;a href="https://tools.ietf.org/html/rfc4254#section-6.5">SSH RFC 4252&lt;/a> 中，对 &lt;code>exec&lt;/code> 命令行的解析，仅仅只有如下一段话：&lt;/p>
&lt;pre tabindex="0">&lt;code> byte SSH_MSG_CHANNEL_REQUEST
uint32 recipient channel
string &amp;#34;exec&amp;#34;
boolean want reply
string command
This message will request that the server start the execution of the
given command. The &amp;#39;command&amp;#39; string may contain a path. Normal
precautions MUST be taken to prevent the execution of unauthorized
commands.
&lt;/code>&lt;/pre>&lt;p>SSH 的规范并没有指出命令行的解析格式规则，但实际上，&lt;code>command&lt;/code> 的解析应当符合 POSIX 1003.1 的 Shell 部分。当然，显式描述一下会更好。&lt;/p>
&lt;p>我觉得 Windows 这一点做的比较好，文档规范比较完备：&lt;a href="https://docs.microsoft.com/en-us/previous-versions/ms880421(v=msdn.10)">Parsing C Command-Line Arguments&lt;/a>。&lt;/p>
&lt;h2 id="openssh-服务端的命令行解析">OpenSSH 服务端的命令行解析&lt;/h2>
&lt;p>在 OpenSSH SSHD 的源码中，命令行的处理流程如下：&lt;/p>
&lt;p>当请求为 &lt;code>exec&lt;/code> 时：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#1d2432;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c" data-lang="c">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">//https://github.com/openssh/openssh-portable/blob/9edbd7821e6837e98e7e95546cede804dac96754/session.c#L2221
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span> &lt;span style="color:#ff636f">if&lt;/span> (&lt;span style="color:#58a1dd">strcmp&lt;/span>(&lt;span style="color:#58a1dd">rtype&lt;/span>, &lt;span style="color:#a6be9d">&amp;#34;shell&amp;#34;&lt;/span>) &lt;span style="color:#ff636f">==&lt;/span> &lt;span style="color:#a6be9d">0&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">success&lt;/span> &lt;span style="color:#ff636f">=&lt;/span> &lt;span style="color:#58a1dd">session_shell_req&lt;/span>(&lt;span style="color:#58a1dd">ssh&lt;/span>, &lt;span style="color:#58a1dd">s&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } &lt;span style="color:#ff636f">else&lt;/span> &lt;span style="color:#ff636f">if&lt;/span> (&lt;span style="color:#58a1dd">strcmp&lt;/span>(&lt;span style="color:#58a1dd">rtype&lt;/span>, &lt;span style="color:#a6be9d">&amp;#34;exec&amp;#34;&lt;/span>) &lt;span style="color:#ff636f">==&lt;/span> &lt;span style="color:#a6be9d">0&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">success&lt;/span> &lt;span style="color:#ff636f">=&lt;/span> &lt;span style="color:#58a1dd">session_exec_req&lt;/span>(&lt;span style="color:#58a1dd">ssh&lt;/span>, &lt;span style="color:#58a1dd">s&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } &lt;span style="color:#ff636f">else&lt;/span> &lt;span style="color:#ff636f">if&lt;/span> (&lt;span style="color:#58a1dd">strcmp&lt;/span>(&lt;span style="color:#58a1dd">rtype&lt;/span>, &lt;span style="color:#a6be9d">&amp;#34;pty-req&amp;#34;&lt;/span>) &lt;span style="color:#ff636f">==&lt;/span> &lt;span style="color:#a6be9d">0&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">success&lt;/span> &lt;span style="color:#ff636f">=&lt;/span> &lt;span style="color:#58a1dd">session_pty_req&lt;/span>(&lt;span style="color:#58a1dd">ssh&lt;/span>, &lt;span style="color:#58a1dd">s&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } &lt;span style="color:#ff636f">else&lt;/span> &lt;span style="color:#ff636f">if&lt;/span> (&lt;span style="color:#58a1dd">strcmp&lt;/span>(&lt;span style="color:#58a1dd">rtype&lt;/span>, &lt;span style="color:#a6be9d">&amp;#34;x11-req&amp;#34;&lt;/span>) &lt;span style="color:#ff636f">==&lt;/span> &lt;span style="color:#a6be9d">0&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">success&lt;/span> &lt;span style="color:#ff636f">=&lt;/span> &lt;span style="color:#58a1dd">session_x11_req&lt;/span>(&lt;span style="color:#58a1dd">ssh&lt;/span>, &lt;span style="color:#58a1dd">s&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } &lt;span style="color:#ff636f">else&lt;/span> &lt;span style="color:#ff636f">if&lt;/span> (&lt;span style="color:#58a1dd">strcmp&lt;/span>(&lt;span style="color:#58a1dd">rtype&lt;/span>, &lt;span style="color:#a6be9d">&amp;#34;auth-agent-req@openssh.com&amp;#34;&lt;/span>) &lt;span style="color:#ff636f">==&lt;/span> &lt;span style="color:#a6be9d">0&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">success&lt;/span> &lt;span style="color:#ff636f">=&lt;/span> &lt;span style="color:#58a1dd">session_auth_agent_req&lt;/span>(&lt;span style="color:#58a1dd">ssh&lt;/span>, &lt;span style="color:#58a1dd">s&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } &lt;span style="color:#ff636f">else&lt;/span> &lt;span style="color:#ff636f">if&lt;/span> (&lt;span style="color:#58a1dd">strcmp&lt;/span>(&lt;span style="color:#58a1dd">rtype&lt;/span>, &lt;span style="color:#a6be9d">&amp;#34;subsystem&amp;#34;&lt;/span>) &lt;span style="color:#ff636f">==&lt;/span> &lt;span style="color:#a6be9d">0&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">success&lt;/span> &lt;span style="color:#ff636f">=&lt;/span> &lt;span style="color:#58a1dd">session_subsystem_req&lt;/span>(&lt;span style="color:#58a1dd">ssh&lt;/span>, &lt;span style="color:#58a1dd">s&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } &lt;span style="color:#ff636f">else&lt;/span> &lt;span style="color:#ff636f">if&lt;/span> (&lt;span style="color:#58a1dd">strcmp&lt;/span>(&lt;span style="color:#58a1dd">rtype&lt;/span>, &lt;span style="color:#a6be9d">&amp;#34;env&amp;#34;&lt;/span>) &lt;span style="color:#ff636f">==&lt;/span> &lt;span style="color:#a6be9d">0&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">success&lt;/span> &lt;span style="color:#ff636f">=&lt;/span> &lt;span style="color:#58a1dd">session_env_req&lt;/span>(&lt;span style="color:#58a1dd">ssh&lt;/span>, &lt;span style="color:#58a1dd">s&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>获得 &lt;code>Command&lt;/code> 并执行命令：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#1d2432;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c" data-lang="c">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">//https://github.com/openssh/openssh-portable/blob/9edbd7821e6837e98e7e95546cede804dac96754/session.c#L2047
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span>&lt;span style="color:#ff636f">static&lt;/span> &lt;span style="color:#ff636f">int&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#58a1dd">session_exec_req&lt;/span>(&lt;span style="color:#ff636f">struct&lt;/span> &lt;span style="color:#58a1dd">ssh&lt;/span> &lt;span style="color:#ff636f">*&lt;/span>&lt;span style="color:#58a1dd">ssh&lt;/span>, &lt;span style="color:#58a1dd">Session&lt;/span> &lt;span style="color:#ff636f">*&lt;/span>&lt;span style="color:#58a1dd">s&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">u_int&lt;/span> &lt;span style="color:#58a1dd">success&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">int&lt;/span> &lt;span style="color:#58a1dd">r&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">char&lt;/span> &lt;span style="color:#ff636f">*&lt;/span>&lt;span style="color:#58a1dd">command&lt;/span> &lt;span style="color:#ff636f">=&lt;/span> &lt;span style="color:#58a1dd">NULL&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">if&lt;/span> ((&lt;span style="color:#58a1dd">r&lt;/span> &lt;span style="color:#ff636f">=&lt;/span> &lt;span style="color:#58a1dd">sshpkt_get_cstring&lt;/span>(&lt;span style="color:#58a1dd">ssh&lt;/span>, &lt;span style="color:#ff636f">&amp;amp;&lt;/span>&lt;span style="color:#58a1dd">command&lt;/span>, &lt;span style="color:#58a1dd">NULL&lt;/span>)) &lt;span style="color:#ff636f">!=&lt;/span> &lt;span style="color:#a6be9d">0&lt;/span> &lt;span style="color:#ff636f">||&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (&lt;span style="color:#58a1dd">r&lt;/span> &lt;span style="color:#ff636f">=&lt;/span> &lt;span style="color:#58a1dd">sshpkt_get_end&lt;/span>(&lt;span style="color:#58a1dd">ssh&lt;/span>)) &lt;span style="color:#ff636f">!=&lt;/span> &lt;span style="color:#a6be9d">0&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">sshpkt_fatal&lt;/span>(&lt;span style="color:#58a1dd">ssh&lt;/span>, &lt;span style="color:#58a1dd">r&lt;/span>, &lt;span style="color:#a6be9d">&amp;#34;%s: parse packet&amp;#34;&lt;/span>, &lt;span style="color:#58a1dd">__func__&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">success&lt;/span> &lt;span style="color:#ff636f">=&lt;/span> &lt;span style="color:#58a1dd">do_exec&lt;/span>(&lt;span style="color:#58a1dd">ssh&lt;/span>, &lt;span style="color:#58a1dd">s&lt;/span>, &lt;span style="color:#58a1dd">command&lt;/span>) &lt;span style="color:#ff636f">==&lt;/span> &lt;span style="color:#a6be9d">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">free&lt;/span>(&lt;span style="color:#58a1dd">command&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">return&lt;/span> &lt;span style="color:#58a1dd">success&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>无论是何种途径，在 OpenSSH 中，sshd 启动进程都是通过 &lt;code>sh -c&lt;/code> 这样的方式实现的，这就意味着，命令行应当符合 shell 的标准。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#1d2432;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c" data-lang="c">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">// https://github.com/openssh/openssh-portable/blob/9edbd7821e6837e98e7e95546cede804dac96754/session.c#L1681
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span> &lt;span style="color:#ff636f">if&lt;/span> (&lt;span style="color:#ff636f">!&lt;/span>&lt;span style="color:#58a1dd">command&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">char&lt;/span> &lt;span style="color:#58a1dd">argv0&lt;/span>[&lt;span style="color:#a6be9d">256&lt;/span>];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#828b96;font-style:italic">/* Start the shell. Set initial character to &amp;#39;-&amp;#39;. */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">argv0&lt;/span>[&lt;span style="color:#a6be9d">0&lt;/span>] &lt;span style="color:#ff636f">=&lt;/span> &lt;span style="color:#a6be9d">&amp;#39;-&amp;#39;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">if&lt;/span> (&lt;span style="color:#58a1dd">strlcpy&lt;/span>(&lt;span style="color:#58a1dd">argv0&lt;/span> &lt;span style="color:#ff636f">+&lt;/span> &lt;span style="color:#a6be9d">1&lt;/span>, &lt;span style="color:#58a1dd">shell0&lt;/span>, &lt;span style="color:#ff636f">sizeof&lt;/span>(&lt;span style="color:#58a1dd">argv0&lt;/span>) &lt;span style="color:#ff636f">-&lt;/span> &lt;span style="color:#a6be9d">1&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">&amp;gt;=&lt;/span> &lt;span style="color:#ff636f">sizeof&lt;/span>(&lt;span style="color:#58a1dd">argv0&lt;/span>) &lt;span style="color:#ff636f">-&lt;/span> &lt;span style="color:#a6be9d">1&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">errno&lt;/span> &lt;span style="color:#ff636f">=&lt;/span> &lt;span style="color:#58a1dd">EINVAL&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">perror&lt;/span>(&lt;span style="color:#58a1dd">shell&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">exit&lt;/span>(&lt;span style="color:#a6be9d">1&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#828b96;font-style:italic">/* Execute the shell. */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">argv&lt;/span>[&lt;span style="color:#a6be9d">0&lt;/span>] &lt;span style="color:#ff636f">=&lt;/span> &lt;span style="color:#58a1dd">argv0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">argv&lt;/span>[&lt;span style="color:#a6be9d">1&lt;/span>] &lt;span style="color:#ff636f">=&lt;/span> &lt;span style="color:#58a1dd">NULL&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">execve&lt;/span>(&lt;span style="color:#58a1dd">shell&lt;/span>, &lt;span style="color:#58a1dd">argv&lt;/span>, &lt;span style="color:#58a1dd">env&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#828b96;font-style:italic">/* Executing the shell failed. */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">perror&lt;/span>(&lt;span style="color:#58a1dd">shell&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">exit&lt;/span>(&lt;span style="color:#a6be9d">1&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#828b96;font-style:italic">/*
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic"> * Execute the command using the user&amp;#39;s shell. This uses the -c
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic"> * option to execute the command.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic"> */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">argv&lt;/span>[&lt;span style="color:#a6be9d">0&lt;/span>] &lt;span style="color:#ff636f">=&lt;/span> (&lt;span style="color:#ff636f">char&lt;/span> &lt;span style="color:#ff636f">*&lt;/span>) &lt;span style="color:#58a1dd">shell0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">argv&lt;/span>[&lt;span style="color:#a6be9d">1&lt;/span>] &lt;span style="color:#ff636f">=&lt;/span> &lt;span style="color:#a6be9d">&amp;#34;-c&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">argv&lt;/span>[&lt;span style="color:#a6be9d">2&lt;/span>] &lt;span style="color:#ff636f">=&lt;/span> (&lt;span style="color:#ff636f">char&lt;/span> &lt;span style="color:#ff636f">*&lt;/span>) &lt;span style="color:#58a1dd">command&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">argv&lt;/span>[&lt;span style="color:#a6be9d">3&lt;/span>] &lt;span style="color:#ff636f">=&lt;/span> &lt;span style="color:#58a1dd">NULL&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">execve&lt;/span>(&lt;span style="color:#58a1dd">shell&lt;/span>, &lt;span style="color:#58a1dd">argv&lt;/span>, &lt;span style="color:#58a1dd">env&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">perror&lt;/span>(&lt;span style="color:#58a1dd">shell&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">exit&lt;/span>(&lt;span style="color:#a6be9d">1&lt;/span>);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>这里还有一个问题，服务器上的 Shell 可能是 Dash shell，抑或是 Bash Shell，还有可能是 Zsh 等等，不同的 shell 语法的村子一定的差异，对 &lt;code>sh -c '$command'&lt;/code> 的解析并不一定相同，这也可能导致更多的不确定性。&lt;/p>
&lt;h2 id="尝试修复">尝试修复&lt;/h2>
&lt;p>我创建了一个 PR：&lt;a href="https://github.com/openssh/openssh-portable/pull/123">Fix SSH incorrect command line conversion&lt;/a>，这个 PR 将命令行参数编码，核心代码如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#1d2432;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c" data-lang="c">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff636f">static&lt;/span> &lt;span style="color:#ff636f">const&lt;/span> &lt;span style="color:#ff636f">char&lt;/span>&lt;span style="color:#ff636f">*&lt;/span> &lt;span style="color:#58a1dd">escape_argument&lt;/span>(&lt;span style="color:#ff636f">char&lt;/span> &lt;span style="color:#ff636f">*&lt;/span>&lt;span style="color:#58a1dd">buf&lt;/span>, &lt;span style="color:#ff636f">int&lt;/span> &lt;span style="color:#58a1dd">bufsize&lt;/span>, &lt;span style="color:#ff636f">char&lt;/span> &lt;span style="color:#ff636f">*&lt;/span>&lt;span style="color:#58a1dd">arg&lt;/span>){
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">int&lt;/span> &lt;span style="color:#58a1dd">len&lt;/span> &lt;span style="color:#ff636f">=&lt;/span> &lt;span style="color:#58a1dd">strlen&lt;/span>(&lt;span style="color:#58a1dd">arg&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">if&lt;/span> (&lt;span style="color:#58a1dd">len&lt;/span> &lt;span style="color:#ff636f">==&lt;/span> &lt;span style="color:#a6be9d">0&lt;/span>){
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">return&lt;/span> &lt;span style="color:#a6be9d">&amp;#34;&lt;/span>&lt;span style="color:#a6be9d">\&amp;#34;\&amp;#34;&lt;/span>&lt;span style="color:#a6be9d">&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">if&lt;/span>(&lt;span style="color:#58a1dd">len&lt;/span>&lt;span style="color:#ff636f">+&lt;/span>&lt;span style="color:#a6be9d">2&lt;/span>&lt;span style="color:#ff636f">&amp;gt;=&lt;/span>&lt;span style="color:#58a1dd">bufsize&lt;/span>){
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">return&lt;/span> &lt;span style="color:#58a1dd">arg&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">int&lt;/span> &lt;span style="color:#58a1dd">hasspace&lt;/span>, &lt;span style="color:#58a1dd">i&lt;/span> ,&lt;span style="color:#58a1dd">n&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">hasspace&lt;/span> &lt;span style="color:#ff636f">=&lt;/span> &lt;span style="color:#a6be9d">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">n&lt;/span> &lt;span style="color:#ff636f">=&lt;/span> &lt;span style="color:#58a1dd">len&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">for&lt;/span> (&lt;span style="color:#58a1dd">i&lt;/span>&lt;span style="color:#ff636f">=&lt;/span>&lt;span style="color:#a6be9d">0&lt;/span>; &lt;span style="color:#58a1dd">i&lt;/span>&lt;span style="color:#ff636f">&amp;lt;&lt;/span>&lt;span style="color:#58a1dd">len&lt;/span>; &lt;span style="color:#58a1dd">i&lt;/span>&lt;span style="color:#ff636f">++&lt;/span>){
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">switch&lt;/span>(&lt;span style="color:#58a1dd">arg&lt;/span>[&lt;span style="color:#58a1dd">i&lt;/span>]){
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">case&lt;/span> &lt;span style="color:#a6be9d">&amp;#39;&amp;#34;&amp;#39;&lt;/span>&lt;span style="color:#ff636f">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">case&lt;/span> &lt;span style="color:#a6be9d">&amp;#39;\\&amp;#39;&lt;/span>&lt;span style="color:#ff636f">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">n&lt;/span>&lt;span style="color:#ff636f">++&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">break&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">case&lt;/span> &lt;span style="color:#a6be9d">&amp;#39; &amp;#39;&lt;/span>&lt;span style="color:#ff636f">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">case&lt;/span> &lt;span style="color:#a6be9d">&amp;#39;\t&amp;#39;&lt;/span>&lt;span style="color:#ff636f">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">hasspace&lt;/span> &lt;span style="color:#ff636f">=&lt;/span>&lt;span style="color:#a6be9d">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">break&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">default&lt;/span>&lt;span style="color:#ff636f">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">break&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">if&lt;/span>(&lt;span style="color:#58a1dd">hasspace&lt;/span>){
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">n&lt;/span>&lt;span style="color:#ff636f">+=&lt;/span>&lt;span style="color:#a6be9d">2&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">if&lt;/span> (&lt;span style="color:#58a1dd">n&lt;/span> &lt;span style="color:#ff636f">==&lt;/span> &lt;span style="color:#58a1dd">len&lt;/span>&lt;span style="color:#ff636f">||&lt;/span>&lt;span style="color:#58a1dd">bufsize&lt;/span>&lt;span style="color:#ff636f">+&lt;/span>&lt;span style="color:#a6be9d">1&lt;/span>&lt;span style="color:#ff636f">&amp;lt;&lt;/span>&lt;span style="color:#58a1dd">n&lt;/span>){
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">return&lt;/span> &lt;span style="color:#58a1dd">arg&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">int&lt;/span> &lt;span style="color:#58a1dd">j&lt;/span>&lt;span style="color:#ff636f">=&lt;/span>&lt;span style="color:#a6be9d">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">int&lt;/span> &lt;span style="color:#58a1dd">slashes&lt;/span>&lt;span style="color:#ff636f">=&lt;/span>&lt;span style="color:#a6be9d">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">if&lt;/span>(&lt;span style="color:#58a1dd">hasspace&lt;/span>){
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">buf&lt;/span>[&lt;span style="color:#58a1dd">j&lt;/span>]&lt;span style="color:#ff636f">=&lt;/span>&lt;span style="color:#a6be9d">&amp;#39;&amp;#34;&amp;#39;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">j&lt;/span>&lt;span style="color:#ff636f">++&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">for&lt;/span>(&lt;span style="color:#58a1dd">i&lt;/span>&lt;span style="color:#ff636f">=&lt;/span>&lt;span style="color:#a6be9d">0&lt;/span>; &lt;span style="color:#58a1dd">i&lt;/span>&lt;span style="color:#ff636f">&amp;lt;&lt;/span>&lt;span style="color:#58a1dd">len&lt;/span>; &lt;span style="color:#58a1dd">i&lt;/span>&lt;span style="color:#ff636f">++&lt;/span>){
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">switch&lt;/span>(&lt;span style="color:#58a1dd">arg&lt;/span>[&lt;span style="color:#58a1dd">i&lt;/span>]){
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">case&lt;/span> &lt;span style="color:#a6be9d">&amp;#39;\\&amp;#39;&lt;/span>&lt;span style="color:#ff636f">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">slashes&lt;/span>&lt;span style="color:#ff636f">++&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">buf&lt;/span>[&lt;span style="color:#58a1dd">j&lt;/span>]&lt;span style="color:#ff636f">=&lt;/span>&lt;span style="color:#58a1dd">arg&lt;/span>[&lt;span style="color:#58a1dd">i&lt;/span>];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">break&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">case&lt;/span> &lt;span style="color:#a6be9d">&amp;#39;&amp;#34;&amp;#39;&lt;/span>&lt;span style="color:#ff636f">:&lt;/span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">for&lt;/span>(;&lt;span style="color:#58a1dd">slashes&lt;/span>&lt;span style="color:#ff636f">&amp;gt;&lt;/span>&lt;span style="color:#a6be9d">0&lt;/span>;&lt;span style="color:#58a1dd">slashes&lt;/span>&lt;span style="color:#ff636f">--&lt;/span>){
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">buf&lt;/span>[&lt;span style="color:#58a1dd">j&lt;/span>]&lt;span style="color:#ff636f">=&lt;/span>&lt;span style="color:#a6be9d">&amp;#39;\\&amp;#39;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">j&lt;/span>&lt;span style="color:#ff636f">++&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">buf&lt;/span>[&lt;span style="color:#58a1dd">j&lt;/span>]&lt;span style="color:#ff636f">=&lt;/span>&lt;span style="color:#a6be9d">&amp;#39;\\&amp;#39;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">j&lt;/span>&lt;span style="color:#ff636f">++&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">buf&lt;/span>[&lt;span style="color:#58a1dd">j&lt;/span>]&lt;span style="color:#ff636f">=&lt;/span>&lt;span style="color:#58a1dd">arg&lt;/span>[&lt;span style="color:#58a1dd">i&lt;/span>];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">break&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">default&lt;/span>&lt;span style="color:#ff636f">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">slashes&lt;/span>&lt;span style="color:#ff636f">=&lt;/span>&lt;span style="color:#a6be9d">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">buf&lt;/span>[&lt;span style="color:#58a1dd">j&lt;/span>]&lt;span style="color:#ff636f">=&lt;/span>&lt;span style="color:#58a1dd">arg&lt;/span>[&lt;span style="color:#58a1dd">i&lt;/span>];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">break&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">j&lt;/span>&lt;span style="color:#ff636f">++&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">if&lt;/span>(&lt;span style="color:#58a1dd">hasspace&lt;/span>){
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">for&lt;/span>(;&lt;span style="color:#58a1dd">slashes&lt;/span>&lt;span style="color:#ff636f">&amp;gt;&lt;/span>&lt;span style="color:#a6be9d">0&lt;/span>;&lt;span style="color:#58a1dd">slashes&lt;/span>&lt;span style="color:#ff636f">--&lt;/span>){
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">buf&lt;/span>[&lt;span style="color:#58a1dd">j&lt;/span>]&lt;span style="color:#ff636f">=&lt;/span>&lt;span style="color:#a6be9d">&amp;#39;\\&amp;#39;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">j&lt;/span>&lt;span style="color:#ff636f">++&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">buf&lt;/span>[&lt;span style="color:#58a1dd">j&lt;/span>]&lt;span style="color:#ff636f">=&lt;/span>&lt;span style="color:#a6be9d">&amp;#39;&amp;#34;&amp;#39;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">j&lt;/span>&lt;span style="color:#ff636f">++&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">buf&lt;/span>[&lt;span style="color:#58a1dd">j&lt;/span>]&lt;span style="color:#ff636f">=&lt;/span>&lt;span style="color:#a6be9d">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#828b96;font-style:italic">//memchr(, int __c, size_t __n)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span> &lt;span style="color:#ff636f">return&lt;/span> &lt;span style="color:#58a1dd">buf&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>但 PR 被关闭了,这个问题最终需要 SSH 协议的改进，否则难以修复。而在 OpenSSH BUG 社区实际上早有讨论：&lt;a href="http://bugzilla.mindrot.org/show_bug.cgi?id=2283">http://bugzilla.mindrot.org/show_bug.cgi?id=2283&lt;/a>。&lt;/p>
&lt;h2 id="最后">最后&lt;/h2>
&lt;p>SSH 并不完美，OpenSSH 也不完美。&lt;/p>
- https://forcemz.net/posts/2019/2019-03-18-ssh-one-bug/ - Copyright (c) 2009-2024 J23</description></item><item><title>构建恰当的 Git SSH Server</title><link>https://forcemz.net/posts/2019/2019-03-15-make-a-git-ssh-server/</link><pubDate>Fri, 15 Mar 2019 18:00:00 +0800</pubDate><guid>https://forcemz.net/posts/2019/2019-03-15-make-a-git-ssh-server/</guid><description>Charlie's Rethinking https://forcemz.net/posts/2019/2019-03-15-make-a-git-ssh-server/ -&lt;h2 id="前言">前言&lt;/h2>
&lt;p>相对于 HTTP(HTTPS) 协议，Git 在使用 SSH 协议操作远程存储库时，因为省去了输入用户名密码的环节，往往要更方便一些，并且，在 Gitlab 这样的代码托管服务中，SSH 在时长上更具优势，早期 Gitlab 使用了 Grack 提供 Git HTTP 访问支持，由于 Unicron+Grack 固定数目多线程同步模型导致服务器上的 HTTP 超时不得不设置非常小，而 SSH fork 多线程同步模型反而能够支持更大的访问时长。实际情况中，Gitee 平台里 Git 接入的最大份额也是 SSH。构建恰当的 Git SSH Server 对于整个 Gitee 平台也就非常重要。&lt;/p>
&lt;h2 id="git-ssh-基于-openssh">Git SSH 基于 OpenSSH&lt;/h2>
&lt;p>在 OpenSSH 的 &lt;a href="https://linux.die.net/man/5/sshd_config">&lt;code>sshd_config&lt;/code>&lt;/a> 中有一些关键配置项 &lt;code>AuthorizedKeysFile&lt;/code> (通常为 &lt;code>.ssh/authorized_keys&lt;/code>) &lt;code>AuthorizedKeysCommand&lt;/code>。Git SSH 的授权也是由这些特性实现的，具体的实现可以参考 &lt;a href="https://github.com/gitlabhq/gitlab-shell">gitlab-shell&lt;/a>&lt;/p>
&lt;blockquote>
&lt;p>git pull/push over ssh -&amp;gt; gitlab-shell -&amp;gt; API call to gitlab-rails (Authorization) -&amp;gt; accept or decline -&amp;gt; execute git command&lt;/p>
&lt;/blockquote>
&lt;p>早在 2015 年，Gitee 由 NFS 架构转向为目前的分布式架构之初，我们面临了一个难题，如何使得 Git SSH 的流量分发到不同的存储后端，最初的想法是还是使用 OpenSSH，基于端口转发，但端口转发的流量在内网中仍然需要重复加密解密，这非常消耗 CPU 资源。并且验证流程不是很清晰，需要启动命令完成验证，这对于体量较大的代码托管平台来说是不能忍受的。&lt;/p>
&lt;h2 id="gitee-的-ssh-server">Gitee 的 SSH Server&lt;/h2>
&lt;p>在 Gitee 分布式架构演进的过程中，我们开发了 git-srv，最初实现了 git-upload-pack，git-receive-pack 这样的命令，这些命令会取代前端服务器上的 git-upload-pack/git-receive-pack，当被打开时，会查询存储服务器路由并与存储服务器上的 git-srv 通讯，最终在存储服务器上运行 git-upload-pack/git-receive-pack。这种方案与目前 Gitlab gitlay 的架构类似。但此方案仍然有很多不足，每来一个请求，则需要启动一个子进程。子进程还要经历一些复杂的操作才能与后端建立连接，这并不高效。&lt;/p>
&lt;p>因此我们直接将 兼容的 git-receive-pack/git-upload-pack 这一中间组件拿掉，实现一个 SSH 服务与 Git-SRV 通信。于是我们基于 libssh 开发了 Basalt SSHD。由于 libssh 基本上是一个同步阻塞的库，（libssh2 没有服务端 API）, sshd 也就只能使用 pre-fork 模型，这与 OpenSSH 类似。&lt;/p>
&lt;p>但 Gitee 的 SSH Server 并不需要 fork 子进程执行，pre-fork 模型也就显得非常鸡肋。后来我们又使用 Golang &lt;a href="https://github.com/gliderlabs/ssh">gliderlabs/ssh&lt;/a> 实现了一个 SSH Server。目前 Gitee 运行的 SSH 服务有两个版本，一个是基于 libssh 的 Basalt v1，一个是基于 Golang 的 Basalt v2。要查看 Gitee 使用的 SSH Server 版本，可以运行 &lt;code>ssh -Tv git@gitee.com&lt;/code>。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#1d2432;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic"># libssh&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>debug1: Remote protocol version 2.0, remote software version Basalt-1.2
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic"># Golang&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>debug1: Remote protocol version 2.0, remote software version Basalt-2.5.2
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="ssh-server-的选型比较">SSH Server 的选型比较&lt;/h2>
&lt;p>SSH 协议指的是 &lt;a href="https://en.wikipedia.org/wiki/Secure_Shell">安全 Shell (Secure Shell)&lt;/a> 协议，SSH 用于替代不安全的 Telnet 协议和 Shell 协议，所有的流量均通过加密传输，协议的主要版本有 SSH-1，SSH-2。SSH 规范如下：&lt;/p>
&lt;ul>
&lt;li>RFC 4250, The Secure Shell (SSH) Protocol Assigned Numbers&lt;/li>
&lt;li>RFC 4251, The Secure Shell (SSH) Protocol Architecture&lt;/li>
&lt;li>RFC 4252, The Secure Shell (SSH) Authentication Protocol&lt;/li>
&lt;li>RFC 4253, The Secure Shell (SSH) Transport Layer Protocol&lt;/li>
&lt;li>RFC 4254, The Secure Shell (SSH) Connection Protocol&lt;/li>
&lt;li>RFC 4255, Using DNS to Securely Publish Secure Shell (SSH) Key Fingerprints&lt;/li>
&lt;li>RFC 4256, Generic Message Exchange Authentication for the Secure Shell Protocol (SSH)&lt;/li>
&lt;li>RFC 4335, The Secure Shell (SSH) Session Channel Break Extension&lt;/li>
&lt;li>RFC 4344, The Secure Shell (SSH) Transport Layer Encryption Modes&lt;/li>
&lt;li>RFC 4345, Improved Arcfour Modes for the Secure Shell (SSH) Transport Layer Protocol&lt;/li>
&lt;/ul>
&lt;p>修改和扩展：&lt;/p>
&lt;ul>
&lt;li>RFC 4419, Diffie-Hellman Group Exchange for the Secure Shell (SSH) Transport Layer Protocol (March 2006)&lt;/li>
&lt;li>RFC 4432, RSA Key Exchange for the Secure Shell (SSH) Transport Layer Protocol (March 2006)&lt;/li>
&lt;li>RFC 4462, Generic Security Service Application Program Interface (GSS-API) Authentication and Key Exchange for the Secure Shell (SSH) Protocol (May 2006)&lt;/li>
&lt;li>RFC 4716, The Secure Shell (SSH) Public Key File Format (November 2006)&lt;/li>
&lt;li>RFC 4819: Secure Shell Public Key Subsystem (March 2007)&lt;/li>
&lt;li>RFC 5647: AES Galois Counter Mode for the Secure Shell Transport Layer Protocol (August 2009)&lt;/li>
&lt;li>RFC 5656, Elliptic Curve Algorithm Integration in the Secure Shell Transport Layer (December 2009)&lt;/li>
&lt;li>RFC 6187: X.509v3 Certificates for Secure Shell Authentication (March 2011)&lt;/li>
&lt;li>RFC 6239: Suite B Cryptographic Suites for Secure Shell (SSH) (May 2011)&lt;/li>
&lt;li>RFC 6594: Use of the SHA-256 Algorithm with RSA, Digital Signature Algorithm (DSA), and Elliptic Curve DSA (ECDSA) in SSHFP Resource Records&lt;/li>
&lt;li>RFC 6668, SHA-2 Data Integrity Verification for the Secure Shell (SSH) Transport Layer Protocol (July 2012)&lt;/li>
&lt;li>RFC 7479: [[Ed25519]] SSHFP Resource Records&lt;/li>
&lt;/ul>
&lt;p>虽然 SSH 服务器和客户端比较多&lt;sup>1&lt;/sup>，但基于现成的 SSH 库开发 SSH Server 的选择并不多，在 C 或者 C++ 中，基本上只有 libssh 可选，libssh 被用来实现 Git SSH Server 的有 Gitee 和 Github。但目前 Github 的 SSH Server 标识变成了 &lt;code>babeld-9d924d26&lt;/code>，目前是否切换到其他实现不得而知。&lt;/p>
&lt;p>Libssh 的缺点也比较明显，异步非阻塞支持比较弱，另外开发者比较少，长期只有 Andreas Schneider 一个人提交。并且 Bug 比较多，Gitee 线上的 Libssh 也是需要应用特定的 Patch 才行。维护 SSHD 需要经常登陆 &lt;a href="https://bugs.libssh.org/">https://bugs.libssh.org/&lt;/a> 查看 libssh 动态。&lt;/p>
&lt;p>其他语言可以使用 libssh 的绑定来开发 SSH 服务器，也可以使用对应语言的 SSH 库实现，下面是一些常见的语言与对应的 SSH 库实现：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>语言&lt;/th>
&lt;th>库&lt;/th>
&lt;th>特点&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>Go&lt;/td>
&lt;td>&lt;a href="https://github.com/golang/crypto/tree/master/ssh">crypto/ssh&lt;/a>&lt;/td>
&lt;td>异步，Golang 官方支持，使用广泛&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Java&lt;/td>
&lt;td>&lt;a href="https://github.com/apache/mina-sshd">Apache Mina SSHD&lt;/a>&lt;/td>
&lt;td>高性能，功能完整&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Rust&lt;/td>
&lt;td>&lt;a href="https://pijul.org/thrussh/">Thrussh&lt;/a>&lt;/td>
&lt;td>异步 IO，缓冲区安全&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>C#&lt;/td>
&lt;td>&lt;a href="https://github.com/Aimeast/FxSsh">FxSsh&lt;/a>&lt;/td>
&lt;td>主要用于 GitCandy，功能有限&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>基于 Golang &lt;code>crypto/ssh&lt;/code> 实现的 SSH Server 比较多，而基于 Golang 的开源代码托管平台 Gogs/Gitea 均使用了 &lt;code>crypto/ssh&lt;/code>。&lt;/p>
&lt;p>Apache Mina SSHD 在 Java 社区里被广泛使用，比如 Jenkins CI 就有个 &lt;a href="https://mvnrepository.com/artifact/org.jenkins-ci.modules/sshd">SSH Server&lt;/a> 模块。基于 Scala (JVM) 的代码托管平台 &lt;a href="https://github.com/gitbucket/gitbucket">https://github.com/gitbucket/gitbucket&lt;/a> 使用了 Apache Mina SSHD 实现 Git SSH Server。&lt;/p>
&lt;p>而 Thrussh 则主要被用于基于 Rust 的版本控制工具 &lt;a href="https://pijul.org/">pijul&lt;/a> 提高 SSH 协议支持。&lt;/p>
&lt;p>还有一些商业上的 SSH Server 库，使用较少。&lt;/p>
&lt;h2 id="git-ssh-server-技术细节">Git SSH Server 技术细节&lt;/h2>
&lt;p>实现 Git SSH Server 与实现常规的 SSH Server 的区别主要是，Git SSH Server 只是一个严格的子集，session 阶段只需要实现 &lt;code>env&lt;/code> &lt;code>exec&lt;/code> 两种请求。不需要实现 &lt;code>sftp&lt;/code> 和端口转发。&lt;/p>
&lt;p>因此简单的实现一个 Git SSH Server 即可如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#1d2432;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff636f">package&lt;/span> &lt;span style="color:#58a1dd">main&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff636f">import&lt;/span> (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6be9d">&amp;#34;errors&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6be9d">&amp;#34;fmt&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6be9d">&amp;#34;log&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6be9d">&amp;#34;net&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6be9d">&amp;#34;os&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6be9d">&amp;#34;os/exec&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6be9d">&amp;#34;os/user&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6be9d">&amp;#34;path&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6be9d">&amp;#34;path/filepath&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6be9d">&amp;#34;strconv&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6be9d">&amp;#34;strings&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6be9d">&amp;#34;syscall&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6be9d">&amp;#34;time&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6be9d">&amp;#34;github.com/gliderlabs/ssh&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">// Error
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span>&lt;span style="color:#ff636f">var&lt;/span> (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">ErrPublicKeyNotFound&lt;/span> = &lt;span style="color:#58a1dd">errors&lt;/span>.&lt;span style="color:#58a1dd">New&lt;/span>(&lt;span style="color:#a6be9d">&amp;#34;Public key not found&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">ErrEncodeHandshake&lt;/span> = &lt;span style="color:#58a1dd">errors&lt;/span>.&lt;span style="color:#58a1dd">New&lt;/span>(&lt;span style="color:#a6be9d">&amp;#34;Handshake encode error&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">ErrRepositoryNotFound&lt;/span> = &lt;span style="color:#58a1dd">errors&lt;/span>.&lt;span style="color:#58a1dd">New&lt;/span>(&lt;span style="color:#a6be9d">&amp;#34;Repository Not Found&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">ErrUnreachablePath&lt;/span> = &lt;span style="color:#58a1dd">errors&lt;/span>.&lt;span style="color:#58a1dd">New&lt;/span>(&lt;span style="color:#a6be9d">&amp;#34;Path is unreachable&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">// StrSplitSkipEmpty skip empty string suggestcap is suggest cap
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span>&lt;span style="color:#ff636f">func&lt;/span> &lt;span style="color:#58a1dd">StrSplitSkipEmpty&lt;/span>(&lt;span style="color:#58a1dd">s&lt;/span> &lt;span style="color:#ff636f">string&lt;/span>, &lt;span style="color:#58a1dd">sep&lt;/span> &lt;span style="color:#ff636f">byte&lt;/span>, &lt;span style="color:#58a1dd">suggestcap&lt;/span> &lt;span style="color:#ff636f">int&lt;/span>) []&lt;span style="color:#ff636f">string&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">sv&lt;/span> &lt;span style="color:#ff636f">:=&lt;/span> &lt;span style="color:#58a1dd">make&lt;/span>([]&lt;span style="color:#ff636f">string&lt;/span>, &lt;span style="color:#a6be9d">0&lt;/span>, &lt;span style="color:#58a1dd">suggestcap&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">var&lt;/span> &lt;span style="color:#58a1dd">first&lt;/span>, &lt;span style="color:#58a1dd">i&lt;/span> &lt;span style="color:#ff636f">int&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">for&lt;/span> ; &lt;span style="color:#58a1dd">i&lt;/span> &amp;lt; &lt;span style="color:#58a1dd">len&lt;/span>(&lt;span style="color:#58a1dd">s&lt;/span>); &lt;span style="color:#58a1dd">i&lt;/span>&lt;span style="color:#ff636f">++&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">if&lt;/span> &lt;span style="color:#58a1dd">s&lt;/span>[&lt;span style="color:#58a1dd">i&lt;/span>] &lt;span style="color:#ff636f">!=&lt;/span> &lt;span style="color:#58a1dd">sep&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">continue&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">if&lt;/span> &lt;span style="color:#58a1dd">first&lt;/span> &lt;span style="color:#ff636f">!=&lt;/span> &lt;span style="color:#58a1dd">i&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">sv&lt;/span> = &lt;span style="color:#58a1dd">append&lt;/span>(&lt;span style="color:#58a1dd">sv&lt;/span>, &lt;span style="color:#58a1dd">s&lt;/span>[&lt;span style="color:#58a1dd">first&lt;/span>:&lt;span style="color:#58a1dd">i&lt;/span>])
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">first&lt;/span> = &lt;span style="color:#58a1dd">i&lt;/span> &lt;span style="color:#ff636f">+&lt;/span> &lt;span style="color:#a6be9d">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">if&lt;/span> &lt;span style="color:#58a1dd">first&lt;/span> &amp;lt; &lt;span style="color:#58a1dd">len&lt;/span>(&lt;span style="color:#58a1dd">s&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">sv&lt;/span> = &lt;span style="color:#58a1dd">append&lt;/span>(&lt;span style="color:#58a1dd">sv&lt;/span>, &lt;span style="color:#58a1dd">s&lt;/span>[&lt;span style="color:#58a1dd">first&lt;/span>:])
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">return&lt;/span> &lt;span style="color:#58a1dd">sv&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">// RepoPathClean todo
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span>&lt;span style="color:#ff636f">func&lt;/span> &lt;span style="color:#58a1dd">RepoPathClean&lt;/span>(&lt;span style="color:#58a1dd">p&lt;/span> &lt;span style="color:#ff636f">string&lt;/span>) (&lt;span style="color:#ff636f">string&lt;/span>, &lt;span style="color:#ff636f">error&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">xp&lt;/span> &lt;span style="color:#ff636f">:=&lt;/span> &lt;span style="color:#58a1dd">path&lt;/span>.&lt;span style="color:#58a1dd">Clean&lt;/span>(&lt;span style="color:#58a1dd">p&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">pv&lt;/span> &lt;span style="color:#ff636f">:=&lt;/span> &lt;span style="color:#58a1dd">StrSplitSkipEmpty&lt;/span>(&lt;span style="color:#58a1dd">xp&lt;/span>, &lt;span style="color:#a6be9d">&amp;#39;/&amp;#39;&lt;/span>, &lt;span style="color:#a6be9d">4&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">if&lt;/span> &lt;span style="color:#58a1dd">len&lt;/span>(&lt;span style="color:#58a1dd">pv&lt;/span>) &lt;span style="color:#ff636f">!=&lt;/span> &lt;span style="color:#a6be9d">2&lt;/span> &lt;span style="color:#ff636f">||&lt;/span> &lt;span style="color:#58a1dd">len&lt;/span>(&lt;span style="color:#58a1dd">pv&lt;/span>[&lt;span style="color:#a6be9d">0&lt;/span>]) &amp;lt; &lt;span style="color:#a6be9d">2&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">return&lt;/span> &lt;span style="color:#a6be9d">&amp;#34;&amp;#34;&lt;/span>, &lt;span style="color:#58a1dd">ErrUnreachablePath&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">return&lt;/span> &lt;span style="color:#58a1dd">pv&lt;/span>[&lt;span style="color:#a6be9d">0&lt;/span>] &lt;span style="color:#ff636f">+&lt;/span> &lt;span style="color:#a6be9d">&amp;#34;/&amp;#34;&lt;/span> &lt;span style="color:#ff636f">+&lt;/span> &lt;span style="color:#58a1dd">strings&lt;/span>.&lt;span style="color:#58a1dd">TrimSuffix&lt;/span>(&lt;span style="color:#58a1dd">pv&lt;/span>[&lt;span style="color:#a6be9d">1&lt;/span>], &lt;span style="color:#a6be9d">&amp;#34;.git&amp;#34;&lt;/span>), &lt;span style="color:#ff636f">nil&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">// GetSessionEnv env
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span>&lt;span style="color:#ff636f">func&lt;/span> &lt;span style="color:#58a1dd">GetSessionEnv&lt;/span>(&lt;span style="color:#58a1dd">s&lt;/span> &lt;span style="color:#58a1dd">ssh&lt;/span>.&lt;span style="color:#58a1dd">Session&lt;/span>, &lt;span style="color:#58a1dd">key&lt;/span> &lt;span style="color:#ff636f">string&lt;/span>) &lt;span style="color:#ff636f">string&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">prefix&lt;/span> &lt;span style="color:#ff636f">:=&lt;/span> &lt;span style="color:#58a1dd">key&lt;/span> &lt;span style="color:#ff636f">+&lt;/span> &lt;span style="color:#a6be9d">&amp;#34;=&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">kl&lt;/span> &lt;span style="color:#ff636f">:=&lt;/span> &lt;span style="color:#58a1dd">len&lt;/span>(&lt;span style="color:#58a1dd">prefix&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">for&lt;/span> &lt;span style="color:#58a1dd">_&lt;/span>, &lt;span style="color:#58a1dd">str&lt;/span> &lt;span style="color:#ff636f">:=&lt;/span> &lt;span style="color:#ff636f">range&lt;/span> &lt;span style="color:#58a1dd">s&lt;/span>.&lt;span style="color:#58a1dd">Environ&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">if&lt;/span> &lt;span style="color:#58a1dd">kl&lt;/span> &lt;span style="color:#ff636f">&amp;gt;=&lt;/span> &lt;span style="color:#58a1dd">len&lt;/span>(&lt;span style="color:#58a1dd">str&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">continue&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">if&lt;/span> &lt;span style="color:#58a1dd">strings&lt;/span>.&lt;span style="color:#58a1dd">HasPrefix&lt;/span>(&lt;span style="color:#58a1dd">str&lt;/span>, &lt;span style="color:#58a1dd">prefix&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">return&lt;/span> &lt;span style="color:#58a1dd">str&lt;/span>[&lt;span style="color:#58a1dd">kl&lt;/span>:]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">return&lt;/span> &lt;span style="color:#a6be9d">&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">// RepoPathStat stat repo
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span>&lt;span style="color:#ff636f">func&lt;/span> &lt;span style="color:#58a1dd">RepoPathStat&lt;/span>(&lt;span style="color:#58a1dd">repo&lt;/span> &lt;span style="color:#ff636f">string&lt;/span>) (&lt;span style="color:#ff636f">string&lt;/span>, &lt;span style="color:#ff636f">error&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">r&lt;/span> &lt;span style="color:#ff636f">:=&lt;/span> &lt;span style="color:#58a1dd">filepath&lt;/span>.&lt;span style="color:#58a1dd">Join&lt;/span>(&lt;span style="color:#a6be9d">&amp;#34;/home/git/root&amp;#34;&lt;/span>, &lt;span style="color:#58a1dd">repo&lt;/span>[&lt;span style="color:#a6be9d">0&lt;/span>:&lt;span style="color:#a6be9d">2&lt;/span>], &lt;span style="color:#58a1dd">repo&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">if&lt;/span> !&lt;span style="color:#58a1dd">strings&lt;/span>.&lt;span style="color:#58a1dd">HasSuffix&lt;/span>(&lt;span style="color:#58a1dd">r&lt;/span>, &lt;span style="color:#a6be9d">&amp;#34;.git&amp;#34;&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">r&lt;/span> &lt;span style="color:#ff636f">+=&lt;/span> &lt;span style="color:#a6be9d">&amp;#34;.git&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">if&lt;/span> &lt;span style="color:#58a1dd">_&lt;/span>, &lt;span style="color:#58a1dd">err&lt;/span> &lt;span style="color:#ff636f">:=&lt;/span> &lt;span style="color:#58a1dd">os&lt;/span>.&lt;span style="color:#58a1dd">Stat&lt;/span>(&lt;span style="color:#58a1dd">r&lt;/span>); &lt;span style="color:#58a1dd">err&lt;/span> &lt;span style="color:#ff636f">!=&lt;/span> &lt;span style="color:#ff636f">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">return&lt;/span> &lt;span style="color:#a6be9d">&amp;#34;&amp;#34;&lt;/span>, &lt;span style="color:#58a1dd">ErrRepositoryNotFound&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">return&lt;/span> &lt;span style="color:#58a1dd">r&lt;/span>, &lt;span style="color:#ff636f">nil&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">// GitCommand exe git-*
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span>&lt;span style="color:#ff636f">func&lt;/span> &lt;span style="color:#58a1dd">GitCommand&lt;/span>(&lt;span style="color:#58a1dd">s&lt;/span> &lt;span style="color:#58a1dd">ssh&lt;/span>.&lt;span style="color:#58a1dd">Session&lt;/span>, &lt;span style="color:#58a1dd">scmd&lt;/span> &lt;span style="color:#ff636f">string&lt;/span>, &lt;span style="color:#58a1dd">repo&lt;/span> &lt;span style="color:#ff636f">string&lt;/span>) &lt;span style="color:#ff636f">int&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">if&lt;/span> &lt;span style="color:#58a1dd">s&lt;/span>.&lt;span style="color:#58a1dd">User&lt;/span>() &lt;span style="color:#ff636f">!=&lt;/span> &lt;span style="color:#a6be9d">&amp;#34;git&amp;#34;&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#828b96;font-style:italic">// filter unallowed user
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span> &lt;span style="color:#58a1dd">fmt&lt;/span>.&lt;span style="color:#58a1dd">Fprintf&lt;/span>(&lt;span style="color:#58a1dd">s&lt;/span>.&lt;span style="color:#58a1dd">Stderr&lt;/span>(), &lt;span style="color:#a6be9d">&amp;#34;Permission denied, user: \x1b[31m&amp;#39;%s&amp;#39;\x1b[0m\n&amp;#34;&lt;/span>, &lt;span style="color:#58a1dd">s&lt;/span>.&lt;span style="color:#58a1dd">User&lt;/span>())
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">return&lt;/span> &lt;span style="color:#a6be9d">127&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">pwn&lt;/span>, &lt;span style="color:#58a1dd">err&lt;/span> &lt;span style="color:#ff636f">:=&lt;/span> &lt;span style="color:#58a1dd">RepoPathClean&lt;/span>(&lt;span style="color:#58a1dd">repo&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">if&lt;/span> &lt;span style="color:#58a1dd">err&lt;/span> &lt;span style="color:#ff636f">!=&lt;/span> &lt;span style="color:#ff636f">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">fmt&lt;/span>.&lt;span style="color:#58a1dd">Fprintf&lt;/span>(&lt;span style="color:#58a1dd">s&lt;/span>.&lt;span style="color:#58a1dd">Stderr&lt;/span>(), &lt;span style="color:#a6be9d">&amp;#34;Permission denied: \x1b[31m%v\x1b[0m\n&amp;#34;&lt;/span>, &lt;span style="color:#58a1dd">err&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">return&lt;/span> &lt;span style="color:#a6be9d">127&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#828b96;font-style:italic">// TODO AUTH
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span> &lt;span style="color:#58a1dd">diskrepo&lt;/span>, &lt;span style="color:#58a1dd">err&lt;/span> &lt;span style="color:#ff636f">:=&lt;/span> &lt;span style="color:#58a1dd">RepoPathStat&lt;/span>(&lt;span style="color:#58a1dd">pwn&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">if&lt;/span> &lt;span style="color:#58a1dd">err&lt;/span> &lt;span style="color:#ff636f">!=&lt;/span> &lt;span style="color:#ff636f">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">fmt&lt;/span>.&lt;span style="color:#58a1dd">Fprintf&lt;/span>(&lt;span style="color:#58a1dd">s&lt;/span>.&lt;span style="color:#58a1dd">Stderr&lt;/span>(), &lt;span style="color:#a6be9d">&amp;#34;Access deined: \x1b[31m%v\x1b[0m\n&amp;#34;&lt;/span>, &lt;span style="color:#58a1dd">err&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">return&lt;/span> &lt;span style="color:#a6be9d">127&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">version&lt;/span> &lt;span style="color:#ff636f">:=&lt;/span> &lt;span style="color:#58a1dd">GetSessionEnv&lt;/span>(&lt;span style="color:#58a1dd">s&lt;/span>, &lt;span style="color:#a6be9d">&amp;#34;GIT_PROTOCOL&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">cmd&lt;/span> &lt;span style="color:#ff636f">:=&lt;/span> &lt;span style="color:#58a1dd">exec&lt;/span>.&lt;span style="color:#58a1dd">Command&lt;/span>(&lt;span style="color:#a6be9d">&amp;#34;git&amp;#34;&lt;/span>, &lt;span style="color:#58a1dd">scmd&lt;/span>, &lt;span style="color:#58a1dd">diskrepo&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">ProcAttr&lt;/span>(&lt;span style="color:#58a1dd">cmd&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">cmd&lt;/span>.&lt;span style="color:#58a1dd">Env&lt;/span> = &lt;span style="color:#58a1dd">append&lt;/span>(&lt;span style="color:#58a1dd">environ&lt;/span>, &lt;span style="color:#a6be9d">&amp;#34;GL_ID=key-&amp;#34;&lt;/span>&lt;span style="color:#ff636f">+&lt;/span>&lt;span style="color:#58a1dd">strconv&lt;/span>.&lt;span style="color:#58a1dd">FormatInt&lt;/span>(&lt;span style="color:#a6be9d">1111&lt;/span>, &lt;span style="color:#a6be9d">10&lt;/span>)) &lt;span style="color:#828b96;font-style:italic">/// to set envid
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span> &lt;span style="color:#ff636f">if&lt;/span> &lt;span style="color:#58a1dd">len&lt;/span>(&lt;span style="color:#58a1dd">version&lt;/span>) &amp;gt; &lt;span style="color:#a6be9d">0&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">cmd&lt;/span>.&lt;span style="color:#58a1dd">Env&lt;/span> = &lt;span style="color:#58a1dd">append&lt;/span>(&lt;span style="color:#58a1dd">environ&lt;/span>, &lt;span style="color:#a6be9d">&amp;#34;GIT_PROTOCOL=&amp;#34;&lt;/span>&lt;span style="color:#ff636f">+&lt;/span>&lt;span style="color:#58a1dd">version&lt;/span>) &lt;span style="color:#828b96;font-style:italic">/// to set envid
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">cmd&lt;/span>.&lt;span style="color:#58a1dd">Env&lt;/span> = &lt;span style="color:#58a1dd">append&lt;/span>(&lt;span style="color:#58a1dd">environ&lt;/span>, &lt;span style="color:#58a1dd">s&lt;/span>.&lt;span style="color:#58a1dd">Environ&lt;/span>()&lt;span style="color:#ff636f">...&lt;/span>) &lt;span style="color:#828b96;font-style:italic">/// include other
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span> &lt;span style="color:#58a1dd">cmd&lt;/span>.&lt;span style="color:#58a1dd">Stderr&lt;/span> = &lt;span style="color:#58a1dd">s&lt;/span>.&lt;span style="color:#58a1dd">Stderr&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">cmd&lt;/span>.&lt;span style="color:#58a1dd">Stdin&lt;/span> = &lt;span style="color:#58a1dd">s&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">cmd&lt;/span>.&lt;span style="color:#58a1dd">Stdout&lt;/span> = &lt;span style="color:#58a1dd">s&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#828b96;font-style:italic">// FIXME: check timeout
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span> &lt;span style="color:#ff636f">if&lt;/span> &lt;span style="color:#58a1dd">err&lt;/span> = &lt;span style="color:#58a1dd">cmd&lt;/span>.&lt;span style="color:#58a1dd">Start&lt;/span>(); &lt;span style="color:#58a1dd">err&lt;/span> &lt;span style="color:#ff636f">!=&lt;/span> &lt;span style="color:#ff636f">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">fmt&lt;/span>.&lt;span style="color:#58a1dd">Fprintln&lt;/span>(&lt;span style="color:#58a1dd">s&lt;/span>.&lt;span style="color:#58a1dd">Stderr&lt;/span>(), &lt;span style="color:#a6be9d">&amp;#34;Server internal error, unable to run git-&amp;#34;&lt;/span>, &lt;span style="color:#58a1dd">scmd&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">log&lt;/span>.&lt;span style="color:#58a1dd">Printf&lt;/span>(&lt;span style="color:#a6be9d">&amp;#34;Server internal error, unable to run git-%s error: %v&amp;#34;&lt;/span>, &lt;span style="color:#58a1dd">scmd&lt;/span>, &lt;span style="color:#58a1dd">err&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">return&lt;/span> &lt;span style="color:#a6be9d">127&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">var&lt;/span> &lt;span style="color:#58a1dd">exitcode&lt;/span> &lt;span style="color:#ff636f">int&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">exitChain&lt;/span> &lt;span style="color:#ff636f">:=&lt;/span> &lt;span style="color:#58a1dd">make&lt;/span>(&lt;span style="color:#ff636f">chan&lt;/span> &lt;span style="color:#ff636f">bool&lt;/span>, &lt;span style="color:#a6be9d">1&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">go&lt;/span> &lt;span style="color:#ff636f">func&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">if&lt;/span> &lt;span style="color:#58a1dd">err&lt;/span> = &lt;span style="color:#58a1dd">cmd&lt;/span>.&lt;span style="color:#58a1dd">Wait&lt;/span>(); &lt;span style="color:#58a1dd">err&lt;/span> &lt;span style="color:#ff636f">!=&lt;/span> &lt;span style="color:#ff636f">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">exitcode&lt;/span> = &lt;span style="color:#a6be9d">127&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">exitChain&lt;/span> &lt;span style="color:#ff636f">&amp;lt;-&lt;/span> &lt;span style="color:#ff636f">true&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">for&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">select&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">case&lt;/span> &lt;span style="color:#ff636f">&amp;lt;-&lt;/span>&lt;span style="color:#58a1dd">exitChain&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">return&lt;/span> &lt;span style="color:#58a1dd">exitcode&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">case&lt;/span> &lt;span style="color:#ff636f">&amp;lt;-&lt;/span>&lt;span style="color:#58a1dd">s&lt;/span>.&lt;span style="color:#58a1dd">Context&lt;/span>().&lt;span style="color:#58a1dd">Done&lt;/span>():
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">cmd&lt;/span>.&lt;span style="color:#58a1dd">Process&lt;/span>.&lt;span style="color:#58a1dd">Kill&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">return&lt;/span> &lt;span style="color:#a6be9d">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff636f">func&lt;/span> &lt;span style="color:#58a1dd">sshAuth&lt;/span>(&lt;span style="color:#58a1dd">ctx&lt;/span> &lt;span style="color:#58a1dd">ssh&lt;/span>.&lt;span style="color:#58a1dd">Context&lt;/span>, &lt;span style="color:#58a1dd">key&lt;/span> &lt;span style="color:#58a1dd">ssh&lt;/span>.&lt;span style="color:#58a1dd">PublicKey&lt;/span>) &lt;span style="color:#ff636f">bool&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#828b96;font-style:italic">/// TODO auth
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">return&lt;/span> &lt;span style="color:#ff636f">true&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff636f">func&lt;/span> &lt;span style="color:#58a1dd">sessionHandler&lt;/span>(&lt;span style="color:#58a1dd">s&lt;/span> &lt;span style="color:#58a1dd">ssh&lt;/span>.&lt;span style="color:#58a1dd">Session&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">cmd&lt;/span> &lt;span style="color:#ff636f">:=&lt;/span> &lt;span style="color:#58a1dd">s&lt;/span>.&lt;span style="color:#58a1dd">Command&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">if&lt;/span> &lt;span style="color:#58a1dd">len&lt;/span>(&lt;span style="color:#58a1dd">cmd&lt;/span>) &amp;lt; &lt;span style="color:#a6be9d">2&lt;/span> &lt;span style="color:#ff636f">||&lt;/span> !&lt;span style="color:#58a1dd">strings&lt;/span>.&lt;span style="color:#58a1dd">HasPrefix&lt;/span>(&lt;span style="color:#58a1dd">cmd&lt;/span>[&lt;span style="color:#a6be9d">0&lt;/span>], &lt;span style="color:#a6be9d">&amp;#34;git-&amp;#34;&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">s&lt;/span>.&lt;span style="color:#58a1dd">Stderr&lt;/span>().&lt;span style="color:#58a1dd">Write&lt;/span>([]&lt;span style="color:#58a1dd">byte&lt;/span>(&lt;span style="color:#a6be9d">&amp;#34;bad command &amp;#34;&lt;/span> &lt;span style="color:#ff636f">+&lt;/span> &lt;span style="color:#58a1dd">cmd&lt;/span>[&lt;span style="color:#a6be9d">0&lt;/span>] &lt;span style="color:#ff636f">+&lt;/span> &lt;span style="color:#a6be9d">&amp;#34;\n&amp;#34;&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">return&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">GitCommand&lt;/span>(&lt;span style="color:#58a1dd">s&lt;/span>, &lt;span style="color:#58a1dd">strings&lt;/span>.&lt;span style="color:#58a1dd">TrimPrefix&lt;/span>(&lt;span style="color:#58a1dd">cmd&lt;/span>[&lt;span style="color:#a6be9d">0&lt;/span>], &lt;span style="color:#a6be9d">&amp;#34;git-&amp;#34;&lt;/span>), &lt;span style="color:#58a1dd">cmd&lt;/span>[&lt;span style="color:#a6be9d">1&lt;/span>])
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">// Userid get
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span>&lt;span style="color:#ff636f">var&lt;/span> &lt;span style="color:#58a1dd">Userid&lt;/span> &lt;span style="color:#ff636f">uint32&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">// Groupid in
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span>&lt;span style="color:#ff636f">var&lt;/span> &lt;span style="color:#58a1dd">Groupid&lt;/span> &lt;span style="color:#ff636f">uint32&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">// NeedSetsid is
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span>&lt;span style="color:#ff636f">var&lt;/span> &lt;span style="color:#58a1dd">NeedSetsid&lt;/span> &lt;span style="color:#ff636f">bool&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">// ProcAttr is
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span>&lt;span style="color:#ff636f">func&lt;/span> &lt;span style="color:#58a1dd">ProcAttr&lt;/span>(&lt;span style="color:#58a1dd">cmd&lt;/span> &lt;span style="color:#ff636f">*&lt;/span>&lt;span style="color:#58a1dd">exec&lt;/span>.&lt;span style="color:#58a1dd">Cmd&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">if&lt;/span> &lt;span style="color:#58a1dd">NeedSetsid&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">cmd&lt;/span>.&lt;span style="color:#58a1dd">SysProcAttr&lt;/span> = &lt;span style="color:#ff636f">&amp;amp;&lt;/span>&lt;span style="color:#58a1dd">syscall&lt;/span>.&lt;span style="color:#58a1dd">SysProcAttr&lt;/span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">Credential&lt;/span>: &lt;span style="color:#ff636f">&amp;amp;&lt;/span>&lt;span style="color:#58a1dd">syscall&lt;/span>.&lt;span style="color:#58a1dd">Credential&lt;/span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">Uid&lt;/span>: &lt;span style="color:#58a1dd">Userid&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">Gid&lt;/span>: &lt;span style="color:#58a1dd">Groupid&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">Setsid&lt;/span>: &lt;span style="color:#ff636f">true&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">//InitializeUtils ini
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span>&lt;span style="color:#ff636f">func&lt;/span> &lt;span style="color:#58a1dd">InitializeUtils&lt;/span>() &lt;span style="color:#ff636f">error&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">if&lt;/span> &lt;span style="color:#58a1dd">syscall&lt;/span>.&lt;span style="color:#58a1dd">Getuid&lt;/span>() &lt;span style="color:#ff636f">!=&lt;/span> &lt;span style="color:#a6be9d">0&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">NeedSetsid&lt;/span> = &lt;span style="color:#ff636f">false&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">Userid&lt;/span> = &lt;span style="color:#58a1dd">uint32&lt;/span>(&lt;span style="color:#58a1dd">syscall&lt;/span>.&lt;span style="color:#58a1dd">Getuid&lt;/span>())
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">Groupid&lt;/span> = &lt;span style="color:#58a1dd">uint32&lt;/span>(&lt;span style="color:#58a1dd">syscall&lt;/span>.&lt;span style="color:#58a1dd">Getgid&lt;/span>())
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">return&lt;/span> &lt;span style="color:#ff636f">nil&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#828b96;font-style:italic">//
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span> &lt;span style="color:#58a1dd">user&lt;/span>, &lt;span style="color:#58a1dd">err&lt;/span> &lt;span style="color:#ff636f">:=&lt;/span> &lt;span style="color:#58a1dd">user&lt;/span>.&lt;span style="color:#58a1dd">Lookup&lt;/span>(&lt;span style="color:#a6be9d">&amp;#34;git&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">if&lt;/span> &lt;span style="color:#58a1dd">err&lt;/span> &lt;span style="color:#ff636f">!=&lt;/span> &lt;span style="color:#ff636f">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">return&lt;/span> &lt;span style="color:#58a1dd">err&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">xid&lt;/span>, &lt;span style="color:#58a1dd">err&lt;/span> &lt;span style="color:#ff636f">:=&lt;/span> &lt;span style="color:#58a1dd">strconv&lt;/span>.&lt;span style="color:#58a1dd">ParseUint&lt;/span>(&lt;span style="color:#58a1dd">user&lt;/span>.&lt;span style="color:#58a1dd">Uid&lt;/span>, &lt;span style="color:#a6be9d">10&lt;/span>, &lt;span style="color:#a6be9d">32&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">if&lt;/span> &lt;span style="color:#58a1dd">err&lt;/span> &lt;span style="color:#ff636f">!=&lt;/span> &lt;span style="color:#ff636f">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">return&lt;/span> &lt;span style="color:#58a1dd">err&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">environ&lt;/span> = &lt;span style="color:#58a1dd">os&lt;/span>.&lt;span style="color:#58a1dd">Environ&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">for&lt;/span> &lt;span style="color:#58a1dd">i&lt;/span>, &lt;span style="color:#58a1dd">s&lt;/span> &lt;span style="color:#ff636f">:=&lt;/span> &lt;span style="color:#ff636f">range&lt;/span> &lt;span style="color:#58a1dd">environ&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">if&lt;/span> &lt;span style="color:#58a1dd">strings&lt;/span>.&lt;span style="color:#58a1dd">HasPrefix&lt;/span>(&lt;span style="color:#58a1dd">s&lt;/span>, &lt;span style="color:#a6be9d">&amp;#34;HOME=&amp;#34;&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">environ&lt;/span>[&lt;span style="color:#58a1dd">i&lt;/span>] = &lt;span style="color:#58a1dd">fmt&lt;/span>.&lt;span style="color:#58a1dd">Sprintf&lt;/span>(&lt;span style="color:#a6be9d">&amp;#34;HOME=%s&amp;#34;&lt;/span>, &lt;span style="color:#58a1dd">user&lt;/span>.&lt;span style="color:#58a1dd">HomeDir&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">Userid&lt;/span> = &lt;span style="color:#58a1dd">uint32&lt;/span>(&lt;span style="color:#58a1dd">xid&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">zid&lt;/span>, &lt;span style="color:#58a1dd">err&lt;/span> &lt;span style="color:#ff636f">:=&lt;/span> &lt;span style="color:#58a1dd">strconv&lt;/span>.&lt;span style="color:#58a1dd">ParseUint&lt;/span>(&lt;span style="color:#58a1dd">user&lt;/span>.&lt;span style="color:#58a1dd">Gid&lt;/span>, &lt;span style="color:#a6be9d">10&lt;/span>, &lt;span style="color:#a6be9d">32&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">if&lt;/span> &lt;span style="color:#58a1dd">err&lt;/span> &lt;span style="color:#ff636f">!=&lt;/span> &lt;span style="color:#ff636f">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">return&lt;/span> &lt;span style="color:#58a1dd">err&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">Groupid&lt;/span> = &lt;span style="color:#58a1dd">uint32&lt;/span>(&lt;span style="color:#58a1dd">zid&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">NeedSetsid&lt;/span> = &lt;span style="color:#ff636f">true&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">return&lt;/span> &lt;span style="color:#ff636f">nil&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff636f">var&lt;/span> &lt;span style="color:#58a1dd">environ&lt;/span> []&lt;span style="color:#ff636f">string&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff636f">func&lt;/span> &lt;span style="color:#58a1dd">main&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">srv&lt;/span> &lt;span style="color:#ff636f">:=&lt;/span> &lt;span style="color:#ff636f">&amp;amp;&lt;/span>&lt;span style="color:#58a1dd">ssh&lt;/span>.&lt;span style="color:#58a1dd">Server&lt;/span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">Handler&lt;/span>: &lt;span style="color:#58a1dd">sessionHandler&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">PublicKeyHandler&lt;/span>: &lt;span style="color:#58a1dd">sshAuth&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">MaxTimeout&lt;/span>: &lt;span style="color:#58a1dd">time&lt;/span>.&lt;span style="color:#58a1dd">Second&lt;/span> &lt;span style="color:#ff636f">*&lt;/span> &lt;span style="color:#a6be9d">180&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">IdleTimeout&lt;/span>: &lt;span style="color:#58a1dd">time&lt;/span>.&lt;span style="color:#58a1dd">Second&lt;/span> &lt;span style="color:#ff636f">*&lt;/span> &lt;span style="color:#a6be9d">3600&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">Version&lt;/span>: &lt;span style="color:#a6be9d">&amp;#34;Basalt-2.0-Single&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">InitializeUtils&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">log&lt;/span>.&lt;span style="color:#58a1dd">Println&lt;/span>(&lt;span style="color:#a6be9d">&amp;#34;starting ssh server on port 2222...&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">ln&lt;/span>, &lt;span style="color:#58a1dd">err&lt;/span> &lt;span style="color:#ff636f">:=&lt;/span> &lt;span style="color:#58a1dd">net&lt;/span>.&lt;span style="color:#58a1dd">Listen&lt;/span>(&lt;span style="color:#a6be9d">&amp;#34;tcp&amp;#34;&lt;/span>, &lt;span style="color:#a6be9d">&amp;#34;:2222&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">if&lt;/span> &lt;span style="color:#58a1dd">err&lt;/span> &lt;span style="color:#ff636f">!=&lt;/span> &lt;span style="color:#ff636f">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">return&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">srv&lt;/span>.&lt;span style="color:#58a1dd">Serve&lt;/span>(&lt;span style="color:#58a1dd">ln&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>这个项目非常简单，但足以说明实现 Git SSH Server 的细节。&lt;/p>
&lt;p>要生成 SSH Key 也非常简单，下面是 ECDSA RSA ED25519 SSH Key 生成示例：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#1d2432;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff636f">package&lt;/span> &lt;span style="color:#58a1dd">main&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff636f">import&lt;/span> (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6be9d">&amp;#34;crypto/ecdsa&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6be9d">&amp;#34;crypto/elliptic&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6be9d">&amp;#34;crypto/rand&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6be9d">&amp;#34;crypto/rsa&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6be9d">&amp;#34;crypto/x509&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6be9d">&amp;#34;encoding/pem&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6be9d">&amp;#34;io/ioutil&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">mrand&lt;/span> &lt;span style="color:#a6be9d">&amp;#34;math/rand&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6be9d">&amp;#34;golang.org/x/crypto/ed25519&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6be9d">&amp;#34;golang.org/x/crypto/ssh&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">// Thanks https://github.com/mikesmitty/edkey
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">// MarshalED25519PrivateKey todo
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span>&lt;span style="color:#828b96;font-style:italic">/* Writes ed25519 private keys into the new OpenSSH private key format.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">I have no idea why this isn&amp;#39;t implemented anywhere yet, you can do seemingly
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">everything except write it to disk in the OpenSSH private key format. */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff636f">func&lt;/span> &lt;span style="color:#58a1dd">MarshalED25519PrivateKey&lt;/span>(&lt;span style="color:#58a1dd">key&lt;/span> &lt;span style="color:#58a1dd">ed25519&lt;/span>.&lt;span style="color:#58a1dd">PrivateKey&lt;/span>) []&lt;span style="color:#ff636f">byte&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#828b96;font-style:italic">// Add our key header (followed by a null byte)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span> &lt;span style="color:#58a1dd">magic&lt;/span> &lt;span style="color:#ff636f">:=&lt;/span> &lt;span style="color:#58a1dd">append&lt;/span>([]&lt;span style="color:#58a1dd">byte&lt;/span>(&lt;span style="color:#a6be9d">&amp;#34;openssh-key-v1&amp;#34;&lt;/span>), &lt;span style="color:#a6be9d">0&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">var&lt;/span> &lt;span style="color:#58a1dd">w&lt;/span> &lt;span style="color:#ff636f">struct&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">CipherName&lt;/span> &lt;span style="color:#ff636f">string&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">KdfName&lt;/span> &lt;span style="color:#ff636f">string&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">KdfOpts&lt;/span> &lt;span style="color:#ff636f">string&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">NumKeys&lt;/span> &lt;span style="color:#ff636f">uint32&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">PubKey&lt;/span> []&lt;span style="color:#ff636f">byte&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">PrivKeyBlock&lt;/span> []&lt;span style="color:#ff636f">byte&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#828b96;font-style:italic">// Fill out the private key fields
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span> &lt;span style="color:#58a1dd">pk1&lt;/span> &lt;span style="color:#ff636f">:=&lt;/span> &lt;span style="color:#ff636f">struct&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">Check1&lt;/span> &lt;span style="color:#ff636f">uint32&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">Check2&lt;/span> &lt;span style="color:#ff636f">uint32&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">Keytype&lt;/span> &lt;span style="color:#ff636f">string&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">Pub&lt;/span> []&lt;span style="color:#ff636f">byte&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">Priv&lt;/span> []&lt;span style="color:#ff636f">byte&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">Comment&lt;/span> &lt;span style="color:#ff636f">string&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">Pad&lt;/span> []&lt;span style="color:#ff636f">byte&lt;/span> &lt;span style="color:#a6be9d">`ssh:&amp;#34;rest&amp;#34;`&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }{}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#828b96;font-style:italic">// Set our check ints
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span> &lt;span style="color:#58a1dd">ci&lt;/span> &lt;span style="color:#ff636f">:=&lt;/span> &lt;span style="color:#58a1dd">mrand&lt;/span>.&lt;span style="color:#58a1dd">Uint32&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">pk1&lt;/span>.&lt;span style="color:#58a1dd">Check1&lt;/span> = &lt;span style="color:#58a1dd">ci&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">pk1&lt;/span>.&lt;span style="color:#58a1dd">Check2&lt;/span> = &lt;span style="color:#58a1dd">ci&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#828b96;font-style:italic">// Set our key type
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span> &lt;span style="color:#58a1dd">pk1&lt;/span>.&lt;span style="color:#58a1dd">Keytype&lt;/span> = &lt;span style="color:#58a1dd">ssh&lt;/span>.&lt;span style="color:#58a1dd">KeyAlgoED25519&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#828b96;font-style:italic">// Add the pubkey to the optionally-encrypted block
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span> &lt;span style="color:#58a1dd">pk&lt;/span>, &lt;span style="color:#58a1dd">ok&lt;/span> &lt;span style="color:#ff636f">:=&lt;/span> &lt;span style="color:#58a1dd">key&lt;/span>.&lt;span style="color:#58a1dd">Public&lt;/span>().(&lt;span style="color:#58a1dd">ed25519&lt;/span>.&lt;span style="color:#58a1dd">PublicKey&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">if&lt;/span> !&lt;span style="color:#58a1dd">ok&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#828b96;font-style:italic">//fmt.Fprintln(os.Stderr, &amp;#34;ed25519.PublicKey type assertion failed on an ed25519 public key. This should never ever happen.&amp;#34;)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span> &lt;span style="color:#ff636f">return&lt;/span> &lt;span style="color:#ff636f">nil&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">pubKey&lt;/span> &lt;span style="color:#ff636f">:=&lt;/span> []&lt;span style="color:#58a1dd">byte&lt;/span>(&lt;span style="color:#58a1dd">pk&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">pk1&lt;/span>.&lt;span style="color:#58a1dd">Pub&lt;/span> = &lt;span style="color:#58a1dd">pubKey&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#828b96;font-style:italic">// Add our private key
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span> &lt;span style="color:#58a1dd">pk1&lt;/span>.&lt;span style="color:#58a1dd">Priv&lt;/span> = []&lt;span style="color:#58a1dd">byte&lt;/span>(&lt;span style="color:#58a1dd">key&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#828b96;font-style:italic">// Might be useful to put something in here at some point
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span> &lt;span style="color:#58a1dd">pk1&lt;/span>.&lt;span style="color:#58a1dd">Comment&lt;/span> = &lt;span style="color:#a6be9d">&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#828b96;font-style:italic">// Add some padding to match the encryption block size within PrivKeyBlock (without Pad field)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span> &lt;span style="color:#828b96;font-style:italic">// 8 doesn&amp;#39;t match the documentation, but that&amp;#39;s what ssh-keygen uses for unencrypted keys. *shrug*
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span> &lt;span style="color:#58a1dd">bs&lt;/span> &lt;span style="color:#ff636f">:=&lt;/span> &lt;span style="color:#a6be9d">8&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">blockLen&lt;/span> &lt;span style="color:#ff636f">:=&lt;/span> &lt;span style="color:#58a1dd">len&lt;/span>(&lt;span style="color:#58a1dd">ssh&lt;/span>.&lt;span style="color:#58a1dd">Marshal&lt;/span>(&lt;span style="color:#58a1dd">pk1&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">padLen&lt;/span> &lt;span style="color:#ff636f">:=&lt;/span> (&lt;span style="color:#58a1dd">bs&lt;/span> &lt;span style="color:#ff636f">-&lt;/span> (&lt;span style="color:#58a1dd">blockLen&lt;/span> &lt;span style="color:#ff636f">%&lt;/span> &lt;span style="color:#58a1dd">bs&lt;/span>)) &lt;span style="color:#ff636f">%&lt;/span> &lt;span style="color:#58a1dd">bs&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">pk1&lt;/span>.&lt;span style="color:#58a1dd">Pad&lt;/span> = &lt;span style="color:#58a1dd">make&lt;/span>([]&lt;span style="color:#ff636f">byte&lt;/span>, &lt;span style="color:#58a1dd">padLen&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#828b96;font-style:italic">// Padding is a sequence of bytes like: 1, 2, 3...
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span> &lt;span style="color:#ff636f">for&lt;/span> &lt;span style="color:#58a1dd">i&lt;/span> &lt;span style="color:#ff636f">:=&lt;/span> &lt;span style="color:#a6be9d">0&lt;/span>; &lt;span style="color:#58a1dd">i&lt;/span> &amp;lt; &lt;span style="color:#58a1dd">padLen&lt;/span>; &lt;span style="color:#58a1dd">i&lt;/span>&lt;span style="color:#ff636f">++&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">pk1&lt;/span>.&lt;span style="color:#58a1dd">Pad&lt;/span>[&lt;span style="color:#58a1dd">i&lt;/span>] = &lt;span style="color:#58a1dd">byte&lt;/span>(&lt;span style="color:#58a1dd">i&lt;/span> &lt;span style="color:#ff636f">+&lt;/span> &lt;span style="color:#a6be9d">1&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#828b96;font-style:italic">// Generate the pubkey prefix &amp;#34;\0\0\0\nssh-ed25519\0\0\0 &amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span> &lt;span style="color:#58a1dd">prefix&lt;/span> &lt;span style="color:#ff636f">:=&lt;/span> []&lt;span style="color:#ff636f">byte&lt;/span>{&lt;span style="color:#a6be9d">0x0&lt;/span>, &lt;span style="color:#a6be9d">0x0&lt;/span>, &lt;span style="color:#a6be9d">0x0&lt;/span>, &lt;span style="color:#a6be9d">0x0b&lt;/span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">prefix&lt;/span> = &lt;span style="color:#58a1dd">append&lt;/span>(&lt;span style="color:#58a1dd">prefix&lt;/span>, []&lt;span style="color:#58a1dd">byte&lt;/span>(&lt;span style="color:#58a1dd">ssh&lt;/span>.&lt;span style="color:#58a1dd">KeyAlgoED25519&lt;/span>)&lt;span style="color:#ff636f">...&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">prefix&lt;/span> = &lt;span style="color:#58a1dd">append&lt;/span>(&lt;span style="color:#58a1dd">prefix&lt;/span>, []&lt;span style="color:#ff636f">byte&lt;/span>{&lt;span style="color:#a6be9d">0x0&lt;/span>, &lt;span style="color:#a6be9d">0x0&lt;/span>, &lt;span style="color:#a6be9d">0x0&lt;/span>, &lt;span style="color:#a6be9d">0x20&lt;/span>}&lt;span style="color:#ff636f">...&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#828b96;font-style:italic">// Only going to support unencrypted keys for now
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span> &lt;span style="color:#58a1dd">w&lt;/span>.&lt;span style="color:#58a1dd">CipherName&lt;/span> = &lt;span style="color:#a6be9d">&amp;#34;none&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">w&lt;/span>.&lt;span style="color:#58a1dd">KdfName&lt;/span> = &lt;span style="color:#a6be9d">&amp;#34;none&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">w&lt;/span>.&lt;span style="color:#58a1dd">KdfOpts&lt;/span> = &lt;span style="color:#a6be9d">&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">w&lt;/span>.&lt;span style="color:#58a1dd">NumKeys&lt;/span> = &lt;span style="color:#a6be9d">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">w&lt;/span>.&lt;span style="color:#58a1dd">PubKey&lt;/span> = &lt;span style="color:#58a1dd">append&lt;/span>(&lt;span style="color:#58a1dd">prefix&lt;/span>, &lt;span style="color:#58a1dd">pubKey&lt;/span>&lt;span style="color:#ff636f">...&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">w&lt;/span>.&lt;span style="color:#58a1dd">PrivKeyBlock&lt;/span> = &lt;span style="color:#58a1dd">ssh&lt;/span>.&lt;span style="color:#58a1dd">Marshal&lt;/span>(&lt;span style="color:#58a1dd">pk1&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">magic&lt;/span> = &lt;span style="color:#58a1dd">append&lt;/span>(&lt;span style="color:#58a1dd">magic&lt;/span>, &lt;span style="color:#58a1dd">ssh&lt;/span>.&lt;span style="color:#58a1dd">Marshal&lt;/span>(&lt;span style="color:#58a1dd">w&lt;/span>)&lt;span style="color:#ff636f">...&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">return&lt;/span> &lt;span style="color:#58a1dd">magic&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">// AuthenticationKeyGenerationRSA RSA
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span>&lt;span style="color:#ff636f">func&lt;/span> &lt;span style="color:#58a1dd">AuthenticationKeyGenerationRSA&lt;/span>(&lt;span style="color:#58a1dd">keyPath&lt;/span> &lt;span style="color:#ff636f">string&lt;/span>) &lt;span style="color:#ff636f">error&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">privKey&lt;/span>, &lt;span style="color:#58a1dd">err&lt;/span> &lt;span style="color:#ff636f">:=&lt;/span> &lt;span style="color:#58a1dd">rsa&lt;/span>.&lt;span style="color:#58a1dd">GenerateKey&lt;/span>(&lt;span style="color:#58a1dd">rand&lt;/span>.&lt;span style="color:#58a1dd">Reader&lt;/span>, &lt;span style="color:#a6be9d">2048&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">if&lt;/span> &lt;span style="color:#58a1dd">err&lt;/span> &lt;span style="color:#ff636f">!=&lt;/span> &lt;span style="color:#ff636f">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">return&lt;/span> &lt;span style="color:#58a1dd">err&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#828b96;font-style:italic">// generate public key
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span> &lt;span style="color:#58a1dd">publicKey&lt;/span>, &lt;span style="color:#58a1dd">err&lt;/span> &lt;span style="color:#ff636f">:=&lt;/span> &lt;span style="color:#58a1dd">ssh&lt;/span>.&lt;span style="color:#58a1dd">NewPublicKey&lt;/span>(&lt;span style="color:#ff636f">&amp;amp;&lt;/span>&lt;span style="color:#58a1dd">privKey&lt;/span>.&lt;span style="color:#58a1dd">PublicKey&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">if&lt;/span> &lt;span style="color:#58a1dd">err&lt;/span> &lt;span style="color:#ff636f">!=&lt;/span> &lt;span style="color:#ff636f">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">return&lt;/span> &lt;span style="color:#58a1dd">err&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">pemKey&lt;/span> &lt;span style="color:#ff636f">:=&lt;/span> &lt;span style="color:#ff636f">&amp;amp;&lt;/span>&lt;span style="color:#58a1dd">pem&lt;/span>.&lt;span style="color:#58a1dd">Block&lt;/span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">Type&lt;/span>: &lt;span style="color:#a6be9d">&amp;#34;RSA PRIVATE KEY&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">Bytes&lt;/span>: &lt;span style="color:#58a1dd">x509&lt;/span>.&lt;span style="color:#58a1dd">MarshalPKCS1PrivateKey&lt;/span>(&lt;span style="color:#58a1dd">privKey&lt;/span>),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">privateKey&lt;/span> &lt;span style="color:#ff636f">:=&lt;/span> &lt;span style="color:#58a1dd">pem&lt;/span>.&lt;span style="color:#58a1dd">EncodeToMemory&lt;/span>(&lt;span style="color:#58a1dd">pemKey&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">authorizedKey&lt;/span> &lt;span style="color:#ff636f">:=&lt;/span> &lt;span style="color:#58a1dd">ssh&lt;/span>.&lt;span style="color:#58a1dd">MarshalAuthorizedKey&lt;/span>(&lt;span style="color:#58a1dd">publicKey&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">if&lt;/span> &lt;span style="color:#58a1dd">err&lt;/span> = &lt;span style="color:#58a1dd">ioutil&lt;/span>.&lt;span style="color:#58a1dd">WriteFile&lt;/span>(&lt;span style="color:#58a1dd">keyPath&lt;/span>, &lt;span style="color:#58a1dd">privateKey&lt;/span>, &lt;span style="color:#a6be9d">0600&lt;/span>); &lt;span style="color:#58a1dd">err&lt;/span> &lt;span style="color:#ff636f">!=&lt;/span> &lt;span style="color:#ff636f">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">return&lt;/span> &lt;span style="color:#58a1dd">err&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">return&lt;/span> &lt;span style="color:#58a1dd">ioutil&lt;/span>.&lt;span style="color:#58a1dd">WriteFile&lt;/span>(&lt;span style="color:#58a1dd">keyPath&lt;/span>&lt;span style="color:#ff636f">+&lt;/span>&lt;span style="color:#a6be9d">&amp;#34;.pub&amp;#34;&lt;/span>, &lt;span style="color:#58a1dd">authorizedKey&lt;/span>, &lt;span style="color:#a6be9d">0644&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">// AuthenticationKeyGenerationECDSA ecdsa
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">// by default we gen 256
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span>&lt;span style="color:#ff636f">func&lt;/span> &lt;span style="color:#58a1dd">AuthenticationKeyGenerationECDSA&lt;/span>(&lt;span style="color:#58a1dd">keyPath&lt;/span> &lt;span style="color:#ff636f">string&lt;/span>) &lt;span style="color:#ff636f">error&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">privKey&lt;/span>, &lt;span style="color:#58a1dd">err&lt;/span> &lt;span style="color:#ff636f">:=&lt;/span> &lt;span style="color:#58a1dd">ecdsa&lt;/span>.&lt;span style="color:#58a1dd">GenerateKey&lt;/span>(&lt;span style="color:#58a1dd">elliptic&lt;/span>.&lt;span style="color:#58a1dd">P256&lt;/span>(), &lt;span style="color:#58a1dd">rand&lt;/span>.&lt;span style="color:#58a1dd">Reader&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">if&lt;/span> &lt;span style="color:#58a1dd">err&lt;/span> &lt;span style="color:#ff636f">!=&lt;/span> &lt;span style="color:#ff636f">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">return&lt;/span> &lt;span style="color:#58a1dd">err&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">publicKey&lt;/span>, &lt;span style="color:#58a1dd">err&lt;/span> &lt;span style="color:#ff636f">:=&lt;/span> &lt;span style="color:#58a1dd">ssh&lt;/span>.&lt;span style="color:#58a1dd">NewPublicKey&lt;/span>(&lt;span style="color:#ff636f">&amp;amp;&lt;/span>&lt;span style="color:#58a1dd">privKey&lt;/span>.&lt;span style="color:#58a1dd">PublicKey&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">if&lt;/span> &lt;span style="color:#58a1dd">err&lt;/span> &lt;span style="color:#ff636f">!=&lt;/span> &lt;span style="color:#ff636f">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">return&lt;/span> &lt;span style="color:#58a1dd">err&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">pembyte&lt;/span>, &lt;span style="color:#58a1dd">err&lt;/span> &lt;span style="color:#ff636f">:=&lt;/span> &lt;span style="color:#58a1dd">x509&lt;/span>.&lt;span style="color:#58a1dd">MarshalECPrivateKey&lt;/span>(&lt;span style="color:#58a1dd">privKey&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">if&lt;/span> &lt;span style="color:#58a1dd">err&lt;/span> &lt;span style="color:#ff636f">!=&lt;/span> &lt;span style="color:#ff636f">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">return&lt;/span> &lt;span style="color:#58a1dd">err&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#828b96;font-style:italic">// EC PRIVATE KEY
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span> &lt;span style="color:#58a1dd">pemKey&lt;/span> &lt;span style="color:#ff636f">:=&lt;/span> &lt;span style="color:#ff636f">&amp;amp;&lt;/span>&lt;span style="color:#58a1dd">pem&lt;/span>.&lt;span style="color:#58a1dd">Block&lt;/span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">Type&lt;/span>: &lt;span style="color:#a6be9d">&amp;#34;EC PRIVATE KEY&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">Bytes&lt;/span>: &lt;span style="color:#58a1dd">pembyte&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">privateKey&lt;/span> &lt;span style="color:#ff636f">:=&lt;/span> &lt;span style="color:#58a1dd">pem&lt;/span>.&lt;span style="color:#58a1dd">EncodeToMemory&lt;/span>(&lt;span style="color:#58a1dd">pemKey&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">authorizedKey&lt;/span> &lt;span style="color:#ff636f">:=&lt;/span> &lt;span style="color:#58a1dd">ssh&lt;/span>.&lt;span style="color:#58a1dd">MarshalAuthorizedKey&lt;/span>(&lt;span style="color:#58a1dd">publicKey&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">if&lt;/span> &lt;span style="color:#58a1dd">err&lt;/span> = &lt;span style="color:#58a1dd">ioutil&lt;/span>.&lt;span style="color:#58a1dd">WriteFile&lt;/span>(&lt;span style="color:#58a1dd">keyPath&lt;/span>, &lt;span style="color:#58a1dd">privateKey&lt;/span>, &lt;span style="color:#a6be9d">0600&lt;/span>); &lt;span style="color:#58a1dd">err&lt;/span> &lt;span style="color:#ff636f">!=&lt;/span> &lt;span style="color:#ff636f">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">return&lt;/span> &lt;span style="color:#58a1dd">err&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">return&lt;/span> &lt;span style="color:#58a1dd">ioutil&lt;/span>.&lt;span style="color:#58a1dd">WriteFile&lt;/span>(&lt;span style="color:#58a1dd">keyPath&lt;/span>&lt;span style="color:#ff636f">+&lt;/span>&lt;span style="color:#a6be9d">&amp;#34;.pub&amp;#34;&lt;/span>, &lt;span style="color:#58a1dd">authorizedKey&lt;/span>, &lt;span style="color:#a6be9d">0644&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">// AuthenticationKeyGenerationED25519 ED25519 keygen
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span>&lt;span style="color:#ff636f">func&lt;/span> &lt;span style="color:#58a1dd">AuthenticationKeyGenerationED25519&lt;/span>(&lt;span style="color:#58a1dd">keyPath&lt;/span> &lt;span style="color:#ff636f">string&lt;/span>) &lt;span style="color:#ff636f">error&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">pubKey&lt;/span>, &lt;span style="color:#58a1dd">privKey&lt;/span>, &lt;span style="color:#58a1dd">err&lt;/span> &lt;span style="color:#ff636f">:=&lt;/span> &lt;span style="color:#58a1dd">ed25519&lt;/span>.&lt;span style="color:#58a1dd">GenerateKey&lt;/span>(&lt;span style="color:#58a1dd">rand&lt;/span>.&lt;span style="color:#58a1dd">Reader&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">if&lt;/span> &lt;span style="color:#58a1dd">err&lt;/span> &lt;span style="color:#ff636f">!=&lt;/span> &lt;span style="color:#ff636f">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">return&lt;/span> &lt;span style="color:#58a1dd">err&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">publicKey&lt;/span>, &lt;span style="color:#58a1dd">err&lt;/span> &lt;span style="color:#ff636f">:=&lt;/span> &lt;span style="color:#58a1dd">ssh&lt;/span>.&lt;span style="color:#58a1dd">NewPublicKey&lt;/span>(&lt;span style="color:#58a1dd">pubKey&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">if&lt;/span> &lt;span style="color:#58a1dd">err&lt;/span> &lt;span style="color:#ff636f">!=&lt;/span> &lt;span style="color:#ff636f">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">return&lt;/span> &lt;span style="color:#58a1dd">err&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">pemKey&lt;/span> &lt;span style="color:#ff636f">:=&lt;/span> &lt;span style="color:#ff636f">&amp;amp;&lt;/span>&lt;span style="color:#58a1dd">pem&lt;/span>.&lt;span style="color:#58a1dd">Block&lt;/span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">Type&lt;/span>: &lt;span style="color:#a6be9d">&amp;#34;OPENSSH PRIVATE KEY&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">Bytes&lt;/span>: &lt;span style="color:#58a1dd">MarshalED25519PrivateKey&lt;/span>(&lt;span style="color:#58a1dd">privKey&lt;/span>),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">privateKey&lt;/span> &lt;span style="color:#ff636f">:=&lt;/span> &lt;span style="color:#58a1dd">pem&lt;/span>.&lt;span style="color:#58a1dd">EncodeToMemory&lt;/span>(&lt;span style="color:#58a1dd">pemKey&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">authorizedKey&lt;/span> &lt;span style="color:#ff636f">:=&lt;/span> &lt;span style="color:#58a1dd">ssh&lt;/span>.&lt;span style="color:#58a1dd">MarshalAuthorizedKey&lt;/span>(&lt;span style="color:#58a1dd">publicKey&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">if&lt;/span> &lt;span style="color:#58a1dd">err&lt;/span> = &lt;span style="color:#58a1dd">ioutil&lt;/span>.&lt;span style="color:#58a1dd">WriteFile&lt;/span>(&lt;span style="color:#58a1dd">keyPath&lt;/span>, &lt;span style="color:#58a1dd">privateKey&lt;/span>, &lt;span style="color:#a6be9d">0600&lt;/span>); &lt;span style="color:#58a1dd">err&lt;/span> &lt;span style="color:#ff636f">!=&lt;/span> &lt;span style="color:#ff636f">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">return&lt;/span> &lt;span style="color:#58a1dd">err&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">return&lt;/span> &lt;span style="color:#58a1dd">ioutil&lt;/span>.&lt;span style="color:#58a1dd">WriteFile&lt;/span>(&lt;span style="color:#58a1dd">keyPath&lt;/span>&lt;span style="color:#ff636f">+&lt;/span>&lt;span style="color:#a6be9d">&amp;#34;.pub&amp;#34;&lt;/span>, &lt;span style="color:#58a1dd">authorizedKey&lt;/span>, &lt;span style="color:#a6be9d">0644&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="svnssh-实现">SVN+SSH 实现&lt;/h2>
&lt;p>Gitee 目前提供 &lt;code>svn+ssh&lt;/code> 协议访问，而此协议实际上是通过在服务器上运行 &lt;code>svnserve -t&lt;/code>，从而读写存储库数据，而 Gitee 的 svn 功能基于 git-as-svn ，我们只需在请求命令为 &lt;code>svnserve&lt;/code> 时，将流量代理转发到 git-as-svn 上即可。在 Gitee 上通过 ssh+svn 访问存储库需要用户对存储库具有写权限，这是特意而为之。&lt;/p>
&lt;h2 id="附录">附录&lt;/h2>
&lt;ol>
&lt;li>&lt;a href="https://en.wikipedia.org/wiki/Comparison_of_SSH_clients">Comparison of SSH clients&lt;/a> , &lt;a href="https://en.wikipedia.org/wiki/Comparison_of_SSH_servers">Comparison of SSH servers&lt;/a>&lt;/li>
&lt;/ol>
- https://forcemz.net/posts/2019/2019-03-15-make-a-git-ssh-server/ - Copyright (c) 2009-2024 J23</description></item><item><title>文件的解析</title><link>https://forcemz.net/posts/2019/2019-01-25-file-parsing/</link><pubDate>Fri, 25 Jan 2019 10:00:00 +0800</pubDate><guid>https://forcemz.net/posts/2019/2019-01-25-file-parsing/</guid><description>Charlie's Rethinking https://forcemz.net/posts/2019/2019-01-25-file-parsing/ -&lt;h2 id="前言">前言&lt;/h2>
&lt;p>本文探讨的是计算机文件，&lt;strong>计算机文件&lt;/strong> 用于记录数据到计算机设备上，维基百科上有简短的介绍：&lt;/p>
&lt;blockquote>
&lt;p>A computer file is a computer resource for recording data discretely in a computer storage device. Just as words can be written to paper, so can information be written to a computer file.&lt;/p>
&lt;/blockquote>
&lt;p>当人们需要使用这些文件的时候，需要从光盘，磁盘，闪存等设备上将文件读取到内存，按照文件的格式进行解析，然后供用户使用。在这个过程中，正确的获得文件格式信息是非常重要的，只有在识别出文件格式之后，才能够选择正确的的处理程序对文件进行解析。在 Windows 上通常是 Shell 外壳（&lt;code>Shell32.dll&lt;/code>）在注册表中查找文件后缀名的关联程序，然后交由关联程序处理相应的文件，比如 &lt;code>.docx&lt;/code> 的关联程序往往是 &lt;code>Microsoft Word&lt;/code>。&lt;code>.txt&lt;/code> 的关联程序是 &lt;code>Notepad&lt;/code>。但如果文件没有后缀名时，Windows Shell 就需要用用户自己选择对应的关联程序了。&lt;/p>
&lt;p>在 Unix 操作系统上，命令行下检测文件格式的检测通常使用 &lt;code>file&lt;/code> (&lt;a href="https://linux.die.net/man/1/file">&lt;code>file — determine file type&lt;/code>&lt;/a>) ，file 的源码可以在 Github 上有找到：&lt;a href="https://github.com/file/file">https://github.com/file/file&lt;/a>。file 这样的工具通过分析文件魔数，文件头部特征分析文件格式。这样的工具严重依赖 &lt;strong>Magdir&lt;/strong>，Magic 文件越多支持的格式越丰富。与 Windows 资源管理器相比，file 对文件格式的感知实际上更加强大。&lt;/p>
&lt;p>在 Unix like 图形系统中，文件的检测由文件管理器实现，像 &lt;code>Gnome Nemo&lt;/code> 这样的文件管理器会优先处理文件后缀名，在识别不到文件格式时才会去根据文件特征检测文件格式。Nemo 依赖 glib(gio &lt;a href="https://github.com/GNOME/glib/blob/cbfa776fc149fcc3e351fbdf68c1a299519f4905/gio/xdgmime/xdgmimemagic.c#L657">&lt;code>_xdg_mime_magic_lookup_data&lt;/code>&lt;/a>)，解析文件格式的原理与 file 类似，但不及 file 强大。&lt;/p>
&lt;p>&lt;code>file&lt;/code> 程序目前已经被移植到 Windows 使用，比如 &lt;code>Cygwin&lt;/code>，&lt;code>MSYS2&lt;/code> 的 Bash 环境中，均携带有 &lt;code>file&lt;/code> 命令。&lt;/p>
&lt;p>我最开始去了解文件类型的检测是在实现 LFS 服务器的时候，基于 C++ 编写的 LFS 服务器使用的是 &lt;code>libmagic&lt;/code>, libmagic 即 &lt;code>file&lt;/code> 的一部分，而基于 &lt;code>Golang&lt;/code> 编写的 LFS 服务器使用的则是 &lt;a href="https://github.com/h2non/filetype">https://github.com/h2non/filetype&lt;/a>&lt;/p>
&lt;p>在重构完 &lt;code>Privexec&lt;/code> 之后，突然想写一个文件类型检测工具，最开始叫做 &lt;code>FileView&lt;/code> 后来改名为 &lt;code>Planck&lt;/code>，当 &lt;code>Planck&lt;/code> 大概能用的时候，想把一些见解分享给大家，于是有了此篇文章。&lt;/p>
&lt;h2 id="背景知识">背景知识&lt;/h2>
&lt;h3 id="字节序">字节序&lt;/h3>
&lt;p>字节序：&lt;a href="https://en.wikipedia.org/wiki/Endianness">Endianness&lt;/a>，字节顺序，又称端序或尾序（英语：Endianness），在计算机科学领域中，指存储器中或在数字通信链路中，组成多字节的字的字节的排列顺序。&lt;/p>
&lt;ul>
&lt;li>x86、MOS Technology 6502、Z80、VAX、PDP-11等处理器为小端序；&lt;/li>
&lt;li>Motorola 6800、Motorola 68000、PowerPC 970、System/370、SPARC（除V9外）等处理器为大端序；&lt;/li>
&lt;li>ARM、PowerPC（除PowerPC 970外）、DEC Alpha、SPARC V9、MIPS、PA-RISC及IA64的字节序是可配置的。&lt;/li>
&lt;/ul>
&lt;p>网络字节序为 &lt;code>Big Endian&lt;/code>，目前 Windows x86, AMD64, ARM, ARM64 均为 &lt;code>Little Endian&lt;/code>。&lt;/p>
&lt;p>Planck 中字节序转换代码在：&lt;a href="https://github.com/fcharlie/Planck/blob/c6f677dda9a894de97f1f55639b90ff722c04a0d/include/endian.hpp">https://github.com/fcharlie/Planck/blob/c6f677dda9a894de97f1f55639b90ff722c04a0d/include/endian.hpp&lt;/a>。&lt;/p>
&lt;h3 id="文件十六进制查看工具">文件十六进制查看工具&lt;/h3>
&lt;p>查看文件信息可以使用支持 16 进制的工具查看，GUI 的工具有 &lt;code>Sublime Text&lt;/code>，&lt;code>010Editor&lt;/code> 等，CLI 的工具有 &lt;code>hexdump&lt;/code>，&lt;code>xxd&lt;/code>，还有最近带颜色高亮的&lt;/p>
&lt;ul>
&lt;li>Hastyhex: &lt;a href="https://github.com/skeeto/hastyhex">https://github.com/skeeto/hastyhex&lt;/a>&lt;/li>
&lt;li>Hexyl: &lt;a href="https://github.com/sharkdp/hexyl">https://github.com/sharkdp/hexyl&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>Hastyhex 基于 C 编写，但不支持指定长度，对 Windows 10 控制台支持不太好，于是我 fork Hastyhex，对其改进，使其支持特定长度和从指定位置开始读取。在 Windows 上改进了控制台颜色输出。&lt;/p>
&lt;p>Unix 版本：&lt;a href="https://github.com/fcharlie/hastyhex">HastyHex : a faster hex dumper&lt;/a>&lt;br>
针对 Windows 10 控制台改进的版本：&lt;a href="https://github.com/fcharlie/Planck/tree/c6f677dda9a894de97f1f55639b90ff722c04a0d/utils/hastyhex">https://github.com/fcharlie/Planck/tree/c6f677dda9a894de97f1f55639b90ff722c04a0d/utils/hastyhex&lt;/a>&lt;/p>
&lt;h2 id="文件硬链接软连接快捷方式">文件，硬链接，软连接，快捷方式&lt;/h2>
&lt;p>在存储设备上，一个文件通常是常规文件，但文件也有可能指向其它文件。&lt;/p>
&lt;h3 id="硬链接与软链接">硬链接与软链接&lt;/h3>
&lt;p>&lt;a href="https://en.wikipedia.org/wiki/Hard_link">Hard Link&lt;/a> 通常意味着一个原始文件可能存在有多个文件名，比如 Linux 一个 inode 对应多个路径。&lt;/p>
&lt;blockquote>
&lt;p>In computing, a hard link is a directory entry that associates a name with a file on a file system. All directory-based file systems must have at least one hard link giving the original name for each file. The term “hard link” is usually only used in file systems that allow more than one hard link for the same file.&lt;/p>
&lt;/blockquote>
&lt;p>Windows NTFS，Unix EXT4，ZFS，Btrfs 等文件系统均支持硬链接，ReFS 暂时不支持硬链接。&lt;/p>
&lt;p>在 Windows 中，硬链接被广泛使用，尤其是 &lt;a href="https://en.wikipedia.org/wiki/Side-by-side_assembly">Side-by-side assembly&lt;/a> 机制大量使用了硬链接 ，查看 &lt;code>C:\Windows\System32&lt;/code> 的文件，基本都会有相应的硬链接存在于 &lt;code>C:\Windows\WinSxS&lt;/code>。&lt;/p>
&lt;p>Git 在克隆本地存储库时，&lt;code>objects&lt;/code> 目录的对象文件（主要是 pack）创建的是硬链接。这样避免了复制，git 的&lt;strong>对象&lt;/strong>文件名与其内容的 SHA1 一致，当文件内容改变时，文件名也会改变，git 修改存储库 pack 文件的流程实际上是 &lt;code>新建&lt;/code>&amp;ndash;&lt;code>删除&lt;/code>，因此，使用硬链接不用当心互相修改破坏。&lt;/p>
&lt;p>在 Windows 中，可以使用 &lt;code>GetFileInformationByHandle&lt;/code>, &lt;code>FindFirstFileNameW&lt;/code>, &lt;code>FindNextFileNameW&lt;/code> 组合查询文件所有的硬链接。
在 POSIX 系统中，查询硬链接需要解析对应的 inode，如果 inode 值相同，则互为硬链接。&lt;code>struct stat&lt;/code> 结构中有 &lt;code>st_nlink&lt;/code> 表示此文件有多少个硬链接。&lt;/p>
&lt;p>&lt;a href="https://en.wikipedia.org/wiki/Symbolic_link">Symbolic link&lt;/a> 符号链接（软链接）是一类特殊的文件， 其包含有一条以绝对路径或者相对路径的形式指向其它文件或者目录的引用。&lt;/p>
&lt;p>软链接在 Unix 系统中被广泛使用，在终端中输入命令：&lt;code>ls -l /usr/bin&lt;/code> 可以看到大量的软链接。&lt;/p>
&lt;p>早期符号链接的实现，采用直接分配磁盘空间来存储符号链接的信息，这种机制与普通文件一致。这种符号链接文件里包含有一个指向目标文件的文本形式的引用，以及一个指示自己为符号链接的标志。&lt;/p>
&lt;p>这样的存储方式被证明有些缓慢，并且早一些小型系统上会浪费磁盘空间。一种名为快速符号链接的新型存储方式能够将文本形式的链接存储在用于存放文件信息的磁盘上的标准数据结构之中（inode）。为了表示区别，原先的符号链接存储方式也被称作慢速符号链接。NTFS 文件系统的符号链接是基于 NTFS ReparsePoint 功能实现。&lt;/p>
&lt;p>在 POSIX 系统中，&lt;code>readlink&lt;/code> 可以解析符号链接获得真实的目标路径，在 Windows 中，则可以使用 &lt;code>GetFinalPathNameByHandleW&lt;/code> 获得文件真实的路径。&lt;/p>
&lt;p>NTFS 系统还支持一些其他的重解析点，包括 &lt;code>MountPoint&lt;/code>, 与 UWP 快捷命令目标相关的 &lt;code>AppExecLink&lt;/code>, 与 Windows 10 Unix domain socket 相关的 &lt;code>AF Unix&lt;/code>, 与 OneDrive 相关的 &lt;code>OneDrive&lt;/code>, 与 Git VFS（GVFS） 相关的 &lt;code>ProjFS&lt;/code>, 以及与 WIM 挂载相关的 &lt;code>WimImage&lt;/code> 还有 &lt;a href="https://devblogs.microsoft.com/oldnewthing/20190618-00/?p=102597">WOF - Windows Overlay Filter&lt;/a> 等等。Planck 中实现了函数 &lt;a href="https://github.com/fcharlie/Planck/blob/a400828e62804b9c38c4e164e9f3efe559245e50/lib/inquisitive/resolve.cc#L82">&lt;code>ResolveTarget&lt;/code>&lt;/a> 用于分析重解析点。&lt;/p>
&lt;h3 id="快捷方式和桌面文件">快捷方式和桌面文件&lt;/h3>
&lt;p>在 Windows 系统中，桌面快捷方式文件的后缀名为 &lt;code>.lnk&lt;/code>，用户只需要点击桌面上的快捷方式就可以很方便的打开应用程序，网站或者文件。快捷方式的格式名称叫做 &lt;code>Shell Link&lt;/code>，是一种二进制格式文件，相应的规范在 &lt;a href="https://msdn.microsoft.com/en-us/library/dd871305.aspx">[MS-SHLLINK]: Shell Link (.LNK) Binary File Format&lt;/a>。在 Planck 中，ShellLink 的定义和实现分别是 &lt;a href="https://github.com/fcharlie/Planck/blob/a400828e62804b9c38c4e164e9f3efe559245e50/lib/inquisitive/shl.hpp">lib/inquisitive/shl.hpp&lt;/a> 和 &lt;a href="https://github.com/fcharlie/Planck/blob/a400828e62804b9c38c4e164e9f3efe559245e50/lib/inquisitive/shl.cc">lib/inquisitive/shl.cc&lt;/a>，目前只支持解析 &lt;code>HasLinkInfo&lt;/code> 以及 &lt;code>HasRelativePath&lt;/code> 标志的快捷方式。&lt;/p>
&lt;p>在 X-Window 系统上，也存在一种类似桌面快捷方式的文件，后缀名为 &lt;code>.desktop&lt;/code> ，当文件属性为可执行时，文件管理器会解析 &lt;code>Icon&lt;/code>，&lt;code>Name&lt;/code> 然后读取设置的图标，名称显示出来。下面是我使用的 Ubuntu 系统上的 &lt;code>wireshark.desktop&lt;/code> 文件内容。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#1d2432;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">#!/usr/bin/env xdg-open
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span>&lt;span style="color:#ff636f">[&lt;/span>Desktop Entry&lt;span style="color:#ff636f">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#58a1dd">Name&lt;/span>&lt;span style="color:#ff636f">=&lt;/span>Wireshark
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#58a1dd">Comment&lt;/span>&lt;span style="color:#ff636f">=&lt;/span>Wireshark build
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#58a1dd">GenericName&lt;/span>&lt;span style="color:#ff636f">=&lt;/span>Demo Application
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#58a1dd">Exec&lt;/span>&lt;span style="color:#ff636f">=&lt;/span>/opt/wireshark/bin/wireshark
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#58a1dd">Icon&lt;/span>&lt;span style="color:#ff636f">=&lt;/span>wireshark
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#58a1dd">Type&lt;/span>&lt;span style="color:#ff636f">=&lt;/span>Application
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#58a1dd">StartupNotify&lt;/span>&lt;span style="color:#ff636f">=&lt;/span>&lt;span style="color:#58a1dd">true&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#58a1dd">Categories&lt;/span>&lt;span style="color:#ff636f">=&lt;/span>GNOME;GTK;Development;Documentation;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#58a1dd">MimeType&lt;/span>&lt;span style="color:#ff636f">=&lt;/span>text/plain;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>可以看出，这是一个标准的 &lt;a href="https://en.wikipedia.org/wiki/Shebang_(Unix)">&lt;code>Shebang&lt;/code>&lt;/a> 可执行文件，在 Ubuntu 中，&lt;code>xdg-open&lt;/code> 自身为 &lt;code>Shell&lt;/code> 脚本（在MacOS X下的Darwin中，解释器指定的文件必须是可执行的二进制文件，并且本身不能是脚本。），虽然这是一个 &lt;code>Shebang&lt;/code> 可执行文件，但遗憾的是，在 Ubuntu 中，你无法直接从命令行中使用 &lt;code>xdg-open&lt;/code> 启动相应的程序，这是一个存在了超过 9 年的 BUG: &lt;a href="https://bugs.launchpad.net/ubuntu/+source/glib2.0/+bug/378783">xdg-open *.desktop opens text editor&lt;/a>&lt;/p>
&lt;h2 id="文本文件还是二进制">文本文件还是二进制&lt;/h2>
&lt;p>在计算机中，文本文件实际上支持二进制文件的一种，这种文件几乎只由可打印字符，控制字符组成，而二进制文件则包含大量的不可见字符。处理程序将按照定义的二进制格式对二进制文件进行解析。&lt;/p>
&lt;h3 id="快速区分文本二进制">快速区分文本二进制&lt;/h3>
&lt;p>文本文件还是偶尔会携带不可见字符，这样情况下我们很难 100% 区分一个文件是否是文本文件（二进制文件）。如果我们能够容忍一些误差，
，则可以通过检测文件中是否存在 &lt;code>NUL&lt;/code> 来区分文件是文本文件还是二进制文件。这种方法的检测过程非常简单，速度也非常可观，这种方法也被 &lt;code>git&lt;/code> 使用，用于在 diff 过程中判断文件是否是二进制：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#1d2432;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c" data-lang="c">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">//https://github.com/git/git/blob/d166e6afe5f257217836ef24a73764eba390c58d/xdiff-interface.c#L188
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span>&lt;span style="color:#ff636f">int&lt;/span> &lt;span style="color:#58a1dd">buffer_is_binary&lt;/span>(&lt;span style="color:#ff636f">const&lt;/span> &lt;span style="color:#ff636f">char&lt;/span> &lt;span style="color:#ff636f">*&lt;/span>&lt;span style="color:#58a1dd">ptr&lt;/span>, &lt;span style="color:#ff636f">unsigned&lt;/span> &lt;span style="color:#ff636f">long&lt;/span> &lt;span style="color:#58a1dd">size&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">if&lt;/span> (&lt;span style="color:#58a1dd">FIRST_FEW_BYTES&lt;/span> &lt;span style="color:#ff636f">&amp;lt;&lt;/span> &lt;span style="color:#58a1dd">size&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">size&lt;/span> &lt;span style="color:#ff636f">=&lt;/span> &lt;span style="color:#58a1dd">FIRST_FEW_BYTES&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">return&lt;/span> &lt;span style="color:#ff636f">!!&lt;/span>&lt;span style="color:#58a1dd">memchr&lt;/span>(&lt;span style="color:#58a1dd">ptr&lt;/span>, &lt;span style="color:#a6be9d">0&lt;/span>, &lt;span style="color:#58a1dd">size&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>我们知道，在 C 语言的标准库函数 &lt;code>strlen&lt;/code> 中，字符串的长度计算是通过判断字符是否是 &lt;a href="https://en.wikipedia.org/wiki/Null-terminated_string">Null-terminated string&lt;/a>，这就意味着大多数时候，ASCII 文本文件不应该有 &lt;code>NUL&lt;/code>，在 UTF-8 与 ASCII 兼容，这种情况下是一致的。当然这种设计也饱受批评：&lt;a href="http://queue.acm.org/detail.cfm?id=2010365">The Most Expensive One-byte Mistake&lt;/a>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#1d2432;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c" data-lang="c">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff636f">size_t&lt;/span> &lt;span style="color:#58a1dd">strlen&lt;/span>(&lt;span style="color:#ff636f">const&lt;/span> &lt;span style="color:#ff636f">char&lt;/span> &lt;span style="color:#ff636f">*&lt;/span>&lt;span style="color:#58a1dd">s&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">const&lt;/span> &lt;span style="color:#ff636f">char&lt;/span> &lt;span style="color:#ff636f">*&lt;/span>&lt;span style="color:#58a1dd">a&lt;/span> &lt;span style="color:#ff636f">=&lt;/span> &lt;span style="color:#58a1dd">s&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">for&lt;/span> (; &lt;span style="color:#ff636f">*&lt;/span>&lt;span style="color:#58a1dd">s&lt;/span>; &lt;span style="color:#58a1dd">s&lt;/span>&lt;span style="color:#ff636f">++&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">return&lt;/span> &lt;span style="color:#58a1dd">s&lt;/span>&lt;span style="color:#ff636f">-&lt;/span>&lt;span style="color:#58a1dd">a&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="编码的文本">编码的文本&lt;/h3>
&lt;p>ASCII 编码的范围是 0 ~127，这就意味着只能用于 &lt;code>A-Z;a-z;0-9,+-&lt;/code> 数字，英文字母一些基本符号控制字符等少量的字符，如果存储非英语国家的文字基本上是不现实的，就算把 128 ~ 255 全部用上，像中文这种有几千上万文字的语言是无法表示的。为了支持更多的文字，后来人们制定了国际标准化的 US4(UTF-32) US2(UTF-16)，UTF-8，国内制定 GBK。当编码的种类多起来的时候，问题又来了，如何确定文件编码？&lt;/p>
&lt;p>例如 &lt;code>UTF-16&lt;/code>，&lt;code>UTF-32&lt;/code> 这样的编码，由于是多字节的，因此可能存在多字节序，通过检测多字节序就可以简单的获得文件编码：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>编码&lt;/th>
&lt;th>起始字符&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>UTF-32 BE&lt;/td>
&lt;td>0x0,0x0,0xFE,0xFF&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>UTF-32 LE&lt;/td>
&lt;td>0xFF,0xFE,0x00,0x00&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>UTF-16 BE&lt;/td>
&lt;td>0xFE,0xFF&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>UTF-16 LE&lt;/td>
&lt;td>0xFF,0xFE&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>UTF-8 with BOM&lt;/td>
&lt;td>0xEF,0xBB,0xBF&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>UTF-8 是一种字节序无关的可变字节编码（1 ~ 4 字节），因此，不带字节序没有任何问题，并且 ASCII 编码 0 ~ 127 完全是 UTF-8 的子集，如果不携带字节序，则能够很好的兼容以前的 ASCII 文本。这也是 UTF-8 在 Unix 系统上被广泛使用的原因之一。而 Windows 记事本采用 UTF-8 with BOM 也由于不兼容 ASCII 而广受批评。&lt;/p>
&lt;p>Windows 系统是一个国际化做的非常棒的操作系统，对于各国的本地字符集支持也非常好，比如，在中国大陆，文本编辑器的默认编码是 ANSI，是 ASCII 扩展编码，0 ~ 127 编码与 ASCII 相同，0x80 ~ 0xFFFF 则表示对应代码页的所有编码。我们可以看到，ANSI 编码的范围小于 UTF-8，并且绝大多数 ANSI 字符的码点相同数字的 UTF-8 码点都是有效的 UTF-8 字符，因此如果要区分 &lt;code>UTF-8 without BOM&lt;/code> 还是 &lt;code>ANSI&lt;/code>，实际上相当麻烦。&lt;/p>
&lt;p>有效的 UTF-8 字符区间：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#1d2432;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c" data-lang="c">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">/*
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic"> * legal utf-8 byte sequence
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic"> * http://www.unicode.org/versions/Unicode6.0.0/ch03.pdf - page 94
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic"> *
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic"> * Code Points 1st 2s 3s 4s
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic"> * U+0000..U+007F 00..7F
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic"> * U+0080..U+07FF C2..DF 80..BF
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic"> * U+0800..U+0FFF E0 A0..BF 80..BF
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic"> * U+1000..U+CFFF E1..EC 80..BF 80..BF
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic"> * U+D000..U+D7FF ED 80..9F 80..BF
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic"> * U+E000..U+FFFF EE..EF 80..BF 80..BF
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic"> * U+10000..U+3FFFF F0 90..BF 80..BF 80..BF
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic"> * U+40000..U+FFFFF F1..F3 80..BF 80..BF 80..BF
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic"> * U+100000..U+10FFFF F4 80..8F 80..BF 80..BF
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic"> *
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic"> */&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>另外，对于 ANSI 而言，不同字符集的都重复使用着 0x80 ~ 0xFFFF 编码区间，这进一步加大了文本字符检测的难度。&lt;/p>
&lt;p>文本编码的检测有两个比较流行的实现，一个是 IE 的 &lt;a href="https://docs.microsoft.com/en-us/previous-versions/windows/internet-explorer/ie-developer/platform-apis/aa741022(v=vs.85)">IMultiLanguage&lt;/a>，另一个是 Firefox 的 &lt;a href="https://github.com/mozilla/gecko-dev/tree/52568d10660dfb0ce950f6983b20228374602efe/extensions/universalchardet/src/base">UniversalCharsetDetection&lt;/a>，后者的准确性更高，使用更加广泛，比如 &lt;code>Notepad++&lt;/code> 就是使用了 &lt;code>universalchardet&lt;/code>。&lt;/p>
&lt;p>用户通常不应直接使用 Mozilla 目录中的 &lt;code>Universalchardet&lt;/code>，&lt;code>Universalchardet&lt;/code> 与 Firefox 整合较为紧密，剥离稍微有点麻烦，最近的版本只有很少的几个 &lt;code>LangModels&lt;/code> 实现。如果要使用 &lt;code>Universalchardet&lt;/code>，可以使用 Freedesktop 维护的：&lt;a href="https://www.freedesktop.org/wiki/Software/uchardet/">uchardet&lt;/a>，这个库基于 &lt;code>Universalchardet&lt;/code> 发展起来的，能编译成动态库或者静态库供开发者整合到自己的程序之中。&lt;/p>
&lt;p>但 &lt;code>uchardet&lt;/code> 的许可证为 &lt;code>MPL 1.1&lt;/code> ,&lt;code>GPL 2.0&lt;/code> &lt;code>LGPL 2.1&lt;/code>，程序在依赖 &lt;code>uchardet&lt;/code> 时要考虑许可证的问题。如果仅仅只需要判断文本是否是 UTF-8，可以按照上图的 UTF-8 编码区间对文件进行分析，代码如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#1d2432;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c++" data-lang="c++">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">// Thanks
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">// https://github.com/lemire/Code-used-on-Daniel-Lemire-s-blog/blob/master/2018/05/08/checkutf8.c
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span>&lt;span style="color:#ff636f">static&lt;/span> &lt;span style="color:#ff636f">const&lt;/span> &lt;span style="color:#ff636f">uint8_t&lt;/span> &lt;span style="color:#58a1dd">utf8d&lt;/span>[] &lt;span style="color:#ff636f">=&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6be9d">0&lt;/span>, &lt;span style="color:#a6be9d">0&lt;/span>, &lt;span style="color:#a6be9d">0&lt;/span>, &lt;span style="color:#a6be9d">0&lt;/span>, &lt;span style="color:#a6be9d">0&lt;/span>, &lt;span style="color:#a6be9d">0&lt;/span>, &lt;span style="color:#a6be9d">0&lt;/span>, &lt;span style="color:#a6be9d">0&lt;/span>, &lt;span style="color:#a6be9d">0&lt;/span>, &lt;span style="color:#a6be9d">0&lt;/span>, &lt;span style="color:#a6be9d">0&lt;/span>, &lt;span style="color:#828b96;font-style:italic">//
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span> &lt;span style="color:#a6be9d">0&lt;/span>, &lt;span style="color:#a6be9d">0&lt;/span>, &lt;span style="color:#a6be9d">0&lt;/span>, &lt;span style="color:#a6be9d">0&lt;/span>, &lt;span style="color:#a6be9d">0&lt;/span>, &lt;span style="color:#a6be9d">0&lt;/span>, &lt;span style="color:#a6be9d">0&lt;/span>, &lt;span style="color:#a6be9d">0&lt;/span>, &lt;span style="color:#a6be9d">0&lt;/span>, &lt;span style="color:#a6be9d">0&lt;/span>, &lt;span style="color:#a6be9d">0&lt;/span>, &lt;span style="color:#828b96;font-style:italic">//
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span> &lt;span style="color:#a6be9d">0&lt;/span>, &lt;span style="color:#a6be9d">0&lt;/span>, &lt;span style="color:#a6be9d">0&lt;/span>, &lt;span style="color:#a6be9d">0&lt;/span>, &lt;span style="color:#a6be9d">0&lt;/span>, &lt;span style="color:#a6be9d">0&lt;/span>, &lt;span style="color:#a6be9d">0&lt;/span>, &lt;span style="color:#a6be9d">0&lt;/span>, &lt;span style="color:#a6be9d">0&lt;/span>, &lt;span style="color:#a6be9d">0&lt;/span>, &lt;span style="color:#828b96;font-style:italic">// 00..1f
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span> &lt;span style="color:#a6be9d">0&lt;/span>, &lt;span style="color:#a6be9d">0&lt;/span>, &lt;span style="color:#a6be9d">0&lt;/span>, &lt;span style="color:#a6be9d">0&lt;/span>, &lt;span style="color:#a6be9d">0&lt;/span>, &lt;span style="color:#a6be9d">0&lt;/span>, &lt;span style="color:#a6be9d">0&lt;/span>, &lt;span style="color:#a6be9d">0&lt;/span>, &lt;span style="color:#a6be9d">0&lt;/span>, &lt;span style="color:#a6be9d">0&lt;/span>, &lt;span style="color:#a6be9d">0&lt;/span>, &lt;span style="color:#828b96;font-style:italic">//
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span> &lt;span style="color:#a6be9d">0&lt;/span>, &lt;span style="color:#a6be9d">0&lt;/span>, &lt;span style="color:#a6be9d">0&lt;/span>, &lt;span style="color:#a6be9d">0&lt;/span>, &lt;span style="color:#a6be9d">0&lt;/span>, &lt;span style="color:#a6be9d">0&lt;/span>, &lt;span style="color:#a6be9d">0&lt;/span>, &lt;span style="color:#a6be9d">0&lt;/span>, &lt;span style="color:#a6be9d">0&lt;/span>, &lt;span style="color:#a6be9d">0&lt;/span>, &lt;span style="color:#a6be9d">0&lt;/span>, &lt;span style="color:#828b96;font-style:italic">//
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span> &lt;span style="color:#a6be9d">0&lt;/span>, &lt;span style="color:#a6be9d">0&lt;/span>, &lt;span style="color:#a6be9d">0&lt;/span>, &lt;span style="color:#a6be9d">0&lt;/span>, &lt;span style="color:#a6be9d">0&lt;/span>, &lt;span style="color:#a6be9d">0&lt;/span>, &lt;span style="color:#a6be9d">0&lt;/span>, &lt;span style="color:#a6be9d">0&lt;/span>, &lt;span style="color:#a6be9d">0&lt;/span>, &lt;span style="color:#a6be9d">0&lt;/span>, &lt;span style="color:#828b96;font-style:italic">// 20..3f
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span> &lt;span style="color:#a6be9d">0&lt;/span>, &lt;span style="color:#a6be9d">0&lt;/span>, &lt;span style="color:#a6be9d">0&lt;/span>, &lt;span style="color:#a6be9d">0&lt;/span>, &lt;span style="color:#a6be9d">0&lt;/span>, &lt;span style="color:#a6be9d">0&lt;/span>, &lt;span style="color:#a6be9d">0&lt;/span>, &lt;span style="color:#a6be9d">0&lt;/span>, &lt;span style="color:#a6be9d">0&lt;/span>, &lt;span style="color:#a6be9d">0&lt;/span>, &lt;span style="color:#a6be9d">0&lt;/span>, &lt;span style="color:#828b96;font-style:italic">//
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span> &lt;span style="color:#a6be9d">0&lt;/span>, &lt;span style="color:#a6be9d">0&lt;/span>, &lt;span style="color:#a6be9d">0&lt;/span>, &lt;span style="color:#a6be9d">0&lt;/span>, &lt;span style="color:#a6be9d">0&lt;/span>, &lt;span style="color:#a6be9d">0&lt;/span>, &lt;span style="color:#a6be9d">0&lt;/span>, &lt;span style="color:#a6be9d">0&lt;/span>, &lt;span style="color:#a6be9d">0&lt;/span>, &lt;span style="color:#a6be9d">0&lt;/span>, &lt;span style="color:#a6be9d">0&lt;/span>, &lt;span style="color:#828b96;font-style:italic">//
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span> &lt;span style="color:#a6be9d">0&lt;/span>, &lt;span style="color:#a6be9d">0&lt;/span>, &lt;span style="color:#a6be9d">0&lt;/span>, &lt;span style="color:#a6be9d">0&lt;/span>, &lt;span style="color:#a6be9d">0&lt;/span>, &lt;span style="color:#a6be9d">0&lt;/span>, &lt;span style="color:#a6be9d">0&lt;/span>, &lt;span style="color:#a6be9d">0&lt;/span>, &lt;span style="color:#a6be9d">0&lt;/span>, &lt;span style="color:#a6be9d">0&lt;/span>, &lt;span style="color:#828b96;font-style:italic">// 40..5f
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span> &lt;span style="color:#a6be9d">0&lt;/span>, &lt;span style="color:#a6be9d">0&lt;/span>, &lt;span style="color:#a6be9d">0&lt;/span>, &lt;span style="color:#a6be9d">0&lt;/span>, &lt;span style="color:#a6be9d">0&lt;/span>, &lt;span style="color:#a6be9d">0&lt;/span>, &lt;span style="color:#a6be9d">0&lt;/span>, &lt;span style="color:#a6be9d">0&lt;/span>, &lt;span style="color:#a6be9d">0&lt;/span>, &lt;span style="color:#a6be9d">0&lt;/span>, &lt;span style="color:#a6be9d">0&lt;/span>, &lt;span style="color:#828b96;font-style:italic">//
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span> &lt;span style="color:#a6be9d">0&lt;/span>, &lt;span style="color:#a6be9d">0&lt;/span>, &lt;span style="color:#a6be9d">0&lt;/span>, &lt;span style="color:#a6be9d">0&lt;/span>, &lt;span style="color:#a6be9d">0&lt;/span>, &lt;span style="color:#a6be9d">0&lt;/span>, &lt;span style="color:#a6be9d">0&lt;/span>, &lt;span style="color:#a6be9d">0&lt;/span>, &lt;span style="color:#a6be9d">0&lt;/span>, &lt;span style="color:#a6be9d">0&lt;/span>, &lt;span style="color:#a6be9d">0&lt;/span>, &lt;span style="color:#828b96;font-style:italic">//
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span> &lt;span style="color:#a6be9d">0&lt;/span>, &lt;span style="color:#a6be9d">0&lt;/span>, &lt;span style="color:#a6be9d">0&lt;/span>, &lt;span style="color:#a6be9d">0&lt;/span>, &lt;span style="color:#a6be9d">0&lt;/span>, &lt;span style="color:#a6be9d">0&lt;/span>, &lt;span style="color:#a6be9d">0&lt;/span>, &lt;span style="color:#a6be9d">0&lt;/span>, &lt;span style="color:#a6be9d">0&lt;/span>, &lt;span style="color:#a6be9d">0&lt;/span>, &lt;span style="color:#828b96;font-style:italic">// 60..7f
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span> &lt;span style="color:#a6be9d">1&lt;/span>, &lt;span style="color:#a6be9d">1&lt;/span>, &lt;span style="color:#a6be9d">1&lt;/span>, &lt;span style="color:#a6be9d">1&lt;/span>, &lt;span style="color:#a6be9d">1&lt;/span>, &lt;span style="color:#a6be9d">1&lt;/span>, &lt;span style="color:#a6be9d">1&lt;/span>, &lt;span style="color:#a6be9d">1&lt;/span>, &lt;span style="color:#a6be9d">1&lt;/span>, &lt;span style="color:#a6be9d">1&lt;/span>, &lt;span style="color:#a6be9d">1&lt;/span>, &lt;span style="color:#828b96;font-style:italic">//
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span> &lt;span style="color:#a6be9d">1&lt;/span>, &lt;span style="color:#a6be9d">1&lt;/span>, &lt;span style="color:#a6be9d">1&lt;/span>, &lt;span style="color:#a6be9d">1&lt;/span>, &lt;span style="color:#a6be9d">1&lt;/span>, &lt;span style="color:#a6be9d">9&lt;/span>, &lt;span style="color:#a6be9d">9&lt;/span>, &lt;span style="color:#a6be9d">9&lt;/span>, &lt;span style="color:#a6be9d">9&lt;/span>, &lt;span style="color:#a6be9d">9&lt;/span>, &lt;span style="color:#a6be9d">9&lt;/span>, &lt;span style="color:#828b96;font-style:italic">//
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span> &lt;span style="color:#a6be9d">9&lt;/span>, &lt;span style="color:#a6be9d">9&lt;/span>, &lt;span style="color:#a6be9d">9&lt;/span>, &lt;span style="color:#a6be9d">9&lt;/span>, &lt;span style="color:#a6be9d">9&lt;/span>, &lt;span style="color:#a6be9d">9&lt;/span>, &lt;span style="color:#a6be9d">9&lt;/span>, &lt;span style="color:#a6be9d">9&lt;/span>, &lt;span style="color:#a6be9d">9&lt;/span>, &lt;span style="color:#a6be9d">9&lt;/span>, &lt;span style="color:#828b96;font-style:italic">// 80..9f
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span> &lt;span style="color:#a6be9d">7&lt;/span>, &lt;span style="color:#a6be9d">7&lt;/span>, &lt;span style="color:#a6be9d">7&lt;/span>, &lt;span style="color:#a6be9d">7&lt;/span>, &lt;span style="color:#a6be9d">7&lt;/span>, &lt;span style="color:#a6be9d">7&lt;/span>, &lt;span style="color:#a6be9d">7&lt;/span>, &lt;span style="color:#a6be9d">7&lt;/span>, &lt;span style="color:#a6be9d">7&lt;/span>, &lt;span style="color:#a6be9d">7&lt;/span>, &lt;span style="color:#a6be9d">7&lt;/span>, &lt;span style="color:#828b96;font-style:italic">//
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span> &lt;span style="color:#a6be9d">7&lt;/span>, &lt;span style="color:#a6be9d">7&lt;/span>, &lt;span style="color:#a6be9d">7&lt;/span>, &lt;span style="color:#a6be9d">7&lt;/span>, &lt;span style="color:#a6be9d">7&lt;/span>, &lt;span style="color:#a6be9d">7&lt;/span>, &lt;span style="color:#a6be9d">7&lt;/span>, &lt;span style="color:#a6be9d">7&lt;/span>, &lt;span style="color:#a6be9d">7&lt;/span>, &lt;span style="color:#a6be9d">7&lt;/span>, &lt;span style="color:#a6be9d">7&lt;/span>, &lt;span style="color:#828b96;font-style:italic">//
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span> &lt;span style="color:#a6be9d">7&lt;/span>, &lt;span style="color:#a6be9d">7&lt;/span>, &lt;span style="color:#a6be9d">7&lt;/span>, &lt;span style="color:#a6be9d">7&lt;/span>, &lt;span style="color:#a6be9d">7&lt;/span>, &lt;span style="color:#a6be9d">7&lt;/span>, &lt;span style="color:#a6be9d">7&lt;/span>, &lt;span style="color:#a6be9d">7&lt;/span>, &lt;span style="color:#a6be9d">7&lt;/span>, &lt;span style="color:#a6be9d">7&lt;/span>, &lt;span style="color:#828b96;font-style:italic">// a0..bf
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span> &lt;span style="color:#a6be9d">8&lt;/span>, &lt;span style="color:#a6be9d">8&lt;/span>, &lt;span style="color:#a6be9d">2&lt;/span>, &lt;span style="color:#a6be9d">2&lt;/span>, &lt;span style="color:#a6be9d">2&lt;/span>, &lt;span style="color:#a6be9d">2&lt;/span>, &lt;span style="color:#a6be9d">2&lt;/span>, &lt;span style="color:#a6be9d">2&lt;/span>, &lt;span style="color:#a6be9d">2&lt;/span>, &lt;span style="color:#a6be9d">2&lt;/span>, &lt;span style="color:#a6be9d">2&lt;/span>, &lt;span style="color:#828b96;font-style:italic">//
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span> &lt;span style="color:#a6be9d">2&lt;/span>, &lt;span style="color:#a6be9d">2&lt;/span>, &lt;span style="color:#a6be9d">2&lt;/span>, &lt;span style="color:#a6be9d">2&lt;/span>, &lt;span style="color:#a6be9d">2&lt;/span>, &lt;span style="color:#a6be9d">2&lt;/span>, &lt;span style="color:#a6be9d">2&lt;/span>, &lt;span style="color:#a6be9d">2&lt;/span>, &lt;span style="color:#a6be9d">2&lt;/span>, &lt;span style="color:#a6be9d">2&lt;/span>, &lt;span style="color:#a6be9d">2&lt;/span>, &lt;span style="color:#828b96;font-style:italic">//
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span> &lt;span style="color:#a6be9d">2&lt;/span>, &lt;span style="color:#a6be9d">2&lt;/span>, &lt;span style="color:#a6be9d">2&lt;/span>, &lt;span style="color:#a6be9d">2&lt;/span>, &lt;span style="color:#a6be9d">2&lt;/span>, &lt;span style="color:#a6be9d">2&lt;/span>, &lt;span style="color:#a6be9d">2&lt;/span>, &lt;span style="color:#a6be9d">2&lt;/span>, &lt;span style="color:#a6be9d">2&lt;/span>, &lt;span style="color:#a6be9d">2&lt;/span>, &lt;span style="color:#828b96;font-style:italic">// c0..df
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span> &lt;span style="color:#a6be9d">0xa&lt;/span>, &lt;span style="color:#a6be9d">0x3&lt;/span>, &lt;span style="color:#a6be9d">0x3&lt;/span>, &lt;span style="color:#a6be9d">0x3&lt;/span>, &lt;span style="color:#a6be9d">0x3&lt;/span>, &lt;span style="color:#a6be9d">0x3&lt;/span>, &lt;span style="color:#a6be9d">0x3&lt;/span>, &lt;span style="color:#a6be9d">0x3&lt;/span>, &lt;span style="color:#a6be9d">0x3&lt;/span>, &lt;span style="color:#a6be9d">0x3&lt;/span>, &lt;span style="color:#a6be9d">0x3&lt;/span>, &lt;span style="color:#828b96;font-style:italic">//
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span> &lt;span style="color:#a6be9d">0x3&lt;/span>, &lt;span style="color:#a6be9d">0x3&lt;/span>, &lt;span style="color:#a6be9d">0x4&lt;/span>, &lt;span style="color:#a6be9d">0x3&lt;/span>, &lt;span style="color:#a6be9d">0x3&lt;/span>, &lt;span style="color:#828b96;font-style:italic">// e0..ef
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span> &lt;span style="color:#a6be9d">0xb&lt;/span>, &lt;span style="color:#a6be9d">0x6&lt;/span>, &lt;span style="color:#a6be9d">0x6&lt;/span>, &lt;span style="color:#a6be9d">0x6&lt;/span>, &lt;span style="color:#a6be9d">0x5&lt;/span>, &lt;span style="color:#a6be9d">0x8&lt;/span>, &lt;span style="color:#a6be9d">0x8&lt;/span>, &lt;span style="color:#a6be9d">0x8&lt;/span>, &lt;span style="color:#a6be9d">0x8&lt;/span>, &lt;span style="color:#a6be9d">0x8&lt;/span>, &lt;span style="color:#a6be9d">0x8&lt;/span>, &lt;span style="color:#828b96;font-style:italic">//
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span> &lt;span style="color:#a6be9d">0x8&lt;/span>, &lt;span style="color:#a6be9d">0x8&lt;/span>, &lt;span style="color:#a6be9d">0x8&lt;/span>, &lt;span style="color:#a6be9d">0x8&lt;/span>, &lt;span style="color:#a6be9d">0x8&lt;/span> &lt;span style="color:#828b96;font-style:italic">// f0..ff
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span>};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff636f">static&lt;/span> &lt;span style="color:#ff636f">const&lt;/span> &lt;span style="color:#ff636f">uint8_t&lt;/span> &lt;span style="color:#58a1dd">utf8d_transition&lt;/span>[] &lt;span style="color:#ff636f">=&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6be9d">0x0&lt;/span>, &lt;span style="color:#a6be9d">0x1&lt;/span>, &lt;span style="color:#a6be9d">0x2&lt;/span>, &lt;span style="color:#a6be9d">0x3&lt;/span>, &lt;span style="color:#a6be9d">0x5&lt;/span>, &lt;span style="color:#a6be9d">0x8&lt;/span>, &lt;span style="color:#a6be9d">0x7&lt;/span>, &lt;span style="color:#a6be9d">0x1&lt;/span>, &lt;span style="color:#a6be9d">0x1&lt;/span>, &lt;span style="color:#a6be9d">0x1&lt;/span>, &lt;span style="color:#a6be9d">0x4&lt;/span>, &lt;span style="color:#828b96;font-style:italic">//
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span> &lt;span style="color:#a6be9d">0x6&lt;/span>, &lt;span style="color:#a6be9d">0x1&lt;/span>, &lt;span style="color:#a6be9d">0x1&lt;/span>, &lt;span style="color:#a6be9d">0x1&lt;/span>, &lt;span style="color:#a6be9d">0x1&lt;/span>, &lt;span style="color:#828b96;font-style:italic">// s0..s0
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span> &lt;span style="color:#a6be9d">1&lt;/span>, &lt;span style="color:#a6be9d">1&lt;/span>, &lt;span style="color:#a6be9d">1&lt;/span>, &lt;span style="color:#a6be9d">1&lt;/span>, &lt;span style="color:#a6be9d">1&lt;/span>, &lt;span style="color:#a6be9d">1&lt;/span>, &lt;span style="color:#a6be9d">1&lt;/span>, &lt;span style="color:#a6be9d">1&lt;/span>, &lt;span style="color:#a6be9d">1&lt;/span>, &lt;span style="color:#a6be9d">1&lt;/span>, &lt;span style="color:#a6be9d">1&lt;/span>, &lt;span style="color:#828b96;font-style:italic">//
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span> &lt;span style="color:#a6be9d">1&lt;/span>, &lt;span style="color:#a6be9d">1&lt;/span>, &lt;span style="color:#a6be9d">1&lt;/span>, &lt;span style="color:#a6be9d">1&lt;/span>, &lt;span style="color:#a6be9d">1&lt;/span>, &lt;span style="color:#a6be9d">1&lt;/span>, &lt;span style="color:#a6be9d">0&lt;/span>, &lt;span style="color:#a6be9d">1&lt;/span>, &lt;span style="color:#a6be9d">1&lt;/span>, &lt;span style="color:#a6be9d">1&lt;/span>, &lt;span style="color:#a6be9d">1&lt;/span>, &lt;span style="color:#828b96;font-style:italic">//
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span> &lt;span style="color:#a6be9d">1&lt;/span>, &lt;span style="color:#a6be9d">0&lt;/span>, &lt;span style="color:#a6be9d">1&lt;/span>, &lt;span style="color:#a6be9d">0&lt;/span>, &lt;span style="color:#a6be9d">1&lt;/span>, &lt;span style="color:#a6be9d">1&lt;/span>, &lt;span style="color:#a6be9d">1&lt;/span>, &lt;span style="color:#a6be9d">1&lt;/span>, &lt;span style="color:#a6be9d">1&lt;/span>, &lt;span style="color:#a6be9d">1&lt;/span>, &lt;span style="color:#828b96;font-style:italic">// s1..s2
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span> &lt;span style="color:#a6be9d">1&lt;/span>, &lt;span style="color:#a6be9d">2&lt;/span>, &lt;span style="color:#a6be9d">1&lt;/span>, &lt;span style="color:#a6be9d">1&lt;/span>, &lt;span style="color:#a6be9d">1&lt;/span>, &lt;span style="color:#a6be9d">1&lt;/span>, &lt;span style="color:#a6be9d">1&lt;/span>, &lt;span style="color:#a6be9d">2&lt;/span>, &lt;span style="color:#a6be9d">1&lt;/span>, &lt;span style="color:#a6be9d">2&lt;/span>, &lt;span style="color:#a6be9d">1&lt;/span>, &lt;span style="color:#828b96;font-style:italic">//
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span> &lt;span style="color:#a6be9d">1&lt;/span>, &lt;span style="color:#a6be9d">1&lt;/span>, &lt;span style="color:#a6be9d">1&lt;/span>, &lt;span style="color:#a6be9d">1&lt;/span>, &lt;span style="color:#a6be9d">1&lt;/span>, &lt;span style="color:#a6be9d">1&lt;/span>, &lt;span style="color:#a6be9d">1&lt;/span>, &lt;span style="color:#a6be9d">1&lt;/span>, &lt;span style="color:#a6be9d">1&lt;/span>, &lt;span style="color:#a6be9d">1&lt;/span>, &lt;span style="color:#a6be9d">1&lt;/span>, &lt;span style="color:#828b96;font-style:italic">//
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span> &lt;span style="color:#a6be9d">1&lt;/span>, &lt;span style="color:#a6be9d">2&lt;/span>, &lt;span style="color:#a6be9d">1&lt;/span>, &lt;span style="color:#a6be9d">1&lt;/span>, &lt;span style="color:#a6be9d">1&lt;/span>, &lt;span style="color:#a6be9d">1&lt;/span>, &lt;span style="color:#a6be9d">1&lt;/span>, &lt;span style="color:#a6be9d">1&lt;/span>, &lt;span style="color:#a6be9d">1&lt;/span>, &lt;span style="color:#a6be9d">1&lt;/span>, &lt;span style="color:#828b96;font-style:italic">// s3..s4
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span> &lt;span style="color:#a6be9d">1&lt;/span>, &lt;span style="color:#a6be9d">2&lt;/span>, &lt;span style="color:#a6be9d">1&lt;/span>, &lt;span style="color:#a6be9d">1&lt;/span>, &lt;span style="color:#a6be9d">1&lt;/span>, &lt;span style="color:#a6be9d">1&lt;/span>, &lt;span style="color:#a6be9d">1&lt;/span>, &lt;span style="color:#a6be9d">1&lt;/span>, &lt;span style="color:#a6be9d">1&lt;/span>, &lt;span style="color:#a6be9d">2&lt;/span>, &lt;span style="color:#a6be9d">1&lt;/span>, &lt;span style="color:#828b96;font-style:italic">//
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span> &lt;span style="color:#a6be9d">1&lt;/span>, &lt;span style="color:#a6be9d">1&lt;/span>, &lt;span style="color:#a6be9d">1&lt;/span>, &lt;span style="color:#a6be9d">1&lt;/span>, &lt;span style="color:#a6be9d">1&lt;/span>, &lt;span style="color:#a6be9d">1&lt;/span>, &lt;span style="color:#a6be9d">1&lt;/span>, &lt;span style="color:#a6be9d">1&lt;/span>, &lt;span style="color:#a6be9d">1&lt;/span>, &lt;span style="color:#a6be9d">1&lt;/span>, &lt;span style="color:#a6be9d">1&lt;/span>, &lt;span style="color:#828b96;font-style:italic">//
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span> &lt;span style="color:#a6be9d">1&lt;/span>, &lt;span style="color:#a6be9d">3&lt;/span>, &lt;span style="color:#a6be9d">1&lt;/span>, &lt;span style="color:#a6be9d">3&lt;/span>, &lt;span style="color:#a6be9d">1&lt;/span>, &lt;span style="color:#a6be9d">1&lt;/span>, &lt;span style="color:#a6be9d">1&lt;/span>, &lt;span style="color:#a6be9d">1&lt;/span>, &lt;span style="color:#a6be9d">1&lt;/span>, &lt;span style="color:#a6be9d">1&lt;/span>, &lt;span style="color:#828b96;font-style:italic">// s5..s6
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span> &lt;span style="color:#a6be9d">1&lt;/span>, &lt;span style="color:#a6be9d">3&lt;/span>, &lt;span style="color:#a6be9d">1&lt;/span>, &lt;span style="color:#a6be9d">1&lt;/span>, &lt;span style="color:#a6be9d">1&lt;/span>, &lt;span style="color:#a6be9d">1&lt;/span>, &lt;span style="color:#a6be9d">1&lt;/span>, &lt;span style="color:#a6be9d">3&lt;/span>, &lt;span style="color:#a6be9d">1&lt;/span>, &lt;span style="color:#a6be9d">3&lt;/span>, &lt;span style="color:#a6be9d">1&lt;/span>, &lt;span style="color:#828b96;font-style:italic">//
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span> &lt;span style="color:#a6be9d">1&lt;/span>, &lt;span style="color:#a6be9d">1&lt;/span>, &lt;span style="color:#a6be9d">1&lt;/span>, &lt;span style="color:#a6be9d">1&lt;/span>, &lt;span style="color:#a6be9d">1&lt;/span>, &lt;span style="color:#a6be9d">1&lt;/span>, &lt;span style="color:#a6be9d">3&lt;/span>, &lt;span style="color:#a6be9d">1&lt;/span>, &lt;span style="color:#a6be9d">1&lt;/span>, &lt;span style="color:#a6be9d">1&lt;/span>, &lt;span style="color:#a6be9d">1&lt;/span>, &lt;span style="color:#828b96;font-style:italic">//
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span> &lt;span style="color:#a6be9d">1&lt;/span>, &lt;span style="color:#a6be9d">1&lt;/span>, &lt;span style="color:#a6be9d">1&lt;/span>, &lt;span style="color:#a6be9d">1&lt;/span>, &lt;span style="color:#a6be9d">1&lt;/span>, &lt;span style="color:#a6be9d">1&lt;/span>, &lt;span style="color:#a6be9d">1&lt;/span>, &lt;span style="color:#a6be9d">1&lt;/span>, &lt;span style="color:#a6be9d">1&lt;/span>, &lt;span style="color:#a6be9d">1&lt;/span>, &lt;span style="color:#828b96;font-style:italic">// s7..s8
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span>};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff636f">static&lt;/span> &lt;span style="color:#ff636f">inline&lt;/span> &lt;span style="color:#ff636f">uint32_t&lt;/span> &lt;span style="color:#58a1dd">updatestate&lt;/span>(&lt;span style="color:#ff636f">uint32_t&lt;/span> &lt;span style="color:#ff636f">*&lt;/span>&lt;span style="color:#58a1dd">state&lt;/span>, &lt;span style="color:#ff636f">uint32_t&lt;/span> &lt;span style="color:#58a1dd">byte&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">uint32_t&lt;/span> &lt;span style="color:#58a1dd">type&lt;/span> &lt;span style="color:#ff636f">=&lt;/span> &lt;span style="color:#58a1dd">utf8d&lt;/span>[&lt;span style="color:#58a1dd">byte&lt;/span>];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">*&lt;/span>&lt;span style="color:#58a1dd">state&lt;/span> &lt;span style="color:#ff636f">=&lt;/span> &lt;span style="color:#58a1dd">utf8d_transition&lt;/span>[&lt;span style="color:#a6be9d">16&lt;/span> &lt;span style="color:#ff636f">*&lt;/span> &lt;span style="color:#ff636f">*&lt;/span>&lt;span style="color:#58a1dd">state&lt;/span> &lt;span style="color:#ff636f">+&lt;/span> &lt;span style="color:#58a1dd">type&lt;/span>];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">return&lt;/span> &lt;span style="color:#ff636f">*&lt;/span>&lt;span style="color:#58a1dd">state&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff636f">bool&lt;/span> &lt;span style="color:#58a1dd">validate_utf8&lt;/span>(&lt;span style="color:#ff636f">const&lt;/span> &lt;span style="color:#ff636f">char&lt;/span> &lt;span style="color:#ff636f">*&lt;/span>&lt;span style="color:#58a1dd">c&lt;/span>, &lt;span style="color:#58a1dd">size_t&lt;/span> &lt;span style="color:#58a1dd">len&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">const&lt;/span> &lt;span style="color:#ff636f">unsigned&lt;/span> &lt;span style="color:#ff636f">char&lt;/span> &lt;span style="color:#ff636f">*&lt;/span>&lt;span style="color:#58a1dd">cu&lt;/span> &lt;span style="color:#ff636f">=&lt;/span> (&lt;span style="color:#ff636f">const&lt;/span> &lt;span style="color:#ff636f">unsigned&lt;/span> &lt;span style="color:#ff636f">char&lt;/span> &lt;span style="color:#ff636f">*&lt;/span>)&lt;span style="color:#58a1dd">c&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">uint32_t&lt;/span> &lt;span style="color:#58a1dd">state&lt;/span> &lt;span style="color:#ff636f">=&lt;/span> &lt;span style="color:#a6be9d">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">for&lt;/span> (&lt;span style="color:#58a1dd">size_t&lt;/span> &lt;span style="color:#58a1dd">i&lt;/span> &lt;span style="color:#ff636f">=&lt;/span> &lt;span style="color:#a6be9d">0&lt;/span>; &lt;span style="color:#58a1dd">i&lt;/span> &lt;span style="color:#ff636f">&amp;lt;&lt;/span> &lt;span style="color:#58a1dd">len&lt;/span>; &lt;span style="color:#58a1dd">i&lt;/span>&lt;span style="color:#ff636f">++&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">uint32_t&lt;/span> &lt;span style="color:#58a1dd">byteval&lt;/span> &lt;span style="color:#ff636f">=&lt;/span> (&lt;span style="color:#ff636f">uint32_t&lt;/span>)&lt;span style="color:#58a1dd">cu&lt;/span>[&lt;span style="color:#58a1dd">i&lt;/span>];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">if&lt;/span> (&lt;span style="color:#58a1dd">updatestate&lt;/span>(&lt;span style="color:#ff636f">&amp;amp;&lt;/span>&lt;span style="color:#58a1dd">state&lt;/span>, &lt;span style="color:#58a1dd">byteval&lt;/span>) &lt;span style="color:#ff636f">==&lt;/span> &lt;span style="color:#58a1dd">UTF8_REJECT&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">return&lt;/span> &lt;span style="color:#58a1dd">false&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">return&lt;/span> &lt;span style="color:#58a1dd">true&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="可执行文件">可执行文件&lt;/h2>
&lt;p>在计算机中，可执行文件是非常特殊的存在，现代计算机的运行离不开应用程序，而应用程序在磁盘上的形式就是可执行文件，维基百科上有简短的介绍：&lt;/p>
&lt;blockquote>
&lt;p>可执行文件在计算机科学上，指一种内容可被计算机解释为程序的计算机文件。通常可执行文件内，含有以二进制编码的微处理器指令，也因此可执行文件有时称为二进制档。这些二进制微处理器指令的编码，于各种微处理器有所不同，故此可执行文件多数要分开不同的微处理版本。一个计算机文件是否为可执行文件，主要由操作系统的传统决定。例如根据特定的命名方法（如扩展名为exe）或文件的元数据信息（例如UNIX系统设置“可执行”权限）。&lt;/p>
&lt;/blockquote>
&lt;p>可执行文件的格式非常多，但目前应用比较广泛的只有 PE(PE32+)，ELF，Mach-O。主要的操作系统分别是 Windows，Linux，macOS。&lt;/p>
&lt;h3 id="可执行文件的比较">可执行文件的比较&lt;/h3>
&lt;p>不同的可执行文件的特性有一些不同，维基百科上有个比较：&lt;a href="https://en.wikipedia.org/wiki/Comparison_of_executable_file_formats">Comparison of executable file formats&lt;/a>。&lt;/p>
&lt;p>我这里将 PE(PE32+)，ELF，Mach-O 的格式比较贴出来：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>格式名&lt;/th>
&lt;th>操作系统&lt;/th>
&lt;th>文件扩展名&lt;/th>
&lt;th>显式处理器声明&lt;/th>
&lt;th>任意节（Sections）&lt;/th>
&lt;th>元数据&lt;/th>
&lt;th>签名&lt;/th>
&lt;th>字符串表&lt;/th>
&lt;th>符号表&lt;/th>
&lt;th>64位&lt;/th>
&lt;th>胖二进制&lt;/th>
&lt;th>可以包含图标&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>PE&lt;/td>
&lt;td>Windows, ReactOS，HX DOS Extender，BeOS (&amp;gt;=R3)&lt;/td>
&lt;td>.EXE&lt;/td>
&lt;td>✔&lt;/td>
&lt;td>✔&lt;/td>
&lt;td>✔&lt;/td>
&lt;td>✔&lt;/td>
&lt;td>✔&lt;/td>
&lt;td>✔&lt;/td>
&lt;td>❌&lt;/td>
&lt;td>❌&lt;/td>
&lt;td>✔&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>PE32+&lt;/td>
&lt;td>Windows 64-bit&lt;/td>
&lt;td>.EXE&lt;/td>
&lt;td>✔&lt;/td>
&lt;td>✔&lt;/td>
&lt;td>✔&lt;/td>
&lt;td>✔&lt;/td>
&lt;td>✔&lt;/td>
&lt;td>✔&lt;/td>
&lt;td>✔&lt;/td>
&lt;td>✔&lt;/td>
&lt;td>✔&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>ELF&lt;/td>
&lt;td>Unix-like, OpenVMS&lt;/td>
&lt;td>none&lt;/td>
&lt;td>✔&lt;/td>
&lt;td>✔&lt;/td>
&lt;td>✔&lt;/td>
&lt;td>✔&lt;/td>
&lt;td>✔&lt;/td>
&lt;td>✔&lt;/td>
&lt;td>✔&lt;/td>
&lt;td>Extension&lt;/td>
&lt;td>Extension&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Mach-O&lt;/td>
&lt;td>NeXTSTEP，macOS, iOS, watchOS，tvOS&lt;/td>
&lt;td>none&lt;/td>
&lt;td>✔&lt;/td>
&lt;td>&lt;code>&amp;lt;=256&lt;/code>&lt;/td>
&lt;td>✔&lt;/td>
&lt;td>✔&lt;/td>
&lt;td>✔&lt;/td>
&lt;td>✔&lt;/td>
&lt;td>✔&lt;/td>
&lt;td>✔&lt;/td>
&lt;td>❌&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="pe">PE&lt;/h3>
&lt;p>PE 是 Windows NT 系统的可执行文件格式，同样还被 ReactOS 使用，PE32+ 是 PE 格式的一种改进，用于支持 64位处理器。要查看 PE 文件格式可以查看：&lt;a href="https://docs.microsoft.com/en-us/windows/desktop/Debug/pe-format">PE Format&lt;/a>。在 Windows SDK 中，&lt;code>winnt.h&lt;/code> 已经定义了大量的 PE 结构，但并不完整，如果要获得更加完整的结构，需要使用 Windows WDK 的 &lt;code>ntimage.h&lt;/code>，但一些新的硬件定义需要去 &lt;a href="https://docs.microsoft.com/en-us/windows/desktop/Debug/pe-format">PE Format&lt;/a> 查找。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#1d2432;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c++" data-lang="c++">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">/// #define PROCESSOR_ARCHITECTURE_ARM32_ON_WIN64 13
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span>&lt;span style="color:#828b96;font-style:italic">#ifndef IMAGE_FILE_MACHINE_ARM64
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span>&lt;span style="color:#828b96;font-style:italic">//// IMAGE_FILE_MACHINE_ARM64 is Windows
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span>&lt;span style="color:#828b96;font-style:italic">#define IMAGE_FILE_MACHINE_ARM64 0xAA64 &lt;/span>&lt;span style="color:#828b96;font-style:italic">// ARM64 Little-Endian
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span>&lt;span style="color:#828b96;font-style:italic">#endif
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">#ifndef IMAGE_FILE_MACHINE_RISCV32
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">#define IMAGE_FILE_MACHINE_RISCV32 0x5032
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">#endif
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">#ifndef IMAGE_FILE_MACHINE_RISCV64
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">#define IMAGE_FILE_MACHINE_RISCV64 0x5064
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">#endif
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">#ifndef IMAGE_FILE_MACHINE_RISCV128
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">#define IMAGE_FILE_MACHINE_RISCV128 0x5128
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">#endif
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">#ifndef IMAGE_FILE_MACHINE_CHPE_X86
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">#define IMAGE_FILE_MACHINE_CHPE_X86 0x3A64 &lt;/span>&lt;span style="color:#828b96;font-style:italic">/// defined in ntimage.h
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span>&lt;span style="color:#828b96;font-style:italic">#endif
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">#ifndef IMAGE_SUBSYSTEM_XBOX_CODE_CATALOG
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">#define IMAGE_SUBSYSTEM_XBOX_CODE_CATALOG 17 &lt;/span>&lt;span style="color:#828b96;font-style:italic">// XBOX Code Catalog
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span>&lt;span style="color:#828b96;font-style:italic">#endif
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>EXE，DLL 文件的魔数是 &lt;code>{'M','Z',0x90,0x0}&lt;/code> 这实际上是 &lt;code>IMAGE_DOS_HEADER.e_magic&lt;/code> 的值，不同系统的签名并不一样：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#1d2432;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c++" data-lang="c++">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">#ifndef _MAC
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">#include&lt;/span> &lt;span style="color:#828b96;font-style:italic">&amp;#34;pshpack4.h&amp;#34;&lt;/span>&lt;span style="color:#828b96;font-style:italic"> &lt;/span>&lt;span style="color:#828b96;font-style:italic">// 4 byte packing is the default
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">#define IMAGE_DOS_SIGNATURE 0x5A4D &lt;/span>&lt;span style="color:#828b96;font-style:italic">// MZ
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span>&lt;span style="color:#828b96;font-style:italic">#define IMAGE_OS2_SIGNATURE 0x454E &lt;/span>&lt;span style="color:#828b96;font-style:italic">// NE
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span>&lt;span style="color:#828b96;font-style:italic">#define IMAGE_OS2_SIGNATURE_LE 0x454C &lt;/span>&lt;span style="color:#828b96;font-style:italic">// LE
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span>&lt;span style="color:#828b96;font-style:italic">#define IMAGE_VXD_SIGNATURE 0x454C &lt;/span>&lt;span style="color:#828b96;font-style:italic">// LE
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span>&lt;span style="color:#828b96;font-style:italic">#define IMAGE_NT_SIGNATURE 0x00004550 &lt;/span>&lt;span style="color:#828b96;font-style:italic">// PE00
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">#include&lt;/span> &lt;span style="color:#828b96;font-style:italic">&amp;#34;pshpack2.h&amp;#34;&lt;/span>&lt;span style="color:#828b96;font-style:italic"> &lt;/span>&lt;span style="color:#828b96;font-style:italic">// 16 bit headers are 2 byte packed
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">#else
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">#include&lt;/span> &lt;span style="color:#828b96;font-style:italic">&amp;#34;pshpack1.h&amp;#34;&lt;/span>&lt;span style="color:#828b96;font-style:italic">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">#define IMAGE_DOS_SIGNATURE 0x4D5A &lt;/span>&lt;span style="color:#828b96;font-style:italic">// MZ
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span>&lt;span style="color:#828b96;font-style:italic">#define IMAGE_OS2_SIGNATURE 0x4E45 &lt;/span>&lt;span style="color:#828b96;font-style:italic">// NE
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span>&lt;span style="color:#828b96;font-style:italic">#define IMAGE_OS2_SIGNATURE_LE 0x4C45 &lt;/span>&lt;span style="color:#828b96;font-style:italic">// LE
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span>&lt;span style="color:#828b96;font-style:italic">#define IMAGE_NT_SIGNATURE 0x50450000 &lt;/span>&lt;span style="color:#828b96;font-style:italic">// PE00
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span>&lt;span style="color:#828b96;font-style:italic">#endif
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>PE 格式的 &lt;code>IMAGE_NT_HEADERS&lt;/code> 才是真正的 NT 头，DOS 头或者 OS2 头，目前存在的原因是为了保持兼容，毕竟 Windows 操作系统是从 16 位过来的。&lt;/p>
&lt;p>&lt;code>IMAGE_FILE_HEADER&lt;/code> 结构存储了机器架构，可执行文件特征和可选头大小等，解析到 &lt;code>IMAGE_OPTIONAL_HEADER&lt;/code> 才算正式解析 PE。IMAGE_OPTIONAL_HEADER32 与 IMAGE_OPTIONAL_HEADER64 中的成员顺序有一些差别，这样的好处是在以 32位 IMAGE_OPTIONAL_HEADER 读取 64 位 PE 时依然能够解析到基本字段（反之也是一样）。解析 PE 很重要的一个函数是 &lt;a href="https://docs.microsoft.com/en-us/windows/desktop/api/dbghelp/nf-dbghelp-imagervatova">&lt;code>ImageRvaToVa&lt;/code>&lt;/a> 在映射为文件的文件的映像头中查找相对虚拟地址（RVA），并返回文件中相应字节的虚拟地址。&lt;/p>
&lt;p>解析 PE 文件导入导出，资源等需要解析可选头的 &lt;code>DataDirectory&lt;/code> 数组，数组的序号对应的时不同的资源：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#1d2432;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c++" data-lang="c++">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">#define IMAGE_DIRECTORY_ENTRY_EXPORT 0 &lt;/span>&lt;span style="color:#828b96;font-style:italic">// Export Directory
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span>&lt;span style="color:#828b96;font-style:italic">#define IMAGE_DIRECTORY_ENTRY_IMPORT 1 &lt;/span>&lt;span style="color:#828b96;font-style:italic">// Import Directory
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span>&lt;span style="color:#828b96;font-style:italic">#define IMAGE_DIRECTORY_ENTRY_RESOURCE 2 &lt;/span>&lt;span style="color:#828b96;font-style:italic">// Resource Directory
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span>&lt;span style="color:#828b96;font-style:italic">#define IMAGE_DIRECTORY_ENTRY_EXCEPTION 3 &lt;/span>&lt;span style="color:#828b96;font-style:italic">// Exception Directory
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span>&lt;span style="color:#828b96;font-style:italic">#define IMAGE_DIRECTORY_ENTRY_SECURITY 4 &lt;/span>&lt;span style="color:#828b96;font-style:italic">// Security Directory
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span>&lt;span style="color:#828b96;font-style:italic">#define IMAGE_DIRECTORY_ENTRY_BASERELOC 5 &lt;/span>&lt;span style="color:#828b96;font-style:italic">// Base Relocation Table
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span>&lt;span style="color:#828b96;font-style:italic">#define IMAGE_DIRECTORY_ENTRY_DEBUG 6 &lt;/span>&lt;span style="color:#828b96;font-style:italic">// Debug Directory
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">// IMAGE_DIRECTORY_ENTRY_COPYRIGHT 7 // (X86 usage)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span>&lt;span style="color:#828b96;font-style:italic">#define IMAGE_DIRECTORY_ENTRY_ARCHITECTURE 7 &lt;/span>&lt;span style="color:#828b96;font-style:italic">// Architecture Specific Data
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span>&lt;span style="color:#828b96;font-style:italic">#define IMAGE_DIRECTORY_ENTRY_GLOBALPTR 8 &lt;/span>&lt;span style="color:#828b96;font-style:italic">// RVA of GP
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span>&lt;span style="color:#828b96;font-style:italic">#define IMAGE_DIRECTORY_ENTRY_TLS 9 &lt;/span>&lt;span style="color:#828b96;font-style:italic">// TLS Directory
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span>&lt;span style="color:#828b96;font-style:italic">#define IMAGE_DIRECTORY_ENTRY_LOAD_CONFIG 10 &lt;/span>&lt;span style="color:#828b96;font-style:italic">// Load Configuration Directory
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span>&lt;span style="color:#828b96;font-style:italic">#define IMAGE_DIRECTORY_ENTRY_BOUND_IMPORT 11 &lt;/span>&lt;span style="color:#828b96;font-style:italic">// Bound Import Directory in headers
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span>&lt;span style="color:#828b96;font-style:italic">#define IMAGE_DIRECTORY_ENTRY_IAT 12 &lt;/span>&lt;span style="color:#828b96;font-style:italic">// Import Address Table
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span>&lt;span style="color:#828b96;font-style:italic">#define IMAGE_DIRECTORY_ENTRY_DELAY_IMPORT 13 &lt;/span>&lt;span style="color:#828b96;font-style:italic">// Delay Load Import Descriptors
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span>&lt;span style="color:#828b96;font-style:italic">#define IMAGE_DIRECTORY_ENTRY_COM_DESCRIPTOR 14 &lt;/span>&lt;span style="color:#828b96;font-style:italic">// COM Runtime descriptor
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>解析 PE 文件依赖需要解析 &lt;code>IMAGE_DIRECTORY_ENTRY_IMPORT&lt;/code> 目录，而 &lt;code>IMAGE_DIRECTORY_ENTRY_COM_DESCRIPTOR&lt;/code> 对应的 14 在 .Net 中被使用，用于指向 &lt;code>IMAGE_COR20_HEADER&lt;/code> 信息。&lt;/p>
&lt;p>解析 PE 文件的库非常多，有被 &lt;a href="https://github.com/avast-tl/pelib">&lt;code>Avast Threat Labs&lt;/code>&lt;/a> 使用的 &lt;code>pelib&lt;/code>（没错，就是那个杀毒软件 Avast），还有 &lt;a href="https://github.com/hasherezade/bearparser">https://github.com/hasherezade/bearparser&lt;/a>，&lt;a href="https://github.com/lief-project/LIEF">https://github.com/lief-project/LIEF&lt;/a> 等非常优秀的开源库。在 .NET 平台还有 &lt;a href="https://github.com/secana/PeNet">PeNet&lt;/a>。其中 &lt;code>LIFF&lt;/code> 还支持 ELF，Mach-O，ART，OAT 等格式。在 LLVM 的源码中 PE 文件解析代码在 &lt;a href="https://github.com/llvm/llvm-project/blob/master/llvm/lib/Object/COFFObjectFile.cpp">llvm/lib/Object/COFFObjectFile.cpp&lt;/a> 文件中。&lt;/p>
&lt;p>关于 PE 文件格式分析的文章非常多，这里有一篇比较详细的：&lt;a href="https://en.wikibooks.org/wiki/X86_Disassembly/Windows_Executable_Files">x86 Disassembly/Windows Executable Files&lt;/a>&lt;/p>
&lt;p>分析 PE 的工具非常多，Windows Internal 7th 作者之一的 Pavel Yosifovich 也开发了一个 &lt;a href="https://github.com/zodiacon/PEExplorer">Portable Executable Explorer&lt;/a>。&lt;/p>
&lt;p>Planck 分析了 &lt;a href="https://github.com/fcharlie/Planck/blob/master/lib/inquisitive/pe.cc">PE&lt;/a> 文件的机器类型，子系统，依赖，特征等。后来利用 Planck 的成果将 &lt;a href="https://github.com/fcharlie/PEAnalyzer">PEAnalyzer&lt;/a> 重构了一番，截图如下：&lt;/p>
&lt;p>&lt;img src="https://github.com/fcharlie/PEAnalyzer/raw/master/docs/images/view.png" alt="PEAnalyze">&lt;/p>
&lt;p>我有时候需要从 &lt;code>MSYS2 Mingw64&lt;/code> 中提取 &lt;code>wget.exe&lt;/code>，经常需要手动查看文件依赖，非常麻烦，实现 Planck PE 解析模块后，于是编写了 &lt;a href="https://github.com/fcharlie/nodeps">Nodeps&lt;/a> 用于将 PE 文件将同目录下的所有依赖拷贝到目标目录。&lt;/p>
&lt;h3 id="elf">ELF&lt;/h3>
&lt;p>&lt;a href="https://en.wikipedia.org/wiki/Executable_and_Linkable_Format">Executable and Linkable Format (ELF, formerly named Extensible Linking Format)&lt;/a> 是一种运用非常广泛的可执行文件格式，目前 Unix-like 操作系统的可执行文件格式绝大多数都是 ELF 。ELF 的魔数是 &lt;code>{0x7f,'E','L','F'}&lt;/code>。ELF 解析库有前面的 &lt;a href="https://github.com/lief-project/LIEF">LIFF&lt;/a> 还有被 &lt;code>Avast Threat Labs&lt;/code> 使用的 &lt;a href="https://github.com/avast-tl/elfio">elfio&lt;/a> 官方版本地址是：&lt;a href="https://github.com/serge1/ELFIO">https://github.com/serge1/ELFIO&lt;/a>&lt;/p>
&lt;p>与 PE 显著不同的是，ELF 文件可以有 &lt;code>SONAME&lt;/code> &lt;code>RPATH&lt;/code> &lt;code>RUPATH&lt;/code> 这样的节。除了可执行文件主动加载依赖动态库，有操作系统或者可执行文件加载器被动加载依赖时，PE 文件依赖 dll 可以从 PATH 以及 PE 文件所在目录加载，而 ELF 只能加载 LD_LIBRARY_PATH 以及 RPATH RUPATH 指定目录下的动态链接库。PE 的机制容易带来注入问题，而 Windows 操作系统目前也增加了 KnownDlls 机制减少此类问题的发生。而 ELF 的机制在分发二进制时容易带来一些麻烦，但目前很多操作系统已经支持 &lt;code>RUPATH=$ORIGIN/../lib&lt;/code> 这样的方式设置 &lt;code>RUPATH&lt;/code>。另外 ELF 计算真实地址时不像 P需要使用 &lt;code>ImageRvaToVa&lt;/code> 换算，在 ELF 文件的处理过程中，只需要将偏移地址与文件映射的起始地址相加即可得到数据地址。&lt;/p>
&lt;p>ELF 程序在安装的时候可以主动修改 RPATH/RUPATH，cmake 也支持 &lt;code>CMAKE_INSTALL_RPATH&lt;/code> 用于设置 &lt;code>RPATH/RUPATH&lt;/code>。RPATH 和 RUPATH 的区别有篇博客有介绍：&lt;a href="https://blog.qt.io/blog/2011/10/28/rpath-and-runpath/">RPATH and RUNPATH&lt;/a>，不同操作系统链接器的处理也稍微有一些差别，大多数时候只要设置一个即可。&lt;/p>
&lt;p>我将 cmake 中替换 RPATH 的功能抽出来，创建了项目： &lt;a href="https://github.com/fcharlie/cmchrpath">cmchrpath&lt;/a>，在 cmchrpath 中还有 &lt;code>elfinfo&lt;/code> 用于查看 ELF 的一些基本信息。&lt;/p>
&lt;h3 id="mach-o">Mach-O&lt;/h3>
&lt;p>我没有任何 mac 设备，因此没有进一步分析 Mach-O 格式，实际上很多前辈们写了非常不错的文章，比如：&lt;a href="https://lowlevelbits.org/parsing-mach-o-files/">PARSING MACH-O FILES&lt;/a>。&lt;/p>
&lt;p>Mach-O 一个鲜明的特性就是它是一个支持 FatBinary的格式（PE32+ 实际上也支持，但使用较少），这意味着不同的处理器架构指令能够存储在同一文件当中，在 Mac 将处理器从 PowerPC 架构迁移到 Intel 的过程中运用非常广泛。&lt;/p>
&lt;p>在 Planck 中，Mach-O 格式的定义目录为：&lt;a href="https://github.com/fcharlie/Planck/blob/master/lib/inquisitive/macho.hpp">lib/inquisitive/macho.hpp&lt;/a>&lt;/p>
&lt;h3 id="可执行文件的跨平台">可执行文件的跨平台&lt;/h3>
&lt;p>上述集中可执行文件格式都支持若干个平台，但这并不意味着这些可执行文件可以跨平台，可执行文件跨平台的主要阻碍有两点，一个是操作系统不同，二是处理器架构不同。&lt;/p>
&lt;p>操作系统不同，采用的可执行文件格式不同，比如 Windows采用了 PE/PE32+，Linux 采用了 ELF，macOS 采用了 Mach-O，除了可执行文件不同之外，操作系统的内核，系统调用等等均不相同。这就给可执行文件跨平台带来了重重阻隔。虽然可执行文件跨平台支持非常麻烦，但确实有一些项目做到了在其他操作系统上支持另一操作系统的可执行文件。&lt;/p>
&lt;p>对于一些开发者而言，Windows 10 最振奋人心的功能莫过于：&lt;a href="https://docs.microsoft.com/en-us/windows/wsl/about">Windows Subsytem for Linux&lt;/a>，wsl 支持在 Windows 系统上运行未经修改的 ELF 文件（目前支持的有 Windows 64/ARM64 系统）。WSL 要做到支持运行 ELF ，首先得内加载 ELF 到内存，然后能创建 Linux 进程，再然后是支持 Linux 系统调用，文件系统也要实现 Linux 特性（比如大小写敏感，可执行权限等）。WSL 创建 Linux 进程实际上依赖的是 &lt;a href="https://blogs.msdn.microsoft.com/wsl/2016/05/23/pico-process-overview/">Pico process&lt;/a> 特性。Linux 进程发起的系统调用会被转变为 NT 内核的系统调用：&lt;a href="https://blogs.msdn.microsoft.com/wsl/2016/06/08/wsl-system-calls/">WSL System Calls&lt;/a>，目前 NTFS 文件系统也支持了 Linux 文件系统（EXT4 Btrfs）的一些特性：&lt;a href="https://blogs.msdn.microsoft.com/wsl/2016/06/15/wsl-file-system-support/">WSL File System Support&lt;/a>。&lt;/p>
&lt;p>Github 上还有个 &lt;a href="https://github.com/wishstudio/flinux">Foreign LINUX&lt;/a> 与 WSL 思路类似，也是在 Windows 系统上运行未修改的 ELF 文件，但成熟度非常低。WSL 推出后也就没有维护了。&lt;/p>
&lt;p>在 Linux，macOS，FreeBSD 等操作系统上也有个项目用于支持在这些平台运行 PE/PE32+ 可执行文件：&lt;a href="https://www.winehq.org/">Wine: Wine Is Not an Emulator&lt;/a>。此项目的历史比 WSL 更久，原理大同小异。国内的 Linux 发行版深度的招牌特性就是和 Wine 官方合作，包含商业版的 Wine，更好的运行 QQ 等软件。&lt;/p>
&lt;p>Github 上也有开发者实现了在 macOS 系统上运行 Linux ELF 文件： &lt;a href="https://github.com/linux-noah/noah">Bash on Ubuntu on macOS&lt;/a>&lt;/p>
&lt;p>在 Linux 上加载运行 Mach-O 的项目是：&lt;a href="https://github.com/shinh/maloader">Mach-o loader for linux&lt;/a>&lt;/p>
&lt;p>Github 上有个项目叫 &lt;code>loadlibrary&lt;/code>: &lt;a href="https://github.com/taviso/loadlibrary">Porting Windows Dynamic Link Libraries to Linux&lt;/a>，用于在 Linux 系统上直接调用 PE DLL 动态库。&lt;/p>
&lt;p>如果操作系统相同，而 CPU 处理器架构不同，比如在 Windows ARM64 系统上运行 x86 PE，这需要实现模拟器进行 CPU 指令转换，并且将 x86 的 NT 调用转变位 ARM64 NT 的系统调用，如果处理器架构相同，比如在 Windows AMD64 系统上运行 x86 PE，则省去了CPU 指令转换这一环节，x86-64 完全兼容 x86。&lt;/p>
&lt;h3 id="自解压文件和安装程序">自解压文件和安装程序&lt;/h3>
&lt;p>&lt;a href="https://en.wikipedia.org/wiki/Self-extracting_archive">Self-extracting archive&lt;/a> 是一种特殊的可执行文件，运行自解压文件时，自解压文件将压缩包解压到用户指定目录，自解压文件不需要其他的压缩软件即可运行，并且还能执行一些列的动作，在 Windows 系统中通常被用来实现软件安装。很多安装程序就是一个自解压文件，你如 NSIS 安装包可以直接使用 7z 解压。常见的 7z WinRAR 均支持创建自解压文件。&lt;/p>
&lt;p>有些安装程序并不是常规的自解压文件，比如 &lt;code>InstallShield&lt;/code> 制作的安装程序，它们将 MSI Package 存储在 PE 文件的资源目录，运行时直接提取，然后调用 msiexec 进行安装。&lt;/p>
&lt;p>自解压文件和安装程序，都存在一个非常大的缺点，即文件的大小不能超过 CPU 寻址长度，比如 32位系统不能超过 4 GB。这是因为操作系统在运行可执行文件时，需要将可执行文件 &lt;code>mmap&lt;/code> 到内存，文件大小不能超过进程的虚拟地址最大长度。&lt;/p>
&lt;p>在 Unix 系统上，很少有使用 ELF 制作安装包的，通常使用 Shell Script 来制作 STGZ 安装包，比如 cmake 在 Unix 系统中运行 cpack 默认打包时会将模块 &lt;a href="https://github.com/Kitware/CMake/blob/master/Modules/CPack.STGZ_Header.sh.in">CPack.STGZ_Header.sh.in&lt;/a> 与压缩包合并制作成一个 &lt;code>.sh&lt;/code> 的安装程序。&lt;/p>
&lt;p>从自解压文件或者安装包中提取绿色软件通常的做法是使用 7z 解压。而 MSI 的文件可以使用 msiexec 提取，也可以使用图形化的 MSI 提取工具 &lt;a href="https://github.com/fcharlie/Krycekium">Krycekium Installer&lt;/a> 提取，msiexec 的命令使用如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#1d2432;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-powershell" data-lang="powershell">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">#https://github.com/fstudio/clangbuilder/blob/master/modules/Devi/Devi.psm1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff636f">Function&lt;/span> &lt;span style="color:#58a1dd">Expand-Msi&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">param&lt;/span>(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> [&lt;span style="color:#58a1dd">String&lt;/span>]&lt;span style="color:#58a1dd">$Path&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> [&lt;span style="color:#58a1dd">String&lt;/span>]&lt;span style="color:#58a1dd">$DestinationPath&lt;/span> &lt;span style="color:#828b96;font-style:italic">### Full dir of destination path&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> )
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">$process&lt;/span> = &lt;span style="color:#58a1dd">Start-Process&lt;/span> &lt;span style="color:#58a1dd">-FilePath&lt;/span> &lt;span style="color:#a6be9d">&amp;#34;msiexec&amp;#34;&lt;/span> &lt;span style="color:#58a1dd">-ArgumentList&lt;/span> &lt;span style="color:#a6be9d">&amp;#34;/a &lt;/span>&lt;span style="color:#a6be9d">`&amp;#34;&lt;/span>&lt;span style="color:#58a1dd">$Path&lt;/span>&lt;span style="color:#a6be9d">`&amp;#34;&lt;/span>&lt;span style="color:#a6be9d"> /qn TARGETDIR=&lt;/span>&lt;span style="color:#a6be9d">`&amp;#34;&lt;/span>&lt;span style="color:#58a1dd">$DestinationPath&lt;/span>&lt;span style="color:#a6be9d">`&amp;#34;&lt;/span>&lt;span style="color:#a6be9d">&amp;#34;&lt;/span> &lt;span style="color:#58a1dd">-PassThru&lt;/span> &lt;span style="color:#58a1dd">-Wait&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">if&lt;/span> (&lt;span style="color:#58a1dd">$process&lt;/span>.&lt;span style="color:#58a1dd">ExitCode&lt;/span> &lt;span style="color:#ff636f">-ne&lt;/span> &lt;span style="color:#a6be9d">0&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">Write-Host&lt;/span> &lt;span style="color:#58a1dd">-ForegroundColor&lt;/span> &lt;span style="color:#58a1dd">Red&lt;/span> &lt;span style="color:#a6be9d">&amp;#34;Expand-Msi: &lt;/span>&lt;span style="color:#58a1dd">$Path&lt;/span>&lt;span style="color:#a6be9d"> failed. &lt;/span>$(&lt;span style="color:#58a1dd">$process&lt;/span>.&lt;span style="color:#58a1dd">ExitCode&lt;/span>)&lt;span style="color:#a6be9d">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">return&lt;/span> &lt;span style="color:#58a1dd">$process&lt;/span>.&lt;span style="color:#58a1dd">ExitCode&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>基于 InnoSetup 制作的安装包可以使用 &lt;a href="https://sourceforge.net/projects/innounp/">Inno Setup Unpacker&lt;/a> 或者是 &lt;a href="https://github.com/dscharrer/innoextract/">innoextract&lt;/a> 提取。&lt;/p>
&lt;h2 id="文档格式">文档格式&lt;/h2>
&lt;p>现代计算机非常重要的一个功能就是文档处理，特别是办公室白领，民工经常需要接触到文档处理软件，比如做演示要写 PPT，求职简历要用 WORD，查看技术文档需要 PDF 阅读器等等。&lt;/p>
&lt;p>文档格式有非常多的种类，有富文本格式 RTF，OLE 文档格式 &lt;code>Microsoft Word .doc&lt;/code>，有便携式文档格式 PDF，有 Office Open XML (.docx) 等等。&lt;/p>
&lt;p>RTF 的格式是一种文本格式，由控制字符串和文档内容组成，RTF 的格式规范下载地址为：&lt;a href="https://www.microsoft.com/en-us/download/details.aspx?id=10725">Word 2007: Rich Text Format (RTF) Specification, version 1.9.1&lt;/a>。&lt;/p>
&lt;p>一个空 RTF 文档内容如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#1d2432;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-txt" data-lang="txt">&lt;span style="display:flex;">&lt;span>{\rtf1}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>RTF 实际上表现力度有限，在 2007 年之前，Microsoft Word 优先支持的格式是二进制 word 格式，这是一种 OLE 流格式，相关的规范可以访问：&lt;a href="https://docs.microsoft.com/zh-cn/previous-versions/office/gg615596(v=office.14)">了解 Word MS-DOC 二进制文件格式&lt;/a>。实际上无论是 &lt;code>.doc&lt;/code> 还是 &lt;code>.xls&lt;/code> 以及 &lt;code>.ppt&lt;/code>，三种文件格式实际上都是二进制文档格式下的特殊实现，基本上无法只检测 Magic 就判断文件到底是哪一个类型，还需要进一步检测。&lt;/p>
&lt;p>PDF 文档被用来传播居多，大多数时候人们使用其他工具或者语言编写文档，然后生成 PDF 文档并发布到互联网，PDF 文档格式类似 RTF，也是一个控制字符串+文档内容的格式，文档以 &lt;code>%PDF-$version&lt;/code> 开头。&lt;/p>
&lt;p>在 Microsoft Office 2007 中，微软将 Office 的默认文档格式切换到 &lt;code>Office Open XML&lt;/code>，这种格式使用 xml 作为描述语言，将图片文档，主题等单独存储在特定目录，最后将文档目录使用 Zip 压缩起来，这种格式的优点是格式解析更简单，压缩后的文档体积更小。要检测文件是否是 PPTX DOCX XLSX 只需要在检测文件是 Zip 文件的前提下，判断 Zip 压缩包的目录结构是否由特殊的文件名。可以参考 Planck 实现： &lt;a href="https://github.com/fcharlie/Planck/blob/master/lib/inquisitive/zip.cc">lib/inquisitive/zip.cc&lt;/a>&lt;/p>
&lt;h2 id="文件的压缩">文件的压缩&lt;/h2>
&lt;p>将文件通过压缩算法减小存储或传输的体积这是压缩软件主要的初衷。压缩软件既要支持将不同的文件归档到同一文件还要将文件压缩，
常见的压缩文件格式有 &lt;code>.zip&lt;/code>，&lt;code>.7z&lt;/code>，&lt;code>.rar&lt;/code>，&lt;code>.tar.gz&lt;/code>，除了 &lt;code>tar.*&lt;/code> 格式之外，其他压缩格式大多是自有的归档机制，通常压缩和归档合并在一起，而对于 &lt;code>tar.*&lt;/code> 而言，先使用 tar 将文件归档，然后再使用特定的压缩算法将其压缩。不同的文件格式支持的压缩算法不同，通常如下：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Format&lt;/th>
&lt;th>Compression methods&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>zip&lt;/td>
&lt;td>Deflate&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>7z&lt;/td>
&lt;td>LZMA, LZMA2, Bzip2, PPMd, Deflate, Zstd, Brotli&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Rar&lt;/td>
&lt;td>PPMII&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>tar.gz&lt;/td>
&lt;td>Deflate&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>tar.bz2&lt;/td>
&lt;td>Bzip2&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>tar.xz&lt;/td>
&lt;td>LZMA/LZMA2&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>有关压缩软件的比较可以参考：&lt;a href="https://en.wikipedia.org/wiki/Comparison_of_file_archivers">Comparison of file archivers&lt;/a>&lt;/p>
&lt;h3 id="zip-文件格式">Zip 文件格式&lt;/h3>
&lt;p>Zip 是一种比较悠久的压缩文件格式，文件头为 &lt;code>{'P','K'}&lt;/code>，这是以 &lt;a href="https://en.wikipedia.org/wiki/Phil_Katz">Phil Katz&lt;/a> 的名字缩写开头，在 Windows 系统上，资源管理器默认支持打开 Zip 文件，在 Unix 系统上，可以使用 unzip 命令解压 zip 文件，zip 格式还被用于其他文件格式作为容器格式，如
&lt;code>Office Open XML&lt;/code>，&lt;code>OpenDocument&lt;/code>，&lt;code>EPUB&lt;/code>，还有 Windows UWP appx 等均使用了 zip 格式。&lt;/p>
&lt;p>Zip 格式数据布局：&lt;/p>
&lt;p>&lt;img src="https://upload.wikimedia.org/wikipedia/commons/6/63/ZIP-64_Internal_Layout.svg" alt="ZIP-64_Internal_Layout">&lt;/p>
&lt;p>Zip 通常使用 &lt;code>Deflate&lt;/code> 压缩算法，解析 Zip 文件可以使用 &lt;a href="https://github.com/madler/zlib/tree/master/contrib/minizip">&lt;code>zlib: contrib/minizip&lt;/code>&lt;/a>。zlib 库被非常多的软件使用，比如 git 以及 libgit2 都依赖 zlib（git 的对象压缩算法就是 Deflate）。&lt;/p>
&lt;h2 id="总结">总结&lt;/h2>
&lt;p>文件格式种类繁多，一一研究也十分吃力，掌握文件的格式规律，不失为一条捷径。&lt;/p>
- https://forcemz.net/posts/2019/2019-01-25-file-parsing/ - Copyright (c) 2009-2024 J23</description></item><item><title>Privexec 杂谈</title><link>https://forcemz.net/posts/2018/2018-11-30-privexec-new/</link><pubDate>Fri, 30 Nov 2018 21:00:00 +0800</pubDate><guid>https://forcemz.net/posts/2018/2018-11-30-privexec-new/</guid><description>Charlie's Rethinking https://forcemz.net/posts/2018/2018-11-30-privexec-new/ -&lt;h1 id="前言">前言&lt;/h1>
&lt;p>本站的开篇就是讲的 &lt;a href="https://forcemz.net/container/2015/06/12/AppContainer/">《Windows AppContainer 降权，隔离与安全》&lt;/a>，一晃三年多过去了，这三年之中，我开发了一个 &lt;a href="https://github.com/M2Team/Privexec">Privexec&lt;/a>，一个以其他权限启动进程的工具，支持启动 &lt;code>AppContainer&lt;/code> 进程，前段实现有用户发起了功能请求&lt;sup>1&lt;/sup>，让 &lt;code>Privexec&lt;/code> 支持设置 &lt;code>AppContainer&lt;/code> 的 &lt;code>Capabilities&lt;/code>，而不是像以前一样在启动 &lt;code>AppContainer&lt;/code> 进程时使用 &lt;code>CreateWellKnownSid&lt;/code> 创建所有的与 &lt;code>AppContainer&lt;/code> 相关的 &lt;code>Capabilities SIDs&lt;/code>。于是乎，我就花了一点时间将 Privexec 重构了一番，有所感悟，便将其写下来。&lt;/p>
&lt;h2 id="process">Process&lt;/h2>
&lt;p>在 Windows 平台上，创建进程有 &lt;code>WinExec&lt;/code>，&lt;code>system&lt;/code>，&lt;code>_spawn/_wspawn&lt;/code>，&lt;code>CreateProcess&lt;/code>，&lt;code>ShellExecute&lt;/code> 等多种途径，但上述函数基本上还是由 &lt;code>CreateProcess Family&lt;/code> 封装的。在 Windows 使用 &lt;code>C/C++&lt;/code> 创建进程应当优先使用 &lt;code>CreateProcess&lt;/code>，CreateProcess 有三个变体，主要是为了支持以其他权限启动进程， CreateProcess 及其变体如下：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Function&lt;/th>
&lt;th>Feature&lt;/th>
&lt;th>Details&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>CreateProcessW/A&lt;/td>
&lt;td>创建常规进程，权限继承父进程权限&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>CreateProcessAsUserW/A&lt;/td>
&lt;td>使用主 Token 创建进程，子进程权限与 Token 限定一致&lt;/td>
&lt;td>必须开启 &lt;code>SE_INCREASE_QUOTA_NAME&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>CreateProcessWithTokenW&lt;/td>
&lt;td>使用主 Token 创建进程，子进程权限与 Token 限定一致&lt;/td>
&lt;td>必须开启 &lt;code>SE_IMPERSONATE_NAME&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>CreateProcessWithLogonW/A&lt;/td>
&lt;td>使用指定用户凭据启动进程&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>&lt;code>CreateProcessWithLogonW&lt;/code> 使用用户凭据获得用户令牌，然后启动进程，这等价于使用 &lt;code>LogonUser&lt;/code> +&lt;code>CreateProcessAsUser&lt;/code> 启动进程。&lt;/p>
&lt;p>&lt;code>CreateProcessWithTokenW&lt;/code> 是 &lt;code>Windows Vista&lt;/code> 才引入桌面系统的，没有 ANSI 版本，Github 上最常见的用法是打开桌面进程，获取其 Token，然后拷贝这个 Token 创建与桌面权限一致的进程，这是一种降权机制，仅当当前登录用户是标准用户才能降权成功。
&lt;code>CreateProcessWithTokenW&lt;/code> 内部在调用好几个函数之后才会调用 &lt;code>CreateProcessAsUserW&lt;/code>，在 &lt;code>Privexec&lt;/code> 中并未使用它。
在 &lt;code>ReactOS&lt;/code> 中，没有实现 &lt;code>CreateProcessWithTokenW&lt;/code>，下面附上 &lt;code>CreateProcessWithTokenW&lt;/code> 调用图：&lt;/p>
&lt;p>&lt;img src="https://user-images.githubusercontent.com/6904176/62693095-6645d980-ba04-11e9-92bf-53fb526d11e9.png" alt="CreateProcessWithTokenW">
&lt;img src="https://user-images.githubusercontent.com/6904176/62693086-62b25280-ba04-11e9-84ee-d0ec5786bed3.png" alt="CreateProcessWithTokenW">&lt;/p>
&lt;p>实际上在 &lt;code>ReactOS&lt;/code> 中，&lt;code>CreateProcessAsUser&lt;/code> 最终依然调用的是 &lt;code>CreateProcess&lt;/code> 创建进程，然后将进程挂起，设置好 &lt;code>Token&lt;/code> 后再恢复进程。在 Windows 中，你可以使用 &lt;code>Process Monitor&lt;/code> 跟踪 &lt;code>CreateProcessAsUser&lt;/code> 的调用堆栈，在 Windows 10 18.09 (10.0.17763.167) 中，&lt;code>CreateProcessAsUser&lt;/code> 会调用 &lt;code>CreateProcessInternalW&lt;/code>，而 CreateProcess 也是调用 &lt;code>CreateProcessInternalW&lt;/code>。如果用 &lt;code>IDA Freeware&lt;/code> &lt;sup>2&lt;/sup> 反汇编 &lt;code>KernelBase.dll&lt;/code> 可以发现 &lt;code>CreateProcessAsUserW&lt;/code> 的权限最后传递到 &lt;code>CreateProcessInternalW&lt;/code> 由 &lt;code>CreateProcessInternalW&lt;/code> 处理了，这里与 &lt;code>ReactOS&lt;/code> 有一定差别。&lt;/p>
&lt;p>&lt;img src="https://github.com/M2Team/Privexec/raw/master/docs/images/austack.png" alt="CreateProcessAsUserW">&lt;/p>
&lt;p>而内核中创建进程的细节讲起来篇幅过长，大家可以参考 《深入解析 Windows 操作系统 第六版（上册）》P364 &lt;em>CreateProcess的流程&lt;/em> 。&lt;/p>
&lt;p>在 Windows 中，如果要实现 &lt;code>UAC&lt;/code> 提权，需要调用 &lt;code>ShellExecute&lt;/code> 以 &lt;code>runas&lt;/code> 的参数启动新的进程。如果在程序编译的清单文件中添加了如下清单代码：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#1d2432;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-xml" data-lang="xml">&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">&amp;lt;trustInfo&lt;/span> &lt;span style="color:#58a1dd">xmlns=&lt;/span>&lt;span style="color:#a6be9d">&amp;#34;urn:schemas-microsoft-com:asm.v2&amp;#34;&lt;/span>&lt;span style="color:#58a1dd">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">&amp;lt;security&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">&amp;lt;requestedPrivileges&lt;/span> &lt;span style="color:#58a1dd">xmlns=&lt;/span>&lt;span style="color:#a6be9d">&amp;#34;urn:schemas-microsoft-com:asm.v3&amp;#34;&lt;/span>&lt;span style="color:#58a1dd">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">&amp;lt;requestedExecutionLevel&lt;/span> &lt;span style="color:#58a1dd">level=&lt;/span>&lt;span style="color:#a6be9d">&amp;#39;requireAdministrator&amp;#39;&lt;/span> &lt;span style="color:#58a1dd">uiAccess=&lt;/span>&lt;span style="color:#a6be9d">&amp;#39;false&amp;#39;&lt;/span> &lt;span style="color:#58a1dd">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">&amp;lt;/requestedPrivileges&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">&amp;lt;/security&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">&amp;lt;/trustInfo&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Shell 在启动清单附带有 UAC 提权的可执行文件时也会发生提权。以 &lt;code>Windows 10&lt;/code> 为例，提权最终由 &lt;code>AicLaunchAdminProcess&lt;/code> 函数实现，此函数目前实现在 &lt;code>Windows.Storage.dll&lt;/code> 中，UAC 提权需要与 &lt;code>Appinfo&lt;/code> 服务通信，&lt;code>Appinfo&lt;/code> 验证提权行为后使用 &lt;code>CreateProcessAsUserW&lt;/code> 启动进程，并将其父进程设置为 &lt;code>ShellExecute&lt;/code> 调用者。调用细节(Windows Vista)&lt;sup>3&lt;/sup>如下：&lt;/p>
&lt;ol>
&lt;li>AppInfo goes and talks to the Local Security Authority to get the elevated token of the logged in user of Session 1.&lt;/li>
&lt;li>AppInfo loads up a STARTUPINFOEX structure (new to Vista), and calls the brand new Vista API InitializeProcThreadAttributeList() with room for one attribute.&lt;/li>
&lt;li>OpenProcess() is called to get a handle to the process that initiated the RPC call.&lt;/li>
&lt;li>UpdateProcThreadAttribute() is called with &lt;code>PROC_THREAD_ATTRIBUTE_PARENT_PROCESS&lt;/code>, and uses the handle retrieved in step 3.&lt;/li>
&lt;li>CreateProcessAsUser() is called with &lt;code>EXTENDED_STARTUPINFO_PRESENT&lt;/code> and the results of steps 1 and 4.&lt;/li>
&lt;li>DeleteProcThreadAttributeList() is called.&lt;/li>
&lt;li>Results are gathered, and handles are cleaned up.&lt;/li>
&lt;/ol>
&lt;p>Appinfo 服务描述：&lt;/p>
&lt;blockquote>
&lt;p>使用辅助管理权限便于交互式应用程序的运行。如果停止此服务，用户将无法使用辅助管理权限启动应用程序，而执行所需用户任务可能需要这些权限。&lt;/p>
&lt;/blockquote>
&lt;p>当我们了解到 Windows 创建进程的粗略细节，那么就可以对 Privexec 创建其他权限的进程做出封装了。Privexec 支持的权限类型有：&lt;/p>
&lt;ul>
&lt;li>AppContainer&lt;/li>
&lt;li>Mandatory Integrity Control&lt;/li>
&lt;li>No Elevated(UAC)&lt;/li>
&lt;li>Administrator&lt;/li>
&lt;li>System&lt;/li>
&lt;li>TrustedInstaller&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>AppContainer&lt;/strong> 通常可以使用 &lt;code>CreateProcess&lt;/code> 创建，使用 &lt;code>EXTENDED_STARTUPINFO_PRESENT&lt;/code> 额外的 &lt;code>dwCreateFlags&lt;/code> 创建权限为 &lt;code>AppContainer&lt;/code> 的进程即可。AppContainer 配置需由 &lt;code>CreateAppContainerProfile&lt;/code> 创建，相应的 &lt;code>Capability SID&lt;/code> 可由 &lt;code>DeriveCapabilitySidsFromName&lt;/code> 或者 &lt;code>CreateWellKnownSid&lt;/code> 创建，&lt;del>而 &lt;code>Privexec(GUI)&lt;/code> 受限与 UI 限制，目前仅支持 9 个 &lt;code>WellKnownSid&lt;/code>，而&lt;/del>, &lt;code>Privexec (GUI)&lt;/code> 支持从 ListView 中选择常见的 &lt;code>Capabilities&lt;/code> 也支持从清单文件中读取，两种途径获得的 &lt;code>Capabilities&lt;/code> 会被合并， &lt;code>wsudo&lt;/code> 支持 &lt;code>--appx&lt;/code> 从文件中设置 &lt;code>Capabilities&lt;/code>，&lt;code>wsudo&lt;/code> 中使用了 &lt;code>DeriveCapabilitySidsFromName&lt;/code> 创建 &lt;code>Capabilities SID&lt;/code>。&lt;/p>
&lt;p>参数 &lt;code>EXTENDED_STARTUPINFO_PRESENT&lt;/code> 表示使用 &lt;code>STARTUPINFOEX&lt;/code> 结构，使用 &lt;code>InitializeProcThreadAttributeList&lt;/code> 初始化 &lt;code>STARTUPINFOEX::lpAttributeList&lt;/code>, 使用 &lt;code>UpdateProcThreadAttribute&lt;/code> 设置 &lt;code>lpAttributeList&lt;/code> 为 &lt;code>PROC_THREAD_ATTRIBUTE_SECURITY_CAPABILITIES&lt;/code> 并将 &lt;code>SECURITY_CAPABILITIES &lt;/code> 绑定到 &lt;code>STARTUPINFOEX&lt;/code> 上。&lt;/p>
&lt;p>&lt;strong>Mandatory Integrity Control&lt;/strong> 主要使用 &lt;code>SetTokenInformation&lt;/code> 将高完整性级别的 &lt;code>Token&lt;/code> 设置为低完整性级别的 &lt;code>Token&lt;/code> 然后使用 &lt;code>CreateProcessAsUser&lt;/code> 创建进程。&lt;/p>
&lt;p>&lt;strong>No Elevated(UAC)&lt;/strong> 当当前用户为管理员时需要使用计划任务启动 UAC 未提升进程，而计划任务主机进程也是使用 &lt;code>CreateProcessAsUser&lt;/code> 启动非提升的进程。当当前用户不为管理员时，使用 &lt;code>CreateProcess&lt;/code> 创建进程即可。当然如果当前管理员权限进程模拟了 &lt;code>System&lt;/code> 令牌，可以开启进程 &lt;code>SE_TCB_NAME&lt;/code> 权限，然后使用 &lt;code>WTSQueryUserToken&lt;/code> 获得当前标准用户的令牌，拷贝一份此令牌，使用 &lt;code>CreateProcessAsUser&lt;/code> 即可启动未提权的进程。&lt;/p>
&lt;p>&lt;strong>Administrator&lt;/strong> 当当前进程不为管理员，则需要 UAC 提权，细节前文由描述。反之则使用 &lt;code>CreateProcess&lt;/code> 即可。&lt;/p>
&lt;p>&lt;strong>System&lt;/strong> 当前进程必须是管理员权限等级及以上进程，需要开启 &lt;code>SE_DEBUG_NAME&lt;/code> 权限，然后获得系统权限进程的 Token, 将自身权限模拟 &lt;code>System&lt;/code> Token，然后拷贝自身 &lt;code>Token&lt;/code> 修改 &lt;code>Token&lt;/code> 为 &lt;code>Primary Token&lt;/code>，即 &lt;code>hPrimary&lt;/code>，因为只有主 Token 才能被用于创建子进程。《Windows Internal 7th Edition》作者之一 &lt;a href="https://github.com/zodiacon">Pavel Yosifovich&lt;/a> 就写了一个 sysrun 的例子：&lt;a href="https://github.com/zodiacon/sysrun">sysrun&lt;/a>。&lt;/p>
&lt;p>&lt;strong>TrustedInstaller&lt;/strong> 此权限严格意义上来说，是属于 &lt;strong>Windows Modules Installer&lt;/strong> 服务的专有权限，&lt;strong>Windows Modules Installer&lt;/strong> 的服务描述为：&lt;/p>
&lt;blockquote>
&lt;p>启用 Windows 更新和可选组件的安装、修改和移除。如果此服务被禁用，则此计算机的 Windows 更新的安装或卸载可能会失败。&lt;/p>
&lt;/blockquote>
&lt;p>因此要获得此权限，需要先模拟到 &lt;code>System&lt;/code> 权限，然后启动 &lt;code>TrustedInstaller&lt;/code> 服务，然后获得服务进程的权限句柄，以该句柄拷贝启动新的进程。&lt;/p>
&lt;p>Privexec 的进程启动相关代码在：&lt;a href="https://github.com/M2Team/Privexec/tree/master/lib/ProcessCore">https://github.com/M2Team/Privexec/tree/master/lib/ProcessCore&lt;/a>，使用 C++17，利用 &lt;em>Lambda&lt;/em>，&lt;em>RIIA&lt;/em> 这样的功能可以轻易的写出句柄安全的代码。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#1d2432;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c++" data-lang="c++">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff636f">template&lt;/span> &lt;span style="color:#ff636f">&amp;lt;&lt;/span>&lt;span style="color:#ff636f">class&lt;/span> &lt;span style="color:#58a1dd">F&lt;/span>&lt;span style="color:#ff636f">&amp;gt;&lt;/span> &lt;span style="color:#ff636f">class&lt;/span> &lt;span style="color:#58a1dd">final_act&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff636f">public&lt;/span>&lt;span style="color:#ff636f">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">explicit&lt;/span> &lt;span style="color:#58a1dd">final_act&lt;/span>(&lt;span style="color:#58a1dd">F&lt;/span> &lt;span style="color:#58a1dd">f&lt;/span>) &lt;span style="color:#ff636f">noexcept&lt;/span> &lt;span style="color:#ff636f">:&lt;/span> &lt;span style="color:#58a1dd">f_&lt;/span>(&lt;span style="color:#58a1dd">std&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">move&lt;/span>(&lt;span style="color:#58a1dd">f&lt;/span>)), &lt;span style="color:#58a1dd">invoke_&lt;/span>(&lt;span style="color:#58a1dd">true&lt;/span>) {}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">final_act&lt;/span>(&lt;span style="color:#58a1dd">final_act&lt;/span> &lt;span style="color:#ff636f">&amp;amp;&amp;amp;&lt;/span>&lt;span style="color:#58a1dd">other&lt;/span>) &lt;span style="color:#ff636f">noexcept&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">:&lt;/span> &lt;span style="color:#58a1dd">f_&lt;/span>(&lt;span style="color:#58a1dd">std&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">move&lt;/span>(&lt;span style="color:#58a1dd">other&lt;/span>.&lt;span style="color:#58a1dd">f_&lt;/span>)), &lt;span style="color:#58a1dd">invoke_&lt;/span>(&lt;span style="color:#58a1dd">other&lt;/span>.&lt;span style="color:#58a1dd">invoke_&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">other&lt;/span>.&lt;span style="color:#58a1dd">invoke_&lt;/span> &lt;span style="color:#ff636f">=&lt;/span> &lt;span style="color:#58a1dd">false&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">final_act&lt;/span>(&lt;span style="color:#ff636f">const&lt;/span> &lt;span style="color:#58a1dd">final_act&lt;/span> &lt;span style="color:#ff636f">&amp;amp;&lt;/span>) &lt;span style="color:#ff636f">=&lt;/span> &lt;span style="color:#ff636f">delete&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">final_act&lt;/span> &lt;span style="color:#ff636f">&amp;amp;&lt;/span>&lt;span style="color:#ff636f">operator&lt;/span>&lt;span style="color:#ff636f">=&lt;/span>(&lt;span style="color:#ff636f">const&lt;/span> &lt;span style="color:#58a1dd">final_act&lt;/span> &lt;span style="color:#ff636f">&amp;amp;&lt;/span>) &lt;span style="color:#ff636f">=&lt;/span> &lt;span style="color:#ff636f">delete&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">~&lt;/span>&lt;span style="color:#58a1dd">final_act&lt;/span>() &lt;span style="color:#ff636f">noexcept&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">if&lt;/span> (&lt;span style="color:#58a1dd">invoke_&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">f_&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff636f">private&lt;/span>&lt;span style="color:#ff636f">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">F&lt;/span> &lt;span style="color:#58a1dd">f_&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">bool&lt;/span> &lt;span style="color:#58a1dd">invoke_&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">// finally() - convenience function to generate a final_act
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span>&lt;span style="color:#ff636f">template&lt;/span> &lt;span style="color:#ff636f">&amp;lt;&lt;/span>&lt;span style="color:#ff636f">class&lt;/span> &lt;span style="color:#58a1dd">F&lt;/span>&lt;span style="color:#ff636f">&amp;gt;&lt;/span> &lt;span style="color:#ff636f">inline&lt;/span> &lt;span style="color:#58a1dd">final_act&lt;/span>&lt;span style="color:#ff636f">&amp;lt;&lt;/span>&lt;span style="color:#58a1dd">F&lt;/span>&lt;span style="color:#ff636f">&amp;gt;&lt;/span> &lt;span style="color:#58a1dd">finally&lt;/span>(&lt;span style="color:#ff636f">const&lt;/span> &lt;span style="color:#58a1dd">F&lt;/span> &lt;span style="color:#ff636f">&amp;amp;&lt;/span>&lt;span style="color:#58a1dd">f&lt;/span>) &lt;span style="color:#ff636f">noexcept&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">return&lt;/span> &lt;span style="color:#58a1dd">final_act&lt;/span>&lt;span style="color:#ff636f">&amp;lt;&lt;/span>&lt;span style="color:#58a1dd">F&lt;/span>&lt;span style="color:#ff636f">&amp;gt;&lt;/span>(&lt;span style="color:#58a1dd">f&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff636f">template&lt;/span> &lt;span style="color:#ff636f">&amp;lt;&lt;/span>&lt;span style="color:#ff636f">class&lt;/span> &lt;span style="color:#58a1dd">F&lt;/span>&lt;span style="color:#ff636f">&amp;gt;&lt;/span> &lt;span style="color:#ff636f">inline&lt;/span> &lt;span style="color:#58a1dd">final_act&lt;/span>&lt;span style="color:#ff636f">&amp;lt;&lt;/span>&lt;span style="color:#58a1dd">F&lt;/span>&lt;span style="color:#ff636f">&amp;gt;&lt;/span> &lt;span style="color:#58a1dd">finally&lt;/span>(&lt;span style="color:#58a1dd">F&lt;/span> &lt;span style="color:#ff636f">&amp;amp;&amp;amp;&lt;/span>&lt;span style="color:#58a1dd">f&lt;/span>) &lt;span style="color:#ff636f">noexcept&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">return&lt;/span> &lt;span style="color:#58a1dd">final_act&lt;/span>&lt;span style="color:#ff636f">&amp;lt;&lt;/span>&lt;span style="color:#58a1dd">F&lt;/span>&lt;span style="color:#ff636f">&amp;gt;&lt;/span>(&lt;span style="color:#58a1dd">std&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">forward&lt;/span>&lt;span style="color:#ff636f">&amp;lt;&lt;/span>&lt;span style="color:#58a1dd">F&lt;/span>&lt;span style="color:#ff636f">&amp;gt;&lt;/span>(&lt;span style="color:#58a1dd">f&lt;/span>));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff636f">bool&lt;/span> &lt;span style="color:#58a1dd">filetodo&lt;/span>(&lt;span style="color:#58a1dd">std&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">wstring_view&lt;/span> &lt;span style="color:#58a1dd">file&lt;/span>){
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">auto&lt;/span> &lt;span style="color:#58a1dd">hFile&lt;/span>&lt;span style="color:#ff636f">=&lt;/span> &lt;span style="color:#58a1dd">CreateFileW&lt;/span>(&lt;span style="color:#58a1dd">file&lt;/span>.&lt;span style="color:#58a1dd">data&lt;/span>(),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">GENERIC_READ&lt;/span>, &lt;span style="color:#58a1dd">FILE_SHARE_READ&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">nullptr&lt;/span>, &lt;span style="color:#58a1dd">OPEN_EXISTING&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">FILE_ATTRIBUTE_NORMAL&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">nullptr&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">if&lt;/span> (&lt;span style="color:#58a1dd">hFile&lt;/span>&lt;span style="color:#ff636f">==&lt;/span>&lt;span style="color:#58a1dd">INVALID_HANDLE_VALUE&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">return&lt;/span> &lt;span style="color:#58a1dd">false&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">auto&lt;/span> &lt;span style="color:#58a1dd">closer&lt;/span> &lt;span style="color:#ff636f">=&lt;/span> &lt;span style="color:#58a1dd">finally&lt;/span>([&lt;span style="color:#ff636f">&amp;amp;&lt;/span>] {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">if&lt;/span> (&lt;span style="color:#58a1dd">hFile&lt;/span>&lt;span style="color:#ff636f">!=&lt;/span>&lt;span style="color:#58a1dd">INVALID_HANDLE_VALUE&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">CloseHandle&lt;/span>(&lt;span style="color:#58a1dd">hFile&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> });
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#828b96;font-style:italic">/// some codes...
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span> &lt;span style="color:#ff636f">return&lt;/span> &lt;span style="color:#58a1dd">true&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>回过头来说，你完全开发一个服务来实现以其他用户权限启动进程，然后封装一个命令，命令需要启动进程时与服务进行通信，在服务中使用 &lt;code>CreateProcessAsUser&lt;/code> 启动新的进程。使用服务实现此功能时，需要避免不可信的提权发生。&lt;/p>
&lt;p>&lt;a href="https://github.com/MouriNaruto">毛利&lt;/a> 的 &lt;a href="https://github.com/M2Team/NSudo">NSudo&lt;/a> 与 Privexec 类似，但实现基本上是使用 &lt;code>CreateProcessAsUser&lt;/code> + &lt;code>Token&lt;/code> 创建进程。&lt;/p>
&lt;p>题外话：在 Windows 平台上，启动进程依然有不小的代价，中间环节多，而在 Unix 平台，启动进程有 &lt;code>fork/exec&lt;/code>，实际上要实现类似 &lt;code>CreateProcess&lt;/code> 之类的逻辑需要使用 &lt;code>fork/exec&lt;/code> 联合使用。现实带来了遗憾，Windows 上实现 &lt;code>fork&lt;/code> 和 Unix 实现更高效的 &lt;code>CreateProcess&lt;/code> 成了两个大难题。当然，在实现 &lt;code>Windows Subsystem for Linux&lt;/code>&lt;sup>4&lt;/sup>，微软也在改进其创建进程的流程，但目前为止 &lt;code>Minimal process&lt;/code> 并没有让 &lt;code>cygwin&lt;/code> 这样的系统受益。&lt;/p>
&lt;p>&lt;img src="https://msdnshared.blob.core.windows.net/media/2016/05/picoProcess-1024x763.png" alt="picoprocess">&lt;/p>
&lt;h2 id="privexec-gui">Privexec (GUI)&lt;/h2>
&lt;p>Privexec 狭义上是指 &lt;code>Privexec (GUI)&lt;/code> 这个程序，现在应该指 &lt;code>Privexec&lt;/code> 整个项目，包括 &lt;code>wsudo&lt;/code>。在 Windows 平台上，使用 C++ 开发桌面应用虽然有很多选择，比如 &lt;code>API, MFC, WTL, QT, DirectUI&lt;/code> 等等，但实际上基本没有一个 &lt;strong>现代的 UI 框架&lt;/strong> 可以供你选择，上述 UI 框架或缺少自适应大小支持，或缺少高 &lt;code>DPI&lt;/code> 支持，也可能缺少 Emoji 支持等等，另一方面不断解决依赖问题也让人厌倦。Privexec 使用 Win32 API 即可，保持极简风格也不错。Privexec 最初只是我自己开发好玩的一个工具（目前大概依然是），UI 开发选择权在我自己，而 Windows 10 &lt;sup>5&lt;/sup>改进了基于对话框应用高 DPI 的支持，为了支持我的 &lt;code>Surface Pro 4&lt;/code> ，于是选择了使用对话框做主界面。 界面如下：&lt;/p>
&lt;p>&lt;img src="https://github.com/M2Team/Privexec/raw/master/docs/images/appcontainer.png" alt="Privexec">&lt;/p>
&lt;p>在此次改造之前 Privexec 使用传统的 &lt;code>Win32 API+ 全局变量&lt;/code> 这样的代码逻辑，在不断添加功能后发现代码越来越杂乱无章，于是就用 C++ 类重构了，大量使用 C++17 代码。代码地址为：&lt;a href="https://github.com/M2Team/Privexec/tree/master/Privexec">https://github.com/M2Team/Privexec/tree/master/Privexec&lt;/a>。&lt;/p>
&lt;p>我们都知道，目前 C 的 API 支持回调函数的一定只能使用全局函数或者静态成员函数。在使用 C++ 面向对象开发 UI 程序时，需要在窗口消息回调函数中先获取对象的 &lt;code>this&lt;/code> 指针，然后再调用对象的事件处理程序。方案由多种，比如 ATL 使用的 &lt;code>Thunk&lt;/code>&lt;sup>6&lt;/sup>，还有通过 &lt;code>GWLP_USERDATA&lt;/code> 去传递 &lt;code>this&lt;/code> 指针，这种用户回调携带 &lt;code>this&lt;/code> 指针的做法简直太常见了。&lt;/p>
&lt;p>ATL Thunk 相关的文章有：&lt;a href="https://www.hackcraft.net/cpp/windowsThunk/">https://www.hackcraft.net/cpp/windowsThunk/&lt;/a>&lt;/p>
&lt;p>实际上，Privexec 并不需要学习 ATL/WTL 那样，使用 &lt;code>Thunk&lt;/code> 技术，完全没有到那个程度，所以我使用了 &lt;code>GWLP_USERDATA&lt;/code> 的做法：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#1d2432;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c++" data-lang="c++">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#58a1dd">INT_PTR&lt;/span> &lt;span style="color:#58a1dd">WINAPI&lt;/span> &lt;span style="color:#58a1dd">App&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">WindowProc&lt;/span>(&lt;span style="color:#58a1dd">HWND&lt;/span> &lt;span style="color:#58a1dd">hWnd&lt;/span>, &lt;span style="color:#58a1dd">UINT&lt;/span> &lt;span style="color:#58a1dd">message&lt;/span>, &lt;span style="color:#58a1dd">WPARAM&lt;/span> &lt;span style="color:#58a1dd">wParam&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">LPARAM&lt;/span> &lt;span style="color:#58a1dd">lParam&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">App&lt;/span> &lt;span style="color:#ff636f">*&lt;/span>&lt;span style="color:#58a1dd">app&lt;/span>{&lt;span style="color:#ff636f">nullptr&lt;/span>};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">if&lt;/span> (&lt;span style="color:#58a1dd">message&lt;/span> &lt;span style="color:#ff636f">==&lt;/span> &lt;span style="color:#58a1dd">WM_INITDIALOG&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">auto&lt;/span> &lt;span style="color:#58a1dd">app&lt;/span> &lt;span style="color:#ff636f">=&lt;/span> &lt;span style="color:#ff636f">reinterpret_cast&lt;/span>&lt;span style="color:#ff636f">&amp;lt;&lt;/span>&lt;span style="color:#58a1dd">App&lt;/span> &lt;span style="color:#ff636f">*&amp;gt;&lt;/span>(&lt;span style="color:#58a1dd">lParam&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">SetWindowLongPtr&lt;/span>(&lt;span style="color:#58a1dd">hWnd&lt;/span>, &lt;span style="color:#58a1dd">GWLP_USERDATA&lt;/span>, &lt;span style="color:#ff636f">reinterpret_cast&lt;/span>&lt;span style="color:#ff636f">&amp;lt;&lt;/span>&lt;span style="color:#58a1dd">LONG_PTR&lt;/span>&lt;span style="color:#ff636f">&amp;gt;&lt;/span>(&lt;span style="color:#58a1dd">app&lt;/span>));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">app&lt;/span>&lt;span style="color:#ff636f">-&amp;gt;&lt;/span>&lt;span style="color:#58a1dd">Initialize&lt;/span>(&lt;span style="color:#58a1dd">hWnd&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } &lt;span style="color:#ff636f">else&lt;/span> &lt;span style="color:#58a1dd">if&lt;/span> ((&lt;span style="color:#58a1dd">app&lt;/span> &lt;span style="color:#ff636f">=&lt;/span> &lt;span style="color:#58a1dd">GetThisFromHandle&lt;/span>(&lt;span style="color:#58a1dd">hWnd&lt;/span>)) &lt;span style="color:#ff636f">!=&lt;/span> &lt;span style="color:#ff636f">nullptr&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">return&lt;/span> &lt;span style="color:#58a1dd">app&lt;/span>&lt;span style="color:#ff636f">-&amp;gt;&lt;/span>&lt;span style="color:#58a1dd">MessageHandler&lt;/span>(&lt;span style="color:#58a1dd">message&lt;/span>, &lt;span style="color:#58a1dd">wParam&lt;/span>, &lt;span style="color:#58a1dd">lParam&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">return&lt;/span> &lt;span style="color:#58a1dd">FALSE&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>在 Windows 中，很多 API 实际上是由 &lt;code>COM&lt;/code> 组件类提供，直接在 C++ 中使用 COM 对象需要小心翼翼避免资源泄漏，到了 8102 年，你应该使用智能指针或者 &lt;code>ComPtr&lt;/code> 去包裹 COM 对象，或者使用类似下面的代码，使用 RAII 来避免资源泄漏。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#1d2432;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c++" data-lang="c++">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff636f">template&lt;/span> &lt;span style="color:#ff636f">&amp;lt;&lt;/span>&lt;span style="color:#ff636f">class&lt;/span> &lt;span style="color:#58a1dd">T&lt;/span>&lt;span style="color:#ff636f">&amp;gt;&lt;/span> &lt;span style="color:#ff636f">class&lt;/span> &lt;span style="color:#58a1dd">comptr&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff636f">public&lt;/span>&lt;span style="color:#ff636f">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">comptr&lt;/span>() { &lt;span style="color:#58a1dd">ptr&lt;/span> &lt;span style="color:#ff636f">=&lt;/span> &lt;span style="color:#58a1dd">NULL&lt;/span>; }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">comptr&lt;/span>(&lt;span style="color:#58a1dd">T&lt;/span> &lt;span style="color:#ff636f">*&lt;/span>&lt;span style="color:#58a1dd">p&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">ptr&lt;/span> &lt;span style="color:#ff636f">=&lt;/span> &lt;span style="color:#58a1dd">p&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">if&lt;/span> (&lt;span style="color:#58a1dd">ptr&lt;/span> &lt;span style="color:#ff636f">!=&lt;/span> &lt;span style="color:#58a1dd">NULL&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">ptr&lt;/span>&lt;span style="color:#ff636f">-&amp;gt;&lt;/span>&lt;span style="color:#58a1dd">AddRef&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">comptr&lt;/span>(&lt;span style="color:#ff636f">const&lt;/span> &lt;span style="color:#58a1dd">comptr&lt;/span>&lt;span style="color:#ff636f">&amp;lt;&lt;/span>&lt;span style="color:#58a1dd">T&lt;/span>&lt;span style="color:#ff636f">&amp;gt;&lt;/span> &lt;span style="color:#ff636f">&amp;amp;&lt;/span>&lt;span style="color:#58a1dd">sptr&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">ptr&lt;/span> &lt;span style="color:#ff636f">=&lt;/span> &lt;span style="color:#58a1dd">sptr&lt;/span>.&lt;span style="color:#58a1dd">ptr&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">if&lt;/span> (&lt;span style="color:#58a1dd">ptr&lt;/span> &lt;span style="color:#ff636f">!=&lt;/span> &lt;span style="color:#58a1dd">NULL&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">ptr&lt;/span>&lt;span style="color:#ff636f">-&amp;gt;&lt;/span>&lt;span style="color:#58a1dd">AddRef&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">T&lt;/span> &lt;span style="color:#ff636f">**&lt;/span>&lt;span style="color:#ff636f">operator&lt;/span>&lt;span style="color:#ff636f">&amp;amp;&lt;/span>() { &lt;span style="color:#ff636f">return&lt;/span> &lt;span style="color:#ff636f">&amp;amp;&lt;/span>&lt;span style="color:#58a1dd">ptr&lt;/span>; }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">T&lt;/span> &lt;span style="color:#ff636f">*&lt;/span>&lt;span style="color:#ff636f">operator&lt;/span>&lt;span style="color:#ff636f">-&amp;gt;&lt;/span>() { &lt;span style="color:#ff636f">return&lt;/span> &lt;span style="color:#58a1dd">ptr&lt;/span>; }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">T&lt;/span> &lt;span style="color:#ff636f">*&lt;/span>&lt;span style="color:#ff636f">operator&lt;/span>&lt;span style="color:#ff636f">=&lt;/span>(&lt;span style="color:#58a1dd">T&lt;/span> &lt;span style="color:#ff636f">*&lt;/span>&lt;span style="color:#58a1dd">p&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">if&lt;/span> (&lt;span style="color:#ff636f">*&lt;/span>&lt;span style="color:#ff636f">this&lt;/span> &lt;span style="color:#ff636f">!=&lt;/span> &lt;span style="color:#58a1dd">p&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">ptr&lt;/span> &lt;span style="color:#ff636f">=&lt;/span> &lt;span style="color:#58a1dd">p&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">if&lt;/span> (&lt;span style="color:#58a1dd">ptr&lt;/span> &lt;span style="color:#ff636f">!=&lt;/span> &lt;span style="color:#58a1dd">NULL&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">ptr&lt;/span>&lt;span style="color:#ff636f">-&amp;gt;&lt;/span>&lt;span style="color:#58a1dd">AddRef&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">return&lt;/span> &lt;span style="color:#ff636f">*&lt;/span>&lt;span style="color:#ff636f">this&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">operator&lt;/span> &lt;span style="color:#58a1dd">T&lt;/span> &lt;span style="color:#ff636f">*&lt;/span>() &lt;span style="color:#ff636f">const&lt;/span> { &lt;span style="color:#ff636f">return&lt;/span> &lt;span style="color:#58a1dd">ptr&lt;/span>; }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">template&lt;/span> &lt;span style="color:#ff636f">&amp;lt;&lt;/span>&lt;span style="color:#ff636f">class&lt;/span> &lt;span style="color:#58a1dd">I&lt;/span>&lt;span style="color:#ff636f">&amp;gt;&lt;/span> &lt;span style="color:#58a1dd">HRESULT&lt;/span> &lt;span style="color:#58a1dd">QueryInterface&lt;/span>(&lt;span style="color:#58a1dd">REFCLSID&lt;/span> &lt;span style="color:#58a1dd">rclsid&lt;/span>, &lt;span style="color:#58a1dd">I&lt;/span> &lt;span style="color:#ff636f">**&lt;/span>&lt;span style="color:#58a1dd">pp&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">if&lt;/span> (&lt;span style="color:#58a1dd">pp&lt;/span> &lt;span style="color:#ff636f">!=&lt;/span> &lt;span style="color:#58a1dd">NULL&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">return&lt;/span> &lt;span style="color:#58a1dd">ptr&lt;/span>&lt;span style="color:#ff636f">-&amp;gt;&lt;/span>&lt;span style="color:#58a1dd">QueryInterface&lt;/span>(&lt;span style="color:#58a1dd">rclsid&lt;/span>, (&lt;span style="color:#ff636f">void&lt;/span> &lt;span style="color:#ff636f">**&lt;/span>)&lt;span style="color:#58a1dd">pp&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } &lt;span style="color:#ff636f">else&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">return&lt;/span> &lt;span style="color:#58a1dd">E_FAIL&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">HRESULT&lt;/span> &lt;span style="color:#58a1dd">CoCreateInstance&lt;/span>(&lt;span style="color:#58a1dd">REFCLSID&lt;/span> &lt;span style="color:#58a1dd">clsid&lt;/span>, &lt;span style="color:#58a1dd">IUnknown&lt;/span> &lt;span style="color:#ff636f">*&lt;/span>&lt;span style="color:#58a1dd">pUnknown&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">REFIID&lt;/span> &lt;span style="color:#58a1dd">interfaceId&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">DWORD&lt;/span> &lt;span style="color:#58a1dd">dwClsContext&lt;/span> &lt;span style="color:#ff636f">=&lt;/span> &lt;span style="color:#58a1dd">CLSCTX_ALL&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">HRESULT&lt;/span> &lt;span style="color:#58a1dd">hr&lt;/span> &lt;span style="color:#ff636f">=&lt;/span> &lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">CoCreateInstance&lt;/span>(&lt;span style="color:#58a1dd">clsid&lt;/span>, &lt;span style="color:#58a1dd">pUnknown&lt;/span>, &lt;span style="color:#58a1dd">dwClsContext&lt;/span>, &lt;span style="color:#58a1dd">interfaceId&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (&lt;span style="color:#ff636f">void&lt;/span> &lt;span style="color:#ff636f">**&lt;/span>)&lt;span style="color:#ff636f">&amp;amp;&lt;/span>&lt;span style="color:#58a1dd">ptr&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">return&lt;/span> &lt;span style="color:#58a1dd">hr&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">~&lt;/span>&lt;span style="color:#58a1dd">comptr&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">if&lt;/span> (&lt;span style="color:#58a1dd">ptr&lt;/span> &lt;span style="color:#ff636f">!=&lt;/span> &lt;span style="color:#58a1dd">NULL&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">ptr&lt;/span>&lt;span style="color:#ff636f">-&amp;gt;&lt;/span>&lt;span style="color:#58a1dd">Release&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff636f">private&lt;/span>&lt;span style="color:#ff636f">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">T&lt;/span> &lt;span style="color:#ff636f">*&lt;/span>&lt;span style="color:#58a1dd">ptr&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>};
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Privexec 使用了 &lt;code>pugixml&lt;/code> 用于解析 &lt;code>AppManifest&lt;/code>，使用 &lt;code>json.hpp&lt;/code> 解析 Alias 配置文件。&lt;/p>
&lt;p>在 Privexec 中的错误提示 &lt;code>MessageBox&lt;/code> 实际上是使用 &lt;code>TaskDialog&lt;/code> 编写，而关于对话框同样也是。查找文件/文件夹对话框使用的是 &lt;code>IFileDialog&lt;/code>。&lt;/p>
&lt;h2 id="wsudo">WSUDO&lt;/h2>
&lt;p>WSUDO 是 Priexec 的命令行版本。很早就支持颜色高亮，在前文中曾写过一篇文章 &lt;a href="https://forcemz.net/windows/2017/06/06/ColorConsole/">《Privexec 的内幕（一）标准输出原理与彩色输出实现》&lt;/a> 对此有详细的介绍。此次重构 WSUDO，改进了命令行解析模式，可以通过命令行设置启动进程的&lt;strong>启动目录&lt;/strong>，&lt;strong>环境变量&lt;/strong>，&lt;strong>AppConatiner&lt;/strong> 清单文件，具体的命令行内容如下：&lt;/p>
&lt;p>&lt;img src="https://github.com/M2Team/Privexec/raw/master/docs/images/wsudo.png" alt="WSUDO">&lt;/p>
&lt;p>在创建进程时，如果 &lt;code>CreateProcess&lt;/code> 的参数 &lt;a href="https://docs.microsoft.com/en-us/windows/desktop/api/processthreadsapi/nf-processthreadsapi-createprocessw">&lt;code>lpEnvironment&lt;/code>&lt;/a> 为 &lt;code>NULL&lt;/code> 时，子进程将继承父进程的环境变量，这与 &lt;code>Unix&lt;/code> (&lt;code>exec&lt;/code> 函数家族) 系统是一致的。如果我们要设置子进程的环境变量，我们可以修改 wsudo 的环境变量传递给子进程即可。这次，我给 WSUDO 添加了 &lt;code>-e(--env)&lt;/code> flag. 可以使用 &lt;code>-eK=V&lt;/code>，&lt;code>-e K=V&lt;/code> &lt;code>--env=K=V&lt;/code>，&lt;code>--env K=V&lt;/code> 这样的方式设置环境变量。&lt;/p>
&lt;p>WSUDO 目前还支持 &lt;code>--new-console&lt;/code> &lt;code>--wait&lt;/code> 这样的 flag，在 Windows 中，创建 CUI 进程时，默认参数下，如果程序的子系统是 &lt;code>Windows CUI&lt;/code>，如果父进程也是 &lt;code>CUI&lt;/code> 程序就会继承父进程的控制台窗口，否则会创建一个新的控制台窗口。这就意味这 WSUDO 在启动 CUI 子进程时，CUI 子进程实际上的窗口也会继承 WSUDO 的当前窗口，而之前的 WSUDO 在子进程启动后就结束了，CMD/PowerShell 的等待也就结束了，这时候如果 CUI 子进程还活跃，可能对控制台窗口读写从而会导致控制台窗口输入输出紊乱。这个问题的解决方法有：&lt;/p>
&lt;ul>
&lt;li>WSUDO 等待子进程结束&lt;/li>
&lt;li>或者启动新控制台&lt;/li>
&lt;/ul>
&lt;p>而这次重构专门增加了 &lt;code>--new-console&lt;/code> 和 &lt;code>--wait&lt;/code>，并修改 WSUDO 的启动进程的默认行为，具体情形如下：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>子系统&lt;/th>
&lt;th>&amp;ndash;new-console&lt;/th>
&lt;th>&amp;ndash;wait&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>Windows CUI&lt;/td>
&lt;td>默认关闭&lt;/td>
&lt;td>默认开启&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Windows GUI&lt;/td>
&lt;td>N/A&lt;/td>
&lt;td>默认关闭&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>如果子进程子系统是 &lt;code>Windows GUI&lt;/code> 且命令行参数包含 &lt;code>--wait&lt;/code>，WSUDO 依然会等待子进程结束。&lt;/p>
&lt;p>在启动子进程的之前，我们可以通过解析 &lt;code>PE&lt;/code> 文件格式去感知可执行程序子系统是否是 &lt;code>Windows CUI&lt;/code>，具体代码在：&lt;a href="https://github.com/M2Team/Privexec/blob/f9a2cbbfa57a3bda65e6c70b74e80b8cc67af333/include/pe.hpp#L130">PESubsystemIsConsole&lt;/a>&lt;/p>
&lt;p>如果要支持 &lt;code>AppExecLink(IO_REPARSE_TAG_APPEXECLINK)&lt;/code> 这样特殊的文件（这种文件类似于 Windows Symbolic File，是 UWP App 的程序的特殊链接文件。）需要解析重解析点，大致代码如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#1d2432;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c++" data-lang="c++">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff636f">inline&lt;/span> &lt;span style="color:#ff636f">bool&lt;/span> &lt;span style="color:#58a1dd">readlink&lt;/span>(&lt;span style="color:#ff636f">const&lt;/span> &lt;span style="color:#58a1dd">std&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">wstring&lt;/span> &lt;span style="color:#ff636f">&amp;amp;&lt;/span>&lt;span style="color:#58a1dd">symfile&lt;/span>, &lt;span style="color:#58a1dd">std&lt;/span>&lt;span style="color:#ff636f">::&lt;/span>&lt;span style="color:#58a1dd">wstring&lt;/span> &lt;span style="color:#ff636f">&amp;amp;&lt;/span>&lt;span style="color:#58a1dd">realfile&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">auto&lt;/span> &lt;span style="color:#58a1dd">hFile&lt;/span> &lt;span style="color:#ff636f">=&lt;/span> &lt;span style="color:#58a1dd">CreateFileW&lt;/span>(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">symfile&lt;/span>.&lt;span style="color:#58a1dd">c_str&lt;/span>(), &lt;span style="color:#a6be9d">0&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">FILE_SHARE_READ&lt;/span> &lt;span style="color:#ff636f">|&lt;/span> &lt;span style="color:#58a1dd">FILE_SHARE_WRITE&lt;/span> &lt;span style="color:#ff636f">|&lt;/span> &lt;span style="color:#58a1dd">FILE_SHARE_DELETE&lt;/span>, &lt;span style="color:#ff636f">nullptr&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">OPEN_EXISTING&lt;/span>, &lt;span style="color:#58a1dd">FILE_FLAG_BACKUP_SEMANTICS&lt;/span> &lt;span style="color:#ff636f">|&lt;/span> &lt;span style="color:#58a1dd">FILE_FLAG_OPEN_REPARSE_POINT&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">nullptr&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">if&lt;/span> (&lt;span style="color:#58a1dd">hFile&lt;/span> &lt;span style="color:#ff636f">==&lt;/span> &lt;span style="color:#58a1dd">INVALID_HANDLE_VALUE&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">return&lt;/span> &lt;span style="color:#58a1dd">false&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">ReparseBuffer&lt;/span> &lt;span style="color:#58a1dd">rbuf&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">DWORD&lt;/span> &lt;span style="color:#58a1dd">dwBytes&lt;/span> &lt;span style="color:#ff636f">=&lt;/span> &lt;span style="color:#a6be9d">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">if&lt;/span> (&lt;span style="color:#58a1dd">DeviceIoControl&lt;/span>(&lt;span style="color:#58a1dd">hFile&lt;/span>, &lt;span style="color:#58a1dd">FSCTL_GET_REPARSE_POINT&lt;/span>, &lt;span style="color:#ff636f">nullptr&lt;/span>, &lt;span style="color:#a6be9d">0&lt;/span>, &lt;span style="color:#58a1dd">rbuf&lt;/span>.&lt;span style="color:#58a1dd">data&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">MAXIMUM_REPARSE_DATA_BUFFER_SIZE&lt;/span>, &lt;span style="color:#ff636f">&amp;amp;&lt;/span>&lt;span style="color:#58a1dd">dwBytes&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">nullptr&lt;/span>) &lt;span style="color:#ff636f">!=&lt;/span> &lt;span style="color:#58a1dd">TRUE&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">CloseHandle&lt;/span>(&lt;span style="color:#58a1dd">hFile&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">return&lt;/span> &lt;span style="color:#58a1dd">false&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">CloseHandle&lt;/span>(&lt;span style="color:#58a1dd">hFile&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">switch&lt;/span> (&lt;span style="color:#58a1dd">rbuf&lt;/span>.&lt;span style="color:#58a1dd">data&lt;/span>&lt;span style="color:#ff636f">-&amp;gt;&lt;/span>&lt;span style="color:#58a1dd">ReparseTag&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">case&lt;/span> &lt;span style="color:#58a1dd">IO_REPARSE_TAG_SYMLINK&lt;/span>: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">auto&lt;/span> &lt;span style="color:#58a1dd">wstr&lt;/span> &lt;span style="color:#ff636f">=&lt;/span> &lt;span style="color:#58a1dd">rbuf&lt;/span>.&lt;span style="color:#58a1dd">data&lt;/span>&lt;span style="color:#ff636f">-&amp;gt;&lt;/span>&lt;span style="color:#58a1dd">SymbolicLinkReparseBuffer&lt;/span>.&lt;span style="color:#58a1dd">PathBuffer&lt;/span> &lt;span style="color:#ff636f">+&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (&lt;span style="color:#58a1dd">rbuf&lt;/span>.&lt;span style="color:#58a1dd">data&lt;/span>&lt;span style="color:#ff636f">-&amp;gt;&lt;/span>&lt;span style="color:#58a1dd">SymbolicLinkReparseBuffer&lt;/span>.&lt;span style="color:#58a1dd">SubstituteNameOffset&lt;/span> &lt;span style="color:#ff636f">/&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">sizeof&lt;/span>(&lt;span style="color:#58a1dd">WCHAR&lt;/span>));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">auto&lt;/span> &lt;span style="color:#58a1dd">wlen&lt;/span> &lt;span style="color:#ff636f">=&lt;/span> &lt;span style="color:#58a1dd">rbuf&lt;/span>.&lt;span style="color:#58a1dd">data&lt;/span>&lt;span style="color:#ff636f">-&amp;gt;&lt;/span>&lt;span style="color:#58a1dd">SymbolicLinkReparseBuffer&lt;/span>.&lt;span style="color:#58a1dd">SubstituteNameLength&lt;/span> &lt;span style="color:#ff636f">/&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">sizeof&lt;/span>(&lt;span style="color:#58a1dd">WCHAR&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">if&lt;/span> (&lt;span style="color:#58a1dd">wlen&lt;/span> &lt;span style="color:#ff636f">&amp;gt;=&lt;/span> &lt;span style="color:#a6be9d">4&lt;/span> &lt;span style="color:#ff636f">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#58a1dd">wstr&lt;/span>[&lt;span style="color:#a6be9d">0&lt;/span>] &lt;span style="color:#ff636f">==&lt;/span> &lt;span style="color:#a6be9d">L&lt;/span>&lt;span style="color:#a6be9d">&amp;#39;\\&amp;#39;&lt;/span> &lt;span style="color:#ff636f">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#58a1dd">wstr&lt;/span>[&lt;span style="color:#a6be9d">1&lt;/span>] &lt;span style="color:#ff636f">==&lt;/span> &lt;span style="color:#a6be9d">L&lt;/span>&lt;span style="color:#a6be9d">&amp;#39;?&amp;#39;&lt;/span> &lt;span style="color:#ff636f">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#58a1dd">wstr&lt;/span>[&lt;span style="color:#a6be9d">2&lt;/span>] &lt;span style="color:#ff636f">==&lt;/span> &lt;span style="color:#a6be9d">L&lt;/span>&lt;span style="color:#a6be9d">&amp;#39;?&amp;#39;&lt;/span> &lt;span style="color:#ff636f">&amp;amp;&amp;amp;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">wstr&lt;/span>[&lt;span style="color:#a6be9d">3&lt;/span>] &lt;span style="color:#ff636f">==&lt;/span> &lt;span style="color:#a6be9d">L&lt;/span>&lt;span style="color:#a6be9d">&amp;#39;\\&amp;#39;&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#828b96;font-style:italic">/* Starts with \??\ */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">if&lt;/span> (&lt;span style="color:#58a1dd">wlen&lt;/span> &lt;span style="color:#ff636f">&amp;gt;=&lt;/span> &lt;span style="color:#a6be9d">6&lt;/span> &lt;span style="color:#ff636f">&amp;amp;&amp;amp;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ((&lt;span style="color:#58a1dd">wstr&lt;/span>[&lt;span style="color:#a6be9d">4&lt;/span>] &lt;span style="color:#ff636f">&amp;gt;=&lt;/span> &lt;span style="color:#a6be9d">L&lt;/span>&lt;span style="color:#a6be9d">&amp;#39;A&amp;#39;&lt;/span> &lt;span style="color:#ff636f">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#58a1dd">wstr&lt;/span>[&lt;span style="color:#a6be9d">4&lt;/span>] &lt;span style="color:#ff636f">&amp;lt;=&lt;/span> &lt;span style="color:#a6be9d">L&lt;/span>&lt;span style="color:#a6be9d">&amp;#39;Z&amp;#39;&lt;/span>) &lt;span style="color:#ff636f">||&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (&lt;span style="color:#58a1dd">wstr&lt;/span>[&lt;span style="color:#a6be9d">4&lt;/span>] &lt;span style="color:#ff636f">&amp;gt;=&lt;/span> &lt;span style="color:#a6be9d">L&lt;/span>&lt;span style="color:#a6be9d">&amp;#39;a&amp;#39;&lt;/span> &lt;span style="color:#ff636f">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#58a1dd">wstr&lt;/span>[&lt;span style="color:#a6be9d">4&lt;/span>] &lt;span style="color:#ff636f">&amp;lt;=&lt;/span> &lt;span style="color:#a6be9d">L&lt;/span>&lt;span style="color:#a6be9d">&amp;#39;z&amp;#39;&lt;/span>)) &lt;span style="color:#ff636f">&amp;amp;&amp;amp;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">wstr&lt;/span>[&lt;span style="color:#a6be9d">5&lt;/span>] &lt;span style="color:#ff636f">==&lt;/span> &lt;span style="color:#a6be9d">L&lt;/span>&lt;span style="color:#a6be9d">&amp;#39;:&amp;#39;&lt;/span> &lt;span style="color:#ff636f">&amp;amp;&amp;amp;&lt;/span> (&lt;span style="color:#58a1dd">wlen&lt;/span> &lt;span style="color:#ff636f">==&lt;/span> &lt;span style="color:#a6be9d">6&lt;/span> &lt;span style="color:#ff636f">||&lt;/span> &lt;span style="color:#58a1dd">wstr&lt;/span>[&lt;span style="color:#a6be9d">6&lt;/span>] &lt;span style="color:#ff636f">==&lt;/span> &lt;span style="color:#a6be9d">L&lt;/span>&lt;span style="color:#a6be9d">&amp;#39;\\&amp;#39;&lt;/span>)) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#828b96;font-style:italic">/* \??\&amp;lt;drive&amp;gt;:\ */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">wstr&lt;/span> &lt;span style="color:#ff636f">+=&lt;/span> &lt;span style="color:#a6be9d">4&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">wlen&lt;/span> &lt;span style="color:#ff636f">-=&lt;/span> &lt;span style="color:#a6be9d">4&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } &lt;span style="color:#ff636f">else&lt;/span> &lt;span style="color:#ff636f">if&lt;/span> (&lt;span style="color:#58a1dd">wlen&lt;/span> &lt;span style="color:#ff636f">&amp;gt;=&lt;/span> &lt;span style="color:#a6be9d">8&lt;/span> &lt;span style="color:#ff636f">&amp;amp;&amp;amp;&lt;/span> (&lt;span style="color:#58a1dd">wstr&lt;/span>[&lt;span style="color:#a6be9d">4&lt;/span>] &lt;span style="color:#ff636f">==&lt;/span> &lt;span style="color:#a6be9d">L&lt;/span>&lt;span style="color:#a6be9d">&amp;#39;U&amp;#39;&lt;/span> &lt;span style="color:#ff636f">||&lt;/span> &lt;span style="color:#58a1dd">wstr&lt;/span>[&lt;span style="color:#a6be9d">4&lt;/span>] &lt;span style="color:#ff636f">==&lt;/span> &lt;span style="color:#a6be9d">L&lt;/span>&lt;span style="color:#a6be9d">&amp;#39;u&amp;#39;&lt;/span>) &lt;span style="color:#ff636f">&amp;amp;&amp;amp;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (&lt;span style="color:#58a1dd">wstr&lt;/span>[&lt;span style="color:#a6be9d">5&lt;/span>] &lt;span style="color:#ff636f">==&lt;/span> &lt;span style="color:#a6be9d">L&lt;/span>&lt;span style="color:#a6be9d">&amp;#39;N&amp;#39;&lt;/span> &lt;span style="color:#ff636f">||&lt;/span> &lt;span style="color:#58a1dd">wstr&lt;/span>[&lt;span style="color:#a6be9d">5&lt;/span>] &lt;span style="color:#ff636f">==&lt;/span> &lt;span style="color:#a6be9d">L&lt;/span>&lt;span style="color:#a6be9d">&amp;#39;n&amp;#39;&lt;/span>) &lt;span style="color:#ff636f">&amp;amp;&amp;amp;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (&lt;span style="color:#58a1dd">wstr&lt;/span>[&lt;span style="color:#a6be9d">6&lt;/span>] &lt;span style="color:#ff636f">==&lt;/span> &lt;span style="color:#a6be9d">L&lt;/span>&lt;span style="color:#a6be9d">&amp;#39;C&amp;#39;&lt;/span> &lt;span style="color:#ff636f">||&lt;/span> &lt;span style="color:#58a1dd">wstr&lt;/span>[&lt;span style="color:#a6be9d">6&lt;/span>] &lt;span style="color:#ff636f">==&lt;/span> &lt;span style="color:#a6be9d">L&lt;/span>&lt;span style="color:#a6be9d">&amp;#39;c&amp;#39;&lt;/span>) &lt;span style="color:#ff636f">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#58a1dd">wstr&lt;/span>[&lt;span style="color:#a6be9d">7&lt;/span>] &lt;span style="color:#ff636f">==&lt;/span> &lt;span style="color:#a6be9d">L&lt;/span>&lt;span style="color:#a6be9d">&amp;#39;\\&amp;#39;&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#828b96;font-style:italic">/* \??\UNC\&amp;lt;server&amp;gt;\&amp;lt;share&amp;gt;\ - make sure the final path looks like */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#828b96;font-style:italic">/* \\&amp;lt;server&amp;gt;\&amp;lt;share&amp;gt;\ */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">wstr&lt;/span> &lt;span style="color:#ff636f">+=&lt;/span> &lt;span style="color:#a6be9d">6&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">wstr&lt;/span>[&lt;span style="color:#a6be9d">0&lt;/span>] &lt;span style="color:#ff636f">=&lt;/span> &lt;span style="color:#a6be9d">L&lt;/span>&lt;span style="color:#a6be9d">&amp;#39;\\&amp;#39;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">wlen&lt;/span> &lt;span style="color:#ff636f">-=&lt;/span> &lt;span style="color:#a6be9d">6&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">realfile&lt;/span>.&lt;span style="color:#58a1dd">assign&lt;/span>(&lt;span style="color:#58a1dd">wstr&lt;/span>, &lt;span style="color:#58a1dd">wlen&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } &lt;span style="color:#ff636f">break&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">case&lt;/span> &lt;span style="color:#58a1dd">IO_REPARSE_TAG_MOUNT_POINT&lt;/span>: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">auto&lt;/span> &lt;span style="color:#58a1dd">wstr&lt;/span> &lt;span style="color:#ff636f">=&lt;/span> &lt;span style="color:#58a1dd">rbuf&lt;/span>.&lt;span style="color:#58a1dd">data&lt;/span>&lt;span style="color:#ff636f">-&amp;gt;&lt;/span>&lt;span style="color:#58a1dd">MountPointReparseBuffer&lt;/span>.&lt;span style="color:#58a1dd">PathBuffer&lt;/span> &lt;span style="color:#ff636f">+&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (&lt;span style="color:#58a1dd">rbuf&lt;/span>.&lt;span style="color:#58a1dd">data&lt;/span>&lt;span style="color:#ff636f">-&amp;gt;&lt;/span>&lt;span style="color:#58a1dd">MountPointReparseBuffer&lt;/span>.&lt;span style="color:#58a1dd">SubstituteNameOffset&lt;/span> &lt;span style="color:#ff636f">/&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">sizeof&lt;/span>(&lt;span style="color:#58a1dd">WCHAR&lt;/span>));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">auto&lt;/span> &lt;span style="color:#58a1dd">wlen&lt;/span> &lt;span style="color:#ff636f">=&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">rbuf&lt;/span>.&lt;span style="color:#58a1dd">data&lt;/span>&lt;span style="color:#ff636f">-&amp;gt;&lt;/span>&lt;span style="color:#58a1dd">MountPointReparseBuffer&lt;/span>.&lt;span style="color:#58a1dd">SubstituteNameLength&lt;/span> &lt;span style="color:#ff636f">/&lt;/span> &lt;span style="color:#ff636f">sizeof&lt;/span>(&lt;span style="color:#58a1dd">WCHAR&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#828b96;font-style:italic">/* Only treat junctions that look like \??\&amp;lt;drive&amp;gt;:\ as symlink. */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#828b96;font-style:italic">/* Junctions can also be used as mount points, like \??\Volume{&amp;lt;guid&amp;gt;}, */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#828b96;font-style:italic">/* but that&amp;#39;s confusing for programs since they wouldn&amp;#39;t be able to */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#828b96;font-style:italic">/* actually understand such a path when returned by uv_readlink(). */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#828b96;font-style:italic">/* UNC paths are never valid for junctions so we don&amp;#39;t care about them. */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">if&lt;/span> (&lt;span style="color:#ff636f">!&lt;/span>(&lt;span style="color:#58a1dd">wlen&lt;/span> &lt;span style="color:#ff636f">&amp;gt;=&lt;/span> &lt;span style="color:#a6be9d">6&lt;/span> &lt;span style="color:#ff636f">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#58a1dd">wstr&lt;/span>[&lt;span style="color:#a6be9d">0&lt;/span>] &lt;span style="color:#ff636f">==&lt;/span> &lt;span style="color:#a6be9d">L&lt;/span>&lt;span style="color:#a6be9d">&amp;#39;\\&amp;#39;&lt;/span> &lt;span style="color:#ff636f">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#58a1dd">wstr&lt;/span>[&lt;span style="color:#a6be9d">1&lt;/span>] &lt;span style="color:#ff636f">==&lt;/span> &lt;span style="color:#a6be9d">L&lt;/span>&lt;span style="color:#a6be9d">&amp;#39;?&amp;#39;&lt;/span> &lt;span style="color:#ff636f">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#58a1dd">wstr&lt;/span>[&lt;span style="color:#a6be9d">2&lt;/span>] &lt;span style="color:#ff636f">==&lt;/span> &lt;span style="color:#a6be9d">L&lt;/span>&lt;span style="color:#a6be9d">&amp;#39;?&amp;#39;&lt;/span> &lt;span style="color:#ff636f">&amp;amp;&amp;amp;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">wstr&lt;/span>[&lt;span style="color:#a6be9d">3&lt;/span>] &lt;span style="color:#ff636f">==&lt;/span> &lt;span style="color:#a6be9d">L&lt;/span>&lt;span style="color:#a6be9d">&amp;#39;\\&amp;#39;&lt;/span> &lt;span style="color:#ff636f">&amp;amp;&amp;amp;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ((&lt;span style="color:#58a1dd">wstr&lt;/span>[&lt;span style="color:#a6be9d">4&lt;/span>] &lt;span style="color:#ff636f">&amp;gt;=&lt;/span> &lt;span style="color:#a6be9d">L&lt;/span>&lt;span style="color:#a6be9d">&amp;#39;A&amp;#39;&lt;/span> &lt;span style="color:#ff636f">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#58a1dd">wstr&lt;/span>[&lt;span style="color:#a6be9d">4&lt;/span>] &lt;span style="color:#ff636f">&amp;lt;=&lt;/span> &lt;span style="color:#a6be9d">L&lt;/span>&lt;span style="color:#a6be9d">&amp;#39;Z&amp;#39;&lt;/span>) &lt;span style="color:#ff636f">||&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (&lt;span style="color:#58a1dd">wstr&lt;/span>[&lt;span style="color:#a6be9d">4&lt;/span>] &lt;span style="color:#ff636f">&amp;gt;=&lt;/span> &lt;span style="color:#a6be9d">L&lt;/span>&lt;span style="color:#a6be9d">&amp;#39;a&amp;#39;&lt;/span> &lt;span style="color:#ff636f">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#58a1dd">wstr&lt;/span>[&lt;span style="color:#a6be9d">4&lt;/span>] &lt;span style="color:#ff636f">&amp;lt;=&lt;/span> &lt;span style="color:#a6be9d">L&lt;/span>&lt;span style="color:#a6be9d">&amp;#39;z&amp;#39;&lt;/span>)) &lt;span style="color:#ff636f">&amp;amp;&amp;amp;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">wstr&lt;/span>[&lt;span style="color:#a6be9d">5&lt;/span>] &lt;span style="color:#ff636f">==&lt;/span> &lt;span style="color:#a6be9d">L&lt;/span>&lt;span style="color:#a6be9d">&amp;#39;:&amp;#39;&lt;/span> &lt;span style="color:#ff636f">&amp;amp;&amp;amp;&lt;/span> (&lt;span style="color:#58a1dd">wlen&lt;/span> &lt;span style="color:#ff636f">==&lt;/span> &lt;span style="color:#a6be9d">6&lt;/span> &lt;span style="color:#ff636f">||&lt;/span> &lt;span style="color:#58a1dd">wstr&lt;/span>[&lt;span style="color:#a6be9d">6&lt;/span>] &lt;span style="color:#ff636f">==&lt;/span> &lt;span style="color:#a6be9d">L&lt;/span>&lt;span style="color:#a6be9d">&amp;#39;\\&amp;#39;&lt;/span>))) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">SetLastError&lt;/span>(&lt;span style="color:#58a1dd">ERROR_SYMLINK_NOT_SUPPORTED&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">return&lt;/span> &lt;span style="color:#58a1dd">false&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#828b96;font-style:italic">/* Remove leading \??\ */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">wstr&lt;/span> &lt;span style="color:#ff636f">+=&lt;/span> &lt;span style="color:#a6be9d">4&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">wlen&lt;/span> &lt;span style="color:#ff636f">-=&lt;/span> &lt;span style="color:#a6be9d">4&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">realfile&lt;/span>.&lt;span style="color:#58a1dd">assign&lt;/span>(&lt;span style="color:#58a1dd">wstr&lt;/span>, &lt;span style="color:#58a1dd">wlen&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } &lt;span style="color:#ff636f">break&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">case&lt;/span> &lt;span style="color:#58a1dd">IO_REPARSE_TAG_APPEXECLINK&lt;/span>: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">if&lt;/span> (&lt;span style="color:#58a1dd">rbuf&lt;/span>.&lt;span style="color:#58a1dd">data&lt;/span>&lt;span style="color:#ff636f">-&amp;gt;&lt;/span>&lt;span style="color:#58a1dd">AppExecLinkReparseBuffer&lt;/span>.&lt;span style="color:#58a1dd">StringCount&lt;/span> &lt;span style="color:#ff636f">!=&lt;/span> &lt;span style="color:#a6be9d">0&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">LPWSTR&lt;/span> &lt;span style="color:#58a1dd">szString&lt;/span> &lt;span style="color:#ff636f">=&lt;/span> (&lt;span style="color:#58a1dd">LPWSTR&lt;/span>)&lt;span style="color:#58a1dd">rbuf&lt;/span>.&lt;span style="color:#58a1dd">data&lt;/span>&lt;span style="color:#ff636f">-&amp;gt;&lt;/span>&lt;span style="color:#58a1dd">AppExecLinkReparseBuffer&lt;/span>.&lt;span style="color:#58a1dd">StringList&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">for&lt;/span> (&lt;span style="color:#58a1dd">ULONG&lt;/span> &lt;span style="color:#58a1dd">i&lt;/span> &lt;span style="color:#ff636f">=&lt;/span> &lt;span style="color:#a6be9d">0&lt;/span>; &lt;span style="color:#58a1dd">i&lt;/span> &lt;span style="color:#ff636f">&amp;lt;&lt;/span> &lt;span style="color:#58a1dd">rbuf&lt;/span>.&lt;span style="color:#58a1dd">data&lt;/span>&lt;span style="color:#ff636f">-&amp;gt;&lt;/span>&lt;span style="color:#58a1dd">AppExecLinkReparseBuffer&lt;/span>.&lt;span style="color:#58a1dd">StringCount&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">i&lt;/span>&lt;span style="color:#ff636f">++&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">if&lt;/span> (&lt;span style="color:#58a1dd">i&lt;/span> &lt;span style="color:#ff636f">==&lt;/span> &lt;span style="color:#a6be9d">2&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">realfile&lt;/span> &lt;span style="color:#ff636f">=&lt;/span> &lt;span style="color:#58a1dd">szString&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">szString&lt;/span> &lt;span style="color:#ff636f">+=&lt;/span> &lt;span style="color:#58a1dd">wcslen&lt;/span>(&lt;span style="color:#58a1dd">szString&lt;/span>) &lt;span style="color:#ff636f">+&lt;/span> &lt;span style="color:#a6be9d">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } &lt;span style="color:#ff636f">break&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">default&lt;/span>&lt;span style="color:#ff636f">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">return&lt;/span> &lt;span style="color:#58a1dd">false&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">return&lt;/span> &lt;span style="color:#58a1dd">true&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>WSUDO 还支持内置命令 &lt;code>alias&lt;/code>，可以增加和删除别名。增加别名时如果别名存在则会被覆盖：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#1d2432;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-batch" data-lang="batch">&lt;span style="display:flex;">&lt;span>wsudo alias add ehs &lt;span style="color:#a6be9d">&amp;#34;notepad &lt;/span>&lt;span style="color:#58a1dd">%SYSTEMROOT%&lt;/span>&lt;span style="color:#a6be9d">/System32/drivers/etc/hosts&amp;#34;&lt;/span> &lt;span style="color:#a6be9d">&amp;#34;Edit Hosts&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>wsudo alias delete ehs
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="details">Details&lt;/h2>
&lt;ol>
&lt;li>&lt;a href="https://github.com/M2Team/Privexec/issues/2">Feature Request: AppContainer &amp;ldquo;Capabilities&amp;rdquo; Selection&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.hex-rays.com/products/ida/support/download_freeware.shtml">IDA Support: Freeware Version&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.codeproject.com/Articles/19165/Vista-UAC-The-Definitive-Guide">Vista UAC: The Definitive Guide&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://blogs.msdn.microsoft.com/wsl/2016/05/23/pico-process-overview/">Pico Process Overview&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://blogs.windows.com/buildingapps/2017/04/04/high-dpi-scaling-improvements-desktop-applications-windows-10-creators-update/#GhtloWCUWO8rEeRG.97">High-DPI Scaling Improvements for Desktop Applications in the Windows 10 Creators Update (1703)&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://en.wikipedia.org/wiki/Thunk">A thunk is a computer programming subroutine that is created, often automatically, to assist a call to another subroutine .&lt;/a>&lt;/li>
&lt;/ol>
- https://forcemz.net/posts/2018/2018-11-30-privexec-new/ - Copyright (c) 2009-2024 J23</description></item><item><title>基于 Git Namespace 的存储库快照方案</title><link>https://forcemz.net/posts/2018/2018-11-18-git-namespace-snapshot/</link><pubDate>Sun, 18 Nov 2018 10:00:00 +0800</pubDate><guid>https://forcemz.net/posts/2018/2018-11-18-git-namespace-snapshot/</guid><description>Charlie's Rethinking https://forcemz.net/posts/2018/2018-11-18-git-namespace-snapshot/ -&lt;h1 id="前言">前言&lt;/h1>
&lt;p>&lt;a href="https://en.wikipedia.org/wiki/Git">Git&lt;/a> 是一种分布式的版本控制系统，分布式版本控制系统的一大特性就是远程存储库和本地存储库都包含存储库的完整数据。
而集中式的版本控制系统只有在中心服务器上才会包含存储库完整的数据，本地所谓的存储库只是远程服务器特定版本的 &lt;code>checkout&lt;/code>。当中心服务器故障后，如果没有备份服务器，那么集中式的版本控制系统存储库的数据绝大部分就会被丢失。这很容易得出分布式版本控制系统的代码要必集中式的版本控制系统更加安全。&lt;/p>
&lt;p>但是，安全并不是绝对的，尤其当 &lt;code>Git&lt;/code> 被越来越多的人使用后，用户也会需要 Git 吸收集中式版本控制系统的特性来改进用户体验，这种情形下，Git 分布式版本控制系统的安全性也就面临挑战。终端用户获取的不是完整的数据，为了保证存储库的安全仍然需要备份或者镜像远程服务器上的存储库。（用户可以使用浅表克隆，单分支克隆或者使用 git vfs(GVFS) 之类的技术加快 git 访问。）&lt;/p>
&lt;p>Git 给开发者非常大的自由，git 可以修改 commit 重新提交，也可以强制推送&lt;sup>1&lt;/sup>引用到远程服务器，覆盖特定的引用，不合理的使用强制推送是非常危险的，这很容易造成代码丢失，对于企业存储库来说，合理的快照能够代码丢失后减小代码资产的损失。(但这并不是说绝对禁止强制推送&lt;sup>2&lt;/sup>)&lt;/p>
&lt;p>在 Gitee 提供了企业版后，我们也经常接收到用户对于代码资产安全的反馈，为了利用有限的资源提供更加安全的服务，存储库备份与快照方案的设计也就非常重要了。&lt;/p>
&lt;h2 id="术语及组件">术语及组件&lt;/h2>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Name&lt;/th>
&lt;th>Feature&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>Git Native Hook&lt;/td>
&lt;td>基于 C++ 编写的原生钩子，大文件检查，分支权限，消息及同步队列，&lt;a href="https://forcemz.net/git/2017/11/22/GitNativeHookDepthOptimization/">Git 原生钩子的深度优化&lt;/a>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Blaze&lt;/td>
&lt;td>基于 Go 编写的备份，GC，存储库删除队列服务&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Git Diamond&lt;/td>
&lt;td>基于 Asio 编写的内部 git 协议传输服务器&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Git Snapshot&lt;/td>
&lt;td>基于 C++ 编写的快照和恢复工具&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="gitee-目前备份方案">Gitee 目前备份方案&lt;/h2>
&lt;p>&lt;strong>Gitee&lt;/strong> 的企业存储库有两个安全策略保证其安全，分别是 &lt;code>DGIT&lt;/code> 触发式同步和 &lt;code>rsync&lt;/code> 定期快照方案。&lt;/p>
&lt;p>&lt;code>DGIT&lt;/code> 触发式同步的组件有：&lt;code>Git Native Hook&lt;/code> ，&lt;code>Redis&lt;/code>，&lt;code>Blaze&lt;/code>，&lt;code>Git Diamond&lt;/code>。GNK(Git Native Hook) 作为符号链接存在与服务器上存储库目录下的 &lt;code>hooks&lt;/code> 之中，当用户推送代码后，GNK 会被触发，在执行完授权和大文件检测后，将同步事件写入到 &lt;code>Redis&lt;/code> 队列被 &lt;code>Blaze&lt;/code> 读取，&lt;code>Blaze&lt;/code> 获取到当前服务器的 &lt;code>Slave&lt;/code> 机器，将当前存储库使用 &lt;code>git push --mirror&lt;/code> 的方式同步到 &lt;code>Slave&lt;/code> 上，传输协议为 &lt;code>git://&lt;/code>，&lt;code>Slave&lt;/code> 机器上的接收端为 &lt;code>Git Diamond&lt;/code>，&lt;code>Git Diamond&lt;/code> 是专门的 Git 内部传输服务端。&lt;/p>
&lt;p>&lt;code>rsync&lt;/code> 快照方案字面意思非常容易理解，即定期运行 &lt;code>rsync&lt;/code> 将企业存储库快照到企业备份服务器上的特定目录。而本文的优化主要也就是是取代 &lt;code>rsync&lt;/code> 的快照方案。&lt;/p>
&lt;p>举一个简单的例子： 使用 &lt;code>rsync&lt;/code> 方式备份以一个平均大小为 &lt;code>1GB&lt;/code> 的存储库来计算，90天一个周期，每 7 天备份一次，需要耗费的存储空间为 &lt;code>12.9 GB&lt;/code>。按照尊享版 100GB 空间，使用率 &lt;code>20%&lt;/code> 计算：&lt;/p>
&lt;pre tabindex="0">&lt;code>12.9 GB*20=258 GB
&lt;/code>&lt;/pre>&lt;p>一百个尊享版企业就需要 &lt;code>25.2TB&lt;/code> 存储空间。&lt;/p>
&lt;p>我们可以看到基于 &lt;code>rsync&lt;/code> 的快照方案是非常占用存储空间的。实际上，此方案不仅占用存储空间在同步的时候还很耗时，按照目前的方案，每一次快照都需要重新完整的获取存储库的所有数据，还是以前面 1GB 存储库为例，12.9个周期内，内网流量消耗为 &lt;em>~13 GB&lt;/em>。&lt;/p>
&lt;p>基于 &lt;code>rsync&lt;/code> 的快照方案也成了 &lt;code>Gitee&lt;/code> 企业备份的痛点。在前段时间，我突然想到可以使用基于 &lt;code>Git Namespace&lt;/code> 快照使用企业快照，这样一来可以大幅度的节省存储空间，于是开始开发实现，也就有了本文。&lt;/p>
&lt;h2 id="git-引用快照方案">Git 引用快照方案&lt;/h2>
&lt;p>Git 存储库的资产主要是对象和引用，对象实际上是按照哈希存储到存储库中的，在之前的备份方案中，在同一个存储库的不同备份中，存在有大量重复的对象，这些对象占用了存储空间。我们只要在不同的快照中复用这些对象即可。git 存储库中复用对象可以使用 &lt;code>GIT_NAMESPACE&lt;/code> 隔离模拟成不同的存储库，也可以使用对象借用，借用对象可能使 &lt;code>Bitmap&lt;/code> 的优化失败，并且多次快照可能会形成借用目录的链式依赖带来问题，因此在技术选型上也就选择了基于 GIT_NAMESPACE 来实现快照。&lt;/p>
&lt;p>使用引用快照方案能够节省大量的存储，下面有两个快照间隔的对比：&lt;/p>
&lt;p>90 天周期内，7天一次快照，存储库取平均值 1GB：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>方案&lt;/th>
&lt;th>存储消耗&lt;/th>
&lt;th>存储库数据流量消耗&lt;/th>
&lt;th>引用数目（平均值 1W）&lt;/th>
&lt;th>存储占比&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>rsync&lt;/td>
&lt;td>~13 GB&lt;/td>
&lt;td>13 GB&lt;/td>
&lt;td>1 * 13 W&lt;/td>
&lt;td>100%&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>git snapshot&lt;/td>
&lt;td>1 GB&lt;/td>
&lt;td>1 GB&lt;/td>
&lt;td>13 W&lt;/td>
&lt;td>~7.8%&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>git snapshot (double)&lt;/td>
&lt;td>2 GB&lt;/td>
&lt;td>2 GB&lt;/td>
&lt;td>13 W * 2&lt;/td>
&lt;td>~15.5%&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>90 天周期内，每天快照一次，存储库取平均值 1GB：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>方案&lt;/th>
&lt;th>存储消耗&lt;/th>
&lt;th>存储库数据流量消耗&lt;/th>
&lt;th>引用数目（平均值 1W）&lt;/th>
&lt;th>存储占比&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>rsync&lt;/td>
&lt;td>90 GB&lt;/td>
&lt;td>90 GB&lt;/td>
&lt;td>1 * 90 W&lt;/td>
&lt;td>100%&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>git snapshot&lt;/td>
&lt;td>1 GB&lt;/td>
&lt;td>1 GB&lt;/td>
&lt;td>90 W&lt;/td>
&lt;td>~1.1%&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>git snapshot (double)&lt;/td>
&lt;td>2 GB&lt;/td>
&lt;td>2 GB&lt;/td>
&lt;td>90 W * 2&lt;/td>
&lt;td>~2.2%&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="git-snapshot-原理">Git Snapshot 原理&lt;/h3>
&lt;p>在快照存储库时，如果存储库不存在，我们先需要将存储库以镜像的方式克隆下来，命令行如下（git clone 支持目录递归创建）：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#1d2432;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>git clone git@gitee.com/oscstudio/git.git --mirror --bare /home/git/enbk/os/oscstudio/git.git
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>如果存储库存在，则是用 &lt;code>fetch&lt;/code>，命令行如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#1d2432;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>git fetch git@gitee.com/oscstudio/git.git &lt;span style="color:#a6be9d">&amp;#39;+refs/heads/*:refs/heads/*&amp;#39;&lt;/span> &lt;span style="color:#a6be9d">&amp;#39;+refs/tags/*:refs/tags/*&amp;#39;&lt;/span> &lt;span style="color:#a6be9d">&amp;#39;+refs/fetches/*:refs/fetches/*&amp;#39;&lt;/span> &lt;span style="color:#a6be9d">&amp;#39;+refs/pull/*:refs/pull/*&amp;#39;&lt;/span> &lt;span style="color:#a6be9d">&amp;#39;+refs/pull/*:refs/pull/*&amp;#39;&lt;/span> &lt;span style="color:#a6be9d">&amp;#39;+refs/git-as-svn/*:refs/git-as-svn/*&amp;#39;&lt;/span> --prune
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>其中不同前缀的引用实际类型不一样：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Prefix&lt;/th>
&lt;th>Type&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>refs/heads/&lt;/td>
&lt;td>常规分支&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>refs/tags&lt;/td>
&lt;td>标签&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>refs/fetches/&lt;/td>
&lt;td>PR 功能相关&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>refs/pull/&lt;/td>
&lt;td>PR 功能相关&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>refs/git-as-svn/&lt;/td>
&lt;td>svn 功能相关&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>与 &lt;code>Subversion&lt;/code> 相比，Git 创建分支非常轻量级，而在 Git 中，分支实际上对应的是以 &lt;code>refs/heads/&lt;/code> 开头的引用。那么引用的创建同样应该是轻量级的。所以我们只需要将 &lt;code>fetch&lt;/code> 命令中的引用创建基于名称空间的快照即可：&lt;/p>
&lt;p>&lt;strong>快照变换&lt;/strong>：&lt;/p>
&lt;pre tabindex="0">&lt;code>refname ---&amp;gt; refs/namespaces/yyyy-MM-dd/refname
&lt;/code>&lt;/pre>&lt;p>创建 Git 引用可以使用 git 命令行也可以使用 &lt;code>libgit2&lt;/code>。命令行创建引用如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#1d2432;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ git update-ref refs/namespaces/2018-11-18/refs/heads/master 1a410efbd13591db07496601ebc7a059dd55cfe9
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>使用 libgit2 API: &lt;a href="https://libgit2.org/libgit2/#HEAD/group/reference/git_reference_create">git_reference_create&lt;/a> 创建引用代码如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#1d2432;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c++" data-lang="c++">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#58a1dd">git_reference&lt;/span> &lt;span style="color:#ff636f">*&lt;/span>&lt;span style="color:#58a1dd">ref&lt;/span>&lt;span style="color:#ff636f">=&lt;/span>&lt;span style="color:#ff636f">nullptr&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff636f">if&lt;/span>(&lt;span style="color:#58a1dd">git_reference_create&lt;/span>(&lt;span style="color:#ff636f">&amp;amp;&lt;/span>&lt;span style="color:#58a1dd">ref&lt;/span>,&lt;span style="color:#58a1dd">repo&lt;/span>,&lt;span style="color:#a6be9d">&amp;#34;refs/namespaces/2018-11-18/refs/heads/master&amp;#34;&lt;/span>,&lt;span style="color:#58a1dd">id&lt;/span>,&lt;span style="color:#a6be9d">1&lt;/span>,&lt;span style="color:#a6be9d">&amp;#34;cretae&amp;#34;&lt;/span>)&lt;span style="color:#ff636f">!=&lt;/span>&lt;span style="color:#a6be9d">0&lt;/span>){
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">auto&lt;/span> &lt;span style="color:#58a1dd">err&lt;/span>&lt;span style="color:#ff636f">=&lt;/span>&lt;span style="color:#58a1dd">giterr_last&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">fprintf&lt;/span>(&lt;span style="color:#58a1dd">stderr&lt;/span>,&lt;span style="color:#a6be9d">&amp;#34;create error %s&lt;/span>&lt;span style="color:#a6be9d">\n&lt;/span>&lt;span style="color:#a6be9d">&amp;#34;&lt;/span>,&lt;span style="color:#58a1dd">err&lt;/span>&lt;span style="color:#ff636f">-&amp;gt;&lt;/span>&lt;span style="color:#58a1dd">kmessage&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">return&lt;/span> &lt;span style="color:#58a1dd">false&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>当引用数目比较少时无论是使用命令行还是使用 API 都是不错的选择，但像 Gitee 的源码存储库 Gitlab 这样的项目引用超过 &lt;strong>1W&lt;/strong> 个时，无论是 API 还是命令行都将变得无比缓慢。这很容易理解，创建一次快照需要创建同等数目的引用，libgit2 创建引用需要在磁盘上创建同等数目的松散引用，在创建引用前需要创建 refname.lock 这样的文件避免与其他 git 进程或者 API 发生访问冲突。这样下来创建文件的系统调用也就是难以接受的。而 &lt;code>git&lt;/code> 命令行在这点上也是无能为力的。最开始我直接使用 &lt;code>libgit2&lt;/code> API，当创建到第十次快照时，一次快照需要花费几分钟，这肯定时不能接受的。&lt;/p>
&lt;p>专门的企业快照机器实际上并不需要运行其他业务，也就不用担心创建 Git 引用的安全问题，这时候做个取舍就可以实现优化，比如直接创建引用，引用存储在磁盘上分为 &lt;code>loose references&lt;/code> 和 &lt;code>packed references&lt;/code>。如果还是创建松散引用势必需要创建数量巨多的文件，这样一来优化非常优先，因此我们应该直接编写 &lt;code>packed-refs&lt;/code>，&lt;code>packed-refs&lt;/code> 格式即 &lt;code>$COMMITID SP $REFNAME LF&lt;/code>，非常简单。我们按照要求格式化输出即可。&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-packed-refs" data-lang="packed-refs"># pack-refs with: peeled fully-peeled sorted
$COMMITID $REFNAME\n
&lt;/code>&lt;/pre>&lt;p>创建 &lt;code>packed-refs&lt;/code> 之前先使用 &lt;code>git pack-refs --all --prune&lt;/code> 命令将原有的引用打包到一起，然后扫描旧的 &lt;code>packed-refs&lt;/code> 写入到新的 &lt;code>packed-refs&lt;/code> ，成功后替换文件即可。&lt;/p>
&lt;p>这里需要注意几点：&lt;/p>
&lt;ol>
&lt;li>packed-refs 引用名需要按照字母排序，否则引用会找不到。&lt;/li>
&lt;li>使用内存映射技术减少拷贝非常必要。&lt;/li>
&lt;li>可以使用 C++17 std::string_view 这样的容器方便解析。存储在容器中也可以使用 &lt;code>string_view&lt;/code>。&lt;/li>
&lt;li>HEAD 也需要快照，我们的做法时将其放在 &lt;code>.git/_enbk/$NS&lt;/code> 路径下。&lt;/li>
&lt;li>为了保证引用被删除时感知不到，可以先从远程服务器运行 &lt;code>ls-remote&lt;/code> 获得引用列表，写入快照时删除不存在的即可。为了支持检测，可以使用 &lt;code>absl::flat_hash_set&lt;/code> 之类的无序支持异构查找容器。&lt;/li>
&lt;/ol>
&lt;p>经测试，快照的时间减少幅度非常大，但引用数量达到 &lt;code>24W&lt;/code> 时，快照时间为 300 多毫秒（机械硬盘)。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#1d2432;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-txt" data-lang="txt">&lt;span style="display:flex;">&lt;span>./bin/git-snapshot bk git@localhost:oschina/gitlab.git -n 2018-11-30 -V
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>username: (none)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>use privatekey: /home/example/.ssh/id_rsa
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>url: git@localhost:oschina/gitlab.git
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>remote git@localhost:oschina/gitlab.git has 10721 refs
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>克隆到纯仓库 &amp;#39;/home/git/repositories/snapshot/os/oschina/gitlab.git&amp;#39;...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>remote: 枚举对象: 497921, 完成.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>remote: 对象计数中: 100% (497921/497921), 完成.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>remote: 压缩对象中: 100% (99609/99609), 完成.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>remote: 总共 497921 （差异 393964），复用 497921 （差异 393964）
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>接收对象中: 100% (497921/497921), 211.43 MiB | 51.58 MiB/s, 完成.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>处理 delta 中: 100% (393964/393964), 完成.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>snapshot write 21442 refs
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>apply /home/git/repositories/snapshot/os/oschina/gitlab.git HEAD to refs/heads/master
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>ls-remote time: 88 ms
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>prepare time: 12684 ms
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>snapshot time: 17 ms
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>total time: 12789 ms
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="存储库从快照恢复">存储库从快照恢复&lt;/h3>
&lt;p>恢复存储库的时候使用名称空间隔离，然后 clone 到特定的目录即可。命令如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#1d2432;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>git -c protocol.ext.allow&lt;span style="color:#ff636f">=&lt;/span>always clone &lt;span style="color:#a6be9d">&amp;#39;ext::git --namespace=yyyy-MM-dd %s /path/bk/dir.git&amp;#39;&lt;/span> /path/save/dir.git --mirror
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="总结">总结&lt;/h2>
&lt;p>在研究此方案时，需要对 Git 的相关技术细节非常清楚，比如，笔者在编写 &lt;code>packed-refs&lt;/code> 时，最开始未了解到 &lt;code>packed-refs&lt;/code> 引用是按字母排序的，直接写入导致一些引用异常，写入失败。&lt;/p>
&lt;h2 id="其他">其他&lt;/h2>
&lt;ol>
&lt;li>
&lt;p>Git 服务器并不知道用户是否是强制推送，除非开启了 &lt;code>receive.denyNonFastForwards=true&lt;/code>，&lt;code>receive-pack&lt;/code> 通过 commit 回溯扫描检查才能知道用户是否强制推送（这通常会减缓远程服务器的响应速度，并且与一次性推送的 commit 数目密切相关）。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>合理的强推有时候是必要的，比如使用强推删除涉密信息，修改提交内容，合并提交等等， 笔者在给 Git 贡献代码时就多次使用强推。 &lt;a href="https://github.com/gitgitgadget/git/pull/69">PR: http: add support selecting http version&lt;/a> 中也强推了好几次。&lt;/p>
&lt;/li>
&lt;/ol>
- https://forcemz.net/posts/2018/2018-11-18-git-namespace-snapshot/ - Copyright (c) 2009-2024 J23</description></item><item><title>Clangbuilder 已支持自动构建 CURL</title><link>https://forcemz.net/posts/2018/2018-11-15-clangbuilder-win-curl/</link><pubDate>Thu, 15 Nov 2018 10:00:00 +0800</pubDate><guid>https://forcemz.net/posts/2018/2018-11-15-clangbuilder-win-curl/</guid><description>Charlie's Rethinking https://forcemz.net/posts/2018/2018-11-15-clangbuilder-win-curl/ -&lt;h1 id="curl">cURL&lt;/h1>
&lt;p>cURL 是一个非常著名的开源 URL 数据传输工具，支持 &lt;code>HTTP&lt;/code>,&lt;code>HTTPS&lt;/code>,&lt;code>FTP&lt;/code>,&lt;code>SCP&lt;/code>,&lt;code>SFTP&lt;/code>,&lt;code>Telnet&lt;/code> 等协议。绝大多数操作系统都自带了，也包括 Windows 10 17134/17763。但系统自带的版本通常都不会及时更新到最新版本，而 &lt;code>cURL&lt;/code> 是一个非常活跃的项目，大约2个月就会发布一个新版本。每一次更新都会修复大量 bug，新增很多新特性，比如最近增加了 &lt;code>DOH&lt;/code> 更好的 &lt;code>TLS1.3&lt;/code> 支持。&lt;/p>
&lt;p>系统自带的 &lt;code>curl -V&lt;/code> 输出：&lt;/p>
&lt;pre tabindex="0">&lt;code>curl 7.55.1 (Windows) libcurl/7.55.1 WinSSL
Release-Date: [unreleased]
Protocols: dict file ftp ftps http https imap imaps pop3 pop3s smtp smtps telnet tftp
Features: AsynchDNS IPv6 Largefile SSPI Kerberos SPNEGO NTLM SSL
&lt;/code>&lt;/pre>&lt;p>实际上，在 cURL 下载页面 &lt;a href="https://curl.haxx.se/download.html">https://curl.haxx.se/download.html&lt;/a> Windows 平台有好几个二进制发行包，官方也提供了二进制下载：&lt;a href="https://curl.haxx.se/windows/">https://curl.haxx.se/windows/&lt;/a> 基于 &lt;code>Mingw64&lt;/code> 构建。在 Github 上有构建项目：&lt;a href="https://github.com/curl/curl-for-win">https://github.com/curl/curl-for-win&lt;/a>。而这个发行版也是 curl 一个开发者个人项目纳入到 curl 中的。&lt;/p>
&lt;p>我们还可以使用 &lt;code>vcpkg&lt;/code> 安装 &lt;code>curl&lt;/code>，但截至目前，&lt;code>vcpkg&lt;/code> 的 &lt;code>OpenSSL&lt;/code> 版本依然是 &lt;strong>1.0.2p&lt;/strong> 无法支持 &lt;code>TLS 1.3&lt;/code>。&lt;/p>
&lt;p>笔者想要使用 &lt;code>Visual C++&lt;/code> 构建静态链接支持 &lt;code>TLS 1.3&lt;/code> 的 &lt;code>curl&lt;/code>，最后发现都得自己一步一步来，于是就写了构建脚本。&lt;/p>
&lt;p>话不多说，一切尽在代码中。Github 源代码地址：&lt;a href="https://github.com/fstudio/clangbuilder/blob/526183ade63a4a9b8bd2f4b99872536c9da9e997/sources/wincurl/wincurl.ps1">sources/wincurl/wincurl.ps1&lt;/a>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#1d2432;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-powershell" data-lang="powershell">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">#!/usr/bin/env pwsh&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic"># Require Clangbuilder install perl&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff636f">param&lt;/span>(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> [&lt;span style="color:#58a1dd">String&lt;/span>]&lt;span style="color:#58a1dd">$WD&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic"># Import version info&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>. &lt;span style="color:#a6be9d">&amp;#34;&lt;/span>&lt;span style="color:#58a1dd">$PSScriptRoot&lt;/span>&lt;span style="color:#a6be9d">/version.ps1&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic"># thanks https://github.com/curl/curl-for-win&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#58a1dd">Write-Host&lt;/span> &lt;span style="color:#a6be9d">&amp;#34;Download urls:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6be9d">zlib: &lt;/span>&lt;span style="color:#58a1dd">$ZLIB_URL&lt;/span>&lt;span style="color:#a6be9d">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6be9d">openssl: &lt;/span>&lt;span style="color:#58a1dd">$OPENSSL_URL&lt;/span>&lt;span style="color:#a6be9d">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6be9d">brotli: &lt;/span>&lt;span style="color:#58a1dd">$BROTLI_URL&lt;/span>&lt;span style="color:#a6be9d">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6be9d">libssh2: &lt;/span>&lt;span style="color:#58a1dd">$LIBSSH2_URL&lt;/span>&lt;span style="color:#a6be9d">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6be9d">nghttp2: &lt;/span>&lt;span style="color:#58a1dd">$NGHTTP2_URL&lt;/span>&lt;span style="color:#a6be9d">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6be9d">curl: &lt;/span>&lt;span style="color:#58a1dd">$CURL_URL&lt;/span>&lt;span style="color:#a6be9d">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">################################################## Found commands&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>[&lt;span style="color:#58a1dd">Net.ServicePointManager&lt;/span>]::&lt;span style="color:#58a1dd">SecurityProtocol&lt;/span> = [&lt;span style="color:#58a1dd">Net.SecurityProtocolType&lt;/span>]::&lt;span style="color:#58a1dd">Tls12&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#58a1dd">Import-Module&lt;/span> &lt;span style="color:#58a1dd">-Name&lt;/span> &lt;span style="color:#a6be9d">&amp;#34;&lt;/span>&lt;span style="color:#58a1dd">$PSScriptRoot&lt;/span>&lt;span style="color:#a6be9d">/Utility&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#58a1dd">$clexe&lt;/span> = &lt;span style="color:#58a1dd">Get-Command&lt;/span> &lt;span style="color:#58a1dd">-CommandType&lt;/span> &lt;span style="color:#58a1dd">Application&lt;/span> &lt;span style="color:#a6be9d">&amp;#34;cl&amp;#34;&lt;/span> &lt;span style="color:#58a1dd">-ErrorAction&lt;/span> &lt;span style="color:#58a1dd">SilentlyContinue&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff636f">if&lt;/span> (&lt;span style="color:#58a1dd">$null&lt;/span> &lt;span style="color:#ff636f">-eq&lt;/span> &lt;span style="color:#58a1dd">$clexe&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">Write-Host&lt;/span> &lt;span style="color:#58a1dd">-ForegroundColor&lt;/span> &lt;span style="color:#58a1dd">Red&lt;/span> &lt;span style="color:#a6be9d">&amp;#34;Please install Visual Studio 2017 or BuildTools (C++) and Initialzie DevEnv&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">exit&lt;/span> &lt;span style="color:#a6be9d">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#58a1dd">Write-Host&lt;/span> &lt;span style="color:#a6be9d">&amp;#34;Find cl.exe: &lt;/span>$(&lt;span style="color:#58a1dd">$clexe&lt;/span>.&lt;span style="color:#58a1dd">Version&lt;/span>)&lt;span style="color:#a6be9d">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#58a1dd">$tarexe&lt;/span> = &lt;span style="color:#58a1dd">Findcommand&lt;/span> &lt;span style="color:#58a1dd">-Name&lt;/span> &lt;span style="color:#a6be9d">&amp;#34;tar&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#58a1dd">$decompress&lt;/span> = &lt;span style="color:#a6be9d">&amp;#34;-xvf&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff636f">if&lt;/span> (&lt;span style="color:#58a1dd">$null&lt;/span> &lt;span style="color:#ff636f">-eq&lt;/span> &lt;span style="color:#58a1dd">$tarexe&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">$tarexe&lt;/span> = &lt;span style="color:#58a1dd">Findcommand&lt;/span> &lt;span style="color:#58a1dd">-Name&lt;/span> &lt;span style="color:#a6be9d">&amp;#34;cmake&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">if&lt;/span> (&lt;span style="color:#58a1dd">$null&lt;/span> &lt;span style="color:#ff636f">-eq&lt;/span> &lt;span style="color:#58a1dd">$tarexe&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">Write-Host&lt;/span> &lt;span style="color:#58a1dd">-ForegroundColor&lt;/span> &lt;span style="color:#58a1dd">Red&lt;/span> &lt;span style="color:#a6be9d">&amp;#34;Please install tar or cmake.&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">exit&lt;/span> &lt;span style="color:#a6be9d">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">$decompress&lt;/span> = &lt;span style="color:#a6be9d">&amp;#34;-E tar -xvf&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#58a1dd">Write-Host&lt;/span> &lt;span style="color:#58a1dd">-ForegroundColor&lt;/span> &lt;span style="color:#58a1dd">Green&lt;/span> &lt;span style="color:#a6be9d">&amp;#34;Use &lt;/span>&lt;span style="color:#58a1dd">$tarexe&lt;/span>&lt;span style="color:#a6be9d"> as tar&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff636f">Function&lt;/span> &lt;span style="color:#58a1dd">DecompressTar&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">param&lt;/span>(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> [&lt;span style="color:#58a1dd">String&lt;/span>]&lt;span style="color:#58a1dd">$URL&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> [&lt;span style="color:#58a1dd">String&lt;/span>]&lt;span style="color:#58a1dd">$File&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> [&lt;span style="color:#58a1dd">String&lt;/span>]&lt;span style="color:#58a1dd">$Hash&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> )
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">if&lt;/span> (!(&lt;span style="color:#58a1dd">Test-Path&lt;/span> &lt;span style="color:#58a1dd">$File&lt;/span>)) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">if&lt;/span> (!(&lt;span style="color:#58a1dd">WinGet&lt;/span> &lt;span style="color:#58a1dd">-URL&lt;/span> &lt;span style="color:#58a1dd">$URL&lt;/span> &lt;span style="color:#58a1dd">-O&lt;/span> &lt;span style="color:#58a1dd">$File&lt;/span>)) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">return&lt;/span> &lt;span style="color:#58a1dd">$false&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">else&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">if&lt;/span> ((&lt;span style="color:#58a1dd">Get-FileHash&lt;/span> &lt;span style="color:#58a1dd">-Algorithm&lt;/span> &lt;span style="color:#58a1dd">SHA256&lt;/span> &lt;span style="color:#58a1dd">$File&lt;/span>).&lt;span style="color:#58a1dd">Hash&lt;/span> &lt;span style="color:#ff636f">-ne&lt;/span> &lt;span style="color:#58a1dd">$Hash&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">Write-Host&lt;/span> &lt;span style="color:#58a1dd">-ForegroundColor&lt;/span> &lt;span style="color:#58a1dd">Yellow&lt;/span> &lt;span style="color:#a6be9d">&amp;#34;&lt;/span>&lt;span style="color:#58a1dd">$File&lt;/span>&lt;span style="color:#a6be9d"> exists and hash not match &lt;/span>&lt;span style="color:#58a1dd">$Hash&lt;/span>&lt;span style="color:#a6be9d">.&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">Remove-Item&lt;/span> &lt;span style="color:#58a1dd">-Force&lt;/span> &lt;span style="color:#58a1dd">$File&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">if&lt;/span> (!(&lt;span style="color:#58a1dd">WinGet&lt;/span> &lt;span style="color:#58a1dd">-URL&lt;/span> &lt;span style="color:#58a1dd">$URL&lt;/span> &lt;span style="color:#58a1dd">-O&lt;/span> &lt;span style="color:#58a1dd">$File&lt;/span>)) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">return&lt;/span> &lt;span style="color:#58a1dd">$false&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">else&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">Write-Host&lt;/span> &lt;span style="color:#58a1dd">-ForegroundColor&lt;/span> &lt;span style="color:#58a1dd">Yellow&lt;/span> &lt;span style="color:#a6be9d">&amp;#34;&lt;/span>&lt;span style="color:#58a1dd">$File&lt;/span>&lt;span style="color:#a6be9d"> exists and hash is match. use it.&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">if&lt;/span> ((&lt;span style="color:#58a1dd">Get-FileHash&lt;/span> &lt;span style="color:#58a1dd">-Algorithm&lt;/span> &lt;span style="color:#58a1dd">SHA256&lt;/span> &lt;span style="color:#58a1dd">$File&lt;/span>).&lt;span style="color:#58a1dd">Hash&lt;/span> &lt;span style="color:#ff636f">-ne&lt;/span> &lt;span style="color:#58a1dd">$Hash&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">Remove-Item&lt;/span> &lt;span style="color:#58a1dd">-Force&lt;/span> &lt;span style="color:#58a1dd">$File&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">if&lt;/span> (!(&lt;span style="color:#58a1dd">WinGet&lt;/span> &lt;span style="color:#58a1dd">-URL&lt;/span> &lt;span style="color:#58a1dd">$URL&lt;/span> &lt;span style="color:#58a1dd">-O&lt;/span> &lt;span style="color:#58a1dd">$File&lt;/span>)) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">return&lt;/span> &lt;span style="color:#58a1dd">$false&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">if&lt;/span> ((&lt;span style="color:#58a1dd">Exec&lt;/span> &lt;span style="color:#58a1dd">-FilePath&lt;/span> &lt;span style="color:#58a1dd">$tarexe&lt;/span> &lt;span style="color:#58a1dd">-Argv&lt;/span> &lt;span style="color:#a6be9d">&amp;#34;&lt;/span>&lt;span style="color:#58a1dd">$decompress&lt;/span>&lt;span style="color:#a6be9d"> &lt;/span>&lt;span style="color:#58a1dd">$File&lt;/span>&lt;span style="color:#a6be9d">&amp;#34;&lt;/span>) &lt;span style="color:#ff636f">-ne&lt;/span> &lt;span style="color:#a6be9d">0&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">Write-Host&lt;/span> &lt;span style="color:#58a1dd">-ForegroundColor&lt;/span> &lt;span style="color:#58a1dd">Red&lt;/span> &lt;span style="color:#a6be9d">&amp;#34;Decompress &lt;/span>&lt;span style="color:#58a1dd">$File&lt;/span>&lt;span style="color:#a6be9d"> failed&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">return&lt;/span> &lt;span style="color:#58a1dd">$false&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">return&lt;/span> &lt;span style="color:#58a1dd">$true&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#58a1dd">$curlexe&lt;/span> = &lt;span style="color:#58a1dd">Findcommand&lt;/span> &lt;span style="color:#58a1dd">-Name&lt;/span> &lt;span style="color:#a6be9d">&amp;#34;curl&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff636f">if&lt;/span> (&lt;span style="color:#58a1dd">$null&lt;/span> &lt;span style="color:#ff636f">-eq&lt;/span> &lt;span style="color:#58a1dd">$curlexe&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">Write-Host&lt;/span> &lt;span style="color:#58a1dd">-ForegroundColor&lt;/span> &lt;span style="color:#58a1dd">Red&lt;/span> &lt;span style="color:#a6be9d">&amp;#34;Please install curl or upgrade to Windows 10 17134 or Later.&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">return&lt;/span> &lt;span style="color:#a6be9d">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#58a1dd">Write-Host&lt;/span> &lt;span style="color:#58a1dd">-ForegroundColor&lt;/span> &lt;span style="color:#58a1dd">Green&lt;/span> &lt;span style="color:#a6be9d">&amp;#34;Find curl install: &lt;/span>&lt;span style="color:#58a1dd">$curlexe&lt;/span>&lt;span style="color:#a6be9d">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#58a1dd">$cmakeexe&lt;/span> = &lt;span style="color:#58a1dd">Findcommand&lt;/span> &lt;span style="color:#58a1dd">-Name&lt;/span> &lt;span style="color:#a6be9d">&amp;#34;cmake&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff636f">if&lt;/span> (&lt;span style="color:#58a1dd">$null&lt;/span> &lt;span style="color:#ff636f">-eq&lt;/span> &lt;span style="color:#58a1dd">$cmakeexe&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">Write-Host&lt;/span> &lt;span style="color:#58a1dd">-ForegroundColor&lt;/span> &lt;span style="color:#58a1dd">Red&lt;/span> &lt;span style="color:#a6be9d">&amp;#34;Please install cmake.&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">return&lt;/span> &lt;span style="color:#a6be9d">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#58a1dd">Write-Host&lt;/span> &lt;span style="color:#58a1dd">-ForegroundColor&lt;/span> &lt;span style="color:#58a1dd">Green&lt;/span> &lt;span style="color:#a6be9d">&amp;#34;Find cmake install: &lt;/span>&lt;span style="color:#58a1dd">$cmakeexe&lt;/span>&lt;span style="color:#a6be9d">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#58a1dd">$Ninjaexe&lt;/span> = &lt;span style="color:#58a1dd">Findcommand&lt;/span> &lt;span style="color:#58a1dd">-Name&lt;/span> &lt;span style="color:#a6be9d">&amp;#34;ninja&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff636f">if&lt;/span> (&lt;span style="color:#58a1dd">$null&lt;/span> &lt;span style="color:#ff636f">-eq&lt;/span> &lt;span style="color:#58a1dd">$Ninjaexe&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">Write-Host&lt;/span> &lt;span style="color:#58a1dd">-ForegroundColor&lt;/span> &lt;span style="color:#58a1dd">Red&lt;/span> &lt;span style="color:#a6be9d">&amp;#34;Please install ninja.&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">return&lt;/span> &lt;span style="color:#a6be9d">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#58a1dd">Write-Host&lt;/span> &lt;span style="color:#58a1dd">-ForegroundColor&lt;/span> &lt;span style="color:#58a1dd">Green&lt;/span> &lt;span style="color:#a6be9d">&amp;#34;Find cmake install: &lt;/span>&lt;span style="color:#58a1dd">$Ninjaexe&lt;/span>&lt;span style="color:#a6be9d">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#58a1dd">$Patchexe&lt;/span> = &lt;span style="color:#58a1dd">Findcommand&lt;/span> &lt;span style="color:#58a1dd">-Name&lt;/span> &lt;span style="color:#a6be9d">&amp;#34;patch&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff636f">if&lt;/span> (&lt;span style="color:#58a1dd">$null&lt;/span> &lt;span style="color:#ff636f">-eq&lt;/span> &lt;span style="color:#58a1dd">$Patchexe&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">$Gitexe&lt;/span> = &lt;span style="color:#58a1dd">Findcommand&lt;/span> &lt;span style="color:#58a1dd">-Name&lt;/span> &lt;span style="color:#a6be9d">&amp;#34;git&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">if&lt;/span> (&lt;span style="color:#58a1dd">$null&lt;/span> &lt;span style="color:#ff636f">-eq&lt;/span> &lt;span style="color:#58a1dd">$Gitexe&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">Write-Host&lt;/span> &lt;span style="color:#58a1dd">-ForegroundColor&lt;/span> &lt;span style="color:#58a1dd">Red&lt;/span> &lt;span style="color:#a6be9d">&amp;#34;Please install git for windows (or PortableGit).&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">return&lt;/span> &lt;span style="color:#a6be9d">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">$gitinstall&lt;/span> = &lt;span style="color:#58a1dd">Split-Path&lt;/span> &lt;span style="color:#58a1dd">-Parent&lt;/span> (&lt;span style="color:#58a1dd">Split-Path&lt;/span> &lt;span style="color:#58a1dd">-Parent&lt;/span> &lt;span style="color:#58a1dd">$gitexe&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">if&lt;/span> ([&lt;span style="color:#58a1dd">String&lt;/span>]::&lt;span style="color:#58a1dd">IsNullOrEmpty&lt;/span>(&lt;span style="color:#58a1dd">$gitinstall&lt;/span>)) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">Write-Host&lt;/span> &lt;span style="color:#58a1dd">-ForegroundColor&lt;/span> &lt;span style="color:#58a1dd">Red&lt;/span> &lt;span style="color:#a6be9d">&amp;#34;Please install git for windows (or PortableGit).&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">return&lt;/span> &lt;span style="color:#a6be9d">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">$patchx&lt;/span> = &lt;span style="color:#58a1dd">Join-Path&lt;/span> &lt;span style="color:#58a1dd">$gitinstall&lt;/span> &lt;span style="color:#a6be9d">&amp;#34;usr/bin/patch.exe&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">Write-Host&lt;/span> &lt;span style="color:#a6be9d">&amp;#34;Try to find patch from &lt;/span>&lt;span style="color:#58a1dd">$patchx&lt;/span>&lt;span style="color:#a6be9d">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">if&lt;/span> (!(&lt;span style="color:#58a1dd">Test-Path&lt;/span> &lt;span style="color:#58a1dd">$patchx&lt;/span>)) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">$xinstall&lt;/span> = &lt;span style="color:#58a1dd">Split-Path&lt;/span> &lt;span style="color:#58a1dd">-Parent&lt;/span> &lt;span style="color:#58a1dd">$gitinstall&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">if&lt;/span> ([&lt;span style="color:#58a1dd">String&lt;/span>]::&lt;span style="color:#58a1dd">IsNullOrEmpty&lt;/span>(&lt;span style="color:#58a1dd">$xinstall&lt;/span>)) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">Write-Host&lt;/span> &lt;span style="color:#58a1dd">-ForegroundColor&lt;/span> &lt;span style="color:#58a1dd">Red&lt;/span> &lt;span style="color:#a6be9d">&amp;#34;Please install git for windows (or PortableGit).&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">return&lt;/span> &lt;span style="color:#a6be9d">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">$patchx&lt;/span> = &lt;span style="color:#58a1dd">Join-Path&lt;/span> &lt;span style="color:#58a1dd">$xinstall&lt;/span> &lt;span style="color:#a6be9d">&amp;#34;usr/bin/patch.exe&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">if&lt;/span> (!(&lt;span style="color:#58a1dd">Test-Path&lt;/span> &lt;span style="color:#58a1dd">$patchx&lt;/span>)) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">Write-Host&lt;/span> &lt;span style="color:#58a1dd">-ForegroundColor&lt;/span> &lt;span style="color:#58a1dd">Red&lt;/span> &lt;span style="color:#a6be9d">&amp;#34;Please install git for windows (or PortableGit).&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">return&lt;/span> &lt;span style="color:#a6be9d">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">$Patchexe&lt;/span> = &lt;span style="color:#58a1dd">$patchx&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#58a1dd">Write-Host&lt;/span> &lt;span style="color:#58a1dd">-ForegroundColor&lt;/span> &lt;span style="color:#58a1dd">Green&lt;/span> &lt;span style="color:#a6be9d">&amp;#34;Found patch install: &lt;/span>&lt;span style="color:#58a1dd">$Patchexe&lt;/span>&lt;span style="color:#a6be9d">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#58a1dd">$Perlexe&lt;/span> = &lt;span style="color:#58a1dd">Findcommand&lt;/span> &lt;span style="color:#58a1dd">-Name&lt;/span> &lt;span style="color:#a6be9d">&amp;#34;perl&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff636f">if&lt;/span> (&lt;span style="color:#58a1dd">$null&lt;/span> &lt;span style="color:#ff636f">-eq&lt;/span> &lt;span style="color:#58a1dd">$Perlexe&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">Write-Host&lt;/span> &lt;span style="color:#58a1dd">-ForegroundColor&lt;/span> &lt;span style="color:#58a1dd">Red&lt;/span> &lt;span style="color:#a6be9d">&amp;#34;Please add perl to your environment.&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">exit&lt;/span> &lt;span style="color:#a6be9d">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#58a1dd">Write-Host&lt;/span> &lt;span style="color:#58a1dd">-ForegroundColor&lt;/span> &lt;span style="color:#58a1dd">Green&lt;/span> &lt;span style="color:#a6be9d">&amp;#34;Found perl install: &lt;/span>&lt;span style="color:#58a1dd">$Perlexe&lt;/span>&lt;span style="color:#a6be9d">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">########################################################## Check WD&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff636f">if&lt;/span> ([&lt;span style="color:#58a1dd">String&lt;/span>]::&lt;span style="color:#58a1dd">IsNullOrEmpty&lt;/span>(&lt;span style="color:#58a1dd">$WD&lt;/span>)) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">$cbroot&lt;/span> = &lt;span style="color:#58a1dd">Split-Path&lt;/span> &lt;span style="color:#58a1dd">-Parent&lt;/span> (&lt;span style="color:#58a1dd">Split-Path&lt;/span> &lt;span style="color:#58a1dd">-Path&lt;/span> &lt;span style="color:#58a1dd">$PSScriptRoot&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">$WD&lt;/span> = &lt;span style="color:#58a1dd">Join-Path&lt;/span> &lt;span style="color:#58a1dd">$cbroot&lt;/span> &lt;span style="color:#a6be9d">&amp;#34;out/curl&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff636f">if&lt;/span> (!(&lt;span style="color:#58a1dd">MkdirAll&lt;/span> &lt;span style="color:#58a1dd">-Dir&lt;/span> &lt;span style="color:#58a1dd">$WD&lt;/span>)) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">exit&lt;/span> &lt;span style="color:#a6be9d">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#58a1dd">Write-Host&lt;/span> &lt;span style="color:#58a1dd">-ForegroundColor&lt;/span> &lt;span style="color:#58a1dd">Cyan&lt;/span> &lt;span style="color:#a6be9d">&amp;#34;Build curl on windows use&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#58a1dd">Set-Location&lt;/span> &lt;span style="color:#58a1dd">$WD&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#58a1dd">$Prefix&lt;/span> = &lt;span style="color:#58a1dd">Join-Path&lt;/span> &lt;span style="color:#58a1dd">$WD&lt;/span> &lt;span style="color:#a6be9d">&amp;#34;build&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#58a1dd">$CURLOUT&lt;/span> = &lt;span style="color:#58a1dd">Join-Path&lt;/span> &lt;span style="color:#58a1dd">$WD&lt;/span> &lt;span style="color:#a6be9d">&amp;#34;out&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#58a1dd">Write-Host&lt;/span> &lt;span style="color:#a6be9d">&amp;#34;we will deploy curl to: &lt;/span>&lt;span style="color:#58a1dd">$CURLPrefix&lt;/span>&lt;span style="color:#a6be9d">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff636f">if&lt;/span> (!(&lt;span style="color:#58a1dd">MkdirAll&lt;/span> &lt;span style="color:#58a1dd">-Dir&lt;/span> &lt;span style="color:#58a1dd">$Prefix&lt;/span>)) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">exit&lt;/span> &lt;span style="color:#a6be9d">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">################################################## Zlib&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff636f">if&lt;/span> (!(&lt;span style="color:#58a1dd">DecompressTar&lt;/span> &lt;span style="color:#58a1dd">-URL&lt;/span> &lt;span style="color:#58a1dd">$ZLIB_URL&lt;/span> &lt;span style="color:#ff636f">-File&lt;/span> &lt;span style="color:#a6be9d">&amp;#34;&lt;/span>&lt;span style="color:#58a1dd">$ZLIB_FILENAME&lt;/span>&lt;span style="color:#a6be9d">.tar.gz&amp;#34;&lt;/span> &lt;span style="color:#58a1dd">-Hash&lt;/span> &lt;span style="color:#58a1dd">$ZLIB_HASH&lt;/span>)) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">exit&lt;/span> &lt;span style="color:#a6be9d">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#58a1dd">$ZLIBDIR&lt;/span> = &lt;span style="color:#58a1dd">Join-Path&lt;/span> &lt;span style="color:#58a1dd">$PWD&lt;/span> &lt;span style="color:#58a1dd">$ZLIB_FILENAME&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#58a1dd">$ZLIBBD&lt;/span> = &lt;span style="color:#58a1dd">Join-Path&lt;/span> &lt;span style="color:#58a1dd">$ZLIBDIR&lt;/span> &lt;span style="color:#a6be9d">&amp;#34;build&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#58a1dd">Write-Host&lt;/span> &lt;span style="color:#58a1dd">-ForegroundColor&lt;/span> &lt;span style="color:#58a1dd">Yellow&lt;/span> &lt;span style="color:#a6be9d">&amp;#34;Apply zlib.patch ...&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#58a1dd">$ZLIB_PACTH&lt;/span> = &lt;span style="color:#58a1dd">Join-Path&lt;/span> &lt;span style="color:#58a1dd">$PSScriptRoot&lt;/span> &lt;span style="color:#a6be9d">&amp;#34;patch/zlib.patch&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#58a1dd">$ec&lt;/span> = &lt;span style="color:#58a1dd">Exec&lt;/span> &lt;span style="color:#58a1dd">-FilePath&lt;/span> &lt;span style="color:#58a1dd">$Patchexe&lt;/span> &lt;span style="color:#58a1dd">-Argv&lt;/span> &lt;span style="color:#a6be9d">&amp;#34;-Nbp1 -i &lt;/span>&lt;span style="color:#a6be9d">`&amp;#34;&lt;/span>&lt;span style="color:#58a1dd">$ZLIB_PACTH&lt;/span>&lt;span style="color:#a6be9d">`&amp;#34;&lt;/span>&lt;span style="color:#a6be9d">&amp;#34;&lt;/span> &lt;span style="color:#58a1dd">-WD&lt;/span> &lt;span style="color:#58a1dd">$ZLIBDIR&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff636f">if&lt;/span> (&lt;span style="color:#58a1dd">$ec&lt;/span> &lt;span style="color:#ff636f">-ne&lt;/span> &lt;span style="color:#a6be9d">0&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">Write-Host&lt;/span> &lt;span style="color:#58a1dd">-ForegroundColor&lt;/span> &lt;span style="color:#58a1dd">Red&lt;/span> &lt;span style="color:#a6be9d">&amp;#34;Apply &lt;/span>&lt;span style="color:#58a1dd">$ZLIB_PACTH&lt;/span>&lt;span style="color:#a6be9d"> failed&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff636f">if&lt;/span> (!(&lt;span style="color:#58a1dd">MkdirAll&lt;/span> &lt;span style="color:#58a1dd">-Dir&lt;/span> &lt;span style="color:#58a1dd">$ZLIBBD&lt;/span>)) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">exit&lt;/span> &lt;span style="color:#a6be9d">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#58a1dd">$cmakeflags&lt;/span> = &lt;span style="color:#a6be9d">&amp;#34;-GNinja &amp;#34;&lt;/span> + `
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6be9d">&amp;#34;-DCMAKE_BUILD_TYPE=Release &amp;#34;&lt;/span> + `
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6be9d">&amp;#34;&lt;/span>&lt;span style="color:#a6be9d">`&amp;#34;&lt;/span>&lt;span style="color:#a6be9d">-DCMAKE_INSTALL_PREFIX=&lt;/span>&lt;span style="color:#58a1dd">$Prefix&lt;/span>&lt;span style="color:#a6be9d">`&amp;#34;&lt;/span>&lt;span style="color:#a6be9d"> &amp;#34;&lt;/span> + `
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6be9d">&amp;#34;-DSKIP_INSTALL_FILES=ON &amp;#34;&lt;/span> + `
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6be9d">&amp;#34;-DSKIP_BUILD_EXAMPLES=ON &amp;#34;&lt;/span> + `
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6be9d">&amp;#34;-DBUILD_SHARED_LIBS=OFF &lt;/span>&lt;span style="color:#a6be9d">`&amp;#34;&lt;/span>&lt;span style="color:#58a1dd">$ZLIBDIR&lt;/span>&lt;span style="color:#a6be9d">`&amp;#34;&lt;/span>&lt;span style="color:#a6be9d">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#58a1dd">$ec&lt;/span> = &lt;span style="color:#58a1dd">Exec&lt;/span> &lt;span style="color:#58a1dd">-FilePath&lt;/span> &lt;span style="color:#58a1dd">$cmakeexe&lt;/span> &lt;span style="color:#58a1dd">-Argv&lt;/span> &lt;span style="color:#58a1dd">$cmakeflags&lt;/span> &lt;span style="color:#58a1dd">-WD&lt;/span> &lt;span style="color:#58a1dd">$ZLIBBD&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff636f">if&lt;/span> (&lt;span style="color:#58a1dd">$ec&lt;/span> &lt;span style="color:#ff636f">-ne&lt;/span> &lt;span style="color:#a6be9d">0&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">Write-Host&lt;/span> &lt;span style="color:#58a1dd">-ForegroundColor&lt;/span> &lt;span style="color:#58a1dd">Red&lt;/span> &lt;span style="color:#a6be9d">&amp;#34;zlib: create build.ninja error&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">return&lt;/span> &lt;span style="color:#a6be9d">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#58a1dd">$ec&lt;/span> = &lt;span style="color:#58a1dd">Exec&lt;/span> &lt;span style="color:#58a1dd">-FilePath&lt;/span> &lt;span style="color:#58a1dd">$Ninjaexe&lt;/span> &lt;span style="color:#58a1dd">-Argv&lt;/span> &lt;span style="color:#a6be9d">&amp;#34;all&amp;#34;&lt;/span> &lt;span style="color:#58a1dd">-WD&lt;/span> &lt;span style="color:#58a1dd">$ZLIBBD&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff636f">if&lt;/span> (&lt;span style="color:#58a1dd">$ec&lt;/span> &lt;span style="color:#ff636f">-ne&lt;/span> &lt;span style="color:#a6be9d">0&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">Write-Host&lt;/span> &lt;span style="color:#58a1dd">-ForegroundColor&lt;/span> &lt;span style="color:#58a1dd">Red&lt;/span> &lt;span style="color:#a6be9d">&amp;#34;zlib: build error&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">return&lt;/span> &lt;span style="color:#a6be9d">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#58a1dd">$ec&lt;/span> = &lt;span style="color:#58a1dd">Exec&lt;/span> &lt;span style="color:#58a1dd">-FilePath&lt;/span> &lt;span style="color:#58a1dd">$Ninjaexe&lt;/span> &lt;span style="color:#58a1dd">-Argv&lt;/span> &lt;span style="color:#a6be9d">&amp;#34;install&amp;#34;&lt;/span> &lt;span style="color:#58a1dd">-WD&lt;/span> &lt;span style="color:#58a1dd">$ZLIBBD&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff636f">if&lt;/span> (&lt;span style="color:#58a1dd">$ec&lt;/span> &lt;span style="color:#ff636f">-ne&lt;/span> &lt;span style="color:#a6be9d">0&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">Write-Host&lt;/span> &lt;span style="color:#58a1dd">-ForegroundColor&lt;/span> &lt;span style="color:#58a1dd">Red&lt;/span> &lt;span style="color:#a6be9d">&amp;#34;zlib: install error&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">return&lt;/span> &lt;span style="color:#a6be9d">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#58a1dd">Rename-Item&lt;/span> &lt;span style="color:#58a1dd">-Path&lt;/span> &lt;span style="color:#a6be9d">&amp;#34;&lt;/span>&lt;span style="color:#58a1dd">$Prefix&lt;/span>&lt;span style="color:#a6be9d">/lib/zlibstatic.lib&amp;#34;&lt;/span> &lt;span style="color:#a6be9d">&amp;#34;&lt;/span>&lt;span style="color:#58a1dd">$Prefix&lt;/span>&lt;span style="color:#a6be9d">/lib/zlib.lib&amp;#34;&lt;/span> &lt;span style="color:#58a1dd">-Force&lt;/span> &lt;span style="color:#58a1dd">-ErrorAction&lt;/span> &lt;span style="color:#58a1dd">SilentlyContinue&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">#Copy-Item -Path &amp;#34;$ZLIBDIR/LICENSE&amp;#34; &lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">##################################################### OpenSSL&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#58a1dd">Write-Host&lt;/span> &lt;span style="color:#58a1dd">-ForegroundColor&lt;/span> &lt;span style="color:#58a1dd">Yellow&lt;/span> &lt;span style="color:#a6be9d">&amp;#34;Build OpenSSL &lt;/span>&lt;span style="color:#58a1dd">$OPENSSL_VERSION&lt;/span>&lt;span style="color:#a6be9d">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff636f">if&lt;/span> (!(&lt;span style="color:#58a1dd">DecompressTar&lt;/span> &lt;span style="color:#58a1dd">-URL&lt;/span> &lt;span style="color:#58a1dd">$OPENSSL_URL&lt;/span> &lt;span style="color:#ff636f">-File&lt;/span> &lt;span style="color:#a6be9d">&amp;#34;&lt;/span>&lt;span style="color:#58a1dd">$OPENSSL_FILE&lt;/span>&lt;span style="color:#a6be9d">.tar.gz&amp;#34;&lt;/span> &lt;span style="color:#58a1dd">-Hash&lt;/span> &lt;span style="color:#58a1dd">$OPENSSL_HASH&lt;/span>)) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">exit&lt;/span> &lt;span style="color:#a6be9d">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic"># Update env&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#58a1dd">$env:INCLUDE&lt;/span> = &lt;span style="color:#a6be9d">&amp;#34;&lt;/span>&lt;span style="color:#58a1dd">$Prefix&lt;/span>&lt;span style="color:#a6be9d">\include;&lt;/span>&lt;span style="color:#58a1dd">$env:INCLUDE&lt;/span>&lt;span style="color:#a6be9d">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#58a1dd">$env:LIB&lt;/span> = &lt;span style="color:#a6be9d">&amp;#34;&lt;/span>&lt;span style="color:#58a1dd">$Prefix&lt;/span>&lt;span style="color:#a6be9d">\lib;&lt;/span>&lt;span style="color:#58a1dd">$env:LIB&lt;/span>&lt;span style="color:#a6be9d">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic"># perl Configure no-shared no-ssl3 enable-capieng -utf-8&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#58a1dd">$opensslflags&lt;/span> = &lt;span style="color:#a6be9d">&amp;#34;Configure no-shared no-unit-test no-tests no-ssl3 enable-capieng -utf-8 &amp;#34;&lt;/span> + `
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6be9d">&amp;#34;VC-WIN64A &lt;/span>&lt;span style="color:#a6be9d">`&amp;#34;&lt;/span>&lt;span style="color:#a6be9d">--prefix=&lt;/span>&lt;span style="color:#58a1dd">$Prefix&lt;/span>&lt;span style="color:#a6be9d">`&amp;#34;&lt;/span>&lt;span style="color:#a6be9d"> &lt;/span>&lt;span style="color:#a6be9d">`&amp;#34;&lt;/span>&lt;span style="color:#a6be9d">--openssldir=&lt;/span>&lt;span style="color:#58a1dd">$Prefix&lt;/span>&lt;span style="color:#a6be9d">`&amp;#34;&lt;/span>&lt;span style="color:#a6be9d">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#58a1dd">$Nasmexe&lt;/span> = &lt;span style="color:#58a1dd">Findcommand&lt;/span> &lt;span style="color:#58a1dd">-Name&lt;/span> &lt;span style="color:#a6be9d">&amp;#34;nasm&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff636f">if&lt;/span> (&lt;span style="color:#58a1dd">$null&lt;/span> &lt;span style="color:#ff636f">-eq&lt;/span> &lt;span style="color:#58a1dd">$Nasmexe&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">Write-Host&lt;/span> &lt;span style="color:#58a1dd">-ForegroundColor&lt;/span> &lt;span style="color:#58a1dd">Yellow&lt;/span> &lt;span style="color:#a6be9d">&amp;#34;Not found nasm, build openssl no-asm&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">$opensslflags&lt;/span> += &lt;span style="color:#a6be9d">&amp;#34; no-asm&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#58a1dd">$openssldir&lt;/span> = &lt;span style="color:#58a1dd">Join-Path&lt;/span> &lt;span style="color:#58a1dd">$WD&lt;/span> &lt;span style="color:#58a1dd">$OPENSSL_FILE&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#58a1dd">$ec&lt;/span> = &lt;span style="color:#58a1dd">Exec&lt;/span> &lt;span style="color:#58a1dd">-FilePath&lt;/span> &lt;span style="color:#58a1dd">$Perlexe&lt;/span> &lt;span style="color:#58a1dd">-Argv&lt;/span> &lt;span style="color:#58a1dd">$opensslflags&lt;/span> &lt;span style="color:#58a1dd">-WD&lt;/span> &lt;span style="color:#58a1dd">$openssldir&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff636f">if&lt;/span> (&lt;span style="color:#58a1dd">$ec&lt;/span> &lt;span style="color:#ff636f">-ne&lt;/span> &lt;span style="color:#a6be9d">0&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">Write-Host&lt;/span> &lt;span style="color:#58a1dd">-ForegroundColor&lt;/span> &lt;span style="color:#58a1dd">Red&lt;/span> &lt;span style="color:#a6be9d">&amp;#34;openssl: config error&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">return&lt;/span> &lt;span style="color:#a6be9d">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#58a1dd">$ec&lt;/span> = &lt;span style="color:#58a1dd">Exec&lt;/span> &lt;span style="color:#58a1dd">-FilePath&lt;/span> &lt;span style="color:#58a1dd">nmake&lt;/span> &lt;span style="color:#58a1dd">-Argv&lt;/span> &lt;span style="color:#a6be9d">&amp;#34;-f makefile&amp;#34;&lt;/span> &lt;span style="color:#58a1dd">-WD&lt;/span> &lt;span style="color:#58a1dd">$openssldir&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff636f">if&lt;/span> (&lt;span style="color:#58a1dd">$ec&lt;/span> &lt;span style="color:#ff636f">-ne&lt;/span> &lt;span style="color:#a6be9d">0&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">Write-Host&lt;/span> &lt;span style="color:#58a1dd">-ForegroundColor&lt;/span> &lt;span style="color:#58a1dd">Red&lt;/span> &lt;span style="color:#a6be9d">&amp;#34;openssl: build error&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">return&lt;/span> &lt;span style="color:#a6be9d">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#58a1dd">$ec&lt;/span> = &lt;span style="color:#58a1dd">Exec&lt;/span> &lt;span style="color:#58a1dd">-FilePath&lt;/span> &lt;span style="color:#58a1dd">nmake&lt;/span> &lt;span style="color:#58a1dd">-Argv&lt;/span> &lt;span style="color:#a6be9d">&amp;#34;-f makefile install_sw&amp;#34;&lt;/span> &lt;span style="color:#58a1dd">-WD&lt;/span> &lt;span style="color:#58a1dd">$openssldir&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff636f">if&lt;/span> (&lt;span style="color:#58a1dd">$ec&lt;/span> &lt;span style="color:#ff636f">-ne&lt;/span> &lt;span style="color:#a6be9d">0&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">Write-Host&lt;/span> &lt;span style="color:#58a1dd">-ForegroundColor&lt;/span> &lt;span style="color:#58a1dd">Red&lt;/span> &lt;span style="color:#a6be9d">&amp;#34;openssl: install_sw error&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">return&lt;/span> &lt;span style="color:#a6be9d">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic"># build brotli static&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">######################################################### Brotli&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#58a1dd">Write-Host&lt;/span> &lt;span style="color:#58a1dd">-ForegroundColor&lt;/span> &lt;span style="color:#58a1dd">Yellow&lt;/span> &lt;span style="color:#a6be9d">&amp;#34;Build brotli &lt;/span>&lt;span style="color:#58a1dd">$BROTLI_VERSION&lt;/span>&lt;span style="color:#a6be9d">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff636f">if&lt;/span> (!(&lt;span style="color:#58a1dd">DecompressTar&lt;/span> &lt;span style="color:#58a1dd">-URL&lt;/span> &lt;span style="color:#58a1dd">$BROTLI_URL&lt;/span> &lt;span style="color:#ff636f">-File&lt;/span> &lt;span style="color:#a6be9d">&amp;#34;&lt;/span>&lt;span style="color:#58a1dd">$BROTLI_FILE&lt;/span>&lt;span style="color:#a6be9d">.tar.gz&amp;#34;&lt;/span> &lt;span style="color:#58a1dd">-Hash&lt;/span> &lt;span style="color:#58a1dd">$BROTLI_HASH&lt;/span>)) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">exit&lt;/span> &lt;span style="color:#a6be9d">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#58a1dd">$BDIR&lt;/span> = &lt;span style="color:#58a1dd">Join-Path&lt;/span> &lt;span style="color:#58a1dd">$WD&lt;/span> &lt;span style="color:#58a1dd">$BROTLI_FILE&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#58a1dd">$BBUILD&lt;/span> = &lt;span style="color:#58a1dd">Join-Path&lt;/span> &lt;span style="color:#58a1dd">$BDIR&lt;/span> &lt;span style="color:#a6be9d">&amp;#34;out&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#58a1dd">$BPATCH&lt;/span> = &lt;span style="color:#58a1dd">Join-Path&lt;/span> &lt;span style="color:#58a1dd">$PSScriptRoot&lt;/span> &lt;span style="color:#a6be9d">&amp;#34;patch/brotli.patch&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff636f">if&lt;/span> (!(&lt;span style="color:#58a1dd">MkdirAll&lt;/span> &lt;span style="color:#58a1dd">-Dir&lt;/span> &lt;span style="color:#58a1dd">$BBUILD&lt;/span>)) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">exit&lt;/span> &lt;span style="color:#a6be9d">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#58a1dd">$ec&lt;/span> = &lt;span style="color:#58a1dd">Exec&lt;/span> &lt;span style="color:#58a1dd">-FilePath&lt;/span> &lt;span style="color:#58a1dd">$Patchexe&lt;/span> &lt;span style="color:#58a1dd">-Argv&lt;/span> &lt;span style="color:#a6be9d">&amp;#34;-Nbp1 -i &lt;/span>&lt;span style="color:#a6be9d">`&amp;#34;&lt;/span>&lt;span style="color:#58a1dd">$BPATCH&lt;/span>&lt;span style="color:#a6be9d">`&amp;#34;&lt;/span>&lt;span style="color:#a6be9d">&amp;#34;&lt;/span> &lt;span style="color:#58a1dd">-WD&lt;/span> &lt;span style="color:#58a1dd">$BDIR&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff636f">if&lt;/span> (&lt;span style="color:#58a1dd">$ec&lt;/span> &lt;span style="color:#ff636f">-ne&lt;/span> &lt;span style="color:#a6be9d">0&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">Write-Host&lt;/span> &lt;span style="color:#58a1dd">-ForegroundColor&lt;/span> &lt;span style="color:#58a1dd">Red&lt;/span> &lt;span style="color:#a6be9d">&amp;#34;Apply &lt;/span>&lt;span style="color:#58a1dd">$BPATCH&lt;/span>&lt;span style="color:#a6be9d"> failed&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#58a1dd">$brotliflags&lt;/span> = &lt;span style="color:#a6be9d">&amp;#34;-GNinja -DCMAKE_BUILD_TYPE=Release -DBUILD_SHARED_LIBS=OFF &amp;#34;&lt;/span> + `
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6be9d">&amp;#34;-DBROTLI_DISABLE_TESTS=ON &lt;/span>&lt;span style="color:#a6be9d">`&amp;#34;&lt;/span>&lt;span style="color:#a6be9d">-DCMAKE_INSTALL_PREFIX=&lt;/span>&lt;span style="color:#58a1dd">$Prefix&lt;/span>&lt;span style="color:#a6be9d">`&amp;#34;&lt;/span>&lt;span style="color:#a6be9d"> ..&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#58a1dd">$ec&lt;/span> = &lt;span style="color:#58a1dd">Exec&lt;/span> &lt;span style="color:#58a1dd">-FilePath&lt;/span> &lt;span style="color:#58a1dd">$cmakeexe&lt;/span> &lt;span style="color:#58a1dd">-Argv&lt;/span> &lt;span style="color:#58a1dd">$brotliflags&lt;/span> &lt;span style="color:#58a1dd">-WD&lt;/span> &lt;span style="color:#58a1dd">$BBUILD&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff636f">if&lt;/span> (&lt;span style="color:#58a1dd">$ec&lt;/span> &lt;span style="color:#ff636f">-ne&lt;/span> &lt;span style="color:#a6be9d">0&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">Write-Host&lt;/span> &lt;span style="color:#58a1dd">-ForegroundColor&lt;/span> &lt;span style="color:#58a1dd">Red&lt;/span> &lt;span style="color:#a6be9d">&amp;#34;brotli: create build.ninja error&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">return&lt;/span> &lt;span style="color:#a6be9d">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#58a1dd">$ec&lt;/span> = &lt;span style="color:#58a1dd">Exec&lt;/span> &lt;span style="color:#58a1dd">-FilePath&lt;/span> &lt;span style="color:#58a1dd">$Ninjaexe&lt;/span> &lt;span style="color:#58a1dd">-Argv&lt;/span> &lt;span style="color:#a6be9d">&amp;#34;all&amp;#34;&lt;/span> &lt;span style="color:#58a1dd">-WD&lt;/span> &lt;span style="color:#58a1dd">$BBUILD&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff636f">if&lt;/span> (&lt;span style="color:#58a1dd">$ec&lt;/span> &lt;span style="color:#ff636f">-ne&lt;/span> &lt;span style="color:#a6be9d">0&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">Write-Host&lt;/span> &lt;span style="color:#58a1dd">-ForegroundColor&lt;/span> &lt;span style="color:#58a1dd">Red&lt;/span> &lt;span style="color:#a6be9d">&amp;#34;brotli: build error&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">return&lt;/span> &lt;span style="color:#a6be9d">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#58a1dd">$ec&lt;/span> = &lt;span style="color:#58a1dd">Exec&lt;/span> &lt;span style="color:#58a1dd">-FilePath&lt;/span> &lt;span style="color:#58a1dd">$Ninjaexe&lt;/span> &lt;span style="color:#58a1dd">-Argv&lt;/span> &lt;span style="color:#a6be9d">&amp;#34;install&amp;#34;&lt;/span> &lt;span style="color:#58a1dd">-WD&lt;/span> &lt;span style="color:#58a1dd">$BBUILD&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff636f">if&lt;/span> (&lt;span style="color:#58a1dd">$ec&lt;/span> &lt;span style="color:#ff636f">-ne&lt;/span> &lt;span style="color:#a6be9d">0&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">Write-Host&lt;/span> &lt;span style="color:#58a1dd">-ForegroundColor&lt;/span> &lt;span style="color:#58a1dd">Red&lt;/span> &lt;span style="color:#a6be9d">&amp;#34;brotli: install error&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">return&lt;/span> &lt;span style="color:#a6be9d">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">## Fix curl not exists&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#58a1dd">Move-Item&lt;/span> &lt;span style="color:#58a1dd">-Path&lt;/span> &lt;span style="color:#a6be9d">&amp;#34;&lt;/span>&lt;span style="color:#58a1dd">$Prefix&lt;/span>&lt;span style="color:#a6be9d">/lib/brotlicommon-static.lib&amp;#34;&lt;/span> &lt;span style="color:#a6be9d">&amp;#34;&lt;/span>&lt;span style="color:#58a1dd">$Prefix&lt;/span>&lt;span style="color:#a6be9d">/lib/brotlicommon.lib&amp;#34;&lt;/span> &lt;span style="color:#58a1dd">-Force&lt;/span> &lt;span style="color:#58a1dd">-ErrorAction&lt;/span> &lt;span style="color:#58a1dd">SilentlyContinue&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#58a1dd">Move-Item&lt;/span> &lt;span style="color:#58a1dd">-Path&lt;/span> &lt;span style="color:#a6be9d">&amp;#34;&lt;/span>&lt;span style="color:#58a1dd">$Prefix&lt;/span>&lt;span style="color:#a6be9d">/lib/brotlidec-static.lib&amp;#34;&lt;/span> &lt;span style="color:#a6be9d">&amp;#34;&lt;/span>&lt;span style="color:#58a1dd">$Prefix&lt;/span>&lt;span style="color:#a6be9d">/lib/brotlidec.lib&amp;#34;&lt;/span> &lt;span style="color:#58a1dd">-Force&lt;/span> &lt;span style="color:#58a1dd">-ErrorAction&lt;/span> &lt;span style="color:#58a1dd">SilentlyContinue&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#58a1dd">Move-Item&lt;/span> &lt;span style="color:#58a1dd">-Path&lt;/span> &lt;span style="color:#a6be9d">&amp;#34;&lt;/span>&lt;span style="color:#58a1dd">$Prefix&lt;/span>&lt;span style="color:#a6be9d">/lib/brotlienc-static.lib&amp;#34;&lt;/span> &lt;span style="color:#a6be9d">&amp;#34;&lt;/span>&lt;span style="color:#58a1dd">$Prefix&lt;/span>&lt;span style="color:#a6be9d">/lib/brotlienc.lib&amp;#34;&lt;/span> &lt;span style="color:#58a1dd">-Force&lt;/span> &lt;span style="color:#58a1dd">-ErrorAction&lt;/span> &lt;span style="color:#58a1dd">SilentlyContinue&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">######################################################### Nghttp2&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#58a1dd">Write-Host&lt;/span> &lt;span style="color:#58a1dd">-ForegroundColor&lt;/span> &lt;span style="color:#58a1dd">Yellow&lt;/span> &lt;span style="color:#a6be9d">&amp;#34;Build nghttp2 &lt;/span>&lt;span style="color:#58a1dd">$NGHTTP2_VERSION&lt;/span>&lt;span style="color:#a6be9d">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff636f">if&lt;/span> (!(&lt;span style="color:#58a1dd">DecompressTar&lt;/span> &lt;span style="color:#58a1dd">-URL&lt;/span> &lt;span style="color:#58a1dd">$NGHTTP2_URL&lt;/span> &lt;span style="color:#ff636f">-File&lt;/span> &lt;span style="color:#a6be9d">&amp;#34;&lt;/span>&lt;span style="color:#58a1dd">$NGHTTP2_FILE&lt;/span>&lt;span style="color:#a6be9d">.tar.gz&amp;#34;&lt;/span> &lt;span style="color:#58a1dd">-Hash&lt;/span> &lt;span style="color:#58a1dd">$NGHTTP2_HASH&lt;/span>)) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">exit&lt;/span> &lt;span style="color:#a6be9d">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#58a1dd">$NGDIR&lt;/span> = &lt;span style="color:#58a1dd">Join-Path&lt;/span> &lt;span style="color:#58a1dd">$WD&lt;/span> &lt;span style="color:#58a1dd">$NGHTTP2_FILE&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#58a1dd">$NGBUILD&lt;/span> = &lt;span style="color:#58a1dd">Join-Path&lt;/span> &lt;span style="color:#58a1dd">$NGDIR&lt;/span> &lt;span style="color:#a6be9d">&amp;#34;build&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#58a1dd">$NGPATCH&lt;/span> = &lt;span style="color:#58a1dd">Join-Path&lt;/span> &lt;span style="color:#58a1dd">$PSScriptRoot&lt;/span> &lt;span style="color:#a6be9d">&amp;#34;patch/nghttp2.patch&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff636f">if&lt;/span> (!(&lt;span style="color:#58a1dd">MkdirAll&lt;/span> &lt;span style="color:#58a1dd">-Dir&lt;/span> &lt;span style="color:#58a1dd">$NGBUILD&lt;/span>)) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">exit&lt;/span> &lt;span style="color:#a6be9d">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#58a1dd">$ec&lt;/span> = &lt;span style="color:#58a1dd">Exec&lt;/span> &lt;span style="color:#58a1dd">-FilePath&lt;/span> &lt;span style="color:#58a1dd">$Patchexe&lt;/span> &lt;span style="color:#58a1dd">-Argv&lt;/span> &lt;span style="color:#a6be9d">&amp;#34;-Nbp1 -i &lt;/span>&lt;span style="color:#a6be9d">`&amp;#34;&lt;/span>&lt;span style="color:#58a1dd">$NGPATCH&lt;/span>&lt;span style="color:#a6be9d">`&amp;#34;&lt;/span>&lt;span style="color:#a6be9d">&amp;#34;&lt;/span> &lt;span style="color:#58a1dd">-WD&lt;/span> &lt;span style="color:#58a1dd">$NGDIR&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff636f">if&lt;/span> (&lt;span style="color:#58a1dd">$ec&lt;/span> &lt;span style="color:#ff636f">-ne&lt;/span> &lt;span style="color:#a6be9d">0&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">Write-Host&lt;/span> &lt;span style="color:#58a1dd">-ForegroundColor&lt;/span> &lt;span style="color:#58a1dd">Red&lt;/span> &lt;span style="color:#a6be9d">&amp;#34;Apply &lt;/span>&lt;span style="color:#58a1dd">$NGPATCH&lt;/span>&lt;span style="color:#a6be9d"> failed&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#58a1dd">$ngflags&lt;/span> = &lt;span style="color:#a6be9d">&amp;#34;-GNinja -DCMAKE_BUILD_TYPE=Release -DBUILD_SHARED_LIBS=OFF &amp;#34;&lt;/span> + `
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6be9d">&amp;#34;-DENABLE_LIB_ONLY=ON -DENABLE_ASIO_LIB=OFF &lt;/span>&lt;span style="color:#a6be9d">`&amp;#34;&lt;/span>&lt;span style="color:#a6be9d">-DCMAKE_INSTALL_PREFIX=&lt;/span>&lt;span style="color:#58a1dd">$Prefix&lt;/span>&lt;span style="color:#a6be9d">`&amp;#34;&lt;/span>&lt;span style="color:#a6be9d"> ..&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#58a1dd">$ec&lt;/span> = &lt;span style="color:#58a1dd">Exec&lt;/span> &lt;span style="color:#58a1dd">-FilePath&lt;/span> &lt;span style="color:#58a1dd">$cmakeexe&lt;/span> &lt;span style="color:#58a1dd">-Argv&lt;/span> &lt;span style="color:#58a1dd">$ngflags&lt;/span> &lt;span style="color:#58a1dd">-WD&lt;/span> &lt;span style="color:#58a1dd">$NGBUILD&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff636f">if&lt;/span> (&lt;span style="color:#58a1dd">$ec&lt;/span> &lt;span style="color:#ff636f">-ne&lt;/span> &lt;span style="color:#a6be9d">0&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">Write-Host&lt;/span> &lt;span style="color:#58a1dd">-ForegroundColor&lt;/span> &lt;span style="color:#58a1dd">Red&lt;/span> &lt;span style="color:#a6be9d">&amp;#34;nghttp2: create build.ninja error&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">return&lt;/span> &lt;span style="color:#a6be9d">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#58a1dd">$ec&lt;/span> = &lt;span style="color:#58a1dd">Exec&lt;/span> &lt;span style="color:#58a1dd">-FilePath&lt;/span> &lt;span style="color:#58a1dd">$Ninjaexe&lt;/span> &lt;span style="color:#58a1dd">-Argv&lt;/span> &lt;span style="color:#a6be9d">&amp;#34;all&amp;#34;&lt;/span> &lt;span style="color:#58a1dd">-WD&lt;/span> &lt;span style="color:#58a1dd">$NGBUILD&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff636f">if&lt;/span> (&lt;span style="color:#58a1dd">$ec&lt;/span> &lt;span style="color:#ff636f">-ne&lt;/span> &lt;span style="color:#a6be9d">0&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">Write-Host&lt;/span> &lt;span style="color:#58a1dd">-ForegroundColor&lt;/span> &lt;span style="color:#58a1dd">Red&lt;/span> &lt;span style="color:#a6be9d">&amp;#34;nghttp2: build error&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">return&lt;/span> &lt;span style="color:#a6be9d">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#58a1dd">$ec&lt;/span> = &lt;span style="color:#58a1dd">Exec&lt;/span> &lt;span style="color:#58a1dd">-FilePath&lt;/span> &lt;span style="color:#58a1dd">$Ninjaexe&lt;/span> &lt;span style="color:#58a1dd">-Argv&lt;/span> &lt;span style="color:#a6be9d">&amp;#34;install&amp;#34;&lt;/span> &lt;span style="color:#58a1dd">-WD&lt;/span> &lt;span style="color:#58a1dd">$NGBUILD&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff636f">if&lt;/span> (&lt;span style="color:#58a1dd">$ec&lt;/span> &lt;span style="color:#ff636f">-ne&lt;/span> &lt;span style="color:#a6be9d">0&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">Write-Host&lt;/span> &lt;span style="color:#58a1dd">-ForegroundColor&lt;/span> &lt;span style="color:#58a1dd">Red&lt;/span> &lt;span style="color:#a6be9d">&amp;#34;nghttp2: install error&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">return&lt;/span> &lt;span style="color:#a6be9d">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">############################################################# Libssh2&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#58a1dd">Write-Host&lt;/span> &lt;span style="color:#58a1dd">-ForegroundColor&lt;/span> &lt;span style="color:#58a1dd">Yellow&lt;/span> &lt;span style="color:#a6be9d">&amp;#34;Build libssh2 &lt;/span>&lt;span style="color:#58a1dd">$LIBSSH2_VERSION&lt;/span>&lt;span style="color:#a6be9d">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff636f">if&lt;/span> (!(&lt;span style="color:#58a1dd">DecompressTar&lt;/span> &lt;span style="color:#58a1dd">-URL&lt;/span> &lt;span style="color:#58a1dd">$LIBSSH2_URL&lt;/span> &lt;span style="color:#ff636f">-File&lt;/span> &lt;span style="color:#a6be9d">&amp;#34;&lt;/span>&lt;span style="color:#58a1dd">$LIBSSH2_FILE&lt;/span>&lt;span style="color:#a6be9d">.tar.gz&amp;#34;&lt;/span> &lt;span style="color:#58a1dd">-Hash&lt;/span> &lt;span style="color:#58a1dd">$LIBSSH2_HASH&lt;/span>)) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">exit&lt;/span> &lt;span style="color:#a6be9d">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#58a1dd">$LIBSSH2DIR&lt;/span> = &lt;span style="color:#58a1dd">Join-Path&lt;/span> &lt;span style="color:#58a1dd">$WD&lt;/span> &lt;span style="color:#58a1dd">$LIBSSH2_FILE&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#58a1dd">$LIBSSH2BUILD&lt;/span> = &lt;span style="color:#58a1dd">Join-Path&lt;/span> &lt;span style="color:#58a1dd">$LIBSSH2DIR&lt;/span> &lt;span style="color:#a6be9d">&amp;#34;build&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#58a1dd">$LIBSSH2PATCH&lt;/span> = &lt;span style="color:#58a1dd">Join-Path&lt;/span> &lt;span style="color:#58a1dd">$PSScriptRoot&lt;/span> &lt;span style="color:#a6be9d">&amp;#34;patch/libssh2.patch&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff636f">if&lt;/span> (!(&lt;span style="color:#58a1dd">MkdirAll&lt;/span> &lt;span style="color:#58a1dd">-Dir&lt;/span> &lt;span style="color:#58a1dd">$LIBSSH2BUILD&lt;/span>)) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">exit&lt;/span> &lt;span style="color:#a6be9d">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#58a1dd">$ec&lt;/span> = &lt;span style="color:#58a1dd">Exec&lt;/span> &lt;span style="color:#58a1dd">-FilePath&lt;/span> &lt;span style="color:#58a1dd">$Patchexe&lt;/span> &lt;span style="color:#58a1dd">-Argv&lt;/span> &lt;span style="color:#a6be9d">&amp;#34;-Nbp1 -i &lt;/span>&lt;span style="color:#a6be9d">`&amp;#34;&lt;/span>&lt;span style="color:#58a1dd">$LIBSSH2PATCH&lt;/span>&lt;span style="color:#a6be9d">`&amp;#34;&lt;/span>&lt;span style="color:#a6be9d">&amp;#34;&lt;/span> &lt;span style="color:#58a1dd">-WD&lt;/span> &lt;span style="color:#58a1dd">$LIBSSH2DIR&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff636f">if&lt;/span> (&lt;span style="color:#58a1dd">$ec&lt;/span> &lt;span style="color:#ff636f">-ne&lt;/span> &lt;span style="color:#a6be9d">0&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">Write-Host&lt;/span> &lt;span style="color:#58a1dd">-ForegroundColor&lt;/span> &lt;span style="color:#58a1dd">Red&lt;/span> &lt;span style="color:#a6be9d">&amp;#34;Apply &lt;/span>&lt;span style="color:#58a1dd">$LIBSSH2PATCH&lt;/span>&lt;span style="color:#a6be9d"> failed&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#58a1dd">$libssh2flags&lt;/span> = &lt;span style="color:#a6be9d">&amp;#34;-GNinja -DCMAKE_BUILD_TYPE=Release -DBUILD_SHARED_LIBS=OFF &amp;#34;&lt;/span> + `
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6be9d">&amp;#34;-DBUILD_EXAMPLES=OFF &amp;#34;&lt;/span> + `
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6be9d">&amp;#34;-DBUILD_TESTING=OFF &amp;#34;&lt;/span> + `
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6be9d">&amp;#34;-DENABLE_ZLIB_COMPRESSION=ON &amp;#34;&lt;/span> + `
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6be9d">&amp;#34;&lt;/span>&lt;span style="color:#a6be9d">`&amp;#34;&lt;/span>&lt;span style="color:#a6be9d">-DCMAKE_INSTALL_PREFIX=&lt;/span>&lt;span style="color:#58a1dd">$Prefix&lt;/span>&lt;span style="color:#a6be9d">`&amp;#34;&lt;/span>&lt;span style="color:#a6be9d"> ..&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#58a1dd">$ec&lt;/span> = &lt;span style="color:#58a1dd">Exec&lt;/span> &lt;span style="color:#58a1dd">-FilePath&lt;/span> &lt;span style="color:#58a1dd">$cmakeexe&lt;/span> &lt;span style="color:#58a1dd">-Argv&lt;/span> &lt;span style="color:#58a1dd">$libssh2flags&lt;/span> &lt;span style="color:#58a1dd">-WD&lt;/span> &lt;span style="color:#58a1dd">$LIBSSH2BUILD&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff636f">if&lt;/span> (&lt;span style="color:#58a1dd">$ec&lt;/span> &lt;span style="color:#ff636f">-ne&lt;/span> &lt;span style="color:#a6be9d">0&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">Write-Host&lt;/span> &lt;span style="color:#58a1dd">-ForegroundColor&lt;/span> &lt;span style="color:#58a1dd">Red&lt;/span> &lt;span style="color:#a6be9d">&amp;#34;libssh2: create build.ninja error&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">return&lt;/span> &lt;span style="color:#a6be9d">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#58a1dd">$ec&lt;/span> = &lt;span style="color:#58a1dd">Exec&lt;/span> &lt;span style="color:#58a1dd">-FilePath&lt;/span> &lt;span style="color:#58a1dd">$Ninjaexe&lt;/span> &lt;span style="color:#58a1dd">-Argv&lt;/span> &lt;span style="color:#a6be9d">&amp;#34;all&amp;#34;&lt;/span> &lt;span style="color:#58a1dd">-WD&lt;/span> &lt;span style="color:#58a1dd">$LIBSSH2BUILD&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff636f">if&lt;/span> (&lt;span style="color:#58a1dd">$ec&lt;/span> &lt;span style="color:#ff636f">-ne&lt;/span> &lt;span style="color:#a6be9d">0&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">Write-Host&lt;/span> &lt;span style="color:#58a1dd">-ForegroundColor&lt;/span> &lt;span style="color:#58a1dd">Red&lt;/span> &lt;span style="color:#a6be9d">&amp;#34;libssh2: build error&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">return&lt;/span> &lt;span style="color:#a6be9d">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#58a1dd">$ec&lt;/span> = &lt;span style="color:#58a1dd">Exec&lt;/span> &lt;span style="color:#58a1dd">-FilePath&lt;/span> &lt;span style="color:#58a1dd">$Ninjaexe&lt;/span> &lt;span style="color:#58a1dd">-Argv&lt;/span> &lt;span style="color:#a6be9d">&amp;#34;install&amp;#34;&lt;/span> &lt;span style="color:#58a1dd">-WD&lt;/span> &lt;span style="color:#58a1dd">$LIBSSH2BUILD&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff636f">if&lt;/span> (&lt;span style="color:#58a1dd">$ec&lt;/span> &lt;span style="color:#ff636f">-ne&lt;/span> &lt;span style="color:#a6be9d">0&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">Write-Host&lt;/span> &lt;span style="color:#58a1dd">-ForegroundColor&lt;/span> &lt;span style="color:#58a1dd">Red&lt;/span> &lt;span style="color:#a6be9d">&amp;#34;libssh2: install error&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">return&lt;/span> &lt;span style="color:#a6be9d">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">############################################################## CURL&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#58a1dd">Write-Host&lt;/span> &lt;span style="color:#58a1dd">-ForegroundColor&lt;/span> &lt;span style="color:#58a1dd">Yellow&lt;/span> &lt;span style="color:#a6be9d">&amp;#34;Final build curl &lt;/span>&lt;span style="color:#58a1dd">$CURL_VERSION&lt;/span>&lt;span style="color:#a6be9d">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff636f">if&lt;/span> (!(&lt;span style="color:#58a1dd">DecompressTar&lt;/span> &lt;span style="color:#58a1dd">-URL&lt;/span> &lt;span style="color:#58a1dd">$CURL_URL&lt;/span> &lt;span style="color:#ff636f">-File&lt;/span> &lt;span style="color:#a6be9d">&amp;#34;&lt;/span>&lt;span style="color:#58a1dd">$CURL_FILE&lt;/span>&lt;span style="color:#a6be9d">.tar.gz&amp;#34;&lt;/span> &lt;span style="color:#58a1dd">-Hash&lt;/span> &lt;span style="color:#58a1dd">$CURL_HASH&lt;/span>)) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">exit&lt;/span> &lt;span style="color:#a6be9d">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#58a1dd">$CURLDIR&lt;/span> = &lt;span style="color:#58a1dd">Join-Path&lt;/span> &lt;span style="color:#58a1dd">$WD&lt;/span> &lt;span style="color:#58a1dd">$CURL_FILE&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#58a1dd">$CURLBD&lt;/span> = &lt;span style="color:#58a1dd">Join-Path&lt;/span> &lt;span style="color:#58a1dd">$CURLDIR&lt;/span> &lt;span style="color:#a6be9d">&amp;#34;build&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#58a1dd">$CURLPATCH&lt;/span> = &lt;span style="color:#58a1dd">Join-Path&lt;/span> &lt;span style="color:#58a1dd">$PSScriptRoot&lt;/span> &lt;span style="color:#a6be9d">&amp;#34;patch/curl.patch&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#58a1dd">$CURLICON&lt;/span> = &lt;span style="color:#58a1dd">Join-Path&lt;/span> &lt;span style="color:#58a1dd">$PSScriptRoot&lt;/span> &lt;span style="color:#a6be9d">&amp;#34;patch/curl.ico&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff636f">if&lt;/span> (!(&lt;span style="color:#58a1dd">MkdirAll&lt;/span> &lt;span style="color:#58a1dd">-Dir&lt;/span> &lt;span style="color:#58a1dd">$CURLBD&lt;/span>)) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">exit&lt;/span> &lt;span style="color:#a6be9d">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic"># copy icon to path&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#58a1dd">Copy-Item&lt;/span> &lt;span style="color:#58a1dd">$CURLICON&lt;/span> &lt;span style="color:#58a1dd">-Destination&lt;/span> &lt;span style="color:#a6be9d">&amp;#34;&lt;/span>&lt;span style="color:#58a1dd">$CURLDIR&lt;/span>&lt;span style="color:#a6be9d">/src&amp;#34;&lt;/span>&lt;span style="color:#58a1dd">-Force&lt;/span> &lt;span style="color:#58a1dd">-ErrorAction&lt;/span> &lt;span style="color:#58a1dd">SilentlyContinue&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#58a1dd">$ec&lt;/span> = &lt;span style="color:#58a1dd">Exec&lt;/span> &lt;span style="color:#58a1dd">-FilePath&lt;/span> &lt;span style="color:#58a1dd">$Patchexe&lt;/span> &lt;span style="color:#58a1dd">-Argv&lt;/span> &lt;span style="color:#a6be9d">&amp;#34;-Nbp1 -i &lt;/span>&lt;span style="color:#a6be9d">`&amp;#34;&lt;/span>&lt;span style="color:#58a1dd">$CURLPATCH&lt;/span>&lt;span style="color:#a6be9d">`&amp;#34;&lt;/span>&lt;span style="color:#a6be9d">&amp;#34;&lt;/span> &lt;span style="color:#58a1dd">-WD&lt;/span> &lt;span style="color:#58a1dd">$CURLDIR&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff636f">if&lt;/span> (&lt;span style="color:#58a1dd">$ec&lt;/span> &lt;span style="color:#ff636f">-ne&lt;/span> &lt;span style="color:#a6be9d">0&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">Write-Host&lt;/span> &lt;span style="color:#58a1dd">-ForegroundColor&lt;/span> &lt;span style="color:#58a1dd">Red&lt;/span> &lt;span style="color:#a6be9d">&amp;#34;Apply &lt;/span>&lt;span style="color:#58a1dd">$CURLPATCH&lt;/span>&lt;span style="color:#a6be9d"> failed&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">#https://github.com/curl/curl/blob/master/CMake/FindBrotli.cmake&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#58a1dd">$BROTLIDEC_LIBRARY&lt;/span> = &lt;span style="color:#58a1dd">Join-Path&lt;/span> &lt;span style="color:#58a1dd">$Prefix&lt;/span> &lt;span style="color:#a6be9d">&amp;#34;lib/brotlidec-static.lib&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#58a1dd">$BROTLICOMMON_LIBRARY&lt;/span> = &lt;span style="color:#58a1dd">Join-Path&lt;/span> &lt;span style="color:#58a1dd">$Prefix&lt;/span> &lt;span style="color:#a6be9d">&amp;#34;lib/brotlicommon-static.lib&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#58a1dd">$BROTLI_INCLUDE_DIR&lt;/span> = &lt;span style="color:#58a1dd">Join-Path&lt;/span> &lt;span style="color:#58a1dd">$Prefix&lt;/span> &lt;span style="color:#a6be9d">&amp;#34;include&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">## Use codepage 1252&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#58a1dd">$curlflags&lt;/span> = &lt;span style="color:#a6be9d">&amp;#34;-GNinja -DCMAKE_BUILD_TYPE=Release -DBUILD_SHARED_LIBS=OFF &amp;#34;&lt;/span> + `
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6be9d">&amp;#34;-DUSE_NGHTTP2=ON -DBUILD_TESTING=OFF &amp;#34;&lt;/span> + `
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6be9d">&amp;#34;-DBUILD_CURL_EXE=ON &amp;#34;&lt;/span> + `
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6be9d">&amp;#34;-DCURL_STATIC_CRT=ON &amp;#34;&lt;/span> + `
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6be9d">&amp;#34;-DCMAKE_USE_OPENSSL=ON &amp;#34;&lt;/span> + `
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6be9d">&amp;#34;-DCMAKE_USE_WINSSL=ON &amp;#34;&lt;/span> + `
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6be9d">&amp;#34;-DCMAKE_USE_LIBSSH2=ON &amp;#34;&lt;/span> + `
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6be9d">&amp;#34;-DCURL_BROTLI=ON &amp;#34;&lt;/span> + `
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6be9d">&amp;#34;-DCMAKE_RC_FLAGS=-c1252 &amp;#34;&lt;/span> + `
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6be9d">&amp;#34;&lt;/span>&lt;span style="color:#a6be9d">`&amp;#34;&lt;/span>&lt;span style="color:#a6be9d">-DBROTLI_DIR=&lt;/span>&lt;span style="color:#58a1dd">$Prefix&lt;/span>&lt;span style="color:#a6be9d">`&amp;#34;&lt;/span>&lt;span style="color:#a6be9d"> &amp;#34;&lt;/span> + `
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6be9d">&amp;#34;&lt;/span>&lt;span style="color:#a6be9d">`&amp;#34;&lt;/span>&lt;span style="color:#a6be9d">-DCMAKE_INSTALL_PREFIX=&lt;/span>&lt;span style="color:#58a1dd">$CURLOUT&lt;/span>&lt;span style="color:#a6be9d">`&amp;#34;&lt;/span>&lt;span style="color:#a6be9d"> ..&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#58a1dd">$ec&lt;/span> = &lt;span style="color:#58a1dd">Exec&lt;/span> &lt;span style="color:#58a1dd">-FilePath&lt;/span> &lt;span style="color:#58a1dd">$cmakeexe&lt;/span> &lt;span style="color:#58a1dd">-Argv&lt;/span> &lt;span style="color:#58a1dd">$curlflags&lt;/span> &lt;span style="color:#58a1dd">-WD&lt;/span> &lt;span style="color:#58a1dd">$CURLBD&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff636f">if&lt;/span> (&lt;span style="color:#58a1dd">$ec&lt;/span> &lt;span style="color:#ff636f">-ne&lt;/span> &lt;span style="color:#a6be9d">0&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">Write-Host&lt;/span> &lt;span style="color:#58a1dd">-ForegroundColor&lt;/span> &lt;span style="color:#58a1dd">Red&lt;/span> &lt;span style="color:#a6be9d">&amp;#34;curl: create build.ninja error&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">return&lt;/span> &lt;span style="color:#a6be9d">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#58a1dd">$ec&lt;/span> = &lt;span style="color:#58a1dd">Exec&lt;/span> &lt;span style="color:#58a1dd">-FilePath&lt;/span> &lt;span style="color:#58a1dd">$Ninjaexe&lt;/span> &lt;span style="color:#58a1dd">-Argv&lt;/span> &lt;span style="color:#a6be9d">&amp;#34;all&amp;#34;&lt;/span> &lt;span style="color:#58a1dd">-WD&lt;/span> &lt;span style="color:#58a1dd">$CURLBD&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff636f">if&lt;/span> (&lt;span style="color:#58a1dd">$ec&lt;/span> &lt;span style="color:#ff636f">-ne&lt;/span> &lt;span style="color:#a6be9d">0&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">Write-Host&lt;/span> &lt;span style="color:#58a1dd">-ForegroundColor&lt;/span> &lt;span style="color:#58a1dd">Red&lt;/span> &lt;span style="color:#a6be9d">&amp;#34;curl: build error&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">return&lt;/span> &lt;span style="color:#a6be9d">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#58a1dd">$ec&lt;/span> = &lt;span style="color:#58a1dd">Exec&lt;/span> &lt;span style="color:#58a1dd">-FilePath&lt;/span> &lt;span style="color:#58a1dd">$Ninjaexe&lt;/span> &lt;span style="color:#58a1dd">-Argv&lt;/span> &lt;span style="color:#a6be9d">&amp;#34;install&amp;#34;&lt;/span> &lt;span style="color:#58a1dd">-WD&lt;/span> &lt;span style="color:#58a1dd">$CURLBD&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff636f">if&lt;/span> (&lt;span style="color:#58a1dd">$ec&lt;/span> &lt;span style="color:#ff636f">-ne&lt;/span> &lt;span style="color:#a6be9d">0&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">Write-Host&lt;/span> &lt;span style="color:#58a1dd">-ForegroundColor&lt;/span> &lt;span style="color:#58a1dd">Red&lt;/span> &lt;span style="color:#a6be9d">&amp;#34;curl: install error&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">return&lt;/span> &lt;span style="color:#a6be9d">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic"># download curl-ca-bundle.crt&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#58a1dd">$CA_BUNDLE&lt;/span> = &lt;span style="color:#58a1dd">Join-Path&lt;/span> &lt;span style="color:#58a1dd">$CURLOUT&lt;/span> &lt;span style="color:#a6be9d">&amp;#34;bin/curl-ca-bundle.crt&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff636f">if&lt;/span> (!(&lt;span style="color:#58a1dd">WinGet&lt;/span> &lt;span style="color:#58a1dd">-URL&lt;/span> &lt;span style="color:#58a1dd">$CA_BUNDLE_URL&lt;/span> &lt;span style="color:#58a1dd">-O&lt;/span> &lt;span style="color:#58a1dd">$CA_BUNDLE&lt;/span>)) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">Write-Host&lt;/span> &lt;span style="color:#58a1dd">-ForegroundColor&lt;/span> &lt;span style="color:#58a1dd">Red&lt;/span> &lt;span style="color:#a6be9d">&amp;#34;download curl-ca-bundle.crt error&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#58a1dd">Write-Host&lt;/span> &lt;span style="color:#58a1dd">-ForegroundColor&lt;/span> &lt;span style="color:#58a1dd">Green&lt;/span> &lt;span style="color:#a6be9d">&amp;#34;curl: build completed&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>构建的 &lt;code>curl -v&lt;/code> 输出：&lt;/p>
&lt;pre tabindex="0">&lt;code>$ curl -V
curl 7.62.0 (Windows) libcurl/7.62.0 OpenSSL/1.1.1 (WinSSL) zlib/1.2.11 brotli/1.0.7 libssh2/1.8.0 nghttp2/1.34.0
Release-Date: 2018-10-31
Protocols: dict file ftp ftps gopher http https imap imaps ldap pop3 pop3s rtsp scp sftp smtp smtps telnet tftp
Features: AsynchDNS IPv6 Largefile SSPI Kerberos SPNEGO NTLM SSL libz brotli HTTP2 HTTPS-proxy MultiSSL
&lt;/code>&lt;/pre>- https://forcemz.net/posts/2018/2018-11-15-clangbuilder-win-curl/ - Copyright (c) 2009-2024 J23</description></item><item><title>Git LFS 的反思</title><link>https://forcemz.net/posts/2018/2018-07-15-git-lfs-rethinking/</link><pubDate>Sun, 15 Jul 2018 10:00:00 +0800</pubDate><guid>https://forcemz.net/posts/2018/2018-07-15-git-lfs-rethinking/</guid><description>Charlie's Rethinking https://forcemz.net/posts/2018/2018-07-15-git-lfs-rethinking/ -&lt;h1 id="前言">前言&lt;/h1>
&lt;p>在一年多以前，笔者曾经写过一文： &lt;a href="https://forcemz.net/git/2017/04/16/Moses/">《Git LFS 服务器实现杂谈》&lt;/a>，最近笔者开发基于&lt;strong>对象存储&lt;/strong>的 LFS 服务器又有了一些心得，这里分享给大家。&lt;/p>
&lt;h1 id="关于-git-lfs">关于 Git LFS&lt;/h1>
&lt;p>Git LFS 即 Git Large File Storage （大文件存储），即将 git 存储库中的体积较大的，不利于打包的，修改不太频繁的文件单独存储到特定的服务器上，以减小存储库体积，加快用户的克隆拉取体验。其中的原理在 &lt;a href="https://forcemz.net/git/2017/04/16/Moses/">《Git LFS 服务器实现杂谈》&lt;/a> 都有说明，如果需要进一步的了解还可以去参考 Git LFS 技术规范： &lt;a href="https://github.com/git-lfs/git-lfs/blob/master/docs/spec.md"> spec.md&lt;/a>。&lt;/p>
&lt;p>按照 LFS 规范，只要实现了 Git LFS API 以及相应的接口，LFS 客户端并不会关心大文件存储在那个地方。&lt;/p>
&lt;h1 id="git-lfs-存储">Git LFS 存储&lt;/h1>
&lt;p>LFS 对象可以存储到代码托管平台的服务器上，也可以存储到对象存储服务器上，不同的平台有不同的选择。这里选择几个分析一下。&lt;/p>
&lt;h2 id="github-lfs-存储">Github LFS 存储&lt;/h2>
&lt;p>Github 很早就与 Amazon 有深度的合作，比如 Github 的附件，Release 都是将文件存储到 AWS S3 上，然后时候共享密钥的方式下载，Github 将这些文件放在 S3 上，减轻了 Github 自身服务器的负载。文件备份等都不需要 Github 自己管理，这无疑降低了开发的难度。&lt;/p>
&lt;p>所以在实现 Git LFS 时，Github 也将对象存储到 AWS S3 上，我们可以通过如下命令去调试 Github 的对象存储：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#1d2432;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#58a1dd">GIT_TRACE_PACKET&lt;/span>&lt;span style="color:#ff636f">=&lt;/span>&lt;span style="color:#a6be9d">1&lt;/span> &lt;span style="color:#58a1dd">GIT_TRACE&lt;/span>&lt;span style="color:#ff636f">=&lt;/span>&lt;span style="color:#a6be9d">1&lt;/span> &lt;span style="color:#58a1dd">GIT_CURL_VERBOSE&lt;/span>&lt;span style="color:#ff636f">=&lt;/span>&lt;span style="color:#a6be9d">1&lt;/span> git push
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>下面是 &lt;strong>upload&lt;/strong> 数据：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#1d2432;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-json" data-lang="json">&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">&amp;#34;objects&amp;#34;&lt;/span>: [
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">&amp;#34;oid&amp;#34;&lt;/span>: &lt;span style="color:#a6be9d">&amp;#34;42e44ce1337ecd9bab99e78f42df5f73ae1a7e5bda505054e04cd4f36ed7bf21&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">&amp;#34;size&amp;#34;&lt;/span>: &lt;span style="color:#a6be9d">2097152&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">&amp;#34;actions&amp;#34;&lt;/span>: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">&amp;#34;upload&amp;#34;&lt;/span>: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">&amp;#34;href&amp;#34;&lt;/span>: &lt;span style="color:#a6be9d">&amp;#34;https://github-cloud.s3.amazonaws.com/alambic/media/180597487/42/e4/42e44ce1337ecd9bab99e78f42df5f73ae1a7e5bda505054e04cd4f36ed7bf21?actor_id=6904176&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">&amp;#34;header&amp;#34;&lt;/span>: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">&amp;#34;Authorization&amp;#34;&lt;/span>: &lt;span style="color:#a6be9d">&amp;#34;AWS4-HMAC-SHA256 Credential=AKIAIMWPLRQEC4XCWWPA/20180628/us-east-1/s3/aws4_request,SignedHeaders=host;x-amz-content-sha256;x-amz-date,Signature=SignatureString&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">&amp;#34;x-amz-content-sha256&amp;#34;&lt;/span>: &lt;span style="color:#a6be9d">&amp;#34;42e44ce1337ecd9bab99e78f42df5f73ae1a7e5bda505054e04cd4f36ed7bf21&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">&amp;#34;x-amz-date&amp;#34;&lt;/span>: &lt;span style="color:#a6be9d">&amp;#34;20180628T032201Z&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">&amp;#34;expires_at&amp;#34;&lt;/span>: &lt;span style="color:#a6be9d">&amp;#34;2018-06-28T03:37:01Z&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">&amp;#34;expires_in&amp;#34;&lt;/span>: &lt;span style="color:#a6be9d">900&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">&amp;#34;verify&amp;#34;&lt;/span>: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">&amp;#34;href&amp;#34;&lt;/span>: &lt;span style="color:#a6be9d">&amp;#34;https://lfs.github.com/lfstest/lfstest/objects/42e44ce1337ecd9bab99e78f42df5f73ae1a7e5bda505054e04cd4f36ed7bf21/verify&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">&amp;#34;header&amp;#34;&lt;/span>: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">&amp;#34;Authorization&amp;#34;&lt;/span>: &lt;span style="color:#a6be9d">&amp;#34;RemoteAuth Token&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">&amp;#34;Accept&amp;#34;&lt;/span>: &lt;span style="color:#a6be9d">&amp;#34;application/vnd.git-lfs+json&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>将对象存储到 S3 上，存在一个缺点，即当 &lt;strong>upload&lt;/strong> 成功后，Github 是无法被动感知的，S3 目前并没有 Update-Callback 这样的功能，Git LFS 有一个 &lt;code>verify&lt;/code> 字段，即通知服务器去验证 &lt;strong>upload&lt;/strong> 是否成功。&lt;/p>
&lt;h2 id="bitbucket-lfs-存储">Bitbucket LFS 存储&lt;/h2>
&lt;p>Bitbucket 也是一个比较大的代码托管平台，Bitbucket 的 LFS 做的比较精致，下面有一篇 Tutorials 详细介绍了如何使用 LFS： &lt;a href="https://www.atlassian.com/git/tutorials/git-lfs">Git LFS Tutorials&lt;/a>&lt;/p>
&lt;p>下面是 Bitbucket LFS 的管理界面。&lt;/p>
&lt;p>&lt;img src="https://wac-cdn.atlassian.com/dam/jcr:46218516-f4aa-490a-9afc-c36ca863c98f/09.png" alt="">&lt;/p>
&lt;p>我们可以使用 Git 调试模式获得 Bitbucket 的一些细节，下面是 &lt;strong>download&lt;/strong> 的数据：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#1d2432;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-json" data-lang="json">&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">&amp;#34;objects&amp;#34;&lt;/span>: [{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">&amp;#34;oid&amp;#34;&lt;/span>: &lt;span style="color:#a6be9d">&amp;#34;e29b4e1206ef04580f63cedd043834296fd56ad777d1903a0cab8b6178f6a6e0&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">&amp;#34;actions&amp;#34;&lt;/span>: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">&amp;#34;download&amp;#34;&lt;/span>: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">&amp;#34;header&amp;#34;&lt;/span>: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">&amp;#34;X-Client-ID&amp;#34;&lt;/span>: &lt;span style="color:#a6be9d">&amp;#34;uuid-token&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">&amp;#34;Authorization&amp;#34;&lt;/span>: &lt;span style="color:#a6be9d">&amp;#34;Bearer BearerToken&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">&amp;#34;href&amp;#34;&lt;/span>: &lt;span style="color:#a6be9d">&amp;#34;https://api.media.atlassian.com/file/6d4949ce-2442-424b-9875-983008b943d0/binary&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">&amp;#34;size&amp;#34;&lt;/span>: &lt;span style="color:#a6be9d">1048576&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>从 JSON 数据中，我们可以知道 Bitbucket 并没有直接将对象存储到云服务对象存储上，并且 Bitbucket 使用了 OAuth 的验证方式。&lt;/p>
&lt;p>Bitbucket 这种设计在实现精致的 LFS 管理功能时很有帮助，而 Github 将对象存储到 S3 上， 一来无法直接检验对象的 SHA256，另一方面无法检测对象的 &lt;code>Mime&lt;/code>，也就无法做到像 Bitbucket 这样的效果。Bitbucket 可以查看 LFS 对象的 Mime(File Type)，上传时间，还可以通过删除比较旧的对象，从而降低 LFS 文件的配额占用。从这些方面来看 Bitbucket 更胜一筹。但也无法享受对象存储的好处了。&lt;/p>
&lt;h2 id="moses-to-lfsoss">Moses to LFSOSS&lt;/h2>
&lt;p>码云在去年开发 LFS 功能时使用的是和 Bitbucket 一样的机制，没有使用对象共享，即当 Sha256 一致时，并不支持共享，这无疑增加了服务器存储占用。&lt;/p>
&lt;p>最近，随着需求的改变，我们要将 LFS 对象存储到 OSS 上，于是笔者也就开发了 LFSOSS 了，支持多种后端，只需要修改特定 URL 的生成即可支持。而不同的云存储的对象存储也有一些优缺点。&lt;/p>
&lt;h1 id="对象存储的对比">对象存储的对比&lt;/h1>
&lt;p>码云在支持 LFS for OSS 时，考察了几个对象存储。如 Azure Blob，Amazon S3，Aliyun OSS，Tencent COS。&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Object Storage&lt;/th>
&lt;th>Shared Key&lt;/th>
&lt;th>Content Verify&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>Azure Blob&lt;/td>
&lt;td>Hmac Sha256&lt;/td>
&lt;td>Content-MD5&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Amazon S3&lt;/td>
&lt;td>Hmac Sha256&lt;/td>
&lt;td>Content-MD5, x-amz-content-sha256&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Aliyun OSS&lt;/td>
&lt;td>Hmac Sha1&lt;/td>
&lt;td>Content-MD5, x-oss-callback&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Tencent COS&lt;/td>
&lt;td>Hmac Sha1&lt;/td>
&lt;td>Content-MD5&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>选择不同的云服务，不但需要考虑这些云服务的功能，还需要考虑到一些经济因素。我们可以看到在安全上，AWS S3 无疑是最好的，Azure 次之，其他的安全意识并不能算非常好，毕竟 MD5/SHA1 早已经被破解。如果考虑到对象存储服务器上使用 Hash 作为对象的索引，SHA1 无疑是不合适的，尽管 Aliyun OSS 并不能完美的切合 LFS，但由于国内的一些现状，码云仍旧基于 Aliyun 做出了一些设计上的让步，避免 LFS 在上传到对象存储时出现对象污染的情况。&lt;/p>
&lt;p>回过头来看，Git LFS 更像是基于 AWS S3 定制的一样，S3 上传支持 &lt;code>x-amz-content-sha256&lt;/code> 而 Git LFS 对象的 Hash 算法也是选择的 &lt;code>SHA256&lt;/code>，还提供了 &lt;code>Verify&lt;/code> 这样的功能。&lt;/p>
&lt;h1 id="反思">反思&lt;/h1>
&lt;p>对象存储的安全意识要跟上，避免平台的局限性而导致服务设计的妥协。&lt;/p>
&lt;p>不同的设计能够实现不同的功能，这更需要取舍。&lt;/p>
&lt;h1 id="其他">其他&lt;/h1>
&lt;h2 id="共享密钥下载">共享密钥下载&lt;/h2>
&lt;p>共享密钥实际上就是将请求的一些数据与过期时间等合成一个 Slat，使用云平台生成的 AccessKeySecret 作为 Key，基于 Hmac 生成的签名，其中不同的平台支持不同的 Hmac 安全算法。大致的原理实际上可以用如下伪代码表示：&lt;/p>
&lt;pre tabindex="0">&lt;code>Slat=PlatfromMethod(ReqData,Expires,....)
Signature=Hmac(Secret,Slat)
&lt;/code>&lt;/pre>- https://forcemz.net/posts/2018/2018-07-15-git-lfs-rethinking/ - Copyright (c) 2009-2024 J23</description></item></channel></rss>