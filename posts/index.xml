<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on Charlie's Rethinking</title><link>https://forcemz.net/posts/</link><description>Recent content in Posts on Charlie's Rethinking</description><generator>Hugo</generator><language>zh-CN</language><copyright>Copyright (c) 2009-2024 J23</copyright><lastBuildDate>Sun, 22 May 2022 12:00:00 +0800</lastBuildDate><atom:link href="https://forcemz.net/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>Golang 简单的国际化多语言支持思路</title><link>https://forcemz.net/posts/2022/2022-05-22-golang-i18n/</link><pubDate>Sun, 22 May 2022 12:00:00 +0800</pubDate><guid>https://forcemz.net/posts/2022/2022-05-22-golang-i18n/</guid><description>&lt;h2 id="前言">前言&lt;/h2>
&lt;p>在我之前的软件开发过程中，无论是开源软件还是公司的项目，我在程序中输出的提示多是蹩脚的英文，这大概是代码多用英文，习惯使然，但这对使用者或许并不好，后来在公司的项目中，我们大抵会使用英文和中文重复一段信息，然后不论是中文用户还是英文用户也都能简单的阅读。&lt;/p></description></item><item><title>若浮生若梦，为欢几何</title><link>https://forcemz.net/posts/2022/2022-01-01-life-is-like-a-dream/</link><pubDate>Sat, 01 Jan 2022 20:00:00 +0800</pubDate><guid>https://forcemz.net/posts/2022/2022-01-01-life-is-like-a-dream/</guid><description>&lt;h2 id="一李白的诗">一、李白的诗&lt;/h2>
&lt;p>坦白的说，我是一个粗俗的人，没有脱离低级趣味的人，但我有时候又会显得不一样，举起酒杯时：&lt;code>人生得意须尽欢，莫使金樽空对月。&lt;/code> 离别时：&lt;code>桃花潭水深千尺，不及汪伦送我情。&lt;/code> 梦呓时：&lt;code>事了拂衣去，深藏身与名。&lt;/code>&lt;/p></description></item><item><title>Baulk - 一次有趣的尝试</title><link>https://forcemz.net/posts/2021/2021-07-20-baulk-talk/</link><pubDate>Tue, 20 Jul 2021 20:00:00 +0800</pubDate><guid>https://forcemz.net/posts/2021/2021-07-20-baulk-talk/</guid><description>&lt;h2 id="前言">前言&lt;/h2>
&lt;p>作为一个程序员，你认为你做过的最让你自豪的东西是什么？作为了一个菜鸡程序员，很遗憾，我拿不出什么像样的作品，工作上也只是站在前人的肩膀上，做了一些微小的改动。如果硬要说一个作品是我最得意的，我会选择 Baulk，它是一个极简的 Windows 包管理器，开发这个工具花费了我大量的业余时间，我很多有意思的构想也在开发 baulk 的过程中付诸实现了。Baulk &lt;code>[bɔːk]&lt;/code> 其含义是&lt;code>错误；失败；障碍（等于balk）&lt;/code> 或是 &lt;code>阻止；错过；推诿（等于balk）&lt;/code>；对于绝大多数人来说，2020 年有一个坠落的魔幻开局，到了今年，新冠疫情的阴影任然笼罩全球，Baulk 诞生于 2020 年 3 月 9 日，那个时候我确实是挫败的吧。Baulk 还可以翻译成&lt;code>梁木&lt;/code>，阴云将逐渐消散，baulk 也可以成为 &lt;code>梁木&lt;/code>。&lt;/p></description></item><item><title>调查报告：你想待在这个城市吗？</title><link>https://forcemz.net/posts/2021/2021-03-12-report-workers-2021/</link><pubDate>Fri, 12 Mar 2021 16:00:00 +0800</pubDate><guid>https://forcemz.net/posts/2021/2021-03-12-report-workers-2021/</guid><description>&lt;h2 id="0x0-调查的缘由">0x0 调查的缘由&lt;/h2>
&lt;p>一个人的观点要结合实际情况，当我要评价人们对一个城市的归属感时，也不能道听途说，人云亦云。那么我要掌握实际情况该怎么做？问卷调查是一种不错的方法，于是我就编辑了一个调查问卷，在 v2ex 上分享，然后也转发给一些同事朋友，请求他们的协助。&lt;/p></description></item><item><title>程序员的方法论</title><link>https://forcemz.net/posts/2021/2021-03-12-programmer-methodology/</link><pubDate>Fri, 12 Mar 2021 10:00:00 +0800</pubDate><guid>https://forcemz.net/posts/2021/2021-03-12-programmer-methodology/</guid><description>&lt;h2 id="前言">前言&lt;/h2>
&lt;p>&lt;strong>你为什么会成为一名程序员&lt;/strong>？ 二月二十二日，我发起了一个&lt;a href="https://wj.qq.com/s2/8089068/7a9c">调查问卷&lt;/a>，几天后回收了 106 份，对于为什么会成为一名程序员，大家的原因很多（详细的数据可以查看：&lt;a href="https://github.com/developerv5/2021-survey/blob/mainline/2021-survey.csv">https://github.com/developerv5/2021-survey/blob/mainline/2021-survey.csv&lt;/a>），有的是迫于生计羡慕信息行业薪资高，有的是社恐不喜欢与人打交道，还有的是阴差阳错进入了计算机相关专业毕业后选择成为一名程序员，爱因斯坦说过：&lt;em>兴趣是最好的老师&lt;/em>&lt;sup>1&lt;/sup>，在学习编程的过程中也需要我们对程序开发充满兴趣，然后与理想的状况相反，只有很少一部分人因为兴趣爱好成为了一名程序员。&lt;/p>
&lt;p>我最初也不是因为兴趣成为一名程序员的，2010 年，我报考学校的时候觉得通信工程大有作为，那个时候移动的 GSM 还占据着上风，数据流量还是使用的 GPRS，流量包是 5 元 30M，中国移动刚刚获得 TD-SCDMA 牌照不久，而业内已经开始研究 4G，UWB 等等各种各样的新技术，这种新的事物让我着迷，初入大学，我在图书馆疯狂的阅读各种通信技术、无线通信技术的书籍，可惜我们学校的氛围是松懈的，这种迷热和疯狂在也在这种松懈的氛围中渐渐冷却，没有潜心学习研究通信技术。我们学校的通信工程隶属于计算机系，所以会教授一些计算机相关的课程，不过遗憾的是教授相关课程的老师大多知识面老化，能给予的帮助有限。在配了一台 AMD 速龙四核的台式机后，我疯狂的迷上了玩电脑，宅在寝室不愿意出门，但并不是玩游戏，而是在电脑上安装各种软件，搜索各种源码，做一些小工具，希望成为一名极客受人追捧。毕业后，也没有其他本领，找了一个互联网的工作，跌跌撞撞几年，从开始的懵懂无知，工作受挫到后来的积累了一些经验，工作上逐渐有了自己的方法。总结起来，我虽然没有成为一个优秀的程序员，但我还是有了十足的成长。&lt;/p></description></item><item><title>评论文件解析</title><link>https://forcemz.net/posts/2021/2021-03-11-review-file-parsing/</link><pubDate>Thu, 11 Mar 2021 10:00:00 +0800</pubDate><guid>https://forcemz.net/posts/2021/2021-03-11-review-file-parsing/</guid><description>&lt;h2 id="前言">前言&lt;/h2>
&lt;p>2019 年，我曾经写过一篇名为&lt;a href="https://forcemz.net/toolset/2019/01/25/FileParsing/">《文件的解析》&lt;/a>的文章，粗略的讲述了如何识别文件的特征，分析文件的类型。随着认识的不断加深，知识的不断积累，代码的不断重构，徘徊之间，我将文中提到的 Planck 分析库在 &lt;a href="https://github.com/fcharlie/bela">Bela&lt;/a> 项目中用 C++20 重写了，还将 Golang 的 PE/ELF/MachO/ZIP 库用 C++ 重写了一遍，然后在 &lt;a href="https://github.com/fcharlie/BelaUtils">BelaUtils&lt;/a> 项目中基于 Bela 文件分析库实现了文件类型检测工具 - &lt;strong>Bona&lt;/strong>，工具简单的推广后总算是有几个人收藏，之后有一点想法，觉得要和大家分享，便有了此文。&lt;/p></description></item><item><title>观点：如何实现男女平等</title><link>https://forcemz.net/posts/2021/2021-03-08-view-point-achieve-gender-equality/</link><pubDate>Mon, 08 Mar 2021 10:00:00 +0800</pubDate><guid>https://forcemz.net/posts/2021/2021-03-08-view-point-achieve-gender-equality/</guid><description>&lt;h2 id="国际妇女节">国际妇女节&lt;/h2>
&lt;p>在维基百科上&lt;a href="https://zh.wikipedia.org/wiki/%E5%9B%BD%E9%99%85%E5%A6%87%E5%A5%B3%E8%8A%82">&lt;strong>国际妇女节&lt;/strong>&lt;/a> 的描述是“是为了纪念妇女权利的运动，设在每年3月8日的国际性节日。这个纪念日在很多国家也是法定假期。各地社会在国际妇女节易庆祝妇女在经济，政治和社会等领域做出的重要贡献。”&lt;/p></description></item><item><title>代码托管从业者 Git 指南</title><link>https://forcemz.net/posts/2021/2021-01-20-git-guide-for-code-hosting-practitioners/</link><pubDate>Wed, 20 Jan 2021 18:00:00 +0800</pubDate><guid>https://forcemz.net/posts/2021/2021-01-20-git-guide-for-code-hosting-practitioners/</guid><description>&lt;h2 id="0-前言">0. 前言&lt;/h2>
&lt;p>六七年前，机缘巧合进入了代码托管行业，做过基于 Git 支持 SVN 客户端接入，做过 Git 代码托管平台分布式，做过 Git 代码托管读写分离，做过 Git 代码托管高可用，所幸学到了一些知识，积累了一些经验，这或许对已在或者即将进入代码托管行业的朋友有些帮助，便分享出来，权当是经验之谈，希望读的人有些许收获。&lt;/p></description></item><item><title>性能，可扩展性和高可用 - 大型 Git 代码托管平台的关键问题</title><link>https://forcemz.net/posts/2020/2020-12-25-performance-scalability-and-high-availability-for-git/</link><pubDate>Fri, 25 Dec 2020 20:00:00 +0800</pubDate><guid>https://forcemz.net/posts/2020/2020-12-25-performance-scalability-and-high-availability-for-git/</guid><description>&lt;h2 id="前言">前言&lt;/h2>
&lt;p>2019 年我写了 &lt;a href="https://forcemz.net/git/2019/10/01/ExploreSomeIssuesWithGitHost/">《探讨 Git 代码托管平台的若干问题 - 2019 版》&lt;/a> 从技术栈，功能，伸缩性等方面比较了业内一些代码托管平台（或者开源项目），是第一次对行业的反思。随着事物的不断变化，人们的认识也是不断发展的，在吸收了新的知识，做出了新的实践，换了新的工作后，我对于代码托管平台的认识也有了更多的想法。在实现大型代码托管平台时，&lt;strong>性能&lt;/strong>，&lt;strong>可扩展性&lt;/strong>，&lt;strong>高可用&lt;/strong> 这些问题不断的跃入眼前，随着时机成熟，我觉得很有必要粗略的探讨一些这类问题的解决方案，分享给感兴趣的人。&lt;/p></description></item><item><title>探讨 Git 版本控制系统的若干问题 - 2020 版</title><link>https://forcemz.net/posts/2020/2020-08-16-explore-some-issues-with-git/</link><pubDate>Sun, 16 Aug 2020 20:00:00 +0800</pubDate><guid>https://forcemz.net/posts/2020/2020-08-16-explore-some-issues-with-git/</guid><description>&lt;h2 id="前言">前言&lt;/h2>
&lt;p>自 2014 年大学毕业以来，我一直从事代码托管相关工作，工作的内容和 git 相关，期间积累了很多心得体会，这大概是一般的 git 使用者很少会感知到的，一直以来，我也想将这些见解分享给大家，之前我写过《探讨 Git 代码托管平台的若干问题 - 2019 版》，这篇文章主要偏向代码托管平台的开发，与普通开发者存在一定的距离，快一年过去了，我又有了新的体会，写一篇关于 Git 版本控制系统的若干问题也就有了动机。&lt;/p></description></item><item><title>Baulk - 开发一个简单的包管理工具历程</title><link>https://forcemz.net/posts/2020/2020-07-18-baulk/</link><pubDate>Sat, 18 Jul 2020 20:00:00 +0800</pubDate><guid>https://forcemz.net/posts/2020/2020-07-18-baulk/</guid><description>&lt;h2 id="前言">前言&lt;/h2>
&lt;p>相对于其他操作系统，我更习惯使用 Windows，但一直以来 Windows 缺乏官方的包管理器，而第三方无论是 Scoop 还是 Chocolatey 都无法满足我独特的需求，我的要求很简单，所有的软件包都应该使用绿色解压模式，这包括了 MSI 安装包，另外安装软件时不应该修改系统和用户环境变量。包管理工具应该足够快，还要支持创建启动器等等。&lt;/p></description></item><item><title>胡说八道文件压缩</title><link>https://forcemz.net/posts/2020/2020-06-30-nonsense-file-compression/</link><pubDate>Tue, 30 Jun 2020 20:00:00 +0800</pubDate><guid>https://forcemz.net/posts/2020/2020-06-30-nonsense-file-compression/</guid><description>&lt;h1 id="前言">前言&lt;/h1>
&lt;p>在我们日常使用计算机的时候，经常会遇到或者使用一些文件，它们通常以 &lt;code>.zip&lt;/code>，&lt;code>.rar&lt;/code>，&lt;code>.7z&lt;/code> 结尾，这些文件就是本文所说的压缩文件，我们可以通过资源管理器，WinRAR，WinZip，或者 7-zip 将其解压，然后查看，编辑，或者进行其他操作。压缩软件被广泛运用于文件分享，软件分发，或作为一个容器承载其他文件集合，比如我们如果使用 Office 2007 以及更高的版本保存 Word/PPT/Excel 文档时，这些文档实际上就是特殊的 ZIP 压缩文件，Word/PPT/Excel 的格式实际上就是将描述元素（文本框，标题&amp;hellip;） 信息的 XML 文件，以及一些资源文件使用 Deflate(Fastest) 压缩算法压缩到一个 ZIP 格式文件中。还有 Java 程序员需要经常见到的 Jar 包，Android 开发者打包的 APK 文件，以及 Windows 开发者创建的 Appx(以及 MSIX) 安装包，这些文件都是压缩文件，准确的说，这几种都是 ZIP 压缩文件。&lt;/p></description></item><item><title>文件的真实路径</title><link>https://forcemz.net/posts/2020/2020-04-24-realpath/</link><pubDate>Fri, 24 Apr 2020 10:00:00 +0800</pubDate><guid>https://forcemz.net/posts/2020/2020-04-24-realpath/</guid><description>&lt;h1 id="前言">前言&lt;/h1>
&lt;p>最近浏览 Windows Terminal 提交，发现其文档中链接了一个 PowerShell 的 Issue：&lt;a href="https://github.com/PowerShell/PowerShell/issues/9970">Windows Store applications incorrectly assumed to be console applications &lt;/a>，这个问题描述起来很简单，就是在 PowerShell 中打开 &lt;code>wt.exe&lt;/code>， PowerShell 会一直等待 Windows Terminal 的退出，但实际上 Windows Terminal 是一个 GUI 程序，按照 Windows 的默认行为，PowerShell 在创建 Windows Terminal 进程后，就应该返回。这个问题是怎么产生的，其实很简单，&lt;code>wt.exe&lt;/code> 是 Windows Terminal 的 &lt;code>AppExecutionAlias&lt;/code>，&lt;code>AppExecutionAlias&lt;/code> 是一类特殊的重解析点，Windows 在创建进程时会根据 &lt;code>AppExecutionAlias&lt;/code> 设施的信息启动对应的 Store App。那么 PowerShell 应当获得相应 Store App 的主程序的 &lt;code>Subsystem&lt;/code> 才能正确的决定是否应该等待进程退出。因此这里获得其真实路径是必不可少的。&lt;/p></description></item><item><title>谈吃肉</title><link>https://forcemz.net/posts/2020/2020-01-10-talking-about-eating-pork/</link><pubDate>Fri, 10 Jan 2020 10:00:00 +0800</pubDate><guid>https://forcemz.net/posts/2020/2020-01-10-talking-about-eating-pork/</guid><description>&lt;p>2019 年早已过去，这年下半年最显著的感受是肉价腾贵，11 月初，听闻凯哥来深出差，于周日邀请他来住所做饭吃。或是许久未吃过回锅肉，买菜的时候，凯哥特意要求称了一块价值 16 元的猪肉，单价 40 一斤。若做其它肉菜，本以为够哥俩吃一顿，但回锅肉却是需要分量的，那一顿吃的颇不尽兴。一周之后，在浪基住处又做了一次回锅肉，此时购买了两块共计四十块的猪肉，此次回锅肉依然没有吃尽兴，不过好在还有我带过去的腊牛肉，干豆角，小干鱼，以及主人家买的基围虾，秋葵，牛肉反而吃得尽兴。&lt;/p></description></item><item><title>探讨 Git 代码托管平台的若干问题 - 2019 版</title><link>https://forcemz.net/posts/2019/2019-10-01-explore-some-issues-with-git-host/</link><pubDate>Tue, 01 Oct 2019 10:00:00 +0800</pubDate><guid>https://forcemz.net/posts/2019/2019-10-01-explore-some-issues-with-git-host/</guid><description>&lt;h2 id="关于-git">关于 Git&lt;/h2>
&lt;p>版本控制软件种类繁多，维基百科收录的最早的版本控制系统是 1972 年贝尔实验室开发的 &lt;a href="https://en.wikipedia.org/wiki/Source_Code_Control_System">Source Code Control System&lt;/a>。1986 年 &lt;a href="https://en.wikipedia.org/wiki/Concurrent_Versions_System">Concurrent Versions System(CVS)&lt;/a> 诞生，CVS 曾非常流行，但今时用之寥寥无几，不过 OpenBSD 仍在使用 CVS。2000 年 CollabNet 创建了 Subversion 项目，2009年，Subversion 被 Apache 基金会接受成为顶级项目并被命名为 &lt;a href="https://en.wikipedia.org/wiki/Apache_Subversion">Apache Subversion&lt;/a>。2005 年 &lt;a href="https://en.wikipedia.org/wiki/Git">Linus Torvalds&lt;/a> 创建了 Git，2007 Github 诞生后，Git 随着 Github 的发展愈发流行，14 年间，Git 成为了最流行的版本控制系统，无论是 Windows 还是 Linux 或是 Android，MySQL 等等大型软件都使用 git 进行版本控制。纵观版本控制系统流行史，前有 CVS 后有 SVN，今日 Git 更风流。俱往矣，数风流人物，还看今朝，版本控制系统莫不如斯。&lt;/p></description></item><item><title>在 Windows 中实现 sudo</title><link>https://forcemz.net/posts/2019/2019-08-07-implement-sudo-in-windows/</link><pubDate>Wed, 07 Aug 2019 12:00:00 +0800</pubDate><guid>https://forcemz.net/posts/2019/2019-08-07-implement-sudo-in-windows/</guid><description>&lt;h1 id="前言">前言&lt;/h1>
&lt;p>&lt;em>这篇文章的想法来源于我在 &lt;a href="https://github.com/microsoft/terminal/issues/146">Windows Terminal Issue#146&lt;/a> 的&lt;a href="https://github.com/microsoft/terminal/issues/146#issuecomment-515812461">评论&lt;/a>。&lt;/em>&lt;/p>
&lt;p>&lt;a href="https://linux.die.net/man/8/sudo">sudo&lt;/a> 以另一个用户执行命令，通常是 &lt;code>root&lt;/code>。当普通用户需要以其他权限执行某项工作时，通常需要获得指定用户的权限，以目标权限 &lt;code>root&lt;/code> 为例，我们期望以 root 权限运行，可以使用 &lt;code>su&lt;/code> 登录到 &lt;code>root&lt;/code> 用户，在这种情况下，一直到退出 &lt;code>root&lt;/code>。都使用的是 &lt;code>root&lt;/code> 权限，这实际上并不是安全的，处于高级别权限的时间应当尽量的短。而使用 &lt;code>sudo&lt;/code> 获得 root 权限要安全的多，这种情况下，只有特定的命令才会获得 root 权限，而不是整个用户和 shell. 话又说回来，sudo 是如何获得 root 权限的？在 Windows 中的 sudo 又是怎么一回事，如何在 Windows 中实现类似的 sudo.&lt;/p></description></item><item><title>服务端 Git 钩子的妙用</title><link>https://forcemz.net/posts/2019/2019-07-30-gnk-server-side/</link><pubDate>Tue, 30 Jul 2019 20:00:00 +0800</pubDate><guid>https://forcemz.net/posts/2019/2019-07-30-gnk-server-side/</guid><description>&lt;h1 id="背景">背景&lt;/h1>
&lt;p>在 &lt;a href="https://git-scm.com/book/en/v2/Customizing-Git-Git-Hooks">《Pro Git》&lt;/a> 的 &lt;strong>Server-Side Hooks&lt;/strong> 介绍了三种钩子，分别是 &lt;code>pre-receive&lt;/code> 已经 &lt;code>update&lt;/code> 还有 &lt;code>post-receive&lt;/code>。GITEE 最初是基于 Gitlab 发展而来，最开始在服务端使用的是 &lt;code>update&lt;/code> 钩子。我们使用 &lt;code>update&lt;/code> 钩子完成一些保护分支/只读分支的功能。随着 Gitee 的不断发展，也有人提出了一些新的服务需求，为了解决大仓库大文件，我们开发了 Git Native Hook (GNK)。新的钩子利用了 git 的一些新的特性，在不同的阶段实现不同的功能，这里就介绍一下这些钩子的妙用。&lt;/p></description></item><item><title>Windows 命令行转义杂谈</title><link>https://forcemz.net/posts/2019/2019-07-20-cmdline-escape/</link><pubDate>Sat, 20 Jul 2019 20:00:00 +0800</pubDate><guid>https://forcemz.net/posts/2019/2019-07-20-cmdline-escape/</guid><description>&lt;h2 id="背景">背景&lt;/h2>
&lt;p>2019 年五月的 Microsoft Build 大会，微软宣布了 Windows Terminal，并在 Github 上开源：&lt;a href="https://github.com/microsoft/terminal">https://github.com/microsoft/terminal&lt;/a>。我作为技术爱好者，肯定要尝鲜一番。&lt;/p>
&lt;p>使用截图：&lt;/p>
&lt;p>&lt;img src="https://user-images.githubusercontent.com/6904176/58634006-b05e6080-82d9-11e9-9e3f-2715647edf1b.png" alt="">&lt;/p>
&lt;p>在使用的过程中，多标签，亚克力的窗口背景和 &lt;code>Colour Emojis&lt;/code> 都让我非常满意，而且使用 Direct2D 绘制的 emoji，看起来要比 Mintty 使用 GDI+PNG 的 emoji 方案好的多（PNG 的 emoji 无论是放大和缩小都更容易失真，Mintty 并没有 Segoe UI 字体的 emoji 风格，其他风格我并不太喜欢）。不过我在使用的过程中发现了一个 BUG，即 &lt;a href="https://github.com/microsoft/terminal/issues/1090">Bug Report: The conhost command line is not properly escaped #1090 &lt;/a>，后来我又提交了一个 PR 修复了此问题，在研究其他软件源码时，我发现这个问题并不是个例，因此有必要对此问题进行一次讨论，便有了此文。&lt;/p></description></item><item><title>七月的技术分享</title><link>https://forcemz.net/posts/2019/2019-07-09-july-tech-sharing/</link><pubDate>Tue, 09 Jul 2019 10:00:00 +0800</pubDate><guid>https://forcemz.net/posts/2019/2019-07-09-july-tech-sharing/</guid><description>&lt;h2 id="前言">前言&lt;/h2>
&lt;p>写代码是一个不断积累的过程，将一些好的想法转变为解决实际问题的程序通常让程序员感到愉悦。而最近我也有两个还算好的想法，在本文中分享给大家。&lt;/p>
&lt;h2 id="支持环境变量展开的配置解析">支持环境变量展开的配置解析&lt;/h2>
&lt;p>在 Gitee 的基础服务组件中，像 Basalt (git ssh 服务器)，git-diamond (Gitee 内部的 git 协议服务器)，git-srv (Gitee 分布式 git 传输后端) 都支持这样形式的配置： &lt;code>${APPDIR}/run/git-srv.pid&lt;/code> 。在运行过程中，&lt;code>APPDIR&lt;/code> 被解释成相应组件的安装根目录，在配置文件中，解析到 &lt;code>${APPDIR}/run/git-srv.pid&lt;/code> 后，使用推导函数，将其展开为 &lt;code>/home/git/oscstudio/run/git-srv.pid&lt;/code>。这样一来，默认配置情况下，Gitee 的这些组件都支持安装到任意位置，而无需在编译时设置 &lt;code>--prefix&lt;/code>。而像 nginx 这样的软件，在构建时，使用 &lt;code>--prefix&lt;/code> 指定了安装目录后，如果不使用 &lt;code>-p&lt;/code> 指定 &lt;code>prefix&lt;/code>，是无法安装到任意位置的。&lt;/p></description></item><item><title>坐和放宽 - 您的计算机需要更新</title><link>https://forcemz.net/posts/2019/2019-06-25-talk-computer-update/</link><pubDate>Tue, 25 Jun 2019 10:00:00 +0800</pubDate><guid>https://forcemz.net/posts/2019/2019-06-25-talk-computer-update/</guid><description>&lt;h1 id="前言">前言&lt;/h1>
&lt;p>今天在微博上看到了新浪科技的一篇微博，其主要内容如下：&lt;/p>
&lt;blockquote>
&lt;p>#创事记#【用不胜其烦的update，将Windows用户捆绑上未来战车】网友苦Windows久矣。众所周知，Windows Update是很烦人的更新，其中以win10的用户最为水深火热。目前看来，用户还需要在一次次漫长而琐碎的更新升级中等待，而时代的洪流终会蜿蜒地书写出微软的对与错。@脑极体Unity Windows不胜其烦的update&lt;/p></description></item><item><title>介绍 Bela</title><link>https://forcemz.net/posts/2019/2019-05-25-introduction-bela/</link><pubDate>Sat, 25 May 2019 10:00:00 +0800</pubDate><guid>https://forcemz.net/posts/2019/2019-05-25-introduction-bela/</guid><description>&lt;h1 id="前言">前言&lt;/h1>
&lt;p>在前面，我曾经写过一篇文章 &lt;a href="https://forcemz.net/cxx/2019/04/29/StringFormattingTalk/">《字符串格式化漫谈》&lt;/a> 文章最后提到了 &lt;a href="https://github.com/fcharlie/bela">&lt;code>Bela&lt;/code>&lt;/a> 里面实现了一个类型安全的 &lt;code>bela::StrFormat&lt;/code>，实际上 &lt;code>bela&lt;/code> 还有很多有趣的功能，本文也就是说一说 Bela 有哪些有趣功能和故事。&lt;/p></description></item><item><title>字符串格式化漫谈</title><link>https://forcemz.net/posts/2019/2019-04-29-string-formatting-talk/</link><pubDate>Mon, 29 Apr 2019 10:00:00 +0800</pubDate><guid>https://forcemz.net/posts/2019/2019-04-29-string-formatting-talk/</guid><description>&lt;h1 id="前言">前言&lt;/h1>
&lt;p>春风化雨，万物复苏，编程始于 &lt;code>Hello world&lt;/code>，C 语言的 Hello world 可如下，同样 C++ 亦可如下:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#1d2432;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c" data-lang="c">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">#include&lt;/span> &lt;span style="color:#828b96;font-style:italic">&amp;lt;stdio.h&amp;gt;&lt;/span>&lt;span style="color:#828b96;font-style:italic">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span>&lt;span style="color:#ff636f">int&lt;/span> &lt;span style="color:#58a1dd">main&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">printf&lt;/span>(&lt;span style="color:#a6be9d">&amp;#34;Hello World!&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">return&lt;/span> &lt;span style="color:#a6be9d">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>printf 函数类型为：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#1d2432;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c" data-lang="c">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff636f">int&lt;/span> &lt;span style="color:#58a1dd">printf&lt;/span>(&lt;span style="color:#ff636f">const&lt;/span> &lt;span style="color:#ff636f">char&lt;/span> &lt;span style="color:#ff636f">*&lt;/span>&lt;span style="color:#58a1dd">fmt&lt;/span>,...);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>按照此声明我们可以格式化输出：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#1d2432;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c" data-lang="c">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">#include&lt;/span> &lt;span style="color:#828b96;font-style:italic">&amp;lt;stdio.h&amp;gt;&lt;/span>&lt;span style="color:#828b96;font-style:italic">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#828b96;font-style:italic">&lt;/span>&lt;span style="color:#ff636f">int&lt;/span> &lt;span style="color:#58a1dd">main&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">const&lt;/span> &lt;span style="color:#ff636f">char&lt;/span> &lt;span style="color:#ff636f">*&lt;/span>&lt;span style="color:#58a1dd">name&lt;/span>&lt;span style="color:#ff636f">=&lt;/span>&lt;span style="color:#a6be9d">&amp;#34;Tony Stark&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#58a1dd">printf&lt;/span>(&lt;span style="color:#a6be9d">&amp;#34;Hello %s&lt;/span>&lt;span style="color:#a6be9d">\n&lt;/span>&lt;span style="color:#a6be9d">&amp;#34;&lt;/span>,&lt;span style="color:#58a1dd">name&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff636f">return&lt;/span> &lt;span style="color:#a6be9d">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>使用 C 编译器 Clang/MSVC/GCC 将其编译运行，在终端或者命令行中会输出如下结果：&lt;/p></description></item><item><title>实现 Git 目录权限控制</title><link>https://forcemz.net/posts/2019/2019-04-01-implement-git-dir-accesss-control/</link><pubDate>Mon, 01 Apr 2019 10:00:00 +0800</pubDate><guid>https://forcemz.net/posts/2019/2019-04-01-implement-git-dir-accesss-control/</guid><description>&lt;h1 id="前言">前言&lt;/h1>
&lt;p>Git 与 Subversion 有诸多不同，最核心的一点是前者属于分布式版本控制工具，后者属于集中式版本控制工具。前者的提交行为是离线的，本地的，后者的提交是在线的，需要与远程中央服务器通信，在线创建提交。基于这种现实，Git 和 Subversion 在原生提供的附加功能也存在很大的差别。比如目录权限控制。Git 原生并不支持目录权限控制，而 Subversion 支持。&lt;/p></description></item><item><title>记录 SSH 的一个 Bug</title><link>https://forcemz.net/posts/2019/2019-03-18-ssh-one-bug/</link><pubDate>Mon, 18 Mar 2019 18:00:00 +0800</pubDate><guid>https://forcemz.net/posts/2019/2019-03-18-ssh-one-bug/</guid><description>&lt;h2 id="服务器上错误的命令行">服务器上错误的命令行&lt;/h2>
&lt;p>最近在改进 BSSHD，将不被允许的命令打印到日志，但是我遇到了一个不符合预期的输出，比如，在客户端运行 SSH，命令如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#1d2432;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>ssh git@localhost &lt;span style="color:#58a1dd">echo&lt;/span> &lt;span style="color:#a6be9d">&amp;#34;There are spaces in the statement&amp;#34;&lt;/span> &lt;span style="color:#ff636f">done&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>我将命令行使用如下处理后输出：&lt;/p></description></item><item><title>构建恰当的 Git SSH Server</title><link>https://forcemz.net/posts/2019/2019-03-15-make-a-git-ssh-server/</link><pubDate>Fri, 15 Mar 2019 18:00:00 +0800</pubDate><guid>https://forcemz.net/posts/2019/2019-03-15-make-a-git-ssh-server/</guid><description>&lt;h2 id="前言">前言&lt;/h2>
&lt;p>相对于 HTTP(HTTPS) 协议，Git 在使用 SSH 协议操作远程存储库时，因为省去了输入用户名密码的环节，往往要更方便一些，并且，在 Gitlab 这样的代码托管服务中，SSH 在时长上更具优势，早期 Gitlab 使用了 Grack 提供 Git HTTP 访问支持，由于 Unicron+Grack 固定数目多线程同步模型导致服务器上的 HTTP 超时不得不设置非常小，而 SSH fork 多线程同步模型反而能够支持更大的访问时长。实际情况中，Gitee 平台里 Git 接入的最大份额也是 SSH。构建恰当的 Git SSH Server 对于整个 Gitee 平台也就非常重要。&lt;/p></description></item><item><title>文件的解析</title><link>https://forcemz.net/posts/2019/2019-01-25-file-parsing/</link><pubDate>Fri, 25 Jan 2019 10:00:00 +0800</pubDate><guid>https://forcemz.net/posts/2019/2019-01-25-file-parsing/</guid><description>&lt;h2 id="前言">前言&lt;/h2>
&lt;p>本文探讨的是计算机文件，&lt;strong>计算机文件&lt;/strong> 用于记录数据到计算机设备上，维基百科上有简短的介绍：&lt;/p>
&lt;blockquote>
&lt;p>A computer file is a computer resource for recording data discretely in a computer storage device. Just as words can be written to paper, so can information be written to a computer file.&lt;/p></description></item><item><title>Privexec 杂谈</title><link>https://forcemz.net/posts/2018/2018-11-30-privexec-new/</link><pubDate>Fri, 30 Nov 2018 21:00:00 +0800</pubDate><guid>https://forcemz.net/posts/2018/2018-11-30-privexec-new/</guid><description>&lt;h1 id="前言">前言&lt;/h1>
&lt;p>本站的开篇就是讲的 &lt;a href="https://forcemz.net/container/2015/06/12/AppContainer/">《Windows AppContainer 降权，隔离与安全》&lt;/a>，一晃三年多过去了，这三年之中，我开发了一个 &lt;a href="https://github.com/M2Team/Privexec">Privexec&lt;/a>，一个以其他权限启动进程的工具，支持启动 &lt;code>AppContainer&lt;/code> 进程，前段实现有用户发起了功能请求&lt;sup>1&lt;/sup>，让 &lt;code>Privexec&lt;/code> 支持设置 &lt;code>AppContainer&lt;/code> 的 &lt;code>Capabilities&lt;/code>，而不是像以前一样在启动 &lt;code>AppContainer&lt;/code> 进程时使用 &lt;code>CreateWellKnownSid&lt;/code> 创建所有的与 &lt;code>AppContainer&lt;/code> 相关的 &lt;code>Capabilities SIDs&lt;/code>。于是乎，我就花了一点时间将 Privexec 重构了一番，有所感悟，便将其写下来。&lt;/p></description></item><item><title>基于 Git Namespace 的存储库快照方案</title><link>https://forcemz.net/posts/2018/2018-11-18-git-namespace-snapshot/</link><pubDate>Sun, 18 Nov 2018 10:00:00 +0800</pubDate><guid>https://forcemz.net/posts/2018/2018-11-18-git-namespace-snapshot/</guid><description>&lt;h1 id="前言">前言&lt;/h1>
&lt;p>&lt;a href="https://en.wikipedia.org/wiki/Git">Git&lt;/a> 是一种分布式的版本控制系统，分布式版本控制系统的一大特性就是远程存储库和本地存储库都包含存储库的完整数据。
而集中式的版本控制系统只有在中心服务器上才会包含存储库完整的数据，本地所谓的存储库只是远程服务器特定版本的 &lt;code>checkout&lt;/code>。当中心服务器故障后，如果没有备份服务器，那么集中式的版本控制系统存储库的数据绝大部分就会被丢失。这很容易得出分布式版本控制系统的代码要必集中式的版本控制系统更加安全。&lt;/p></description></item><item><title>Clangbuilder 已支持自动构建 CURL</title><link>https://forcemz.net/posts/2018/2018-11-15-clangbuilder-win-curl/</link><pubDate>Thu, 15 Nov 2018 10:00:00 +0800</pubDate><guid>https://forcemz.net/posts/2018/2018-11-15-clangbuilder-win-curl/</guid><description>&lt;h1 id="curl">cURL&lt;/h1>
&lt;p>cURL 是一个非常著名的开源 URL 数据传输工具，支持 &lt;code>HTTP&lt;/code>,&lt;code>HTTPS&lt;/code>,&lt;code>FTP&lt;/code>,&lt;code>SCP&lt;/code>,&lt;code>SFTP&lt;/code>,&lt;code>Telnet&lt;/code> 等协议。绝大多数操作系统都自带了，也包括 Windows 10 17134/17763。但系统自带的版本通常都不会及时更新到最新版本，而 &lt;code>cURL&lt;/code> 是一个非常活跃的项目，大约2个月就会发布一个新版本。每一次更新都会修复大量 bug，新增很多新特性，比如最近增加了 &lt;code>DOH&lt;/code> 更好的 &lt;code>TLS1.3&lt;/code> 支持。&lt;/p></description></item><item><title>Git LFS 的反思</title><link>https://forcemz.net/posts/2018/2018-07-15-git-lfs-rethinking/</link><pubDate>Sun, 15 Jul 2018 10:00:00 +0800</pubDate><guid>https://forcemz.net/posts/2018/2018-07-15-git-lfs-rethinking/</guid><description>&lt;h1 id="前言">前言&lt;/h1>
&lt;p>在一年多以前，笔者曾经写过一文： &lt;a href="https://forcemz.net/git/2017/04/16/Moses/">《Git LFS 服务器实现杂谈》&lt;/a>，最近笔者开发基于&lt;strong>对象存储&lt;/strong>的 LFS 服务器又有了一些心得，这里分享给大家。&lt;/p>
&lt;h1 id="关于-git-lfs">关于 Git LFS&lt;/h1>
&lt;p>Git LFS 即 Git Large File Storage （大文件存储），即将 git 存储库中的体积较大的，不利于打包的，修改不太频繁的文件单独存储到特定的服务器上，以减小存储库体积，加快用户的克隆拉取体验。其中的原理在 &lt;a href="https://forcemz.net/git/2017/04/16/Moses/">《Git LFS 服务器实现杂谈》&lt;/a> 都有说明，如果需要进一步的了解还可以去参考 Git LFS 技术规范： &lt;a href="https://github.com/git-lfs/git-lfs/blob/master/docs/spec.md"> spec.md&lt;/a>。&lt;/p></description></item><item><title>Git Wire 协议杂谈</title><link>https://forcemz.net/posts/2018/2018-06-24-git-wire-protocol/</link><pubDate>Sun, 24 Jun 2018 10:00:00 +0800</pubDate><guid>https://forcemz.net/posts/2018/2018-06-24-git-wire-protocol/</guid><description>&lt;h1 id="前言">前言&lt;/h1>
&lt;p>注意本文的 &lt;strong>GIT 传输协议&lt;/strong> 仅代表 &lt;strong>智能传输协议&lt;/strong>&lt;/p>
&lt;p>美国当地时间 5月18日 Google 开发者发布了一篇博客 &lt;a href="https://opensource.googleblog.com/2018/05/introducing-git-protocol-version-2.html">Introducing Git protocol version 2&lt;/a> 宣布了 Git v2 Protocol，v2 协议又叫做 Git Wire Protocol，新协议旨在改进 Git 的传输过程。Git 不是有个好好的传输协议，为什么要重新弄一个？&lt;/p></description></item><item><title>Git Submodule 的反思</title><link>https://forcemz.net/posts/2018/2018-03-22-git-submodule-rethinking/</link><pubDate>Thu, 22 Mar 2018 10:00:00 +0800</pubDate><guid>https://forcemz.net/posts/2018/2018-03-22-git-submodule-rethinking/</guid><description>&lt;h2 id="git-submodule-介绍">Git Submodule 介绍&lt;/h2>
&lt;p>Git Submodule 翻译成中文叫做&lt;code>子模块&lt;/code>，将一个存储库（如 B）作为另一个（如 A）存储库的子目录，这个存储库就可以称之为 B 是 A 的子模块。
在 ProGit2: &lt;a href="https://git-scm.com/book/en/v2/Git-Tools-Submodules">https://git-scm.com/book/en/v2/Git-Tools-Submodules&lt;/a>, Git-SCM 官网：&lt;a href="https://www.git-scm.com/docs/gitsubmodules">https://www.git-scm.com/docs/gitsubmodules&lt;/a>，对 submodule 有非常详细的介绍。&lt;/p></description></item><item><title>Git 巨型存储库的解决方案</title><link>https://forcemz.net/posts/2017/2017-12-06-massive-repositories-and-git/</link><pubDate>Wed, 06 Dec 2017 10:00:00 +0800</pubDate><guid>https://forcemz.net/posts/2017/2017-12-06-massive-repositories-and-git/</guid><description>&lt;h2 id="前言">前言&lt;/h2>
&lt;p>通常来说，分布式版本控制系统适合体积较小的存储库，&lt;a href="https://en.wikipedia.org/wiki/Distributed_version_control">分布式版本控制系统&lt;/a> 意味着存储库和工作目录都放置在开发者自己的机器上，当开发者需要克隆一个巨大的存储库时，为了获得完整的拷贝，版本控制软件不得不从远程服务器上下载大量的数据。这是分布式版本控制系统最大的缺陷之一。&lt;/p></description></item><item><title>基于 Asio 的服务器平滑重启方案</title><link>https://forcemz.net/posts/2017/2017-11-27-asio-graceful-restart/</link><pubDate>Mon, 27 Nov 2017 10:00:00 +0800</pubDate><guid>https://forcemz.net/posts/2017/2017-11-27-asio-graceful-restart/</guid><description>&lt;h2 id="前言">前言&lt;/h2>
&lt;p>与客户端程序不同的是，服务端程序要尽可能的长时间运行，故障时能够自动恢复，并且更新时不能影响服务正在处理的请求。这就产生了平滑重启的功能需求。实际上，网络上比较流行的 HTTP 服务器 Nginx 就支持平滑重启。而 apache httpd 同样支持。码云分布式以后，很多功能被分解成一个个的服务，比如存储机器上的 git-srv, git-diamond 等等，为了平台的稳定运行，也需要支持平滑重启。&lt;/p></description></item><item><title>Git 原生钩子的深度优化</title><link>https://forcemz.net/posts/2017/2017-11-22-git-native-hook-depth-optimization/</link><pubDate>Wed, 22 Nov 2017 10:00:00 +0800</pubDate><guid>https://forcemz.net/posts/2017/2017-11-22-git-native-hook-depth-optimization/</guid><description>&lt;h2 id="前言">前言&lt;/h2>
&lt;p>Git 是最流行的版本控制工具，和大多数版本控制工具一样，Git 也拥有钩子特性，用户可以利用钩子实现一些附加功能，在 《Pro Git v2》 中，对钩子类型，消息格式等有详细介绍： &lt;a href="https://git-scm.com/book/en/v2/Customizing-Git-Git-Hooks">8.3 Customizing Git - Git Hooks&lt;/a>。&lt;/p></description></item><item><title>Kisasum Hash 实用工具</title><link>https://forcemz.net/posts/2017/2017-09-01-kisasum-hash-utility/</link><pubDate>Fri, 01 Sep 2017 10:00:00 +0800</pubDate><guid>https://forcemz.net/posts/2017/2017-09-01-kisasum-hash-utility/</guid><description>&lt;h2 id="kisasum-hash-实用工具">Kisasum Hash 实用工具&lt;/h2>
&lt;p>Kismet 是笔者开发的一个计算 Hash 的图形化工具，有桌面版本 Kismet 和 UWP 版本 KismetUWP。 在前面的 Blog 中有介绍：
&lt;a href="http://forcemz.net/developer/2017/05/14/Kismet/">Kismet 杂谈&lt;/a>&lt;/p>
&lt;p>KismetUWP 截图如下：&lt;/p>
&lt;p>&lt;img src="https://github.com/fcharlie/KismetUWP/raw/master/docs/images/none.png" alt="u1">&lt;/p>
&lt;p>当人们使用一系列命令完成工作时，这个时候优先需要命令行工具。&lt;/p></description></item><item><title>基于 Powershell Core 的 Git 存储库加密方案</title><link>https://forcemz.net/posts/2017/2017-07-31-git-secure-with-powershell/</link><pubDate>Mon, 31 Jul 2017 10:00:00 +0800</pubDate><guid>https://forcemz.net/posts/2017/2017-07-31-git-secure-with-powershell/</guid><description>&lt;h2 id="背景">背景&lt;/h2>
&lt;p>虽然码云提供免费私有存储库，但一些用户还是认为网站管理员可以看到他们的源码，认为私有库也不太安全。而且这些用户也没有私有化部署的打算。如何消除他们的疑虑？使用笔者开发的 &lt;strong>Git-Secure&lt;/strong> 就可以实现存储库的加密。项目开源地址：&lt;a href="https://gitee.com/oscstudio/git-secure">Git-Secure&lt;/a>&lt;/p></description></item><item><title>Clangbuilder 和 libcxx</title><link>https://forcemz.net/posts/2017/2017-07-29-clangbuild-and-libcxx/</link><pubDate>Sat, 29 Jul 2017 10:00:00 +0800</pubDate><guid>https://forcemz.net/posts/2017/2017-07-29-clangbuild-and-libcxx/</guid><description>&lt;h1 id="前言">前言&lt;/h1>
&lt;p>作为一个 C++ 开发者，自然少不了与编译器打交道。
笔者在 2013年1月17日 发布了第一个 ClangOnWindows 二进制包 &lt;a href="https://sourceforge.net/projects/clangonwin/">ClangOnWindows&lt;/a>，截至 2017-07-29，一共被下载 19212 次，实际上构建 LLVM/Clang 是一个非常耗时的事，于是乎笔者于 2014 年国庆节期间编写了 Clangbuilder，这是一个基于 Powershell 的 LLVM/Clang 自动化构建工具，能够自动下载工具链（除 Visual Studio）,自动获取 LLVM 源码，自动执行构建命令。Clangbuilder 的初期并不支持 libcxx 的构建，原因无他，当时 libcxx 不支持 Windows (for MSVC)，现在依然如此，不过现在可以使用 &lt;code>clang-cl&lt;/code> 构建 libcxx。本文即介绍通过 Clangbuilder 构建 libcxx。&lt;/p></description></item><item><title>Privexec 的内幕（一）标准输出原理与彩色输出实现</title><link>https://forcemz.net/posts/2017/2017-06-05-color-console/</link><pubDate>Mon, 05 Jun 2017 20:00:00 +0800</pubDate><guid>https://forcemz.net/posts/2017/2017-06-05-color-console/</guid><description>&lt;h1 id="前言">前言&lt;/h1>
&lt;p>&lt;a href="https://github.com/M2Team/Privexec">Privexec&lt;/a> 是笔者借鉴远景好友 MouriNaruto 的 &lt;a href="https://github.com/M2Team/NSudo">NSudo&lt;/a> 而开发的一个&lt;strong>提权或者降权&lt;/strong>执行进程的工具。其中 wsudo 是 Privexec 的命令行版本。&lt;/p>
&lt;p>在 wsudo 中，笔者使用了 Privexec.Console 提供彩色输出，截图如下：&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/M2Team/Privexec/master/docs/images/wsudo.png" alt="wsudo">&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/M2Team/Privexec/master/docs/images/wsudo3.png" alt="wsudo3">&lt;/p>
&lt;p>本文将讲述标准输出是如何输出到控制台的，以及怎样在 Windows 中实现同时支持标准控制台和 MSYS2 Cygwin 终端模拟器以及 VT 模式的控制台彩色输出。&lt;/p></description></item><item><title>Kismet 杂谈</title><link>https://forcemz.net/posts/2017/2017-05-14-kismet/</link><pubDate>Sun, 14 May 2017 10:00:00 +0800</pubDate><guid>https://forcemz.net/posts/2017/2017-05-14-kismet/</guid><description>&lt;h1 id="前言">前言&lt;/h1>
&lt;p>年初以来，互联网安全领域频繁发生大事件，二月下旬，Google 研究人员攻破了 SHA-1算法，在版本控制领域，主要的版本控制系统都使用了 SHA-1 算法&lt;sup>1&lt;/sup>，由于工作需要，我对此格外关注，也了解了其他 SHA 算法，比如 SHA-256/SHA-512 ，基于 Keccak 的 SHA-3 等，寻找 GUI Hash 计算工具时发现大多数工具都未提供 SHA-3 算法支持，并且界面也不符合我的喜好，在闲暇时间，我就开发了 kismat Hash 计算工具，包括传统的Win32 桌面程序和 UWP 程序。&lt;/p></description></item><item><title>基于 AspNetCore 的 Git HTTP 服务器</title><link>https://forcemz.net/posts/2017/2017-05-11-angelo/</link><pubDate>Thu, 11 May 2017 17:00:00 +0800</pubDate><guid>https://forcemz.net/posts/2017/2017-05-11-angelo/</guid><description>&lt;h1 id="关于">关于&lt;/h1>
&lt;p>Git HTTP 服务器是代码托管服务最重要的组件之一，Git HTTP 服务器将 HTTP 请求的数据写入到 git-upload-pack/git-receive-pack 的标准输入，然后读取 git-upload-pack/git-receive-pack 的输出，写入 HTTP 响应包体，然后传输给客户端。原理非常简单。&lt;/p></description></item><item><title>Git LFS 服务器实现杂谈</title><link>https://forcemz.net/posts/2017/2017-04-16-moses/</link><pubDate>Sun, 16 Apr 2017 10:00:00 +0800</pubDate><guid>https://forcemz.net/posts/2017/2017-04-16-moses/</guid><description>&lt;h1 id="前言">前言&lt;/h1>
&lt;p>从前言开始，便又要讲起 git 原理，多次讲起不胜其烦，诸位如果要了解 git 原理可以通过 bing google 或者其他搜索引擎从网络上查阅资料，也可以去 git-scm.com 网站查看 《Pro Git》，对于大多数开发者而言已是足够。&lt;/p></description></item><item><title>2016 技术总结</title><link>https://forcemz.net/posts/2016/2016-12-31-total/</link><pubDate>Sat, 31 Dec 2016 23:00:00 +0800</pubDate><guid>https://forcemz.net/posts/2016/2016-12-31-total/</guid><description>&lt;p>&lt;strong>先说说公司的吧：&lt;/strong>&lt;/p>
&lt;p>最初开发了 Miracle 项目，这个项目是 nginx 动态代理和 svn 动态代理，然后共用路由库 cratos。&lt;/p>
&lt;p>后来又开发者 Illusory 项目，最初实现了 git-upload-pack git-receive-pack 的包装，然后后端服务器上运行 git-srv 就可以实现 git 任意协议的动态代理。
为了减少中间环节，新的 ssh 服务器直接与 git-srv 通讯。于是 git-srv 也就改进了。&lt;/p></description></item><item><title>码云分布式之 Brzo 服务器</title><link>https://forcemz.net/posts/2016/2016-11-05-brzo/</link><pubDate>Sat, 05 Nov 2016 20:00:00 +0800</pubDate><guid>https://forcemz.net/posts/2016/2016-11-05-brzo/</guid><description>&lt;h1 id="前言">前言&lt;/h1>
&lt;p>码云是国内最大的代码托管平台之一。码云基于 Gitlab 5.5 开发，经过几年的开发已经和官方的 Gitlab 有了很大的不同。
为了支撑更大的用户规模，码云也在不断的改进，而本文也主要分享码云分布式 Brzo GIT HTTP 服务器的开发经验。&lt;/p></description></item><item><title>Windows 下载功能的实现 - C++ 篇</title><link>https://forcemz.net/posts/2016/2016-11-03-win32-download-feature/</link><pubDate>Thu, 03 Nov 2016 20:00:00 +0800</pubDate><guid>https://forcemz.net/posts/2016/2016-11-03-win32-download-feature/</guid><description>&lt;h1 id="前言">前言&lt;/h1>
&lt;p>笔者计划开发一个自用的包管理工具，需要支持下载功能，笔者尝试了多种 Windows 下载 API，这里分享出来。&lt;/p>
&lt;h2 id="urldownloadtofile">URLDownloadToFile&lt;/h2>
&lt;p>自 Internet Explorer 3.0 开始，Urlmon.dll 中开始提供 URLDownloadToFile，支持从远程服务器上下载文件到本地。
URLDownloadToFile 会先将文件下载到 IE 缓存目录，然后再复制到设置的输出目录，如果第二次下载，就省去了下载时间。
Urlmon 还提供了下载到缓存目录的函数 URLDownloadToCacheFile，正因为 URLDownloadToFile 先下载到缓存目录，
就会出现缓存问题，可以使用 Wininet 中的 DeleteUrlCacheEntry 删除缓存。&lt;/p></description></item><item><title>Git Analyze 工具实现与原理</title><link>https://forcemz.net/posts/2016/2016-08-12-git-analyze/</link><pubDate>Thu, 11 Aug 2016 20:00:00 +0800</pubDate><guid>https://forcemz.net/posts/2016/2016-08-12-git-analyze/</guid><description>&lt;h1 id="前言">前言&lt;/h1>
&lt;p>作为一个提供免费私有仓库的代码托管平台，码云要考虑利用现有的硬件资源支持更多的用户，一些用户占用较多的硬件资源实际上是对其他用户用户体验的一种损害，因此码云对用户的存储库大小有一定的限制。&lt;/p></description></item><item><title>Git 传输协议实现</title><link>https://forcemz.net/posts/2016/2016-07-16-git-transport-implement/</link><pubDate>Sat, 16 Jul 2016 20:00:00 +0800</pubDate><guid>https://forcemz.net/posts/2016/2016-07-16-git-transport-implement/</guid><description>&lt;h1 id="git-传输协议实现">GIT 传输协议实现&lt;/h1>
&lt;p>在 GIT 的三种主流传输协议 HTTP SSH GIT 中，GIT 协议是最少被使用的协议（也就是 URL 以 &lt;code>git://&lt;/code> 开始的协议）。
这是由于 git 协议的权限控制几乎没有，要么全部可读，要么全部可写，要么全部可读写。所以对于代码托管平台来说，
git 协议的目的仅仅是为了支持 公开项目的只读访问。&lt;/p></description></item><item><title>Git 存储格式与运用</title><link>https://forcemz.net/posts/2016/2016-07-09-git-storage/</link><pubDate>Sat, 09 Jul 2016 20:00:00 +0800</pubDate><guid>https://forcemz.net/posts/2016/2016-07-09-git-storage/</guid><description>&lt;h1 id="git-存储格式与运用">GIT 存储格式与运用&lt;/h1>
&lt;p>在 GIT 的实现规范中，存储格式是非常简单而且高效的，一个代码托管平台通常需要基于这些特性实现一非常有意思的功能。
在本文中，将介绍基于 GIT 存储库格式实现的仓库体积限制与大文件检查。&lt;/p></description></item><item><title>Windows 10 原生 SSH 功能探索</title><link>https://forcemz.net/posts/2016/2016-06-04-windows-ssh-server/</link><pubDate>Sat, 04 Jun 2016 20:00:00 +0800</pubDate><guid>https://forcemz.net/posts/2016/2016-06-04-windows-ssh-server/</guid><description>&lt;h1 id="windows-10-原生-ssh-功能探索">Windows 10 原生 SSH 功能探索&lt;/h1>
&lt;p>在 Windows 10 Insider 14352 中，增加了两个服务 SshBrokerGroup SshProxyGroup，
通过命令&lt;/p>
&lt;p>&lt;code>netstat -aon |findstr &amp;quot;22&amp;quot;&lt;/code>&lt;/p>
&lt;p>即可找到 端口 22 绑定的进程也就是 SshProxyGroup 服务进程，而 22 端口是 SSH 服务器监听的端口，
在 Windows 目录 &lt;em>C:\Windows\System32&lt;/em> 可以发现 几个与 SSH 相关的 dll 和 exe：&lt;/p></description></item><item><title>Windows Containers 与 Project Centennial</title><link>https://forcemz.net/posts/2016/2016-04-23-windows-containers/</link><pubDate>Sat, 23 Apr 2016 18:30:00 +0800</pubDate><guid>https://forcemz.net/posts/2016/2016-04-23-windows-containers/</guid><description>&lt;h1 id="windows-containers-与-project-centennial">Windows Containers 与 Project Centennial&lt;/h1>
&lt;p>随着 Windows 10 Redstone 和 Windows Server 2016 发布日益临近,一些重要的功能也逐渐披露到公众面前。
最让笔者觉得有意思的是 Containers 功能。笔者曾经写过一篇关于应用程序降权的文章：
&lt;a href="http://forcemz.net/container/2015/06/12/AppContainer/">Windows AppContainer 降权，隔离与安全&lt;/a> ) 提到了
如何降低应用程序进程权限，与 Containers 相比，AppContainer 并未将进程与操作系统完全隔离开来，计算资源并不能自定义限制，
并且很多一部分 Win32 API 都无法在基于 AppContainer 创建的进程中运行。&lt;/p></description></item><item><title>基于清单的启动器的实现</title><link>https://forcemz.net/posts/2015/2015-11-27-new-launcher/</link><pubDate>Fri, 27 Nov 2015 21:30:16 +0800</pubDate><guid>https://forcemz.net/posts/2015/2015-11-27-new-launcher/</guid><description>&lt;h1 id="launcher">Launcher&lt;/h1>
&lt;p>Launcher (启动器) 是一类非常有用的工具，这类工具的意义就在于设置好特定的环境以特定的参数启动特定的进程。
很多软件也用到了 launcher, 比如 Chrome，还有 Android Studio, 在 Windows 平台上，可见的是 studio.exe,
事实上，Android Studio 是基于 Intellij IDEA 开发的，IDE 代码是基于 Java 的，所谓的 studio.exe 其实就是个启动器，加载 jvm.dll 罢了。
IDEA WinLauncher 在 Github 上可以看到源码： &lt;a href="https://github.com/JetBrains/intellij-community/tree/master/native/WinLauncher">WinLauncher&lt;/a> &lt;br>
Manifest 清单是一类记录程序运行需求的文件，比如 Chrome 就有启动清单：&lt;/p></description></item><item><title>Subversion 和 GIT 开发者演进之 2015</title><link>https://forcemz.net/posts/2015/2015-10-16-dev-vcs/</link><pubDate>Fri, 16 Oct 2015 21:30:16 +0800</pubDate><guid>https://forcemz.net/posts/2015/2015-10-16-dev-vcs/</guid><description>&lt;h2 id="前言">前言&lt;/h2>
&lt;p>在开发软件的过程中，往往是需要多个人参与，版本控制系统的协同工作的重要性不言而喻，除此之外，
版本控制软件对整个开发流程的记录对于缺陷追踪也是非常重要的。版本控制系统也是软件开发的基础设施。&lt;/p></description></item><item><title>软件的变革与 AOT</title><link>https://forcemz.net/posts/2015/2015-06-16-aot/</link><pubDate>Tue, 16 Jun 2015 21:30:16 +0800</pubDate><guid>https://forcemz.net/posts/2015/2015-06-16-aot/</guid><description>&lt;h2 id="前言">前言&lt;/h2>
&lt;p>AOT 即 Ahead of Time Compilation,即运行前编，与之对应的是 JIT。众所周知，程序的源码并不能够被处理器直接执行，编程语言基本上都是人类可读，编译器或者解释器就需要将源代码转变为 CPU 可以操作的指令。比如一个加法函数最终需要执行 addl 汇编指令对应的机器码。&lt;/p></description></item><item><title>Windows AppContainer 降权，隔离与安全</title><link>https://forcemz.net/posts/2015/2015-06-11-app-container/</link><pubDate>Thu, 11 Jun 2015 16:58:16 +0800</pubDate><guid>https://forcemz.net/posts/2015/2015-06-11-app-container/</guid><description>&lt;h1 id="windows-权限策略的发展">Windows 权限策略的发展&lt;/h1>
&lt;p>从 Windows 8开始，我在使用 Windows 系统的同时也就不再关闭 UAC 了，并且不再安装任何国产的安全软件，这些软件仗着运行在管理员权限上肆意的推行 “全家桶策略”，Windows 多年来一直是最流行的操作系统，大多数人的焦点都会放在上面，也包括黑客，各种企业，早期Windows系统在权限的管理上非常粗放。无论是恶意软件还是其他软件都可以获得较高的权限，这样就能够对系统大肆修改，并且直接或间接破化系统，收集数据，妨碍竞争对手。软件的权限理应得到限制，而不是放任自流。Windows XP 是历史上最受欢迎的版本之一，然而，一直以来XP的权限问题都被人诟病，微软也决心对这一问题进行改进，从Vista开始，Windows引入了 UAC 机制，它要求用户在执行可能会影响计算机运行的操作或执行更改影响其他用户的设置的操作之前，提供权限或管理员‌密码。这是一个可喜的进步，不过在早期用户都会要求关闭 UAC,当我开始使用 Windows 的时候，，那个时候用的是 Windows 7,我也是这样做的。Windows 7在 UAC 的改进主要是一些小的细节。&lt;/p></description></item><item><title>星夜</title><link>https://forcemz.net/posts/2009/2009-03-07-poem-starry-night/</link><pubDate>Sat, 07 Mar 2009 12:00:00 +0800</pubDate><guid>https://forcemz.net/posts/2009/2009-03-07-poem-starry-night/</guid><description>&lt;p>踏着一点点星光&lt;/p>
&lt;p>月亮已经熟睡&lt;/p>
&lt;p>伴着阵阵微风&lt;/p>
&lt;p>我在星夜下行走&lt;/p>
&lt;p>荷塘上&lt;/p>
&lt;p>开了一朵朵荷花&lt;/p>
&lt;p>飘来阵阵香&lt;/p>
&lt;p>多事的青蛙&lt;/p>
&lt;p>也来凑热闹&lt;/p>
&lt;p>精力过剩的蝉&lt;/p>
&lt;p>尽情地&lt;/p>
&lt;p>歌唱&lt;/p>
&lt;p>所有的人&lt;/p>
&lt;p>已进入梦乡&lt;/p>
&lt;p>只有我&lt;/p>
&lt;p>踏着星夜的银光&lt;/p>
&lt;p>流浪&lt;/p>
&lt;p>为什么流浪&lt;/p></description></item><item><title>让我化作一尊雨中的石像</title><link>https://forcemz.net/posts/2009/2009-03-08-poem-statue-in-rain/</link><pubDate>Sat, 07 Mar 2009 10:00:00 +0800</pubDate><guid>https://forcemz.net/posts/2009/2009-03-08-poem-statue-in-rain/</guid><description>&lt;p>&lt;em>序：午后，我草草的舔食了几篇文章，然后便匆匆睡下，醒后。在雨中茫然，率性而发。&lt;/em>&lt;/p>
&lt;p>我茫然地&lt;/p>
&lt;p>徘徊在细雨的路上&lt;/p>
&lt;p>春姑娘大概第一次哭吧&lt;/p>
&lt;p>雨水太纤细，风儿太柔弱&lt;/p>
&lt;p>我移动这冰冷的脚&lt;/p></description></item><item><title>行走</title><link>https://forcemz.net/posts/2009/2009-03-06-poem-walk/</link><pubDate>Fri, 06 Mar 2009 10:00:00 +0800</pubDate><guid>https://forcemz.net/posts/2009/2009-03-06-poem-walk/</guid><description>&lt;p>（一）四季&lt;/p>
&lt;p>我轻轻的走&lt;/p>
&lt;p>前方，朦胧的小楼&lt;/p>
&lt;p>杏花的香味&lt;/p>
&lt;p>迷上了老江南的白酒；&lt;/p>
&lt;p>行走的行人&lt;/p>
&lt;p>走过了十七个年头&lt;/p>
&lt;p>春天的日子&lt;/p>
&lt;p>是农夫&lt;/p>
&lt;p>摆弄绿色的精灵&lt;/p>
&lt;p>种植一年的希望&lt;/p>
&lt;p>也是园丁&lt;/p>
&lt;p>在那里修建&lt;/p>
&lt;p>夏天的热情&lt;/p>
&lt;p>疲倦了激情&lt;/p></description></item><item><title>江南</title><link>https://forcemz.net/posts/2009/2009-03-05-poem-jiangnan/</link><pubDate>Thu, 05 Mar 2009 10:00:00 +0800</pubDate><guid>https://forcemz.net/posts/2009/2009-03-05-poem-jiangnan/</guid><description>&lt;p>江南的乌篷船&lt;/p>
&lt;p>摇曳着小桨&lt;/p>
&lt;p>和着斜阳&lt;/p>
&lt;p>没入了层层雾霭&lt;/p>
&lt;p>直过了早春料峭&lt;/p>
&lt;p>不经意间&lt;/p>
&lt;p>我赤裸裸的来了&lt;/p>
&lt;p>飘来江南的雨&lt;/p>
&lt;p>江南的雨&lt;/p>
&lt;p>染绿了叶&lt;/p>
&lt;p>浸开了朵朵芳菲&lt;/p>
&lt;p>勾动了年青的心事&lt;/p>
&lt;p>午憩的人&lt;/p>
&lt;p>慵懒地倦在木椅上&lt;/p>
&lt;p>听着微风下的&lt;/p></description></item><item><title>当下，我的足迹</title><link>https://forcemz.net/posts/2009/2009-03-04-poem-my-footsteps-now/</link><pubDate>Wed, 04 Mar 2009 10:00:00 +0800</pubDate><guid>https://forcemz.net/posts/2009/2009-03-04-poem-my-footsteps-now/</guid><description>&lt;p>（一）深坑&lt;/p>
&lt;p>天使说：“你若不努力爬出深坑，&lt;/p>
&lt;p>你终将死于此地！”&lt;/p>
&lt;p>我按着坑壁的石块，&lt;/p>
&lt;p>缓缓地向上爬去，&lt;/p>
&lt;p>“崩”石块碎落，&lt;/p>
&lt;p>我摔回深坑，&lt;/p>
&lt;p>鲁西弗尔摆了摆枯黄的大手：&lt;/p>
&lt;p>“你同我一样，是贬落的天使，&lt;/p></description></item></channel></rss>